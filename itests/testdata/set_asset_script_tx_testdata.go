package testdata

import (
	"github.com/wavesplatform/gowaves/itests/config"
	f "github.com/wavesplatform/gowaves/itests/fixtures"
	utl "github.com/wavesplatform/gowaves/itests/utilities"
	"github.com/wavesplatform/gowaves/pkg/crypto"
	"github.com/wavesplatform/gowaves/pkg/proto"
)

const (
	SetAssetScriptMaxVersion = 3
)

type SetAssetScriptTestData[T any] struct {
	Account   config.AccountInfo
	AssetID   crypto.Digest
	Script    proto.Script
	Fee       uint64
	Timestamp uint64
	ChainID   proto.Scheme
	Expected  T
}

type SetAssetScriptExpectedValuesPositive struct {
	WavesDiffBalance int64
	AssetDiffBalance int64
	_                struct{}
}

type SetAssetScriptExpectedValuesNegative struct {
	WavesDiffBalance  int64
	AssetDiffBalance  int64
	ErrGoMsg          string
	ErrScalaMsg       string
	ErrBrdCstGoMsg    string
	ErrBrdCstScalaMsg string
	_                 struct{}
}

func NewSetAssetScriptTestData[T any](account config.AccountInfo, assetID crypto.Digest, script proto.Script,
	fee, timestamp uint64, chainID proto.Scheme, expected T) *SetAssetScriptTestData[T] {
	return &SetAssetScriptTestData[T]{
		Account:   account,
		AssetID:   assetID,
		Script:    script,
		Fee:       fee,
		Timestamp: timestamp,
		ChainID:   chainID,
		Expected:  expected,
	}
}

func GetSetAssetScriptPositiveData(suite *f.BaseSuite, assetID crypto.Digest) map[string]SetAssetScriptTestData[SetAssetScriptExpectedValuesPositive] {
	return map[string]SetAssetScriptTestData[SetAssetScriptExpectedValuesPositive]{
		"Valid script, true as expression": *NewSetAssetScriptTestData(
			utl.GetAccount(suite, utl.DefaultSenderNotMiner),
			assetID,
			utl.GetScriptBytes(suite, "BQbtKNoM"),
			utl.MinSetAssetScriptFeeWaves,
			utl.GetCurrentTimestampInMs(),
			utl.TestChainID,
			SetAssetScriptExpectedValuesPositive{
				WavesDiffBalance: utl.MinSetAssetScriptFeeWaves,
				AssetDiffBalance: 0,
			}),
	}
}

func GetSetAssetScriptNegativeData(suite *f.BaseSuite, assetID crypto.Digest) map[string]SetAssetScriptTestData[SetAssetScriptExpectedValuesNegative] {
	return map[string]SetAssetScriptTestData[SetAssetScriptExpectedValuesNegative]{
		"Invalid script 32770 bytes": *NewSetAssetScriptTestData(
			utl.GetAccount(suite, utl.DefaultSenderNotMiner),
			assetID,
			utl.GetScriptBytes(suite, "BgEEA3N0cgI+VGhpcyB0ZXh0IGlzIG5lY2Vzc2FyeSB0byBnZXQgdGhlIHNjcmlwdCBvZiB0aGUgODE5MiBieXRlcy4uLi4EAmExArkERmVlLiBUaGUgbWluaW11bSBmZWUgZm9yIGFuIElzc3VlIHRyYW5zYWN0aW9uIGlzIDEgV0FWRVMsIGluIGNhc2Ugb2YgaXNzdWUgb2YgYSBub24tZnVuZ2libGUgdG9rZW4gKE5GVCkgMC4wMDEgV0FWRVMuIElmIHRoZSB0cmFuc2FjdGlvbiBzZW5kZXIgaXMgYSBkQXBwIG9yIHNtYXJ0IGFjY291bnQsIGFuZCB0aGUgY29tcGxleGl0eSBvZiB0aGUgYWNjb3VudCBzY3JpcHQgb3IgZEFwcCBzY3JpcHQgdmVyaWZpZXIgZnVuY3Rpb24gZXhjZWVkcyB0aGUgc2VuZGVyIGNvbXBsZXhpdHkgdGhyZXNob2xkLCB0aGUgbWluaW11bSBmZWUgaXMgaW5jcmVhc2VkIGJ5IDAuMDA0IFdBVkVTLiAoQmVmb3JlIGFjdGl2YXRpb24gb2YgZmVhdHVyZSAjMTYg4oCcUmlkZSBWNSwgZEFwcC10by1kQXBwIGludm9jYXRpb25z4oCdLCB0aGUgZXh0cmEgZmVlIG9mIDAuMDA0IFdBVkVTIHdhcyByZXF1aXJlZCByZWdhcmRsZXNzIG9mIHRoZSBjb21wbGV4aXR5IG9mIHRoZSBhY2NvdW50IHNjcmlwdCBvciB0aGUgcHJlc2VuY2UgYW5kIGNvbXBsZXhpdHkgb2YgdGhlIGRBcHAgc2NyaXB0IHZlcmlmaWVyIGZ1bmN0aW9uLikEAmIxAtoEU21hcnQgYXNzZXQgaXMgYSB0b2tlbiB0aGF0IGhhcyBhbiBhc3NldCBzY3JpcHQgYXNzaWduZWQgdG8gaXQuIEJ5IGRlZmF1bHQsIHRva2VucyBvbiB0aGUgV2F2ZXMgYmxvY2tjaGFpbiBhcmUgbm90IHNtYXJ0IGNvbnRyYWN0cywgYW5kIGFueSB0cmFuc2FjdGlvbnMgd2l0aCB0aGVtIGFyZSBhbGxvd2VkLiBUaGUgc2NyaXB0IGVuZG93cyBhIHRva2VuIHdpdGggZnVuY3Rpb25hbGl0eSB0aGF0IHNldHMgdGhlIHJ1bGVzIGZvciBpdHMgY2lyY3VsYXRpb24uIEVhY2ggdHJhbnNhY3Rpb24gaW52b2x2aW5nIGEgc21hcnQgYXNzZXQgaXMgYXV0b21hdGljYWxseSBjaGVja2VkIGFnYWluc3QgdGhlIGNvbmRpdGlvbnMgc3BlY2lmaWVkIGluIHRoZSBzY3JpcHQuIElmIHRoZSBhc3NldCdzIHNjcmlwdCBhbGxvd3MgdGhlIHRyYW5zYWN0aW9uLCBpdCB3aWxsIGJlIGV4ZWN1dGVkOyBpZiB0aGUgc2NyaXB0IGRlbmllcyB0aGUgdHJhbnNhY3Rpb24sIGl0IGlzIGVpdGhlciBub3QgcHV0IG9udG8gdGhlIGJsb2NrY2hhaW4gYXQgYWxsIG9yIHNhdmVkIGFzIGZhaWxlZCAoZm9yIGRldGFpbHMsIHNlZSB0aGUgVHJhbnNhY3Rpb24gVmFsaWRhdGlvbiBhcnRpY2xlKS4EAmMxAqECVXNpbmcgc21hcnQgYXNzZXRzLCB5b3UgY2FuIGltcGxlbWVudCB2YXJpb3VzIGZpbmFuY2lhbCBpbnN0cnVtZW50cyBvbiB0aGUgYmxvY2tjaGFpbiAob3B0aW9ucywgaW50ZXJ2YWwgdHJhZGluZywgdGF4YXRpb24pLCBnYW1lIG1lY2hhbmljcyAoYWxsb3dpbmcgdHJhbnNhY3Rpb25zIG9ubHkgYmV0d2VlbiBjaGFyYWN0ZXJzIHdpdGggY2VydGFpbiBwcm9wZXJ0aWVzKS4gRm9yIGRldGFpbHMgb24gY3JlYXRpbmcgYW5kIHVzaW5nIHNtYXJ0IGFzc2V0cywgc2VlIHRoZSBTbWFydCBBc3NldCBhcnRpY2xlLgQCZDEC9QVQbGVhc2Ugbm90ZTpJZiBhIHRva2VuIGlzIGlzc3VlZCB3aXRob3V0IGEgc2NyaXB0LCB0aGVuIHRoZSBzY3JpcHQgY2Fubm90IGJlIGFkZGVkIGxhdGVyLlRoZSBzY3JpcHQgY2Fubm90IGJlIHJlbW92ZWQsIHNvIGl0IGlzIGltcG9zc2libGUgdG8gdHVybiBhIHNtYXJ0IGFzc2V0IGludG8gYSByZWd1bGFyIG9uZS5UaGUgYXNzZXQgc2NyaXB0IGNhbiBiZSBjaGFuZ2VkIHVzaW5nIHRoZSBTZXQgQXNzZXQgU2NyaXB0IHRyYW5zYWN0aW9uLCB1bmxlc3MgcHJvaGliaXRlZCBieSB0aGUgYXNzZXQgc2NyaXB0IGl0c2VsZiAoYXMgd2VsbCBhcyBieSB0aGUgZEFwcCBvciBhY2NvdW50IHNjcmlwdCBhc3NpZ25lZCB0byB0aGUgaXNzdWVyIGFjY291bnQpLlRoZSBtaW5pbXVtIGZlZSBmb3IgdHJhbnNhY3Rpb24gaXMgaW5jcmVhc2VkIGJ5IDAuMDA0IFdBVkVTIGZvciBlYWNoIHNtYXJ0IGFzc2V0IGludm9sdmVkLCBleGNlcHQgZm9yOkludm9rZSBTY3JpcHQgdHJhbnNhY3Rpb25zLHNtYXJ0IGFzc2V0cyB1c2VkIGFzIG1hdGNoZXIgZmVlIGluIEV4Y2hhbmdlIHRyYW5zYWN0aW9uLihCZWZvcmUgYWN0aXZhdGlvbiBvZiBmZWF0dXJlICMxNiDigJxSaWRlIFY1LCBkQXBwLXRvLWRBcHAgaW52b2NhdGlvbnPigJ0sIHRoZSBleHRyYSBmZWUgb2YgMC4wMDQgV0FWRVMgd2FzIHJlcXVpcmVkIGZvciBlYWNoIHNtYXJ0IGFzc2V0IGluIHBheW1lbnRzIGFuZCBzY3JpcHQgYWN0aW9ucyBpbiBJbnZva2UgU2NyaXB0IHRyYW5zYWN0aW9ucy4pBAdhMV90ZXh0CQC5CQIJAMwIAgUCYTEJAMwIAgUCYjEJAMwIAgUCYzEJAMwIAgUCZDEFA25pbAICJiYEA2FhMQK5BEZlZS4gVGhlIG1pbmltdW0gZmVlIGZvciBhbiBJc3N1ZSB0cmFuc2FjdGlvbiBpcyAxIFdBVkVTLCBpbiBjYXNlIG9mIGlzc3VlIG9mIGEgbm9uLWZ1bmdpYmxlIHRva2VuIChORlQpIDAuMDAxIFdBVkVTLiBJZiB0aGUgdHJhbnNhY3Rpb24gc2VuZGVyIGlzIGEgZEFwcCBvciBzbWFydCBhY2NvdW50LCBhbmQgdGhlIGNvbXBsZXhpdHkgb2YgdGhlIGFjY291bnQgc2NyaXB0IG9yIGRBcHAgc2NyaXB0IHZlcmlmaWVyIGZ1bmN0aW9uIGV4Y2VlZHMgdGhlIHNlbmRlciBjb21wbGV4aXR5IHRocmVzaG9sZCwgdGhlIG1pbmltdW0gZmVlIGlzIGluY3JlYXNlZCBieSAwLjAwNCBXQVZFUy4gKEJlZm9yZSBhY3RpdmF0aW9uIG9mIGZlYXR1cmUgIzE2IOKAnFJpZGUgVjUsIGRBcHAtdG8tZEFwcCBpbnZvY2F0aW9uc+KAnSwgdGhlIGV4dHJhIGZlZSBvZiAwLjAwNCBXQVZFUyB3YXMgcmVxdWlyZWQgcmVnYXJkbGVzcyBvZiB0aGUgY29tcGxleGl0eSBvZiB0aGUgYWNjb3VudCBzY3JpcHQgb3IgdGhlIHByZXNlbmNlIGFuZCBjb21wbGV4aXR5IG9mIHRoZSBkQXBwIHNjcmlwdCB2ZXJpZmllciBmdW5jdGlvbi4pBANiYjEC2gRTbWFydCBhc3NldCBpcyBhIHRva2VuIHRoYXQgaGFzIGFuIGFzc2V0IHNjcmlwdCBhc3NpZ25lZCB0byBpdC4gQnkgZGVmYXVsdCwgdG9rZW5zIG9uIHRoZSBXYXZlcyBibG9ja2NoYWluIGFyZSBub3Qgc21hcnQgY29udHJhY3RzLCBhbmQgYW55IHRyYW5zYWN0aW9ucyB3aXRoIHRoZW0gYXJlIGFsbG93ZWQuIFRoZSBzY3JpcHQgZW5kb3dzIGEgdG9rZW4gd2l0aCBmdW5jdGlvbmFsaXR5IHRoYXQgc2V0cyB0aGUgcnVsZXMgZm9yIGl0cyBjaXJjdWxhdGlvbi4gRWFjaCB0cmFuc2FjdGlvbiBpbnZvbHZpbmcgYSBzbWFydCBhc3NldCBpcyBhdXRvbWF0aWNhbGx5IGNoZWNrZWQgYWdhaW5zdCB0aGUgY29uZGl0aW9ucyBzcGVjaWZpZWQgaW4gdGhlIHNjcmlwdC4gSWYgdGhlIGFzc2V0J3Mgc2NyaXB0IGFsbG93cyB0aGUgdHJhbnNhY3Rpb24sIGl0IHdpbGwgYmUgZXhlY3V0ZWQ7IGlmIHRoZSBzY3JpcHQgZGVuaWVzIHRoZSB0cmFuc2FjdGlvbiwgaXQgaXMgZWl0aGVyIG5vdCBwdXQgb250byB0aGUgYmxvY2tjaGFpbiBhdCBhbGwgb3Igc2F2ZWQgYXMgZmFpbGVkIChmb3IgZGV0YWlscywgc2VlIHRoZSBUcmFuc2FjdGlvbiBWYWxpZGF0aW9uIGFydGljbGUpLgQDY2MxAqECVXNpbmcgc21hcnQgYXNzZXRzLCB5b3UgY2FuIGltcGxlbWVudCB2YXJpb3VzIGZpbmFuY2lhbCBpbnN0cnVtZW50cyBvbiB0aGUgYmxvY2tjaGFpbiAob3B0aW9ucywgaW50ZXJ2YWwgdHJhZGluZywgdGF4YXRpb24pLCBnYW1lIG1lY2hhbmljcyAoYWxsb3dpbmcgdHJhbnNhY3Rpb25zIG9ubHkgYmV0d2VlbiBjaGFyYWN0ZXJzIHdpdGggY2VydGFpbiBwcm9wZXJ0aWVzKS4gRm9yIGRldGFpbHMgb24gY3JlYXRpbmcgYW5kIHVzaW5nIHNtYXJ0IGFzc2V0cywgc2VlIHRoZSBTbWFydCBBc3NldCBhcnRpY2xlLgQDZGQxAvUFUGxlYXNlIG5vdGU6SWYgYSB0b2tlbiBpcyBpc3N1ZWQgd2l0aG91dCBhIHNjcmlwdCwgdGhlbiB0aGUgc2NyaXB0IGNhbm5vdCBiZSBhZGRlZCBsYXRlci5UaGUgc2NyaXB0IGNhbm5vdCBiZSByZW1vdmVkLCBzbyBpdCBpcyBpbXBvc3NpYmxlIHRvIHR1cm4gYSBzbWFydCBhc3NldCBpbnRvIGEgcmVndWxhciBvbmUuVGhlIGFzc2V0IHNjcmlwdCBjYW4gYmUgY2hhbmdlZCB1c2luZyB0aGUgU2V0IEFzc2V0IFNjcmlwdCB0cmFuc2FjdGlvbiwgdW5sZXNzIHByb2hpYml0ZWQgYnkgdGhlIGFzc2V0IHNjcmlwdCBpdHNlbGYgKGFzIHdlbGwgYXMgYnkgdGhlIGRBcHAgb3IgYWNjb3VudCBzY3JpcHQgYXNzaWduZWQgdG8gdGhlIGlzc3VlciBhY2NvdW50KS5UaGUgbWluaW11bSBmZWUgZm9yIHRyYW5zYWN0aW9uIGlzIGluY3JlYXNlZCBieSAwLjAwNCBXQVZFUyBmb3IgZWFjaCBzbWFydCBhc3NldCBpbnZvbHZlZCwgZXhjZXB0IGZvcjpJbnZva2UgU2NyaXB0IHRyYW5zYWN0aW9ucyxzbWFydCBhc3NldHMgdXNlZCBhcyBtYXRjaGVyIGZlZSBpbiBFeGNoYW5nZSB0cmFuc2FjdGlvbi4oQmVmb3JlIGFjdGl2YXRpb24gb2YgZmVhdHVyZSAjMTYg4oCcUmlkZSBWNSwgZEFwcC10by1kQXBwIGludm9jYXRpb25z4oCdLCB0aGUgZXh0cmEgZmVlIG9mIDAuMDA0IFdBVkVTIHdhcyByZXF1aXJlZCBmb3IgZWFjaCBzbWFydCBhc3NldCBpbiBwYXltZW50cyBhbmQgc2NyaXB0IGFjdGlvbnMgaW4gSW52b2tlIFNjcmlwdCB0cmFuc2FjdGlvbnMuKQQIYWExX3RleHQJALkJAgkAzAgCBQNhYTEJAMwIAgUDYmIxCQDMCAIFA2NjMQkAzAgCBQNkZDEFA25pbAICJiYEBHNzdHIC3QJBbnkgdXNlciBjYW4gY3JlYXRlIHRoZWlyIG93biB0b2tlbiBvbiB0aGUgV2F2ZXMgYmxvY2tjaGFpbiBhbmQgYWxzbyBzZXQgdGhlIHJ1bGVzIGZvciBpdHMgY2lyY3VsYXRpb24gYnkgYXNzaWduaW5nIGEgc2NyaXB0IHRvIGl0LkZvciBleGFtcGxlLCBmb3IgaW4tZ2FtZSBjdXJyZW5jeSwgeW91IGNhbiBhbGxvdyBvbmx5IHRyYW5zYWN0aW9ucyBiZXR3ZWVuIGNoYXJhY3RlcnMgd2l0aCBjZXJ0YWluIHByb3BlcnRpZXMuIEEgdG9rZW4gd2l0aCBhbiBhc3NpZ25lZCBzY3JpcHQgaXMgY2FsbGVkIGEgc21hcnQgYXNzZXQsIGFuZCB0aGUgYXNzaWduZWQgc2NyaXB0IGlzIGNhbGxlZCBhbiBhc3NldCBzY3JpcHQuBARzdHRyAvQFVHJhbnNhY3Rpb25zIGFuZCBCbG9ja3MuQmxvY2tjaGFpbiBkYXRhIGlzIHByZXNlbnRlZCBhcyB0cmFuc2FjdGlvbnMuIEEgdHJhbnNhY3Rpb24gaXMgYSByZWNvcmQgb2YgYW4gYWN0aW9uLCBzdWNoIGFzIHRva2VuIGlzc3VlLCB0b2tlbiB0cmFuc2Zlciwgc21hcnQgY29udHJhY3QgY3JlYXRpb24gb3IgaW52b2NhdGlvbiwgZXRjLlRyYW5zYWN0aW9ucyBhcmUgc3RhY2tlZCBpbnRvIGJsb2Nrcy4gQmVzaWRlcyB0cmFuc2FjdGlvbnMsIGV2ZXJ5IGJsb2NrIGNvbnRhaW5zIHRoZSBoYXNoIG9mIHRoZSBwcmV2aW91cyBibG9jayBhbmQgdGhlIGRpZ2l0YWwgc2lnbmF0dXJlIG9mIHRoZSBub2RlIHRoYXQgZ2VuZXJhdGVkIHRoZSBibG9jay4gVGhlIHByZXZpb3VzIGJsb2NrIGNvbnRhaW5zIHRoZSBkYXRhIGhhc2ggb2YgaXRzIHByZWNlZGluZyBibG9jaywgYW5kIHNvIG9uLiBBcyBhIHJlc3VsdCwgdGhlIHNpZ25hdHVyZSBvZiBlYWNoIGJsb2NrIGRlcGVuZHMgb24gdGhlIGRhdGEgb2YgYWxsIHRoZSBwcmVjZWRpbmcgYmxvY2tzLkluIG90aGVyIHdvcmRzLCB0aGUgYmxvY2tjaGFpbiBpcyBhIHNlcXVlbmNlIG9mIGJsb2NrcyBsaW5rZWQgYnkgY3J5cHRvZ3JhcGhpYyBoYXNoZXMuIEVhY2ggdHJhbnNhY3Rpb24gc3RheXMgaW50YWN0IGluZGVmaW5pdGVseS4gQW4gYXR0ZW1wdCB0byBjaGFuZ2UgYW55IGRhdGEgaW4gYSBibG9jayB3b3VsZCBpbnZhbGlkYXRlIHRoZSBibG9jayBhbmQgYWxsIHRoZSBsYXRlciBibG9ja3MuBAVzdHJycgK+BU5vZGUuQSBub2RlIGlzIGEgY29tcHV0ZXIgdGhhdCBzZXJ2ZXMgdGhlIGJsb2NrY2hhaW4gbmV0d29yay4gVGhlIFdhdmVzIG5vZGUgc3RvcmVzIGEgZnVsbCBjb3B5IG9mIHRoZSBibG9ja2NoYWluIGRhdGEsIHZhbGlkYXRlcyB0cmFuc2FjdGlvbnMgYW5kIGJsb2NrcywgdmVyaWZpZXMgc2lnbmF0dXJlcyBhbmQgaGFzaGVzLCBhbmQgc3luY2hyb25pemVzIHRoZSBkYXRhIHdpdGggb3RoZXIgbm9kZXMuVGhlIFdhdmVzIG5ldHdvcmsgY29uc2lzdHMgb2YgaHVuZHJlZHMgb2Ygbm9kZXMgaG9zdGVkIGFyb3VuZCB0aGUgd29ybGQuIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSBibG9ja2NoYWluIGRhdGEgaXMgcHJvdGVjdGVkIGFnYWluc3QgY291bnRlcmZlaXQgb3IgZGVsZXRpb24sIG1hbGljaW91cyBvciBvY2Nhc2lvbmFsLiBFdmVyeW9uZSBjYW4gbGF1bmNoIGEgbm9kZSBhbmQgam9pbiB0aGUgbmV0d29yay4gVGhlIG5vZGUgdGhhdCBob2xkcyBhdCBsZWFzdCAxLDAwMCBXQVZFUyAoYnkgb3duZXJzaGlwIG9yIGxlYXNlKSwgY2FuIHBhcnRpY2lwYXRlIGluIGJsb2NrIGdlbmVyYXRpb24gYW5kIHJlY2VpdmUgYmxvY2sgZ2VuZXJhdGlvbiByZXdhcmRzIGFuZCB0cmFuc2FjdGlvbiBmZWVzLiBUaGUgbW9yZSB0b2tlbnMgdGhlIG5vZGUgaG9sZHMsIHRoZSBncmVhdGVyIGlzIGl0cyBjaGFuY2UgdG8gYWRkIHRoZSBuZXh0IGJsb2NrLgQEc2RmcwL0A0FjY291bnQuV2F2ZXMgdXNlcyBhbiBhY2NvdW50LWJhc2VkIG1vZGVsLiBFYWNoIHRyYW5zYWN0aW9uIGlzIGNyZWF0ZWQgb24gYmVoYWxmIG9mIGFuIGFjY291bnQsIGFsbCBhc3NldHMgYW5kIGRhdGEgYXJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgYWNjb3VudC4gQW4gYWNjb3VudCBoYXMgYSBwYWlyIG9mIGNyeXB0b2dyYXBoaWNhbGx5IGJvdW5kIGtleXM6IGEgcHJpdmF0ZSBrZXkgdGhhdCB0aGUgYWNjb3VudCB1c2VzIHRvIHNpZ24gdHJhbnNhY3Rpb25zLCBhbmQgYSBwdWJsaWMga2V5IHRoYXQgYWxsb3dzIGFueW9uZSB0byB2ZXJpZnkgdGhlIHNpZ25hdHVyZS4gTW9yZSBhYm91dCBhY2NvdW50LlRvIGNyZWF0ZSBhbiBhY2NvdW50LCBzdG9yZSBrZXlzLCBhbmQgc2lnbiB0cmFuc2FjdGlvbnMsIHlvdSBjYW4gdXNlIGFwcGxpY2F0aW9ucyBkZXZlbG9wZWQgYnkgV2F2ZXMgY29tbXVuaXR5OiBLZWVwZXIgV2FsbGV0LCBXWCBOZXR3b3JrLCBXYXZlc0ZYLCBvciBvdGhlcnMuBARld3J0AqUDZEFwcC5BIGRlY2VudHJhbGl6ZWQgYXBwbGljYXRpb24gKGRBcHApIGlzIGFuIGFwcGxpY2F0aW9uIGVtcG93ZXJlZCBieSBibG9ja2NoYWluLiBBIGRBcHAgY2FuIHN0b3JlIGRhdGEgb24gdGhlIGJsb2NrY2hhaW4gYW5kIGludm9rZSBhIHNjcmlwdCBhc3NpZ25lZCB0byBhbiBhY2NvdW50LiBUaGVyZSBpcywgdGhlcmVmb3JlLCBubyBjZW50cmFsaXplZCBkYXRhYmFzZSB0aGF0IG1pZ2h0IGJlIGhhY2tlZCBvciBjb21wcm9taXNlZC4gQW55IHVzZXIgY2FuIHZpZXcgdGhlIHNjcmlwdCBjb2RlIGFuZCB0aGUgcmVzdWx0IG9mIGl0cyBpbnZvY2F0aW9uLkxlYXJuIG1vcmUgYWJvdXQgV2F2ZXMgdGVjaG5vbG9neSBhbmQgZ2FpbiB0aGUgaGFuZHMtb24gc2tpbGxzIG5lZWRlZCB0byBidWlsZCBkQXBwcyB1c2luZyBXYXZlcyBsZXNzb25zLgQFc3RyXzECP1RoaXMgdGV4dCBpcyBuZWNlc3NhcnkgdG8gZ2V0IHRoZSBzY3JpcHQgb2YgdGhlIHJlcXVpcmVkIHZvbHVtZQQFc3RyXzICgwFBbnkgdXNlciBjYW4gY3JlYXRlIHRoZWlyIG93biB0b2tlbiBvbiB0aGUgV2F2ZXMgYmxvY2tjaGFpbiBhbmQgYWxzbyBzZXQgdGhlIHJ1bGVzIGZvciBpdHMgY2lyY3VsYXRpb24gYnkgYXNzaWduaW5nIGEgc2NyaXB0IHRvIGl0LgQFc3RyXzMCbkZvciBleGFtcGxlLCBmb3IgaW4tZ2FtZSBjdXJyZW5jeSwgeW91IGNhbiBhbGxvdyBvbmx5IHRyYW5zYWN0aW9ucyBiZXR3ZWVuIGNoYXJhY3RlcnMgd2l0aCBjZXJ0YWluIHByb3BlcnRpZXMuBAVzdHJfNAJrQSB0b2tlbiB3aXRoIGFuIGFzc2lnbmVkIHNjcmlwdCBpcyBjYWxsZWQgYSBzbWFydCBhc3NldCwgYW5kIHRoZSBhc3NpZ25lZCBzY3JpcHQgaXMgY2FsbGVkIGFuIGFzc2V0IHNjcmlwdC4EBnRleHRfMQkAuwkCCQDMCAIFBXN0cl8xCQDMCAIFBXN0cl8yCQDMCAIFBXN0cl8zCQDMCAIFBXN0cl80BQNuaWwCAyAmIAQGdGV4dF8yCQC7CQIJAMwIAgUFc3RyXzEJAMwIAgUFc3RyXzIJAMwIAgUFc3RyXzMJAMwIAgUFc3RyXzQFA25pbAIDICYgBAZ0ZXh0XzMJALsJAgkAzAgCBQVzdHJfMQkAzAgCBQVzdHJfMgkAzAgCBQVzdHJfMwkAzAgCBQVzdHJfNAUDbmlsAgMgJiAEBnRleHRfNAkAuwkCCQDMCAIFBXN0cl8xCQDMCAIFBXN0cl8yCQDMCAIFBXN0cl8zCQDMCAIFBXN0cl80BQNuaWwCAyAmIAQEc3RyMQI/VGhpcyB0ZXh0IGlzIG5lY2Vzc2FyeSB0byBnZXQgdGhlIHNjcmlwdCBvZiB0aGUgcmVxdWlyZWQgdm9sdW1lBARzdHIyAoMBQW55IHVzZXIgY2FuIGNyZWF0ZSB0aGVpciBvd24gdG9rZW4gb24gdGhlIFdhdmVzIGJsb2NrY2hhaW4gYW5kIGFsc28gc2V0IHRoZSBydWxlcyBmb3IgaXRzIGNpcmN1bGF0aW9uIGJ5IGFzc2lnbmluZyBhIHNjcmlwdCB0byBpdC4EBHN0cjMCbkZvciBleGFtcGxlLCBmb3IgaW4tZ2FtZSBjdXJyZW5jeSwgeW91IGNhbiBhbGxvdyBvbmx5IHRyYW5zYWN0aW9ucyBiZXR3ZWVuIGNoYXJhY3RlcnMgd2l0aCBjZXJ0YWluIHByb3BlcnRpZXMuBARzdHI0AmtBIHRva2VuIHdpdGggYW4gYXNzaWduZWQgc2NyaXB0IGlzIGNhbGxlZCBhIHNtYXJ0IGFzc2V0LCBhbmQgdGhlIGFzc2lnbmVkIHNjcmlwdCBpcyBjYWxsZWQgYW4gYXNzZXQgc2NyaXB0LgQFdGV4dDEJALsJAgkAzAgCBQRzdHIxCQDMCAIFBHN0cjIJAMwIAgUEc3RyMwkAzAgCBQRzdHI0BQNuaWwCAyAmIAQFdGV4dDIJALsJAgkAzAgCBQRzdHIxCQDMCAIFBHN0cjIJAMwIAgUEc3RyMwkAzAgCBQRzdHI0BQNuaWwCAyAmIAQFdGV4dDMJALsJAgkAzAgCBQRzdHIxCQDMCAIFBHN0cjIJAMwIAgUEc3RyMwkAzAgCBQRzdHI0BQNuaWwCAyAmIAQFdGV4dDQJALsJAgkAzAgCBQRzdHIxCQDMCAIFBHN0cjIJAMwIAgUEc3RyMwkAzAgCBQRzdHI0BQNuaWwCAyAmIAQFdGV4dDUJALsJAgkAzAgCBQRzdHIxCQDMCAIFBHN0cjIJAMwIAgUEc3RyMwkAzAgCBQRzdHI0BQNuaWwCAyAmIAQIdGV4dDExMTEJALsJAgkAzAgCBQRzdHIxCQDMCAIF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cjEJAMwIAgUEc3RyMgkAzAgCBQRzdHIzCQDMCAIFBHN0cjQFA25pbAIDICYgBAl0ZXh0dDU1NTUJALsJAgkAzAgCBQRzdHIxCQDMCAIFBHN0cjIJAMwIAgUEc3RyMwkAzAgCBQRzdHI0BQNuaWwCAyAmIAQBYQI/VGhpcyB0ZXh0IGlzIG5lY2Vzc2FyeSB0byBnZXQgdGhlIHNjcmlwdCBvZiB0aGUgcmVxdWlyZWQgdm9sdW1lBAFiAoMBQW55IHVzZXIgY2FuIGNyZWF0ZSB0aGVpciBvd24gdG9rZW4gb24gdGhlIFdhdmVzIGJsb2NrY2hhaW4gYW5kIGFsc28gc2V0IHRoZSBydWxlcyBmb3IgaXRzIGNpcmN1bGF0aW9uIGJ5IGFzc2lnbmluZyBhIHNjcmlwdCB0byBpdC4EAWMCbkZvciBleGFtcGxlLCBmb3IgaW4tZ2FtZSBjdXJyZW5jeSwgeW91IGNhbiBhbGxvdyBvbmx5IHRyYW5zYWN0aW9ucyBiZXR3ZWVuIGNoYXJhY3RlcnMgd2l0aCBjZXJ0YWluIHByb3BlcnRpZXMuBAFkAmtBIHRva2VuIHdpdGggYW4gYXNzaWduZWQgc2NyaXB0IGlzIGNhbGxlZCBhIHNtYXJ0IGFzc2V0LCBhbmQgdGhlIGFzc2lnbmVkIHNjcmlwdCBpcyBjYWxsZWQgYW4gYXNzZXQgc2NyaXB0LgQFdGV4dGEJALsJAgkAzAgCBQRzdHIxCQDMCAIFBHN0cjIJAMwIAgUEc3RyMwkAzAgCBQRzdHI0BQNuaWwCAyAmIAQFdGV4dGIJALsJAgkAzAgCBQRzdHIxCQDMCAIFBHN0cjIJAMwIAgUEc3RyMwkAzAgCBQRzdHI0BQNuaWwCAyAmIAQFdGV4dGMJALsJAgkAzAgCBQRzdHIxCQDMCAIFBHN0cjIJAMwIAgUEc3RyMwkAzAgCBQRzdHI0BQNuaWwCAyAmIAQFdGV4dGQJALsJAgkAzAgCBQRzdHIxCQDMCAIFBHN0cjIJAMwIAgUEc3RyMwkAzAgCBQRzdHI0BQNuaWwCAyAmIAQFdGV4dGUJALsJAgkAzAgCBQRzdHIxCQDMCAIFBHN0cjIJAMwIAgUEc3RyMwkAzAgCBQRzdHI0BQNuaWwCAyAmIAQCYWECP1RoaXMgdGV4dCBpcyBuZWNlc3NhcnkgdG8gZ2V0IHRoZSBzY3JpcHQgb2YgdGhlIHJlcXVpcmVkIHZvbHVtZQQCYmICgwFBbnkgdXNlciBjYW4gY3JlYXRlIHRoZWlyIG93biB0b2tlbiBvbiB0aGUgV2F2ZXMgYmxvY2tjaGFpbiBhbmQgYWxzbyBzZXQgdGhlIHJ1bGVzIGZvciBpdHMgY2lyY3VsYXRpb24gYnkgYXNzaWduaW5nIGEgc2NyaXB0IHRvIGl0LgQCY2MCbkZvciBleGFtcGxlLCBmb3IgaW4tZ2FtZSBjdXJyZW5jeSwgeW91IGNhbiBhbGxvdyBvbmx5IHRyYW5zYWN0aW9ucyBiZXR3ZWVuIGNoYXJhY3RlcnMgd2l0aCBjZXJ0YWluIHByb3BlcnRpZXMuBAJkZAJrQSB0b2tlbiB3aXRoIGFuIGFzc2lnbmVkIHNjcmlwdCBpcyBjYWxsZWQgYSBzbWFydCBhc3NldCwgYW5kIHRoZSBhc3NpZ25lZCBzY3JpcHQgaXMgY2FsbGVkIGFuIGFzc2V0IHNjcmlwdC4EBnRleHRhYQkAuwkCCQDMCAIFBHN0cjEJAMwIAgUEc3RyMgkAzAgCBQRzdHIzCQDMCAIFBHN0cjQFA25pbAIDICYgBAZ0ZXh0YmIJALsJAgkAzAgCBQRzdHIxCQDMCAIFBHN0cjIJAMwIAgUEc3RyMwkAzAgCBQRzdHI0BQNuaWwCAyAmIAQGdGV4dGNjCQC7CQIJAMwIAgUEc3RyMQkAzAgCBQRzdHIyCQDMCAIFBHN0cjMJAMwIAgUEc3RyNAUDbmlsAgMgJiAEBnRleHRkZAkAuwkCCQDMCAIFBHN0cjEJAMwIAgUEc3RyMgkAzAgCBQRzdHIzCQDMCAIFBHN0cjQFA25pbAIDICYgBAZ0ZXh0ZWUJALsJAgkAzAgCBQRzdHIxCQDMCAIFBHN0cjIJAMwIAgUEc3RyMwkAzAgCBQRzdHI0BQNuaWwCAyAmIAQDYWFhAj9UaGlzIHRleHQgaXMgbmVjZXNzYXJ5IHRvIGdldCB0aGUgc2NyaXB0IG9mIHRoZSByZXF1aXJlZCB2b2x1bWUEA2JiYgKDAUFueSB1c2VyIGNhbiBjcmVhdGUgdGhlaXIgb3duIHRva2VuIG9uIHRoZSBXYXZlcyBibG9ja2NoYWluIGFuZCBhbHNvIHNldCB0aGUgcnVsZXMgZm9yIGl0cyBjaXJjdWxhdGlvbiBieSBhc3NpZ25pbmcgYSBzY3JpcHQgdG8gaXQuBANjY2MCbkZvciBleGFtcGxlLCBmb3IgaW4tZ2FtZSBjdXJyZW5jeSwgeW91IGNhbiBhbGxvdyBvbmx5IHRyYW5zYWN0aW9ucyBiZXR3ZWVuIGNoYXJhY3RlcnMgd2l0aCBjZXJ0YWluIHByb3BlcnRpZXMuBANkZGQCa0EgdG9rZW4gd2l0aCBhbiBhc3NpZ25lZCBzY3JpcHQgaXMgY2FsbGVkIGEgc21hcnQgYXNzZXQsIGFuZCB0aGUgYXNzaWduZWQgc2NyaXB0IGlzIGNhbGxlZCBhbiBhc3NldCBzY3JpcHQuBAd0ZXh0YWFhCQC7CQIJAMwIAgUDYWFhCQDMCAIFA2JiYgkAzAgCBQNjY2MJAMwIAgUDZGRkBQNuaWwCAyAmIAQHdGV4dGJiYgkAuwkCCQDMCAIFA2FhYQkAzAgCBQNiYmIJAMwIAgUDY2NjCQDMCAIFA2RkZAUDbmlsAgMgJiAEB3RleHRjY2MJALsJAgkAzAgCBQNhYWEJAMwIAgUDYmJiCQDMCAIFA2NjYwkAzAgCBQNkZGQFA25pbAIDICYgBAd0ZXh0ZGRkCQC7CQIJAMwIAgUDYWFhCQDMCAIFA2JiYgkAzAgCBQNjY2MJAMwIAgUDZGRkBQNuaWwCAyAmIAQHdGV4dGVlZQkAuwkCCQDMCAIFA2FhYQkAzAgCBQNiYmIJAMwIAgUDY2NjCQDMCAIFA2RkZAUDbmlsAgMgJiAEBnNzdHdlcgLdAkFueSB1c2VyIGNhbiBjcmVhdGUgdGhlaXIgb3duIHRva2VuIG9uIHRoZSBXYXZlcyBibG9ja2NoYWluIGFuZCBhbHNvIHNldCB0aGUgcnVsZXMgZm9yIGl0cyBjaXJjdWxhdGlvbiBieSBhc3NpZ25pbmcgYSBzY3JpcHQgdG8gaXQuRm9yIGV4YW1wbGUsIGZvciBpbi1nYW1lIGN1cnJlbmN5LCB5b3UgY2FuIGFsbG93IG9ubHkgdHJhbnNhY3Rpb25zIGJldHdlZW4gY2hhcmFjdGVycyB3aXRoIGNlcnRhaW4gcHJvcGVydGllcy4gQSB0b2tlbiB3aXRoIGFuIGFzc2lnbmVkIHNjcmlwdCBpcyBjYWxsZWQgYSBzbWFydCBhc3NldCwgYW5kIHRoZSBhc3NpZ25lZCBzY3JpcHQgaXMgY2FsbGVkIGFuIGFzc2V0IHNjcmlwdC4ECHN0dHdlcndyAvQFVHJhbnNhY3Rpb25zIGFuZCBCbG9ja3MuQmxvY2tjaGFpbiBkYXRhIGlzIHByZXNlbnRlZCBhcyB0cmFuc2FjdGlvbnMuIEEgdHJhbnNhY3Rpb24gaXMgYSByZWNvcmQgb2YgYW4gYWN0aW9uLCBzdWNoIGFzIHRva2VuIGlzc3VlLCB0b2tlbiB0cmFuc2Zlciwgc21hcnQgY29udHJhY3QgY3JlYXRpb24gb3IgaW52b2NhdGlvbiwgZXRjLlRyYW5zYWN0aW9ucyBhcmUgc3RhY2tlZCBpbnRvIGJsb2Nrcy4gQmVzaWRlcyB0cmFuc2FjdGlvbnMsIGV2ZXJ5IGJsb2NrIGNvbnRhaW5zIHRoZSBoYXNoIG9mIHRoZSBwcmV2aW91cyBibG9jayBhbmQgdGhlIGRpZ2l0YWwgc2lnbmF0dXJlIG9mIHRoZSBub2RlIHRoYXQgZ2VuZXJhdGVkIHRoZSBibG9jay4gVGhlIHByZXZpb3VzIGJsb2NrIGNvbnRhaW5zIHRoZSBkYXRhIGhhc2ggb2YgaXRzIHByZWNlZGluZyBibG9jaywgYW5kIHNvIG9uLiBBcyBhIHJlc3VsdCwgdGhlIHNpZ25hdHVyZSBvZiBlYWNoIGJsb2NrIGRlcGVuZHMgb24gdGhlIGRhdGEgb2YgYWxsIHRoZSBwcmVjZWRpbmcgYmxvY2tzLkluIG90aGVyIHdvcmRzLCB0aGUgYmxvY2tjaGFpbiBpcyBhIHNlcXVlbmNlIG9mIGJsb2NrcyBsaW5rZWQgYnkgY3J5cHRvZ3JhcGhpYyBoYXNoZXMuIEVhY2ggdHJhbnNhY3Rpb24gc3RheXMgaW50YWN0IGluZGVmaW5pdGVseS4gQW4gYXR0ZW1wdCB0byBjaGFuZ2UgYW55IGRhdGEgaW4gYSBibG9jayB3b3VsZCBpbnZhbGlkYXRlIHRoZSBibG9jayBhbmQgYWxsIHRoZSBsYXRlciBibG9ja3MuBAhzdHJ3ZXJycgK+BU5vZGUuQSBub2RlIGlzIGEgY29tcHV0ZXIgdGhhdCBzZXJ2ZXMgdGhlIGJsb2NrY2hhaW4gbmV0d29yay4gVGhlIFdhdmVzIG5vZGUgc3RvcmVzIGEgZnVsbCBjb3B5IG9mIHRoZSBibG9ja2NoYWluIGRhdGEsIHZhbGlkYXRlcyB0cmFuc2FjdGlvbnMgYW5kIGJsb2NrcywgdmVyaWZpZXMgc2lnbmF0dXJlcyBhbmQgaGFzaGVzLCBhbmQgc3luY2hyb25pemVzIHRoZSBkYXRhIHdpdGggb3RoZXIgbm9kZXMuVGhlIFdhdmVzIG5ldHdvcmsgY29uc2lzdHMgb2YgaHVuZHJlZHMgb2Ygbm9kZXMgaG9zdGVkIGFyb3VuZCB0aGUgd29ybGQuIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSBibG9ja2NoYWluIGRhdGEgaXMgcHJvdGVjdGVkIGFnYWluc3QgY291bnRlcmZlaXQgb3IgZGVsZXRpb24sIG1hbGljaW91cyBvciBvY2Nhc2lvbmFsLiBFdmVyeW9uZSBjYW4gbGF1bmNoIGEgbm9kZSBhbmQgam9pbiB0aGUgbmV0d29yay4gVGhlIG5vZGUgdGhhdCBob2xkcyBhdCBsZWFzdCAxLDAwMCBXQVZFUyAoYnkgb3duZXJzaGlwIG9yIGxlYXNlKSwgY2FuIHBhcnRpY2lwYXRlIGluIGJsb2NrIGdlbmVyYXRpb24gYW5kIHJlY2VpdmUgYmxvY2sgZ2VuZXJhdGlvbiByZXdhcmRzIGFuZCB0cmFuc2FjdGlvbiBmZWVzLiBUaGUgbW9yZSB0b2tlbnMgdGhlIG5vZGUgaG9sZHMsIHRoZSBncmVhdGVyIGlzIGl0cyBjaGFuY2UgdG8gYWRkIHRoZSBuZXh0IGJsb2NrLgQHc2RmcmV0cwL0A0FjY291bnQuV2F2ZXMgdXNlcyBhbiBhY2NvdW50LWJhc2VkIG1vZGVsLiBFYWNoIHRyYW5zYWN0aW9uIGlzIGNyZWF0ZWQgb24gYmVoYWxmIG9mIGFuIGFjY291bnQsIGFsbCBhc3NldHMgYW5kIGRhdGEgYXJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgYWNjb3VudC4gQW4gYWNjb3VudCBoYXMgYSBwYWlyIG9mIGNyeXB0b2dyYXBoaWNhbGx5IGJvdW5kIGtleXM6IGEgcHJpdmF0ZSBrZXkgdGhhdCB0aGUgYWNjb3VudCB1c2VzIHRvIHNpZ24gdHJhbnNhY3Rpb25zLCBhbmQgYSBwdWJsaWMga2V5IHRoYXQgYWxsb3dzIGFueW9uZSB0byB2ZXJpZnkgdGhlIHNpZ25hdHVyZS4gTW9yZSBhYm91dCBhY2NvdW50LlRvIGNyZWF0ZSBhbiBhY2NvdW50LCBzdG9yZSBrZXlzLCBhbmQgc2lnbiB0cmFuc2FjdGlvbnMsIHlvdSBjYW4gdXNlIGFwcGxpY2F0aW9ucyBkZXZlbG9wZWQgYnkgV2F2ZXMgY29tbXVuaXR5OiBLZWVwZXIgV2FsbGV0LCBXWCBOZXR3b3JrLCBXYXZlc0ZYLCBvciBvdGhlcnMuBAdld3JlcnR0AqUDZEFwcC5BIGRlY2VudHJhbGl6ZWQgYXBwbGljYXRpb24gKGRBcHApIGlzIGFuIGFwcGxpY2F0aW9uIGVtcG93ZXJlZCBieSBibG9ja2NoYWluLiBBIGRBcHAgY2FuIHN0b3JlIGRhdGEgb24gdGhlIGJsb2NrY2hhaW4gYW5kIGludm9rZSBhIHNjcmlwdCBhc3NpZ25lZCB0byBhbiBhY2NvdW50LiBUaGVyZSBpcywgdGhlcmVmb3JlLCBubyBjZW50cmFsaXplZCBkYXRhYmFzZSB0aGF0IG1pZ2h0IGJlIGhhY2tlZCBvciBjb21wcm9taXNlZC4gQW55IHVzZXIgY2FuIHZpZXcgdGhlIHNjcmlwdCBjb2RlIGFuZCB0aGUgcmVzdWx0IG9mIGl0cyBpbnZvY2F0aW9uLkxlYXJuIG1vcmUgYWJvdXQgV2F2ZXMgdGVjaG5vbG9neSBhbmQgZ2FpbiB0aGUgaGFuZHMtb24gc2tpbGxzIG5lZWRlZCB0byBidWlsZCBkQXBwcyB1c2luZyBXYXZlcyBsZXNzb25zLgQIc3RlcnRyXzECP1RoaXMgdGV4dCBpcyBuZWNlc3NhcnkgdG8gZ2V0IHRoZSBzY3JpcHQgb2YgdGhlIHJlcXVpcmVkIHZvbHVtZQQIc3RlcnRyXzICgwFBbnkgdXNlciBjYW4gY3JlYXRlIHRoZWlyIG93biB0b2tlbiBvbiB0aGUgV2F2ZXMgYmxvY2tjaGFpbiBhbmQgYWxzbyBzZXQgdGhlIHJ1bGVzIGZvciBpdHMgY2lyY3VsYXRpb24gYnkgYXNzaWduaW5nIGEgc2NyaXB0IHRvIGl0LgQIc3RlcnRyXzMCbkZvciBleGFtcGxlLCBmb3IgaW4tZ2FtZSBjdXJyZW5jeSwgeW91IGNhbiBhbGxvdyBvbmx5IHRyYW5zYWN0aW9ucyBiZXR3ZWVuIGNoYXJhY3RlcnMgd2l0aCBjZXJ0YWluIHByb3BlcnRpZXMuBAhzdGVydHJfNAJrQSB0b2tlbiB3aXRoIGFuIGFzc2lnbmVkIHNjcmlwdCBpcyBjYWxsZWQgYSBzbWFydCBhc3NldCwgYW5kIHRoZSBhc3NpZ25lZCBzY3JpcHQgaXMgY2FsbGVkIGFuIGFzc2V0IHNjcmlwdC4ECXNzc2RkZmd0cgLdAkFueSB1c2VyIGNhbiBjcmVhdGUgdGhlaXIgb3duIHRva2VuIG9uIHRoZSBXYXZlcyBibG9ja2NoYWluIGFuZCBhbHNvIHNldCB0aGUgcnVsZXMgZm9yIGl0cyBjaXJjdWxhdGlvbiBieSBhc3NpZ25pbmcgYSBzY3JpcHQgdG8gaXQuRm9yIGV4YW1wbGUsIGZvciBpbi1nYW1lIGN1cnJlbmN5LCB5b3UgY2FuIGFsbG93IG9ubHkgdHJhbnNhY3Rpb25zIGJldHdlZW4gY2hhcmFjdGVycyB3aXRoIGNlcnRhaW4gcHJvcGVydGllcy4gQSB0b2tlbiB3aXRoIGFuIGFzc2lnbmVkIHNjcmlwdCBpcyBjYWxsZWQgYSBzbWFydCBhc3NldCwgYW5kIHRoZSBhc3NpZ25lZCBzY3JpcHQgaXMgY2FsbGVkIGFuIGFzc2V0IHNjcmlwdC4EB3N0dHJmZ2QC9AVUcmFuc2FjdGlvbnMgYW5kIEJsb2Nrcy5CbG9ja2NoYWluIGRhdGEgaXMgcHJlc2VudGVkIGFzIHRyYW5zYWN0aW9ucy4gQSB0cmFuc2FjdGlvbiBpcyBhIHJlY29yZCBvZiBhbiBhY3Rpb24sIHN1Y2ggYXMgdG9rZW4gaXNzdWUsIHRva2VuIHRyYW5zZmVyLCBzbWFydCBjb250cmFjdCBjcmVhdGlvbiBvciBpbnZvY2F0aW9uLCBldGMuVHJhbnNhY3Rpb25zIGFyZSBzdGFja2VkIGludG8gYmxvY2tzLiBCZXNpZGVzIHRyYW5zYWN0aW9ucywgZXZlcnkgYmxvY2sgY29udGFpbnMgdGhlIGhhc2ggb2YgdGhlIHByZXZpb3VzIGJsb2NrIGFuZCB0aGUgZGlnaXRhbCBzaWduYXR1cmUgb2YgdGhlIG5vZGUgdGhhdCBnZW5lcmF0ZWQgdGhlIGJsb2NrLiBUaGUgcHJldmlvdXMgYmxvY2sgY29udGFpbnMgdGhlIGRhdGEgaGFzaCBvZiBpdHMgcHJlY2VkaW5nIGJsb2NrLCBhbmQgc28gb24uIEFzIGEgcmVzdWx0LCB0aGUgc2lnbmF0dXJlIG9mIGVhY2ggYmxvY2sgZGVwZW5kcyBvbiB0aGUgZGF0YSBvZiBhbGwgdGhlIHByZWNlZGluZyBibG9ja3MuSW4gb3RoZXIgd29yZHMsIHRoZSBibG9ja2NoYWluIGlzIGEgc2VxdWVuY2Ugb2YgYmxvY2tzIGxpbmtlZCBieSBjcnlwdG9ncmFwaGljIGhhc2hlcy4gRWFjaCB0cmFuc2FjdGlvbiBzdGF5cyBpbnRhY3QgaW5kZWZpbml0ZWx5LiBBbiBhdHRlbXB0IHRvIGNoYW5nZSBhbnkgZGF0YSBpbiBhIGJsb2NrIHdvdWxkIGludmFsaWRhdGUgdGhlIGJsb2NrIGFuZCBhbGwgdGhlIGxhdGVyIGJsb2Nrcy4ECHN0cnJmZ2RyAr4FTm9kZS5BIG5vZGUgaXMgYSBjb21wdXRlciB0aGF0IHNlcnZlcyB0aGUgYmxvY2tjaGFpbiBuZXR3b3JrLiBUaGUgV2F2ZXMgbm9kZSBzdG9yZXMgYSBmdWxsIGNvcHkgb2YgdGhlIGJsb2NrY2hhaW4gZGF0YSwgdmFsaWRhdGVzIHRyYW5zYWN0aW9ucyBhbmQgYmxvY2tzLCB2ZXJpZmllcyBzaWduYXR1cmVzIGFuZCBoYXNoZXMsIGFuZCBzeW5jaHJvbml6ZXMgdGhlIGRhdGEgd2l0aCBvdGhlciBub2Rlcy5UaGUgV2F2ZXMgbmV0d29yayBjb25zaXN0cyBvZiBodW5kcmVkcyBvZiBub2RlcyBob3N0ZWQgYXJvdW5kIHRoZSB3b3JsZC4gVGhpcyBlbnN1cmVzIHRoYXQgdGhlIGJsb2NrY2hhaW4gZGF0YSBpcyBwcm90ZWN0ZWQgYWdhaW5zdCBjb3VudGVyZmVpdCBvciBkZWxldGlvbiwgbWFsaWNpb3VzIG9yIG9jY2FzaW9uYWwuIEV2ZXJ5b25lIGNhbiBsYXVuY2ggYSBub2RlIGFuZCBqb2luIHRoZSBuZXR3b3JrLiBUaGUgbm9kZSB0aGF0IGhvbGRzIGF0IGxlYXN0IDEsMDAwIFdBVkVTIChieSBvd25lcnNoaXAgb3IgbGVhc2UpLCBjYW4gcGFydGljaXBhdGUgaW4gYmxvY2sgZ2VuZXJhdGlvbiBhbmQgcmVjZWl2ZSBibG9jayBnZW5lcmF0aW9uIHJld2FyZHMgYW5kIHRyYW5zYWN0aW9uIGZlZXMuIFRoZSBtb3JlIHRva2VucyB0aGUgbm9kZSBob2xkcywgdGhlIGdyZWF0ZXIgaXMgaXRzIGNoYW5jZSB0byBhZGQgdGhlIG5leHQgYmxvY2suBAlzZGZzZmdkZmcC9ANBY2NvdW50LldhdmVzIHVzZXMgYW4gYWNjb3VudC1iYXNlZCBtb2RlbC4gRWFjaCB0cmFuc2FjdGlvbiBpcyBjcmVhdGVkIG9uIGJlaGFsZiBvZiBhbiBhY2NvdW50LCBhbGwgYXNzZXRzIGFuZCBkYXRhIGFyZSBhc3NvY2lhdGVkIHdpdGggdGhlIGFjY291bnQuIEFuIGFjY291bnQgaGFzIGEgcGFpciBvZiBjcnlwdG9ncmFwaGljYWxseSBib3VuZCBrZXlzOiBhIHByaXZhdGUga2V5IHRoYXQgdGhlIGFjY291bnQgdXNlcyB0byBzaWduIHRyYW5zYWN0aW9ucywgYW5kIGEgcHVibGljIGtleSB0aGF0IGFsbG93cyBhbnlvbmUgdG8gdmVyaWZ5IHRoZSBzaWduYXR1cmUuIE1vcmUgYWJvdXQgYWNjb3VudC5UbyBjcmVhdGUgYW4gYWNjb3VudCwgc3RvcmUga2V5cywgYW5kIHNpZ24gdHJhbnNhY3Rpb25zLCB5b3UgY2FuIHVzZSBhcHBsaWNhdGlvbnMgZGV2ZWxvcGVkIGJ5IFdhdmVzIGNvbW11bml0eTogS2VlcGVyIFdhbGxldCwgV1ggTmV0d29yaywgV2F2ZXNGWCwgb3Igb3RoZXJzLgQHZXdydGRmZwKlA2RBcHAuQSBkZWNlbnRyYWxpemVkIGFwcGxpY2F0aW9uIChkQXBwKSBpcyBhbiBhcHBsaWNhdGlvbiBlbXBvd2VyZWQgYnkgYmxvY2tjaGFpbi4gQSBkQXBwIGNhbiBzdG9yZSBkYXRhIG9uIHRoZSBibG9ja2NoYWluIGFuZCBpbnZva2UgYSBzY3JpcHQgYXNzaWduZWQgdG8gYW4gYWNjb3VudC4gVGhlcmUgaXMsIHRoZXJlZm9yZSwgbm8gY2VudHJhbGl6ZWQgZGF0YWJhc2UgdGhhdCBtaWdodCBiZSBoYWNrZWQgb3IgY29tcHJvbWlzZWQuIEFueSB1c2VyIGNhbiB2aWV3IHRoZSBzY3JpcHQgY29kZSBhbmQgdGhlIHJlc3VsdCBvZiBpdHMgaW52b2NhdGlvbi5MZWFybiBtb3JlIGFib3V0IFdhdmVzIHRlY2hub2xvZ3kgYW5kIGdhaW4gdGhlIGhhbmRzLW9uIHNraWxscyBuZWVkZWQgdG8gYnVpbGQgZEFwcHMgdXNpbmcgV2F2ZXMgbGVzc29ucy4ECHN0cl8xZGZnAj9UaGlzIHRleHQgaXMgbmVjZXNzYXJ5IHRvIGdldCB0aGUgc2NyaXB0IG9mIHRoZSByZXF1aXJlZCB2b2x1bWUECHN0cl8yZmdkAoMBQW55IHVzZXIgY2FuIGNyZWF0ZSB0aGVpciBvd24gdG9rZW4gb24gdGhlIFdhdmVzIGJsb2NrY2hhaW4gYW5kIGFsc28gc2V0IHRoZSBydWxlcyBmb3IgaXRzIGNpcmN1bGF0aW9uIGJ5IGFzc2lnbmluZyBhIHNjcmlwdCB0byBpdC4ECHN0cl8zZmdkAm5Gb3IgZXhhbXBsZSwgZm9yIGluLWdhbWUgY3VycmVuY3ksIHlvdSBjYW4gYWxsb3cgb25seSB0cmFuc2FjdGlvbnMgYmV0d2VlbiBjaGFyYWN0ZXJzIHdpdGggY2VydGFpbiBwcm9wZXJ0aWVzLgQLc3RycmV0X3RyeTQCa0EgdG9rZW4gd2l0aCBhbiBhc3NpZ25lZCBzY3JpcHQgaXMgY2FsbGVkIGEgc21hcnQgYXNzZXQsIGFuZCB0aGUgYXNzaWduZWQgc2NyaXB0IGlzIGNhbGxlZCBhbiBhc3NldCBzY3JpcHQuBAZzc2prdHIC3QJBbnkgdXNlciBjYW4gY3JlYXRlIHRoZWlyIG93biB0b2tlbiBvbiB0aGUgV2F2ZXMgYmxvY2tjaGFpbiBhbmQgYWxzbyBzZXQgdGhlIHJ1bGVzIGZvciBpdHMgY2lyY3VsYXRpb24gYnkgYXNzaWduaW5nIGEgc2NyaXB0IHRvIGl0LkZvciBleGFtcGxlLCBmb3IgaW4tZ2FtZSBjdXJyZW5jeSwgeW91IGNhbiBhbGxvdyBvbmx5IHRyYW5zYWN0aW9ucyBiZXR3ZWVuIGNoYXJhY3RlcnMgd2l0aCBjZXJ0YWluIHByb3BlcnRpZXMuIEEgdG9rZW4gd2l0aCBhbiBhc3NpZ25lZCBzY3JpcHQgaXMgY2FsbGVkIGEgc21hcnQgYXNzZXQsIGFuZCB0aGUgYXNzaWduZWQgc2NyaXB0IGlzIGNhbGxlZCBhbiBhc3NldCBzY3JpcHQuBAdzdGprbHRyAvQFVHJhbnNhY3Rpb25zIGFuZCBCbG9ja3MuQmxvY2tjaGFpbiBkYXRhIGlzIHByZXNlbnRlZCBhcyB0cmFuc2FjdGlvbnMuIEEgdHJhbnNhY3Rpb24gaXMgYSByZWNvcmQgb2YgYW4gYWN0aW9uLCBzdWNoIGFzIHRva2VuIGlzc3VlLCB0b2tlbiB0cmFuc2Zlciwgc21hcnQgY29udHJhY3QgY3JlYXRpb24gb3IgaW52b2NhdGlvbiwgZXRjLlRyYW5zYWN0aW9ucyBhcmUgc3RhY2tlZCBpbnRvIGJsb2Nrcy4gQmVzaWRlcyB0cmFuc2FjdGlvbnMsIGV2ZXJ5IGJsb2NrIGNvbnRhaW5zIHRoZSBoYXNoIG9mIHRoZSBwcmV2aW91cyBibG9jayBhbmQgdGhlIGRpZ2l0YWwgc2lnbmF0dXJlIG9mIHRoZSBub2RlIHRoYXQgZ2VuZXJhdGVkIHRoZSBibG9jay4gVGhlIHByZXZpb3VzIGJsb2NrIGNvbnRhaW5zIHRoZSBkYXRhIGhhc2ggb2YgaXRzIHByZWNlZGluZyBibG9jaywgYW5kIHNvIG9uLiBBcyBhIHJlc3VsdCwgdGhlIHNpZ25hdHVyZSBvZiBlYWNoIGJsb2NrIGRlcGVuZHMgb24gdGhlIGRhdGEgb2YgYWxsIHRoZSBwcmVjZWRpbmcgYmxvY2tzLkluIG90aGVyIHdvcmRzLCB0aGUgYmxvY2tjaGFpbiBpcyBhIHNlcXVlbmNlIG9mIGJsb2NrcyBsaW5rZWQgYnkgY3J5cHRvZ3JhcGhpYyBoYXNoZXMuIEVhY2ggdHJhbnNhY3Rpb24gc3RheXMgaW50YWN0IGluZGVmaW5pdGVseS4gQW4gYXR0ZW1wdCB0byBjaGFuZ2UgYW55IGRhdGEgaW4gYSBibG9jayB3b3VsZCBpbnZhbGlkYXRlIHRoZSBibG9jayBhbmQgYWxsIHRoZSBsYXRlciBibG9ja3MuBAdzdHJrbHJyAr4FTm9kZS5BIG5vZGUgaXMgYSBjb21wdXRlciB0aGF0IHNlcnZlcyB0aGUgYmxvY2tjaGFpbiBuZXR3b3JrLiBUaGUgV2F2ZXMgbm9kZSBzdG9yZXMgYSBmdWxsIGNvcHkgb2YgdGhlIGJsb2NrY2hhaW4gZGF0YSwgdmFsaWRhdGVzIHRyYW5zYWN0aW9ucyBhbmQgYmxvY2tzLCB2ZXJpZmllcyBzaWduYXR1cmVzIGFuZCBoYXNoZXMsIGFuZCBzeW5jaHJvbml6ZXMgdGhlIGRhdGEgd2l0aCBvdGhlciBub2Rlcy5UaGUgV2F2ZXMgbmV0d29yayBjb25zaXN0cyBvZiBodW5kcmVkcyBvZiBub2RlcyBob3N0ZWQgYXJvdW5kIHRoZSB3b3JsZC4gVGhpcyBlbnN1cmVzIHRoYXQgdGhlIGJsb2NrY2hhaW4gZGF0YSBpcyBwcm90ZWN0ZWQgYWdhaW5zdCBjb3VudGVyZmVpdCBvciBkZWxldGlvbiwgbWFsaWNpb3VzIG9yIG9jY2FzaW9uYWwuIEV2ZXJ5b25lIGNhbiBsYXVuY2ggYSBub2RlIGFuZCBqb2luIHRoZSBuZXR3b3JrLiBUaGUgbm9kZSB0aGF0IGhvbGRzIGF0IGxlYXN0IDEsMDAwIFdBVkVTIChieSBvd25lcnNoaXAgb3IgbGVhc2UpLCBjYW4gcGFydGljaXBhdGUgaW4gYmxvY2sgZ2VuZXJhdGlvbiBhbmQgcmVjZWl2ZSBibG9jayBnZW5lcmF0aW9uIHJld2FyZHMgYW5kIHRyYW5zYWN0aW9uIGZlZXMuIFRoZSBtb3JlIHRva2VucyB0aGUgbm9kZSBob2xkcywgdGhlIGdyZWF0ZXIgaXMgaXRzIGNoYW5jZSB0byBhZGQgdGhlIG5leHQgYmxvY2suBAhzZGZrbGprcwL0A0FjY291bnQuV2F2ZXMgdXNlcyBhbiBhY2NvdW50LWJhc2VkIG1vZGVsLiBFYWNoIHRyYW5zYWN0aW9uIGlzIGNyZWF0ZWQgb24gYmVoYWxmIG9mIGFuIGFjY291bnQsIGFsbCBhc3NldHMgYW5kIGRhdGEgYXJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgYWNjb3VudC4gQW4gYWNjb3VudCBoYXMgYSBwYWlyIG9mIGNyeXB0b2dyYXBoaWNhbGx5IGJvdW5kIGtleXM6IGEgcHJpdmF0ZSBrZXkgdGhhdCB0aGUgYWNjb3VudCB1c2VzIHRvIHNpZ24gdHJhbnNhY3Rpb25zLCBhbmQgYSBwdWJsaWMga2V5IHRoYXQgYWxsb3dzIGFueW9uZSB0byB2ZXJpZnkgdGhlIHNpZ25hdHVyZS4gTW9yZSBhYm91dCBhY2NvdW50LlRvIGNyZWF0ZSBhbiBhY2NvdW50LCBzdG9yZSBrZXlzLCBhbmQgc2lnbiB0cmFuc2FjdGlvbnMsIHlvdSBjYW4gdXNlIGFwcGxpY2F0aW9ucyBkZXZlbG9wZWQgYnkgV2F2ZXMgY29tbXVuaXR5OiBLZWVwZXIgV2FsbGV0LCBXWCBOZXR3b3JrLCBXYXZlc0ZYLCBvciBvdGhlcnMuBAdld3JrbGp0AqUDZEFwcC5BIGRlY2VudHJhbGl6ZWQgYXBwbGljYXRpb24gKGRBcHApIGlzIGFuIGFwcGxpY2F0aW9uIGVtcG93ZXJlZCBieSBibG9ja2NoYWluLiBBIGRBcHAgY2FuIHN0b3JlIGRhdGEgb24gdGhlIGJsb2NrY2hhaW4gYW5kIGludm9rZSBhIHNjcmlwdCBhc3NpZ25lZCB0byBhbiBhY2NvdW50LiBUaGVyZSBpcywgdGhlcmVmb3JlLCBubyBjZW50cmFsaXplZCBkYXRhYmFzZSB0aGF0IG1pZ2h0IGJlIGhhY2tlZCBvciBjb21wcm9taXNlZC4gQW55IHVzZXIgY2FuIHZpZXcgdGhlIHNjcmlwdCBjb2RlIGFuZCB0aGUgcmVzdWx0IG9mIGl0cyBpbnZvY2F0aW9uLkxlYXJuIG1vcmUgYWJvdXQgV2F2ZXMgdGVjaG5vbG9neSBhbmQgZ2FpbiB0aGUgaGFuZHMtb24gc2tpbGxzIG5lZWRlZCB0byBidWlsZCBkQXBwcyB1c2luZyBXYXZlcyBsZXNzb25zLgQGc3RyX2oxAj9UaGlzIHRleHQgaXMgbmVjZXNzYXJ5IHRvIGdldCB0aGUgc2NyaXB0IG9mIHRoZSByZXF1aXJlZCB2b2x1bWUECHN0cl9naGcyAoMBQW55IHVzZXIgY2FuIGNyZWF0ZSB0aGVpciBvd24gdG9rZW4gb24gdGhlIFdhdmVzIGJsb2NrY2hhaW4gYW5kIGFsc28gc2V0IHRoZSBydWxlcyBmb3IgaXRzIGNpcmN1bGF0aW9uIGJ5IGFzc2lnbmluZyBhIHNjcmlwdCB0byBpdC4EB3N0cl9mZzMCbkZvciBleGFtcGxlLCBmb3IgaW4tZ2FtZSBjdXJyZW5jeSwgeW91IGNhbiBhbGxvdyBvbmx5IHRyYW5zYWN0aW9ucyBiZXR3ZWVuIGNoYXJhY3RlcnMgd2l0aCBjZXJ0YWluIHByb3BlcnRpZXMuBAdzdHJfcnQ0AmtBIHRva2VuIHdpdGggYW4gYXNzaWduZWQgc2NyaXB0IGlzIGNhbGxlZCBhIHNtYXJ0IGFzc2V0LCBhbmQgdGhlIGFzc2lnbmVkIHNjcmlwdCBpcyBjYWxsZWQgYW4gYXNzZXQgc2NyaXB0LgQIc3N0d2Vra3IC3QJBbnkgdXNlciBjYW4gY3JlYXRlIHRoZWlyIG93biB0b2tlbiBvbiB0aGUgV2F2ZXMgYmxvY2tjaGFpbiBhbmQgYWxzbyBzZXQgdGhlIHJ1bGVzIGZvciBpdHMgY2lyY3VsYXRpb24gYnkgYXNzaWduaW5nIGEgc2NyaXB0IHRvIGl0LkZvciBleGFtcGxlLCBmb3IgaW4tZ2FtZSBjdXJyZW5jeSwgeW91IGNhbiBhbGxvdyBvbmx5IHRyYW5zYWN0aW9ucyBiZXR3ZWVuIGNoYXJhY3RlcnMgd2l0aCBjZXJ0YWluIHByb3BlcnRpZXMuIEEgdG9rZW4gd2l0aCBhbiBhc3NpZ25lZCBzY3JpcHQgaXMgY2FsbGVkIGEgc21hcnQgYXNzZXQsIGFuZCB0aGUgYXNzaWduZWQgc2NyaXB0IGlzIGNhbGxlZCBhbiBhc3NldCBzY3JpcHQuBAtzdHR3a2trZXJ3cgL0BVRyYW5zYWN0aW9ucyBhbmQgQmxvY2tzLkJsb2NrY2hhaW4gZGF0YSBpcyBwcmVzZW50ZWQgYXMgdHJhbnNhY3Rpb25zLiBBIHRyYW5zYWN0aW9uIGlzIGEgcmVjb3JkIG9mIGFuIGFjdGlvbiwgc3VjaCBhcyB0b2tlbiBpc3N1ZSwgdG9rZW4gdHJhbnNmZXIsIHNtYXJ0IGNvbnRyYWN0IGNyZWF0aW9uIG9yIGludm9jYXRpb24sIGV0Yy5UcmFuc2FjdGlvbnMgYXJlIHN0YWNrZWQgaW50byBibG9ja3MuIEJlc2lkZXMgdHJhbnNhY3Rpb25zLCBldmVyeSBibG9jayBjb250YWlucyB0aGUgaGFzaCBvZiB0aGUgcHJldmlvdXMgYmxvY2sgYW5kIHRoZSBkaWdpdGFsIHNpZ25hdHVyZSBvZiB0aGUgbm9kZSB0aGF0IGdlbmVyYXRlZCB0aGUgYmxvY2suIFRoZSBwcmV2aW91cyBibG9jayBjb250YWlucyB0aGUgZGF0YSBoYXNoIG9mIGl0cyBwcmVjZWRpbmcgYmxvY2ssIGFuZCBzbyBvbi4gQXMgYSByZXN1bHQsIHRoZSBzaWduYXR1cmUgb2YgZWFjaCBibG9jayBkZXBlbmRzIG9uIHRoZSBkYXRhIG9mIGFsbCB0aGUgcHJlY2VkaW5nIGJsb2Nrcy5JbiBvdGhlciB3b3JkcywgdGhlIGJsb2NrY2hhaW4gaXMgYSBzZXF1ZW5jZSBvZiBibG9ja3MgbGlua2VkIGJ5IGNyeXB0b2dyYXBoaWMgaGFzaGVzLiBFYWNoIHRyYW5zYWN0aW9uIHN0YXlzIGludGFjdCBpbmRlZmluaXRlbHkuIEFuIGF0dGVtcHQgdG8gY2hhbmdlIGFueSBkYXRhIGluIGEgYmxvY2sgd291bGQgaW52YWxpZGF0ZSB0aGUgYmxvY2sgYW5kIGFsbCB0aGUgbGF0ZXIgYmxvY2tzLgQKc3Ryd2trZXJycgK+BU5vZGUuQSBub2RlIGlzIGEgY29tcHV0ZXIgdGhhdCBzZXJ2ZXMgdGhlIGJsb2NrY2hhaW4gbmV0d29yay4gVGhlIFdhdmVzIG5vZGUgc3RvcmVzIGEgZnVsbCBjb3B5IG9mIHRoZSBibG9ja2NoYWluIGRhdGEsIHZhbGlkYXRlcyB0cmFuc2FjdGlvbnMgYW5kIGJsb2NrcywgdmVyaWZpZXMgc2lnbmF0dXJlcyBhbmQgaGFzaGVzLCBhbmQgc3luY2hyb25pemVzIHRoZSBkYXRhIHdpdGggb3RoZXIgbm9kZXMuVGhlIFdhdmVzIG5ldHdvcmsgY29uc2lzdHMgb2YgaHVuZHJlZHMgb2Ygbm9kZXMgaG9zdGVkIGFyb3VuZCB0aGUgd29ybGQuIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSBibG9ja2NoYWluIGRhdGEgaXMgcHJvdGVjdGVkIGFnYWluc3QgY291bnRlcmZlaXQgb3IgZGVsZXRpb24sIG1hbGljaW91cyBvciBvY2Nhc2lvbmFsLiBFdmVyeW9uZSBjYW4gbGF1bmNoIGEgbm9kZSBhbmQgam9pbiB0aGUgbmV0d29yay4gVGhlIG5vZGUgdGhhdCBob2xkcyBhdCBsZWFzdCAxLDAwMCBXQVZFUyAoYnkgb3duZXJzaGlwIG9yIGxlYXNlKSwgY2FuIHBhcnRpY2lwYXRlIGluIGJsb2NrIGdlbmVyYXRpb24gYW5kIHJlY2VpdmUgYmxvY2sgZ2VuZXJhdGlvbiByZXdhcmRzIGFuZCB0cmFuc2FjdGlvbiBmZWVzLiBUaGUgbW9yZSB0b2tlbnMgdGhlIG5vZGUgaG9sZHMsIHRoZSBncmVhdGVyIGlzIGl0cyBjaGFuY2UgdG8gYWRkIHRoZSBuZXh0IGJsb2NrLgQKc2Rmcmtra2V0cwL0A0FjY291bnQuV2F2ZXMgdXNlcyBhbiBhY2NvdW50LWJhc2VkIG1vZGVsLiBFYWNoIHRyYW5zYWN0aW9uIGlzIGNyZWF0ZWQgb24gYmVoYWxmIG9mIGFuIGFjY291bnQsIGFsbCBhc3NldHMgYW5kIGRhdGEgYXJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgYWNjb3VudC4gQW4gYWNjb3VudCBoYXMgYSBwYWlyIG9mIGNyeXB0b2dyYXBoaWNhbGx5IGJvdW5kIGtleXM6IGEgcHJpdmF0ZSBrZXkgdGhhdCB0aGUgYWNjb3VudCB1c2VzIHRvIHNpZ24gdHJhbnNhY3Rpb25zLCBhbmQgYSBwdWJsaWMga2V5IHRoYXQgYWxsb3dzIGFueW9uZSB0byB2ZXJpZnkgdGhlIHNpZ25hdHVyZS4gTW9yZSBhYm91dCBhY2NvdW50LlRvIGNyZWF0ZSBhbiBhY2NvdW50LCBzdG9yZSBrZXlzLCBhbmQgc2lnbiB0cmFuc2FjdGlvbnMsIHlvdSBjYW4gdXNlIGFwcGxpY2F0aW9ucyBkZXZlbG9wZWQgYnkgV2F2ZXMgY29tbXVuaXR5OiBLZWVwZXIgV2FsbGV0LCBXWCBOZXR3b3JrLCBXYXZlc0ZYLCBvciBvdGhlcnMuBAlld3Jla2tydHQCpQNkQXBwLkEgZGVjZW50cmFsaXplZCBhcHBsaWNhdGlvbiAoZEFwcCkgaXMgYW4gYXBwbGljYXRpb24gZW1wb3dlcmVkIGJ5IGJsb2NrY2hhaW4uIEEgZEFwcCBjYW4gc3RvcmUgZGF0YSBvbiB0aGUgYmxvY2tjaGFpbiBhbmQgaW52b2tlIGEgc2NyaXB0IGFzc2lnbmVkIHRvIGFuIGFjY291bnQuIFRoZXJlIGlzLCB0aGVyZWZvcmUsIG5vIGNlbnRyYWxpemVkIGRhdGFiYXNlIHRoYXQgbWlnaHQgYmUgaGFja2VkIG9yIGNvbXByb21pc2VkLiBBbnkgdXNlciBjYW4gdmlldyB0aGUgc2NyaXB0IGNvZGUgYW5kIHRoZSByZXN1bHQgb2YgaXRzIGludm9jYXRpb24uTGVhcm4gbW9yZSBhYm91dCBXYXZlcyB0ZWNobm9sb2d5IGFuZCBnYWluIHRoZSBoYW5kcy1vbiBza2lsbHMgbmVlZGVkIHRvIGJ1aWxkIGRBcHBzIHVzaW5nIFdhdmVzIGxlc3NvbnMuBAtzdGVoamtydHJfMQI/VGhpcyB0ZXh0IGlzIG5lY2Vzc2FyeSB0byBnZXQgdGhlIHNjcmlwdCBvZiB0aGUgcmVxdWlyZWQgdm9sdW1lBApzdGVyaGp0cl8yAoMBQW55IHVzZXIgY2FuIGNyZWF0ZSB0aGVpciBvd24gdG9rZW4gb24gdGhlIFdhdmVzIGJsb2NrY2hhaW4gYW5kIGFsc28gc2V0IHRoZSBydWxlcyBmb3IgaXRzIGNpcmN1bGF0aW9uIGJ5IGFzc2lnbmluZyBhIHNjcmlwdCB0byBpdC4EC3N0ampoZXJ0cl8zAm5Gb3IgZXhhbXBsZSwgZm9yIGluLWdhbWUgY3VycmVuY3ksIHlvdSBjYW4gYWxsb3cgb25seSB0cmFuc2FjdGlvbnMgYmV0d2VlbiBjaGFyYWN0ZXJzIHdpdGggY2VydGFpbiBwcm9wZXJ0aWVzLgQKc3RqamVydHJfNAJrQSB0b2tlbiB3aXRoIGFuIGFzc2lnbmVkIHNjcmlwdCBpcyBjYWxsZWQgYSBzbWFydCBhc3NldCwgYW5kIHRoZSBhc3NpZ25lZCBzY3JpcHQgaXMgY2FsbGVkIGFuIGFzc2V0IHNjcmlwdC4EC3NzampzZGRmZ3RyAt0CQW55IHVzZXIgY2FuIGNyZWF0ZSB0aGVpciBvd24gdG9rZW4gb24gdGhlIFdhdmVzIGJsb2NrY2hhaW4gYW5kIGFsc28gc2V0IHRoZSBydWxlcyBmb3IgaXRzIGNpcmN1bGF0aW9uIGJ5IGFzc2lnbmluZyBhIHNjcmlwdCB0byBpdC5Gb3IgZXhhbXBsZSwgZm9yIGluLWdhbWUgY3VycmVuY3ksIHlvdSBjYW4gYWxsb3cgb25seSB0cmFuc2FjdGlvbnMgYmV0d2VlbiBjaGFyYWN0ZXJzIHdpdGggY2VydGFpbiBwcm9wZXJ0aWVzLiBBIHRva2VuIHdpdGggYW4gYXNzaWduZWQgc2NyaXB0IGlzIGNhbGxlZCBhIHNtYXJ0IGFzc2V0LCBhbmQgdGhlIGFzc2lnbmVkIHNjcmlwdCBpcyBjYWxsZWQgYW4gYXNzZXQgc2NyaXB0LgQJc3RqanRyZmdkAvQFVHJhbnNhY3Rpb25zIGFuZCBCbG9ja3MuQmxvY2tjaGFpbiBkYXRhIGlzIHByZXNlbnRlZCBhcyB0cmFuc2FjdGlvbnMuIEEgdHJhbnNhY3Rpb24gaXMgYSByZWNvcmQgb2YgYW4gYWN0aW9uLCBzdWNoIGFzIHRva2VuIGlzc3VlLCB0b2tlbiB0cmFuc2Zlciwgc21hcnQgY29udHJhY3QgY3JlYXRpb24gb3IgaW52b2NhdGlvbiwgZXRjLlRyYW5zYWN0aW9ucyBhcmUgc3RhY2tlZCBpbnRvIGJsb2Nrcy4gQmVzaWRlcyB0cmFuc2FjdGlvbnMsIGV2ZXJ5IGJsb2NrIGNvbnRhaW5zIHRoZSBoYXNoIG9mIHRoZSBwcmV2aW91cyBibG9jayBhbmQgdGhlIGRpZ2l0YWwgc2lnbmF0dXJlIG9mIHRoZSBub2RlIHRoYXQgZ2VuZXJhdGVkIHRoZSBibG9jay4gVGhlIHByZXZpb3VzIGJsb2NrIGNvbnRhaW5zIHRoZSBkYXRhIGhhc2ggb2YgaXRzIHByZWNlZGluZyBibG9jaywgYW5kIHNvIG9uLiBBcyBhIHJlc3VsdCwgdGhlIHNpZ25hdHVyZSBvZiBlYWNoIGJsb2NrIGRlcGVuZHMgb24gdGhlIGRhdGEgb2YgYWxsIHRoZSBwcmVjZWRpbmcgYmxvY2tzLkluIG90aGVyIHdvcmRzLCB0aGUgYmxvY2tjaGFpbiBpcyBhIHNlcXVlbmNlIG9mIGJsb2NrcyBsaW5rZWQgYnkgY3J5cHRvZ3JhcGhpYyBoYXNoZXMuIEVhY2ggdHJhbnNhY3Rpb24gc3RheXMgaW50YWN0IGluZGVmaW5pdGVseS4gQW4gYXR0ZW1wdCB0byBjaGFuZ2UgYW55IGRhdGEgaW4gYSBibG9jayB3b3VsZCBpbnZhbGlkYXRlIHRoZSBibG9jayBhbmQgYWxsIHRoZSBsYXRlciBibG9ja3MuBApzdGpqcnJmZ2RyAr4FTm9kZS5BIG5vZGUgaXMgYSBjb21wdXRlciB0aGF0IHNlcnZlcyB0aGUgYmxvY2tjaGFpbiBuZXR3b3JrLiBUaGUgV2F2ZXMgbm9kZSBzdG9yZXMgYSBmdWxsIGNvcHkgb2YgdGhlIGJsb2NrY2hhaW4gZGF0YSwgdmFsaWRhdGVzIHRyYW5zYWN0aW9ucyBhbmQgYmxvY2tzLCB2ZXJpZmllcyBzaWduYXR1cmVzIGFuZCBoYXNoZXMsIGFuZCBzeW5jaHJvbml6ZXMgdGhlIGRhdGEgd2l0aCBvdGhlciBub2Rlcy5UaGUgV2F2ZXMgbmV0d29yayBjb25zaXN0cyBvZiBodW5kcmVkcyBvZiBub2RlcyBob3N0ZWQgYXJvdW5kIHRoZSB3b3JsZC4gVGhpcyBlbnN1cmVzIHRoYXQgdGhlIGJsb2NrY2hhaW4gZGF0YSBpcyBwcm90ZWN0ZWQgYWdhaW5zdCBjb3VudGVyZmVpdCBvciBkZWxldGlvbiwgbWFsaWNpb3VzIG9yIG9jY2FzaW9uYWwuIEV2ZXJ5b25lIGNhbiBsYXVuY2ggYSBub2RlIGFuZCBqb2luIHRoZSBuZXR3b3JrLiBUaGUgbm9kZSB0aGF0IGhvbGRzIGF0IGxlYXN0IDEsMDAwIFdBVkVTIChieSBvd25lcnNoaXAgb3IgbGVhc2UpLCBjYW4gcGFydGljaXBhdGUgaW4gYmxvY2sgZ2VuZXJhdGlvbiBhbmQgcmVjZWl2ZSBibG9jayBnZW5lcmF0aW9uIHJld2FyZHMgYW5kIHRyYW5zYWN0aW9uIGZlZXMuIFRoZSBtb3JlIHRva2VucyB0aGUgbm9kZSBob2xkcywgdGhlIGdyZWF0ZXIgaXMgaXRzIGNoYW5jZSB0byBhZGQgdGhlIG5leHQgYmxvY2suBAxzZGpqamZzZmdkZmcC9ANBY2NvdW50LldhdmVzIHVzZXMgYW4gYWNjb3VudC1iYXNlZCBtb2RlbC4gRWFjaCB0cmFuc2FjdGlvbiBpcyBjcmVhdGVkIG9uIGJlaGFsZiBvZiBhbiBhY2NvdW50LCBhbGwgYXNzZXRzIGFuZCBkYXRhIGFyZSBhc3NvY2lhdGVkIHdpdGggdGhlIGFjY291bnQuIEFuIGFjY291bnQgaGFzIGEgcGFpciBvZiBjcnlwdG9ncmFwaGljYWxseSBib3VuZCBrZXlzOiBhIHByaXZhdGUga2V5IHRoYXQgdGhlIGFjY291bnQgdXNlcyB0byBzaWduIHRyYW5zYWN0aW9ucywgYW5kIGEgcHVibGljIGtleSB0aGF0IGFsbG93cyBhbnlvbmUgdG8gdmVyaWZ5IHRoZSBzaWduYXR1cmUuIE1vcmUgYWJvdXQgYWNjb3VudC5UbyBjcmVhdGUgYW4gYWNjb3VudCwgc3RvcmUga2V5cywgYW5kIHNpZ24gdHJhbnNhY3Rpb25zLCB5b3UgY2FuIHVzZSBhcHBsaWNhdGlvbnMgZGV2ZWxvcGVkIGJ5IFdhdmVzIGNvbW11bml0eTogS2VlcGVyIFdhbGxldCwgV1ggTmV0d29yaywgV2F2ZXNGWCwgb3Igb3RoZXJzLgQJZXdydGpqZGZnAqUDZEFwcC5BIGRlY2VudHJhbGl6ZWQgYXBwbGljYXRpb24gKGRBcHApIGlzIGFuIGFwcGxpY2F0aW9uIGVtcG93ZXJlZCBieSBibG9ja2NoYWluLiBBIGRBcHAgY2FuIHN0b3JlIGRhdGEgb24gdGhlIGJsb2NrY2hhaW4gYW5kIGludm9rZSBhIHNjcmlwdCBhc3NpZ25lZCB0byBhbiBhY2NvdW50LiBUaGVyZSBpcywgdGhlcmVmb3JlLCBubyBjZW50cmFsaXplZCBkYXRhYmFzZSB0aGF0IG1pZ2h0IGJlIGhhY2tlZCBvciBjb21wcm9taXNlZC4gQW55IHVzZXIgY2FuIHZpZXcgdGhlIHNjcmlwdCBjb2RlIGFuZCB0aGUgcmVzdWx0IG9mIGl0cyBpbnZvY2F0aW9uLkxlYXJuIG1vcmUgYWJvdXQgV2F2ZXMgdGVjaG5vbG9neSBhbmQgZ2FpbiB0aGUgaGFuZHMtb24gc2tpbGxzIG5lZWRlZCB0byBidWlsZCBkQXBwcyB1c2luZyBXYXZlcyBsZXNzb25zLgQKc3RyX2pqMWRmZwI/VGhpcyB0ZXh0IGlzIG5lY2Vzc2FyeSB0byBnZXQgdGhlIHNjcmlwdCBvZiB0aGUgcmVxdWlyZWQgdm9sdW1lBApzdHJfamoyZmdkAoMBQW55IHVzZXIgY2FuIGNyZWF0ZSB0aGVpciBvd24gdG9rZW4gb24gdGhlIFdhdmVzIGJsb2NrY2hhaW4gYW5kIGFsc28gc2V0IHRoZSBydWxlcyBmb3IgaXRzIGNpcmN1bGF0aW9uIGJ5IGFzc2lnbmluZyBhIHNjcmlwdCB0byBpdC4ECnN0cl9qajNmZ2QCbkZvciBleGFtcGxlLCBmb3IgaW4tZ2FtZSBjdXJyZW5jeSwgeW91IGNhbiBhbGxvdyBvbmx5IHRyYW5zYWN0aW9ucyBiZXR3ZWVuIGNoYXJhY3RlcnMgd2l0aCBjZXJ0YWluIHByb3BlcnRpZXMuBA1zdHJyampldF90cnk0AmtBIHRva2VuIHdpdGggYW4gYXNzaWduZWQgc2NyaXB0IGlzIGNhbGxlZCBhIHNtYXJ0IGFzc2V0LCBhbmQgdGhlIGFzc2lnbmVkIHNjcmlwdCBpcyBjYWxsZWQgYW4gYXNzZXQgc2NyaXB0LgQJc3Nqa2pqanRyAt0CQW55IHVzZXIgY2FuIGNyZWF0ZSB0aGVpciBvd24gdG9rZW4gb24gdGhlIFdhdmVzIGJsb2NrY2hhaW4gYW5kIGFsc28gc2V0IHRoZSBydWxlcyBmb3IgaXRzIGNpcmN1bGF0aW9uIGJ5IGFzc2lnbmluZyBhIHNjcmlwdCB0byBpdC5Gb3IgZXhhbXBsZSwgZm9yIGluLWdhbWUgY3VycmVuY3ksIHlvdSBjYW4gYWxsb3cgb25seSB0cmFuc2FjdGlvbnMgYmV0d2VlbiBjaGFyYWN0ZXJzIHdpdGggY2VydGFpbiBwcm9wZXJ0aWVzLiBBIHRva2VuIHdpdGggYW4gYXNzaWduZWQgc2NyaXB0IGlzIGNhbGxlZCBhIHNtYXJ0IGFzc2V0LCBhbmQgdGhlIGFzc2lnbmVkIHNjcmlwdCBpcyBjYWxsZWQgYW4gYXNzZXQgc2NyaXB0LgQMc3Rqa2pqa2trbHRyAvQFVHJhbnNhY3Rpb25zIGFuZCBCbG9ja3MuQmxvY2tjaGFpbiBkYXRhIGlzIHByZXNlbnRlZCBhcyB0cmFuc2FjdGlvbnMuIEEgdHJhbnNhY3Rpb24gaXMgYSByZWNvcmQgb2YgYW4gYWN0aW9uLCBzdWNoIGFzIHRva2VuIGlzc3VlLCB0b2tlbiB0cmFuc2Zlciwgc21hcnQgY29udHJhY3QgY3JlYXRpb24gb3IgaW52b2NhdGlvbiwgZXRjLlRyYW5zYWN0aW9ucyBhcmUgc3RhY2tlZCBpbnRvIGJsb2Nrcy4gQmVzaWRlcyB0cmFuc2FjdGlvbnMsIGV2ZXJ5IGJsb2NrIGNvbnRhaW5zIHRoZSBoYXNoIG9mIHRoZSBwcmV2aW91cyBibG9jayBhbmQgdGhlIGRpZ2l0YWwgc2lnbmF0dXJlIG9mIHRoZSBub2RlIHRoYXQgZ2VuZXJhdGVkIHRoZSBibG9jay4gVGhlIHByZXZpb3VzIGJsb2NrIGNvbnRhaW5zIHRoZSBkYXRhIGhhc2ggb2YgaXRzIHByZWNlZGluZyBibG9jaywgYW5kIHNvIG9uLiBBcyBhIHJlc3VsdCwgdGhlIHNpZ25hdHVyZSBvZiBlYWNoIGJsb2NrIGRlcGVuZHMgb24gdGhlIGRhdGEgb2YgYWxsIHRoZSBwcmVjZWRpbmcgYmxvY2tzLkluIG90aGVyIHdvcmRzLCB0aGUgYmxvY2tjaGFpbiBpcyBhIHNlcXVlbmNlIG9mIGJsb2NrcyBsaW5rZWQgYnkgY3J5cHRvZ3JhcGhpYyBoYXNoZXMuIEVhY2ggdHJhbnNhY3Rpb24gc3RheXMgaW50YWN0IGluZGVmaW5pdGVseS4gQW4gYXR0ZW1wdCB0byBjaGFuZ2UgYW55IGRhdGEgaW4gYSBibG9jayB3b3VsZCBpbnZhbGlkYXRlIHRoZSBibG9jayBhbmQgYWxsIHRoZSBsYXRlciBibG9ja3MuBApzdHJqamprbHJyAr4FTm9kZS5BIG5vZGUgaXMgYSBjb21wdXRlciB0aGF0IHNlcnZlcyB0aGUgYmxvY2tjaGFpbiBuZXR3b3JrLiBUaGUgV2F2ZXMgbm9kZSBzdG9yZXMgYSBmdWxsIGNvcHkgb2YgdGhlIGJsb2NrY2hhaW4gZGF0YSwgdmFsaWRhdGVzIHRyYW5zYWN0aW9ucyBhbmQgYmxvY2tzLCB2ZXJpZmllcyBzaWduYXR1cmVzIGFuZCBoYXNoZXMsIGFuZCBzeW5jaHJvbml6ZXMgdGhlIGRhdGEgd2l0aCBvdGhlciBub2Rlcy5UaGUgV2F2ZXMgbmV0d29yayBjb25zaXN0cyBvZiBodW5kcmVkcyBvZiBub2RlcyBob3N0ZWQgYXJvdW5kIHRoZSB3b3JsZC4gVGhpcyBlbnN1cmVzIHRoYXQgdGhlIGJsb2NrY2hhaW4gZGF0YSBpcyBwcm90ZWN0ZWQgYWdhaW5zdCBjb3VudGVyZmVpdCBvciBkZWxldGlvbiwgbWFsaWNpb3VzIG9yIG9jY2FzaW9uYWwuIEV2ZXJ5b25lIGNhbiBsYXVuY2ggYSBub2RlIGFuZCBqb2luIHRoZSBuZXR3b3JrLiBUaGUgbm9kZSB0aGF0IGhvbGRzIGF0IGxlYXN0IDEsMDAwIFdBVkVTIChieSBvd25lcnNoaXAgb3IgbGVhc2UpLCBjYW4gcGFydGljaXBhdGUgaW4gYmxvY2sgZ2VuZXJhdGlvbiBhbmQgcmVjZWl2ZSBibG9jayBnZW5lcmF0aW9uIHJld2FyZHMgYW5kIHRyYW5zYWN0aW9uIGZlZXMuIFRoZSBtb3JlIHRva2VucyB0aGUgbm9kZSBob2xkcywgdGhlIGdyZWF0ZXIgaXMgaXRzIGNoYW5jZSB0byBhZGQgdGhlIG5leHQgYmxvY2suBAtzZGpqamZrbGprcwL0A0FjY291bnQuV2F2ZXMgdXNlcyBhbiBhY2NvdW50LWJhc2VkIG1vZGVsLiBFYWNoIHRyYW5zYWN0aW9uIGlzIGNyZWF0ZWQgb24gYmVoYWxmIG9mIGFuIGFjY291bnQsIGFsbCBhc3NldHMgYW5kIGRhdGEgYXJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgYWNjb3VudC4gQW4gYWNjb3VudCBoYXMgYSBwYWlyIG9mIGNyeXB0b2dyYXBoaWNhbGx5IGJvdW5kIGtleXM6IGEgcHJpdmF0ZSBrZXkgdGhhdCB0aGUgYWNjb3VudCB1c2VzIHRvIHNpZ24gdHJhbnNhY3Rpb25zLCBhbmQgYSBwdWJsaWMga2V5IHRoYXQgYWxsb3dzIGFueW9uZSB0byB2ZXJpZnkgdGhlIHNpZ25hdHVyZS4gTW9yZSBhYm91dCBhY2NvdW50LlRvIGNyZWF0ZSBhbiBhY2NvdW50LCBzdG9yZSBrZXlzLCBhbmQgc2lnbiB0cmFuc2FjdGlvbnMsIHlvdSBjYW4gdXNlIGFwcGxpY2F0aW9ucyBkZXZlbG9wZWQgYnkgV2F2ZXMgY29tbXVuaXR5OiBLZWVwZXIgV2FsbGV0LCBXWCBOZXR3b3JrLCBXYXZlc0ZYLCBvciBvdGhlcnMuBAtld2pqampya2xqdAKlA2RBcHAuQSBkZWNlbnRyYWxpemVkIGFwcGxpY2F0aW9uIChkQXBwKSBpcyBhbiBhcHBsaWNhdGlvbiBlbXBvd2VyZWQgYnkgYmxvY2tjaGFpbi4gQSBkQXBwIGNhbiBzdG9yZSBkYXRhIG9uIHRoZSBibG9ja2NoYWluIGFuZCBpbnZva2UgYSBzY3JpcHQgYXNzaWduZWQgdG8gYW4gYWNjb3VudC4gVGhlcmUgaXMsIHRoZXJlZm9yZSwgbm8gY2VudHJhbGl6ZWQgZGF0YWJhc2UgdGhhdCBtaWdodCBiZSBoYWNrZWQgb3IgY29tcHJvbWlzZWQuIEFueSB1c2VyIGNhbiB2aWV3IHRoZSBzY3JpcHQgY29kZSBhbmQgdGhlIHJlc3VsdCBvZiBpdHMgaW52b2NhdGlvbi5MZWFybiBtb3JlIGFib3V0IFdhdmVzIHRlY2hub2xvZ3kgYW5kIGdhaW4gdGhlIGhhbmRzLW9uIHNraWxscyBuZWVkZWQgdG8gYnVpbGQgZEFwcHMgdXNpbmcgV2F2ZXMgbGVzc29ucy4ECXN0cl8xa2prbAI/VGhpcyB0ZXh0IGlzIG5lY2Vzc2FyeSB0byBnZXQgdGhlIHNjcmlwdCBvZiB0aGUgcmVxdWlyZWQgdm9sdW1lBAdzdHJfZ2cyAoMBQW55IHVzZXIgY2FuIGNyZWF0ZSB0aGVpciBvd24gdG9rZW4gb24gdGhlIFdhdmVzIGJsb2NrY2hhaW4gYW5kIGFsc28gc2V0IHRoZSBydWxlcyBmb3IgaXRzIGNpcmN1bGF0aW9uIGJ5IGFzc2lnbmluZyBhIHNjcmlwdCB0byBpdC4EBnN0cl9mMwJuRm9yIGV4YW1wbGUsIGZvciBpbi1nYW1lIGN1cnJlbmN5LCB5b3UgY2FuIGFsbG93IG9ubHkgdHJhbnNhY3Rpb25zIGJldHdlZW4gY2hhcmFjdGVycyB3aXRoIGNlcnRhaW4gcHJvcGVydGllcy4EBnN0cl9yNAJrQSB0b2tlbiB3aXRoIGFuIGFzc2lnbmVkIHNjcmlwdCBpcyBjYWxsZWQgYSBzbWFydCBhc3NldCwgYW5kIHRoZSBhc3NpZ25lZCBzY3JpcHQgaXMgY2FsbGVkIGFuIGFzc2V0IHNjcmlwdC4GNPhe8w=="),
			utl.MinSetAssetScriptFeeWaves,
			utl.GetCurrentTimestampInMs(),
			utl.TestChainID,
			SetAssetScriptExpectedValuesNegative{
				WavesDiffBalance:  0,
				AssetDiffBalance:  0,
				ErrGoMsg:          errMsg,
				ErrScalaMsg:       errMsg,
				ErrBrdCstGoMsg:    errBrdCstMsg,
				ErrBrdCstScalaMsg: "",
			}),
	}
}

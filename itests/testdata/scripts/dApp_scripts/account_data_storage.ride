{-# STDLIB_VERSION 8 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

@Callable(i)
func checkStorageUntouchedByAddress(accountAddress: String) = {
  let address = addressFromStringValue(accountAddress)
   if isDataStorageUntouched(address) then {
     [
        BooleanEntry("test", true)
     ]
   } else {
     [
        BooleanEntry("test", false)
     ]
   }
}

@Callable(i)
func checkStorageUntouchedByAlias(accountAlias: String) = {
  let alias = Alias(accountAlias)
  if isDataStorageUntouched(alias) then {
    [
      BooleanEntry("test", true)
    ]
  } else {
    [
      BooleanEntry("test", false)
    ]
  }
}

@Callable(i)
func writeData(binValueBase16: ByteVector, binValueBase58: ByteVector, binValueBase64: ByteVector, boolValue: Boolean, intValue: Int, strValue: String) = {
  let accountAddress = toBase58String(i.caller.bytes)
    [
      BinaryEntry(accountAddress + "_binBase16", binValueBase16),
      BinaryEntry(accountAddress + "_binBase58", binValueBase58),
      BinaryEntry(accountAddress + "_binBase64", binValueBase64),
      BinaryEntry(accountAddress + "_binBoolean", toBytes(boolValue)),
      BinaryEntry(accountAddress + "_binInteger", toBytes(intValue)),
      BinaryEntry(accountAddress + "_binString", toBytes(strValue)),
      BooleanEntry(accountAddress + "_bool", boolValue),
      IntegerEntry(accountAddress + "_int", intValue),
      StringEntry(accountAddress + "_str", strValue)
    ]
}


@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)

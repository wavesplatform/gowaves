// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/node/peer_manager/peer_storage.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/wavesplatform/gowaves/pkg/node/peer_manager/storage"
)

// MockPeerStorage is a mock of PeerStorage interface.
type MockPeerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPeerStorageMockRecorder
}

// MockPeerStorageMockRecorder is the mock recorder for MockPeerStorage.
type MockPeerStorageMockRecorder struct {
	mock *MockPeerStorage
}

// NewMockPeerStorage creates a new mock instance.
func NewMockPeerStorage(ctrl *gomock.Controller) *MockPeerStorage {
	mock := &MockPeerStorage{ctrl: ctrl}
	mock.recorder = &MockPeerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerStorage) EXPECT() *MockPeerStorageMockRecorder {
	return m.recorder
}

// AddOrUpdateKnown mocks base method.
func (m *MockPeerStorage) AddOrUpdateKnown(known []storage.KnownPeer, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateKnown", known, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateKnown indicates an expected call of AddOrUpdateKnown.
func (mr *MockPeerStorageMockRecorder) AddOrUpdateKnown(known, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateKnown", reflect.TypeOf((*MockPeerStorage)(nil).AddOrUpdateKnown), known, now)
}

// AddSuspended mocks base method.
func (m *MockPeerStorage) AddSuspended(suspended []storage.SuspendedPeer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSuspended", suspended)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSuspended indicates an expected call of AddSuspended.
func (mr *MockPeerStorageMockRecorder) AddSuspended(suspended interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSuspended", reflect.TypeOf((*MockPeerStorage)(nil).AddSuspended), suspended)
}

// AddToBlackList mocks base method.
func (m *MockPeerStorage) AddToBlackList(blackListed []storage.BlackListedPeer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBlackList", blackListed)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBlackList indicates an expected call of AddToBlackList.
func (mr *MockPeerStorageMockRecorder) AddToBlackList(blackListed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBlackList", reflect.TypeOf((*MockPeerStorage)(nil).AddToBlackList), blackListed)
}

// BlackList mocks base method.
func (m *MockPeerStorage) BlackList(now time.Time) []storage.BlackListedPeer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlackList", now)
	ret0, _ := ret[0].([]storage.BlackListedPeer)
	return ret0
}

// BlackList indicates an expected call of BlackList.
func (mr *MockPeerStorageMockRecorder) BlackList(now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlackList", reflect.TypeOf((*MockPeerStorage)(nil).BlackList), now)
}

// DeleteBlackListedByIP mocks base method.
func (m *MockPeerStorage) DeleteBlackListedByIP(blackListed []storage.BlackListedPeer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlackListedByIP", blackListed)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlackListedByIP indicates an expected call of DeleteBlackListedByIP.
func (mr *MockPeerStorageMockRecorder) DeleteBlackListedByIP(blackListed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlackListedByIP", reflect.TypeOf((*MockPeerStorage)(nil).DeleteBlackListedByIP), blackListed)
}

// DeleteKnown mocks base method.
func (m *MockPeerStorage) DeleteKnown(known []storage.KnownPeer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKnown", known)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKnown indicates an expected call of DeleteKnown.
func (mr *MockPeerStorageMockRecorder) DeleteKnown(known interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnown", reflect.TypeOf((*MockPeerStorage)(nil).DeleteKnown), known)
}

// DeleteSuspendedByIP mocks base method.
func (m *MockPeerStorage) DeleteSuspendedByIP(suspended []storage.SuspendedPeer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSuspendedByIP", suspended)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSuspendedByIP indicates an expected call of DeleteSuspendedByIP.
func (mr *MockPeerStorageMockRecorder) DeleteSuspendedByIP(suspended interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSuspendedByIP", reflect.TypeOf((*MockPeerStorage)(nil).DeleteSuspendedByIP), suspended)
}

// DropBlackList mocks base method.
func (m *MockPeerStorage) DropBlackList() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropBlackList")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropBlackList indicates an expected call of DropBlackList.
func (mr *MockPeerStorageMockRecorder) DropBlackList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropBlackList", reflect.TypeOf((*MockPeerStorage)(nil).DropBlackList))
}

// DropKnown mocks base method.
func (m *MockPeerStorage) DropKnown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropKnown")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropKnown indicates an expected call of DropKnown.
func (mr *MockPeerStorageMockRecorder) DropKnown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropKnown", reflect.TypeOf((*MockPeerStorage)(nil).DropKnown))
}

// DropStorage mocks base method.
func (m *MockPeerStorage) DropStorage() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropStorage")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropStorage indicates an expected call of DropStorage.
func (mr *MockPeerStorageMockRecorder) DropStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropStorage", reflect.TypeOf((*MockPeerStorage)(nil).DropStorage))
}

// DropSuspended mocks base method.
func (m *MockPeerStorage) DropSuspended() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropSuspended")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropSuspended indicates an expected call of DropSuspended.
func (mr *MockPeerStorageMockRecorder) DropSuspended() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropSuspended", reflect.TypeOf((*MockPeerStorage)(nil).DropSuspended))
}

// IsBlackListedIP mocks base method.
func (m *MockPeerStorage) IsBlackListedIP(ip storage.IP, now time.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlackListedIP", ip, now)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBlackListedIP indicates an expected call of IsBlackListedIP.
func (mr *MockPeerStorageMockRecorder) IsBlackListedIP(ip, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlackListedIP", reflect.TypeOf((*MockPeerStorage)(nil).IsBlackListedIP), ip, now)
}

// IsBlackListedIPs mocks base method.
func (m *MockPeerStorage) IsBlackListedIPs(ips []storage.IP, now time.Time) []bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlackListedIPs", ips, now)
	ret0, _ := ret[0].([]bool)
	return ret0
}

// IsBlackListedIPs indicates an expected call of IsBlackListedIPs.
func (mr *MockPeerStorageMockRecorder) IsBlackListedIPs(ips, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlackListedIPs", reflect.TypeOf((*MockPeerStorage)(nil).IsBlackListedIPs), ips, now)
}

// IsSuspendedIP mocks base method.
func (m *MockPeerStorage) IsSuspendedIP(ip storage.IP, now time.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSuspendedIP", ip, now)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSuspendedIP indicates an expected call of IsSuspendedIP.
func (mr *MockPeerStorageMockRecorder) IsSuspendedIP(ip, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSuspendedIP", reflect.TypeOf((*MockPeerStorage)(nil).IsSuspendedIP), ip, now)
}

// IsSuspendedIPs mocks base method.
func (m *MockPeerStorage) IsSuspendedIPs(ips []storage.IP, now time.Time) []bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSuspendedIPs", ips, now)
	ret0, _ := ret[0].([]bool)
	return ret0
}

// IsSuspendedIPs indicates an expected call of IsSuspendedIPs.
func (mr *MockPeerStorageMockRecorder) IsSuspendedIPs(ips, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSuspendedIPs", reflect.TypeOf((*MockPeerStorage)(nil).IsSuspendedIPs), ips, now)
}

// Known mocks base method.
func (m *MockPeerStorage) Known(limit int) []storage.KnownPeer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Known", limit)
	ret0, _ := ret[0].([]storage.KnownPeer)
	return ret0
}

// Known indicates an expected call of Known.
func (mr *MockPeerStorageMockRecorder) Known(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Known", reflect.TypeOf((*MockPeerStorage)(nil).Known), limit)
}

// RefreshBlackList mocks base method.
func (m *MockPeerStorage) RefreshBlackList(now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshBlackList", now)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshBlackList indicates an expected call of RefreshBlackList.
func (mr *MockPeerStorageMockRecorder) RefreshBlackList(now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshBlackList", reflect.TypeOf((*MockPeerStorage)(nil).RefreshBlackList), now)
}

// RefreshSuspended mocks base method.
func (m *MockPeerStorage) RefreshSuspended(now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshSuspended", now)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshSuspended indicates an expected call of RefreshSuspended.
func (mr *MockPeerStorageMockRecorder) RefreshSuspended(now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshSuspended", reflect.TypeOf((*MockPeerStorage)(nil).RefreshSuspended), now)
}

// Suspended mocks base method.
func (m *MockPeerStorage) Suspended(now time.Time) []storage.SuspendedPeer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suspended", now)
	ret0, _ := ret[0].([]storage.SuspendedPeer)
	return ret0
}

// Suspended indicates an expected call of Suspended.
func (mr *MockPeerStorageMockRecorder) Suspended(now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suspended", reflect.TypeOf((*MockPeerStorage)(nil).Suspended), now)
}

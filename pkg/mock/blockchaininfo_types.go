// Code generated by mockery v2.50.1. DO NOT EDIT.

package mock

import (
	nats "github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"

	proto "github.com/wavesplatform/gowaves/pkg/proto"
)

// MockUpdatesPublisherInterface is an autogenerated mock type for the UpdatesPublisherInterface type
type MockUpdatesPublisherInterface struct {
	mock.Mock
}

type MockUpdatesPublisherInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdatesPublisherInterface) EXPECT() *MockUpdatesPublisherInterface_Expecter {
	return &MockUpdatesPublisherInterface_Expecter{mock: &_m.Mock}
}

// L2ContractAddress provides a mock function with no fields
func (_m *MockUpdatesPublisherInterface) L2ContractAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for L2ContractAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockUpdatesPublisherInterface_L2ContractAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'L2ContractAddress'
type MockUpdatesPublisherInterface_L2ContractAddress_Call struct {
	*mock.Call
}

// L2ContractAddress is a helper method to define mock.On call
func (_e *MockUpdatesPublisherInterface_Expecter) L2ContractAddress() *MockUpdatesPublisherInterface_L2ContractAddress_Call {
	return &MockUpdatesPublisherInterface_L2ContractAddress_Call{Call: _e.mock.On("L2ContractAddress")}
}

func (_c *MockUpdatesPublisherInterface_L2ContractAddress_Call) Run(run func()) *MockUpdatesPublisherInterface_L2ContractAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUpdatesPublisherInterface_L2ContractAddress_Call) Return(_a0 string) *MockUpdatesPublisherInterface_L2ContractAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUpdatesPublisherInterface_L2ContractAddress_Call) RunAndReturn(run func() string) *MockUpdatesPublisherInterface_L2ContractAddress_Call {
	_c.Call.Return(run)
	return _c
}

// PublishUpdates provides a mock function with given fields: updates, nc, scheme, l2ContractAddress
func (_m *MockUpdatesPublisherInterface) PublishUpdates(updates proto.BUpdatesInfo, nc *nats.Conn, scheme byte, l2ContractAddress string) error {
	ret := _m.Called(updates, nc, scheme, l2ContractAddress)

	if len(ret) == 0 {
		panic("no return value specified for PublishUpdates")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(proto.BUpdatesInfo, *nats.Conn, byte, string) error); ok {
		r0 = rf(updates, nc, scheme, l2ContractAddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUpdatesPublisherInterface_PublishUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishUpdates'
type MockUpdatesPublisherInterface_PublishUpdates_Call struct {
	*mock.Call
}

// PublishUpdates is a helper method to define mock.On call
//   - updates proto.BUpdatesInfo
//   - nc *nats.Conn
//   - scheme byte
//   - l2ContractAddress string
func (_e *MockUpdatesPublisherInterface_Expecter) PublishUpdates(updates interface{}, nc interface{}, scheme interface{}, l2ContractAddress interface{}) *MockUpdatesPublisherInterface_PublishUpdates_Call {
	return &MockUpdatesPublisherInterface_PublishUpdates_Call{Call: _e.mock.On("PublishUpdates", updates, nc, scheme, l2ContractAddress)}
}

func (_c *MockUpdatesPublisherInterface_PublishUpdates_Call) Run(run func(updates proto.BUpdatesInfo, nc *nats.Conn, scheme byte, l2ContractAddress string)) *MockUpdatesPublisherInterface_PublishUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(proto.BUpdatesInfo), args[1].(*nats.Conn), args[2].(byte), args[3].(string))
	})
	return _c
}

func (_c *MockUpdatesPublisherInterface_PublishUpdates_Call) Return(_a0 error) *MockUpdatesPublisherInterface_PublishUpdates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUpdatesPublisherInterface_PublishUpdates_Call) RunAndReturn(run func(proto.BUpdatesInfo, *nats.Conn, byte, string) error) *MockUpdatesPublisherInterface_PublishUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdatesPublisherInterface creates a new instance of MockUpdatesPublisherInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdatesPublisherInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdatesPublisherInterface {
	mock := &MockUpdatesPublisherInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

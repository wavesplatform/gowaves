// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/state/api.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	crypto "github.com/wavesplatform/gowaves/pkg/crypto"
	proto "github.com/wavesplatform/gowaves/pkg/proto"
	settings "github.com/wavesplatform/gowaves/pkg/settings"
	state "github.com/wavesplatform/gowaves/pkg/state"
	big "math/big"
	reflect "reflect"
)

// MockTransactionIterator is a mock of TransactionIterator interface
type MockTransactionIterator struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionIteratorMockRecorder
}

// MockTransactionIteratorMockRecorder is the mock recorder for MockTransactionIterator
type MockTransactionIteratorMockRecorder struct {
	mock *MockTransactionIterator
}

// NewMockTransactionIterator creates a new mock instance
func NewMockTransactionIterator(ctrl *gomock.Controller) *MockTransactionIterator {
	mock := &MockTransactionIterator{ctrl: ctrl}
	mock.recorder = &MockTransactionIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionIterator) EXPECT() *MockTransactionIteratorMockRecorder {
	return m.recorder
}

// Transaction mocks base method
func (m *MockTransactionIterator) Transaction() (proto.Transaction, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction")
	ret0, _ := ret[0].(proto.Transaction)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Transaction indicates an expected call of Transaction
func (mr *MockTransactionIteratorMockRecorder) Transaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockTransactionIterator)(nil).Transaction))
}

// Next mocks base method
func (m *MockTransactionIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockTransactionIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockTransactionIterator)(nil).Next))
}

// Release mocks base method
func (m *MockTransactionIterator) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release
func (mr *MockTransactionIteratorMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockTransactionIterator)(nil).Release))
}

// Error mocks base method
func (m *MockTransactionIterator) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockTransactionIteratorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockTransactionIterator)(nil).Error))
}

// MockStateInfo is a mock of StateInfo interface
type MockStateInfo struct {
	ctrl     *gomock.Controller
	recorder *MockStateInfoMockRecorder
}

// MockStateInfoMockRecorder is the mock recorder for MockStateInfo
type MockStateInfoMockRecorder struct {
	mock *MockStateInfo
}

// NewMockStateInfo creates a new mock instance
func NewMockStateInfo(ctrl *gomock.Controller) *MockStateInfo {
	mock := &MockStateInfo{ctrl: ctrl}
	mock.recorder = &MockStateInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateInfo) EXPECT() *MockStateInfoMockRecorder {
	return m.recorder
}

// TopBlock mocks base method
func (m *MockStateInfo) TopBlock() *proto.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopBlock")
	ret0, _ := ret[0].(*proto.Block)
	return ret0
}

// TopBlock indicates an expected call of TopBlock
func (mr *MockStateInfoMockRecorder) TopBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopBlock", reflect.TypeOf((*MockStateInfo)(nil).TopBlock))
}

// Block mocks base method
func (m *MockStateInfo) Block(blockID proto.BlockID) (*proto.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", blockID)
	ret0, _ := ret[0].(*proto.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block
func (mr *MockStateInfoMockRecorder) Block(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockStateInfo)(nil).Block), blockID)
}

// BlockByHeight mocks base method
func (m *MockStateInfo) BlockByHeight(height proto.Height) (*proto.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByHeight", height)
	ret0, _ := ret[0].(*proto.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByHeight indicates an expected call of BlockByHeight
func (mr *MockStateInfoMockRecorder) BlockByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByHeight", reflect.TypeOf((*MockStateInfo)(nil).BlockByHeight), height)
}

// Header mocks base method
func (m *MockStateInfo) Header(blockID proto.BlockID) (*proto.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header", blockID)
	ret0, _ := ret[0].(*proto.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockStateInfoMockRecorder) Header(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockStateInfo)(nil).Header), blockID)
}

// HeaderByHeight mocks base method
func (m *MockStateInfo) HeaderByHeight(height proto.Height) (*proto.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByHeight", height)
	ret0, _ := ret[0].(*proto.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByHeight indicates an expected call of HeaderByHeight
func (mr *MockStateInfoMockRecorder) HeaderByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByHeight", reflect.TypeOf((*MockStateInfo)(nil).HeaderByHeight), height)
}

// Height mocks base method
func (m *MockStateInfo) Height() (proto.Height, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(proto.Height)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Height indicates an expected call of Height
func (mr *MockStateInfoMockRecorder) Height() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockStateInfo)(nil).Height))
}

// BlockIDToHeight mocks base method
func (m *MockStateInfo) BlockIDToHeight(blockID proto.BlockID) (proto.Height, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockIDToHeight", blockID)
	ret0, _ := ret[0].(proto.Height)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockIDToHeight indicates an expected call of BlockIDToHeight
func (mr *MockStateInfoMockRecorder) BlockIDToHeight(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockIDToHeight", reflect.TypeOf((*MockStateInfo)(nil).BlockIDToHeight), blockID)
}

// HeightToBlockID mocks base method
func (m *MockStateInfo) HeightToBlockID(height proto.Height) (proto.BlockID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeightToBlockID", height)
	ret0, _ := ret[0].(proto.BlockID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeightToBlockID indicates an expected call of HeightToBlockID
func (mr *MockStateInfoMockRecorder) HeightToBlockID(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeightToBlockID", reflect.TypeOf((*MockStateInfo)(nil).HeightToBlockID), height)
}

// FullWavesBalance mocks base method
func (m *MockStateInfo) FullWavesBalance(account proto.Recipient) (*proto.FullWavesBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullWavesBalance", account)
	ret0, _ := ret[0].(*proto.FullWavesBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FullWavesBalance indicates an expected call of FullWavesBalance
func (mr *MockStateInfoMockRecorder) FullWavesBalance(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullWavesBalance", reflect.TypeOf((*MockStateInfo)(nil).FullWavesBalance), account)
}

// EffectiveBalanceStable mocks base method
func (m *MockStateInfo) EffectiveBalanceStable(account proto.Recipient, startHeight, endHeight proto.Height) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EffectiveBalanceStable", account, startHeight, endHeight)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EffectiveBalanceStable indicates an expected call of EffectiveBalanceStable
func (mr *MockStateInfoMockRecorder) EffectiveBalanceStable(account, startHeight, endHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EffectiveBalanceStable", reflect.TypeOf((*MockStateInfo)(nil).EffectiveBalanceStable), account, startHeight, endHeight)
}

// AccountBalance mocks base method
func (m *MockStateInfo) AccountBalance(account proto.Recipient, asset []byte) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountBalance", account, asset)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountBalance indicates an expected call of AccountBalance
func (mr *MockStateInfoMockRecorder) AccountBalance(account, asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountBalance", reflect.TypeOf((*MockStateInfo)(nil).AccountBalance), account, asset)
}

// WavesAddressesNumber mocks base method
func (m *MockStateInfo) WavesAddressesNumber() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WavesAddressesNumber")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WavesAddressesNumber indicates an expected call of WavesAddressesNumber
func (mr *MockStateInfoMockRecorder) WavesAddressesNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WavesAddressesNumber", reflect.TypeOf((*MockStateInfo)(nil).WavesAddressesNumber))
}

// ScoreAtHeight mocks base method
func (m *MockStateInfo) ScoreAtHeight(height proto.Height) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScoreAtHeight", height)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScoreAtHeight indicates an expected call of ScoreAtHeight
func (mr *MockStateInfoMockRecorder) ScoreAtHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScoreAtHeight", reflect.TypeOf((*MockStateInfo)(nil).ScoreAtHeight), height)
}

// CurrentScore mocks base method
func (m *MockStateInfo) CurrentScore() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentScore")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentScore indicates an expected call of CurrentScore
func (mr *MockStateInfoMockRecorder) CurrentScore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentScore", reflect.TypeOf((*MockStateInfo)(nil).CurrentScore))
}

// BlockchainSettings mocks base method
func (m *MockStateInfo) BlockchainSettings() (*settings.BlockchainSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockchainSettings")
	ret0, _ := ret[0].(*settings.BlockchainSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockchainSettings indicates an expected call of BlockchainSettings
func (mr *MockStateInfoMockRecorder) BlockchainSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockchainSettings", reflect.TypeOf((*MockStateInfo)(nil).BlockchainSettings))
}

// Peers mocks base method
func (m *MockStateInfo) Peers() ([]proto.TCPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peers")
	ret0, _ := ret[0].([]proto.TCPAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Peers indicates an expected call of Peers
func (mr *MockStateInfoMockRecorder) Peers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peers", reflect.TypeOf((*MockStateInfo)(nil).Peers))
}

// VotesNum mocks base method
func (m *MockStateInfo) VotesNum(featureID int16) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VotesNum", featureID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VotesNum indicates an expected call of VotesNum
func (mr *MockStateInfoMockRecorder) VotesNum(featureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VotesNum", reflect.TypeOf((*MockStateInfo)(nil).VotesNum), featureID)
}

// VotesNumAtHeight mocks base method
func (m *MockStateInfo) VotesNumAtHeight(featureID int16, height proto.Height) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VotesNumAtHeight", featureID, height)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VotesNumAtHeight indicates an expected call of VotesNumAtHeight
func (mr *MockStateInfoMockRecorder) VotesNumAtHeight(featureID, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VotesNumAtHeight", reflect.TypeOf((*MockStateInfo)(nil).VotesNumAtHeight), featureID, height)
}

// IsActivated mocks base method
func (m *MockStateInfo) IsActivated(featureID int16) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActivated", featureID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsActivated indicates an expected call of IsActivated
func (mr *MockStateInfoMockRecorder) IsActivated(featureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActivated", reflect.TypeOf((*MockStateInfo)(nil).IsActivated), featureID)
}

// IsActiveAtHeight mocks base method
func (m *MockStateInfo) IsActiveAtHeight(featureID int16, height proto.Height) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActiveAtHeight", featureID, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsActiveAtHeight indicates an expected call of IsActiveAtHeight
func (mr *MockStateInfoMockRecorder) IsActiveAtHeight(featureID, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActiveAtHeight", reflect.TypeOf((*MockStateInfo)(nil).IsActiveAtHeight), featureID, height)
}

// ActivationHeight mocks base method
func (m *MockStateInfo) ActivationHeight(featureID int16) (proto.Height, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivationHeight", featureID)
	ret0, _ := ret[0].(proto.Height)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivationHeight indicates an expected call of ActivationHeight
func (mr *MockStateInfoMockRecorder) ActivationHeight(featureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivationHeight", reflect.TypeOf((*MockStateInfo)(nil).ActivationHeight), featureID)
}

// IsApproved mocks base method
func (m *MockStateInfo) IsApproved(featureID int16) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsApproved", featureID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsApproved indicates an expected call of IsApproved
func (mr *MockStateInfoMockRecorder) IsApproved(featureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsApproved", reflect.TypeOf((*MockStateInfo)(nil).IsApproved), featureID)
}

// IsApprovedAtHeight mocks base method
func (m *MockStateInfo) IsApprovedAtHeight(featureID int16, height proto.Height) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsApprovedAtHeight", featureID, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsApprovedAtHeight indicates an expected call of IsApprovedAtHeight
func (mr *MockStateInfoMockRecorder) IsApprovedAtHeight(featureID, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsApprovedAtHeight", reflect.TypeOf((*MockStateInfo)(nil).IsApprovedAtHeight), featureID, height)
}

// ApprovalHeight mocks base method
func (m *MockStateInfo) ApprovalHeight(featureID int16) (proto.Height, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovalHeight", featureID)
	ret0, _ := ret[0].(proto.Height)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovalHeight indicates an expected call of ApprovalHeight
func (mr *MockStateInfoMockRecorder) ApprovalHeight(featureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovalHeight", reflect.TypeOf((*MockStateInfo)(nil).ApprovalHeight), featureID)
}

// AllFeatures mocks base method
func (m *MockStateInfo) AllFeatures() ([]int16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllFeatures")
	ret0, _ := ret[0].([]int16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllFeatures indicates an expected call of AllFeatures
func (mr *MockStateInfoMockRecorder) AllFeatures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllFeatures", reflect.TypeOf((*MockStateInfo)(nil).AllFeatures))
}

// AddrByAlias mocks base method
func (m *MockStateInfo) AddrByAlias(alias proto.Alias) (proto.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddrByAlias", alias)
	ret0, _ := ret[0].(proto.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddrByAlias indicates an expected call of AddrByAlias
func (mr *MockStateInfoMockRecorder) AddrByAlias(alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddrByAlias", reflect.TypeOf((*MockStateInfo)(nil).AddrByAlias), alias)
}

// RetrieveEntries mocks base method
func (m *MockStateInfo) RetrieveEntries(account proto.Recipient) ([]proto.DataEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveEntries", account)
	ret0, _ := ret[0].([]proto.DataEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveEntries indicates an expected call of RetrieveEntries
func (mr *MockStateInfoMockRecorder) RetrieveEntries(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveEntries", reflect.TypeOf((*MockStateInfo)(nil).RetrieveEntries), account)
}

// RetrieveEntry mocks base method
func (m *MockStateInfo) RetrieveEntry(account proto.Recipient, key string) (proto.DataEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveEntry", account, key)
	ret0, _ := ret[0].(proto.DataEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveEntry indicates an expected call of RetrieveEntry
func (mr *MockStateInfoMockRecorder) RetrieveEntry(account, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveEntry", reflect.TypeOf((*MockStateInfo)(nil).RetrieveEntry), account, key)
}

// RetrieveIntegerEntry mocks base method
func (m *MockStateInfo) RetrieveIntegerEntry(account proto.Recipient, key string) (*proto.IntegerDataEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveIntegerEntry", account, key)
	ret0, _ := ret[0].(*proto.IntegerDataEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveIntegerEntry indicates an expected call of RetrieveIntegerEntry
func (mr *MockStateInfoMockRecorder) RetrieveIntegerEntry(account, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveIntegerEntry", reflect.TypeOf((*MockStateInfo)(nil).RetrieveIntegerEntry), account, key)
}

// RetrieveBooleanEntry mocks base method
func (m *MockStateInfo) RetrieveBooleanEntry(account proto.Recipient, key string) (*proto.BooleanDataEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveBooleanEntry", account, key)
	ret0, _ := ret[0].(*proto.BooleanDataEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveBooleanEntry indicates an expected call of RetrieveBooleanEntry
func (mr *MockStateInfoMockRecorder) RetrieveBooleanEntry(account, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveBooleanEntry", reflect.TypeOf((*MockStateInfo)(nil).RetrieveBooleanEntry), account, key)
}

// RetrieveStringEntry mocks base method
func (m *MockStateInfo) RetrieveStringEntry(account proto.Recipient, key string) (*proto.StringDataEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveStringEntry", account, key)
	ret0, _ := ret[0].(*proto.StringDataEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveStringEntry indicates an expected call of RetrieveStringEntry
func (mr *MockStateInfoMockRecorder) RetrieveStringEntry(account, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveStringEntry", reflect.TypeOf((*MockStateInfo)(nil).RetrieveStringEntry), account, key)
}

// RetrieveBinaryEntry mocks base method
func (m *MockStateInfo) RetrieveBinaryEntry(account proto.Recipient, key string) (*proto.BinaryDataEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveBinaryEntry", account, key)
	ret0, _ := ret[0].(*proto.BinaryDataEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveBinaryEntry indicates an expected call of RetrieveBinaryEntry
func (mr *MockStateInfoMockRecorder) RetrieveBinaryEntry(account, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveBinaryEntry", reflect.TypeOf((*MockStateInfo)(nil).RetrieveBinaryEntry), account, key)
}

// TransactionByID mocks base method
func (m *MockStateInfo) TransactionByID(id []byte) (proto.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionByID", id)
	ret0, _ := ret[0].(proto.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionByID indicates an expected call of TransactionByID
func (mr *MockStateInfoMockRecorder) TransactionByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionByID", reflect.TypeOf((*MockStateInfo)(nil).TransactionByID), id)
}

// TransactionByIDWithStatus mocks base method
func (m *MockStateInfo) TransactionByIDWithStatus(id []byte) (proto.Transaction, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionByIDWithStatus", id)
	ret0, _ := ret[0].(proto.Transaction)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TransactionByIDWithStatus indicates an expected call of TransactionByIDWithStatus
func (mr *MockStateInfoMockRecorder) TransactionByIDWithStatus(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionByIDWithStatus", reflect.TypeOf((*MockStateInfo)(nil).TransactionByIDWithStatus), id)
}

// TransactionHeightByID mocks base method
func (m *MockStateInfo) TransactionHeightByID(id []byte) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionHeightByID", id)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionHeightByID indicates an expected call of TransactionHeightByID
func (mr *MockStateInfoMockRecorder) TransactionHeightByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionHeightByID", reflect.TypeOf((*MockStateInfo)(nil).TransactionHeightByID), id)
}

// NewAddrTransactionsIterator mocks base method
func (m *MockStateInfo) NewAddrTransactionsIterator(addr proto.Address) (state.TransactionIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAddrTransactionsIterator", addr)
	ret0, _ := ret[0].(state.TransactionIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAddrTransactionsIterator indicates an expected call of NewAddrTransactionsIterator
func (mr *MockStateInfoMockRecorder) NewAddrTransactionsIterator(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAddrTransactionsIterator", reflect.TypeOf((*MockStateInfo)(nil).NewAddrTransactionsIterator), addr)
}

// AssetIsSponsored mocks base method
func (m *MockStateInfo) AssetIsSponsored(assetID crypto.Digest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssetIsSponsored", assetID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssetIsSponsored indicates an expected call of AssetIsSponsored
func (mr *MockStateInfoMockRecorder) AssetIsSponsored(assetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssetIsSponsored", reflect.TypeOf((*MockStateInfo)(nil).AssetIsSponsored), assetID)
}

// AssetInfo mocks base method
func (m *MockStateInfo) AssetInfo(assetID crypto.Digest) (*proto.AssetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssetInfo", assetID)
	ret0, _ := ret[0].(*proto.AssetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssetInfo indicates an expected call of AssetInfo
func (mr *MockStateInfoMockRecorder) AssetInfo(assetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssetInfo", reflect.TypeOf((*MockStateInfo)(nil).AssetInfo), assetID)
}

// FullAssetInfo mocks base method
func (m *MockStateInfo) FullAssetInfo(assetID crypto.Digest) (*proto.FullAssetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullAssetInfo", assetID)
	ret0, _ := ret[0].(*proto.FullAssetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FullAssetInfo indicates an expected call of FullAssetInfo
func (mr *MockStateInfoMockRecorder) FullAssetInfo(assetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullAssetInfo", reflect.TypeOf((*MockStateInfo)(nil).FullAssetInfo), assetID)
}

// ScriptInfoByAccount mocks base method
func (m *MockStateInfo) ScriptInfoByAccount(account proto.Recipient) (*proto.ScriptInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScriptInfoByAccount", account)
	ret0, _ := ret[0].(*proto.ScriptInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScriptInfoByAccount indicates an expected call of ScriptInfoByAccount
func (mr *MockStateInfoMockRecorder) ScriptInfoByAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptInfoByAccount", reflect.TypeOf((*MockStateInfo)(nil).ScriptInfoByAccount), account)
}

// ScriptInfoByAsset mocks base method
func (m *MockStateInfo) ScriptInfoByAsset(assetID crypto.Digest) (*proto.ScriptInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScriptInfoByAsset", assetID)
	ret0, _ := ret[0].(*proto.ScriptInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScriptInfoByAsset indicates an expected call of ScriptInfoByAsset
func (mr *MockStateInfoMockRecorder) ScriptInfoByAsset(assetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptInfoByAsset", reflect.TypeOf((*MockStateInfo)(nil).ScriptInfoByAsset), assetID)
}

// IsActiveLeasing mocks base method
func (m *MockStateInfo) IsActiveLeasing(leaseID crypto.Digest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActiveLeasing", leaseID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsActiveLeasing indicates an expected call of IsActiveLeasing
func (mr *MockStateInfoMockRecorder) IsActiveLeasing(leaseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActiveLeasing", reflect.TypeOf((*MockStateInfo)(nil).IsActiveLeasing), leaseID)
}

// InvokeResultByID mocks base method
func (m *MockStateInfo) InvokeResultByID(invokeID crypto.Digest) (*proto.ScriptResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeResultByID", invokeID)
	ret0, _ := ret[0].(*proto.ScriptResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeResultByID indicates an expected call of InvokeResultByID
func (mr *MockStateInfoMockRecorder) InvokeResultByID(invokeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeResultByID", reflect.TypeOf((*MockStateInfo)(nil).InvokeResultByID), invokeID)
}

// ProvidesExtendedApi mocks base method
func (m *MockStateInfo) ProvidesExtendedApi() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvidesExtendedApi")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvidesExtendedApi indicates an expected call of ProvidesExtendedApi
func (mr *MockStateInfoMockRecorder) ProvidesExtendedApi() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvidesExtendedApi", reflect.TypeOf((*MockStateInfo)(nil).ProvidesExtendedApi))
}

// ProvidesStateHashes mocks base method
func (m *MockStateInfo) ProvidesStateHashes() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvidesStateHashes")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvidesStateHashes indicates an expected call of ProvidesStateHashes
func (mr *MockStateInfoMockRecorder) ProvidesStateHashes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvidesStateHashes", reflect.TypeOf((*MockStateInfo)(nil).ProvidesStateHashes))
}

// StateHashAtHeight mocks base method
func (m *MockStateInfo) StateHashAtHeight(height uint64) (*proto.StateHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateHashAtHeight", height)
	ret0, _ := ret[0].(*proto.StateHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateHashAtHeight indicates an expected call of StateHashAtHeight
func (mr *MockStateInfoMockRecorder) StateHashAtHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateHashAtHeight", reflect.TypeOf((*MockStateInfo)(nil).StateHashAtHeight), height)
}

// MapR mocks base method
func (m *MockStateInfo) MapR(arg0 func(state.StateInfo) (interface{}, error)) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapR", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapR indicates an expected call of MapR
func (mr *MockStateInfoMockRecorder) MapR(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapR", reflect.TypeOf((*MockStateInfo)(nil).MapR), arg0)
}

// HitSourceAtHeight mocks base method
func (m *MockStateInfo) HitSourceAtHeight(height proto.Height) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HitSourceAtHeight", height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HitSourceAtHeight indicates an expected call of HitSourceAtHeight
func (mr *MockStateInfoMockRecorder) HitSourceAtHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HitSourceAtHeight", reflect.TypeOf((*MockStateInfo)(nil).HitSourceAtHeight), height)
}

// BlockVRF mocks base method
func (m *MockStateInfo) BlockVRF(blockHeader *proto.BlockHeader, height proto.Height) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockVRF", blockHeader, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockVRF indicates an expected call of BlockVRF
func (mr *MockStateInfoMockRecorder) BlockVRF(blockHeader, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockVRF", reflect.TypeOf((*MockStateInfo)(nil).BlockVRF), blockHeader, height)
}

// ShouldPersistAddressTransactions mocks base method
func (m *MockStateInfo) ShouldPersistAddressTransactions() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldPersistAddressTransactions")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldPersistAddressTransactions indicates an expected call of ShouldPersistAddressTransactions
func (mr *MockStateInfoMockRecorder) ShouldPersistAddressTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldPersistAddressTransactions", reflect.TypeOf((*MockStateInfo)(nil).ShouldPersistAddressTransactions))
}

// MockStateModifier is a mock of StateModifier interface
type MockStateModifier struct {
	ctrl     *gomock.Controller
	recorder *MockStateModifierMockRecorder
}

// MockStateModifierMockRecorder is the mock recorder for MockStateModifier
type MockStateModifierMockRecorder struct {
	mock *MockStateModifier
}

// NewMockStateModifier creates a new mock instance
func NewMockStateModifier(ctrl *gomock.Controller) *MockStateModifier {
	mock := &MockStateModifier{ctrl: ctrl}
	mock.recorder = &MockStateModifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateModifier) EXPECT() *MockStateModifierMockRecorder {
	return m.recorder
}

// AddBlock mocks base method
func (m *MockStateModifier) AddBlock(block []byte) (*proto.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlock", block)
	ret0, _ := ret[0].(*proto.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBlock indicates an expected call of AddBlock
func (mr *MockStateModifierMockRecorder) AddBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlock", reflect.TypeOf((*MockStateModifier)(nil).AddBlock), block)
}

// AddDeserializedBlock mocks base method
func (m *MockStateModifier) AddDeserializedBlock(block *proto.Block) (*proto.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeserializedBlock", block)
	ret0, _ := ret[0].(*proto.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDeserializedBlock indicates an expected call of AddDeserializedBlock
func (mr *MockStateModifierMockRecorder) AddDeserializedBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeserializedBlock", reflect.TypeOf((*MockStateModifier)(nil).AddDeserializedBlock), block)
}

// AddNewBlocks mocks base method
func (m *MockStateModifier) AddNewBlocks(blocks [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewBlocks", blocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewBlocks indicates an expected call of AddNewBlocks
func (mr *MockStateModifierMockRecorder) AddNewBlocks(blocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewBlocks", reflect.TypeOf((*MockStateModifier)(nil).AddNewBlocks), blocks)
}

// AddNewDeserializedBlocks mocks base method
func (m *MockStateModifier) AddNewDeserializedBlocks(blocks []*proto.Block) (*proto.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewDeserializedBlocks", blocks)
	ret0, _ := ret[0].(*proto.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewDeserializedBlocks indicates an expected call of AddNewDeserializedBlocks
func (mr *MockStateModifierMockRecorder) AddNewDeserializedBlocks(blocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewDeserializedBlocks", reflect.TypeOf((*MockStateModifier)(nil).AddNewDeserializedBlocks), blocks)
}

// AddOldBlocks mocks base method
func (m *MockStateModifier) AddOldBlocks(blocks [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOldBlocks", blocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOldBlocks indicates an expected call of AddOldBlocks
func (mr *MockStateModifierMockRecorder) AddOldBlocks(blocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOldBlocks", reflect.TypeOf((*MockStateModifier)(nil).AddOldBlocks), blocks)
}

// AddOldDeserializedBlocks mocks base method
func (m *MockStateModifier) AddOldDeserializedBlocks(blocks []*proto.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOldDeserializedBlocks", blocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOldDeserializedBlocks indicates an expected call of AddOldDeserializedBlocks
func (mr *MockStateModifierMockRecorder) AddOldDeserializedBlocks(blocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOldDeserializedBlocks", reflect.TypeOf((*MockStateModifier)(nil).AddOldDeserializedBlocks), blocks)
}

// RollbackToHeight mocks base method
func (m *MockStateModifier) RollbackToHeight(height proto.Height) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackToHeight", height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackToHeight indicates an expected call of RollbackToHeight
func (mr *MockStateModifierMockRecorder) RollbackToHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackToHeight", reflect.TypeOf((*MockStateModifier)(nil).RollbackToHeight), height)
}

// RollbackTo mocks base method
func (m *MockStateModifier) RollbackTo(removalEdge proto.BlockID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTo", removalEdge)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTo indicates an expected call of RollbackTo
func (mr *MockStateModifierMockRecorder) RollbackTo(removalEdge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTo", reflect.TypeOf((*MockStateModifier)(nil).RollbackTo), removalEdge)
}

// ValidateNextTx mocks base method
func (m *MockStateModifier) ValidateNextTx(tx proto.Transaction, currentTimestamp, parentTimestamp uint64, blockVersion proto.BlockVersion, checkScripts bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateNextTx", tx, currentTimestamp, parentTimestamp, blockVersion, checkScripts)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateNextTx indicates an expected call of ValidateNextTx
func (mr *MockStateModifierMockRecorder) ValidateNextTx(tx, currentTimestamp, parentTimestamp, blockVersion, checkScripts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateNextTx", reflect.TypeOf((*MockStateModifier)(nil).ValidateNextTx), tx, currentTimestamp, parentTimestamp, blockVersion, checkScripts)
}

// ResetValidationList mocks base method
func (m *MockStateModifier) ResetValidationList() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetValidationList")
}

// ResetValidationList indicates an expected call of ResetValidationList
func (mr *MockStateModifierMockRecorder) ResetValidationList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetValidationList", reflect.TypeOf((*MockStateModifier)(nil).ResetValidationList))
}

// TxValidation mocks base method
func (m *MockStateModifier) TxValidation(arg0 func(state.TxValidation) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxValidation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TxValidation indicates an expected call of TxValidation
func (mr *MockStateModifierMockRecorder) TxValidation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxValidation", reflect.TypeOf((*MockStateModifier)(nil).TxValidation), arg0)
}

// Map mocks base method
func (m *MockStateModifier) Map(arg0 func(state.NonThreadSafeState) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Map indicates an expected call of Map
func (mr *MockStateModifierMockRecorder) Map(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockStateModifier)(nil).Map), arg0)
}

// SavePeers mocks base method
func (m *MockStateModifier) SavePeers(arg0 []proto.TCPAddr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePeers", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePeers indicates an expected call of SavePeers
func (mr *MockStateModifierMockRecorder) SavePeers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePeers", reflect.TypeOf((*MockStateModifier)(nil).SavePeers), arg0)
}

// StartProvidingExtendedApi mocks base method
func (m *MockStateModifier) StartProvidingExtendedApi() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProvidingExtendedApi")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartProvidingExtendedApi indicates an expected call of StartProvidingExtendedApi
func (mr *MockStateModifierMockRecorder) StartProvidingExtendedApi() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProvidingExtendedApi", reflect.TypeOf((*MockStateModifier)(nil).StartProvidingExtendedApi))
}

// PersistAddressTransactions mocks base method
func (m *MockStateModifier) PersistAddressTransactions() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistAddressTransactions")
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistAddressTransactions indicates an expected call of PersistAddressTransactions
func (mr *MockStateModifierMockRecorder) PersistAddressTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistAddressTransactions", reflect.TypeOf((*MockStateModifier)(nil).PersistAddressTransactions))
}

// Close mocks base method
func (m *MockStateModifier) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStateModifierMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStateModifier)(nil).Close))
}

// MockTxValidation is a mock of TxValidation interface
type MockTxValidation struct {
	ctrl     *gomock.Controller
	recorder *MockTxValidationMockRecorder
}

// MockTxValidationMockRecorder is the mock recorder for MockTxValidation
type MockTxValidationMockRecorder struct {
	mock *MockTxValidation
}

// NewMockTxValidation creates a new mock instance
func NewMockTxValidation(ctrl *gomock.Controller) *MockTxValidation {
	mock := &MockTxValidation{ctrl: ctrl}
	mock.recorder = &MockTxValidationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxValidation) EXPECT() *MockTxValidationMockRecorder {
	return m.recorder
}

// ValidateNextTx mocks base method
func (m *MockTxValidation) ValidateNextTx(tx proto.Transaction, currentTimestamp, parentTimestamp uint64, blockVersion proto.BlockVersion, checkScripts bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateNextTx", tx, currentTimestamp, parentTimestamp, blockVersion, checkScripts)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateNextTx indicates an expected call of ValidateNextTx
func (mr *MockTxValidationMockRecorder) ValidateNextTx(tx, currentTimestamp, parentTimestamp, blockVersion, checkScripts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateNextTx", reflect.TypeOf((*MockTxValidation)(nil).ValidateNextTx), tx, currentTimestamp, parentTimestamp, blockVersion, checkScripts)
}

// MockState is a mock of State interface
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// TopBlock mocks base method
func (m *MockState) TopBlock() *proto.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopBlock")
	ret0, _ := ret[0].(*proto.Block)
	return ret0
}

// TopBlock indicates an expected call of TopBlock
func (mr *MockStateMockRecorder) TopBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopBlock", reflect.TypeOf((*MockState)(nil).TopBlock))
}

// Block mocks base method
func (m *MockState) Block(blockID proto.BlockID) (*proto.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", blockID)
	ret0, _ := ret[0].(*proto.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block
func (mr *MockStateMockRecorder) Block(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockState)(nil).Block), blockID)
}

// BlockByHeight mocks base method
func (m *MockState) BlockByHeight(height proto.Height) (*proto.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByHeight", height)
	ret0, _ := ret[0].(*proto.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByHeight indicates an expected call of BlockByHeight
func (mr *MockStateMockRecorder) BlockByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByHeight", reflect.TypeOf((*MockState)(nil).BlockByHeight), height)
}

// Header mocks base method
func (m *MockState) Header(blockID proto.BlockID) (*proto.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header", blockID)
	ret0, _ := ret[0].(*proto.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockStateMockRecorder) Header(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockState)(nil).Header), blockID)
}

// HeaderByHeight mocks base method
func (m *MockState) HeaderByHeight(height proto.Height) (*proto.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByHeight", height)
	ret0, _ := ret[0].(*proto.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByHeight indicates an expected call of HeaderByHeight
func (mr *MockStateMockRecorder) HeaderByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByHeight", reflect.TypeOf((*MockState)(nil).HeaderByHeight), height)
}

// Height mocks base method
func (m *MockState) Height() (proto.Height, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(proto.Height)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Height indicates an expected call of Height
func (mr *MockStateMockRecorder) Height() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockState)(nil).Height))
}

// BlockIDToHeight mocks base method
func (m *MockState) BlockIDToHeight(blockID proto.BlockID) (proto.Height, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockIDToHeight", blockID)
	ret0, _ := ret[0].(proto.Height)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockIDToHeight indicates an expected call of BlockIDToHeight
func (mr *MockStateMockRecorder) BlockIDToHeight(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockIDToHeight", reflect.TypeOf((*MockState)(nil).BlockIDToHeight), blockID)
}

// HeightToBlockID mocks base method
func (m *MockState) HeightToBlockID(height proto.Height) (proto.BlockID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeightToBlockID", height)
	ret0, _ := ret[0].(proto.BlockID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeightToBlockID indicates an expected call of HeightToBlockID
func (mr *MockStateMockRecorder) HeightToBlockID(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeightToBlockID", reflect.TypeOf((*MockState)(nil).HeightToBlockID), height)
}

// FullWavesBalance mocks base method
func (m *MockState) FullWavesBalance(account proto.Recipient) (*proto.FullWavesBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullWavesBalance", account)
	ret0, _ := ret[0].(*proto.FullWavesBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FullWavesBalance indicates an expected call of FullWavesBalance
func (mr *MockStateMockRecorder) FullWavesBalance(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullWavesBalance", reflect.TypeOf((*MockState)(nil).FullWavesBalance), account)
}

// EffectiveBalanceStable mocks base method
func (m *MockState) EffectiveBalanceStable(account proto.Recipient, startHeight, endHeight proto.Height) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EffectiveBalanceStable", account, startHeight, endHeight)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EffectiveBalanceStable indicates an expected call of EffectiveBalanceStable
func (mr *MockStateMockRecorder) EffectiveBalanceStable(account, startHeight, endHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EffectiveBalanceStable", reflect.TypeOf((*MockState)(nil).EffectiveBalanceStable), account, startHeight, endHeight)
}

// AccountBalance mocks base method
func (m *MockState) AccountBalance(account proto.Recipient, asset []byte) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountBalance", account, asset)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountBalance indicates an expected call of AccountBalance
func (mr *MockStateMockRecorder) AccountBalance(account, asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountBalance", reflect.TypeOf((*MockState)(nil).AccountBalance), account, asset)
}

// WavesAddressesNumber mocks base method
func (m *MockState) WavesAddressesNumber() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WavesAddressesNumber")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WavesAddressesNumber indicates an expected call of WavesAddressesNumber
func (mr *MockStateMockRecorder) WavesAddressesNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WavesAddressesNumber", reflect.TypeOf((*MockState)(nil).WavesAddressesNumber))
}

// ScoreAtHeight mocks base method
func (m *MockState) ScoreAtHeight(height proto.Height) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScoreAtHeight", height)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScoreAtHeight indicates an expected call of ScoreAtHeight
func (mr *MockStateMockRecorder) ScoreAtHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScoreAtHeight", reflect.TypeOf((*MockState)(nil).ScoreAtHeight), height)
}

// CurrentScore mocks base method
func (m *MockState) CurrentScore() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentScore")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentScore indicates an expected call of CurrentScore
func (mr *MockStateMockRecorder) CurrentScore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentScore", reflect.TypeOf((*MockState)(nil).CurrentScore))
}

// BlockchainSettings mocks base method
func (m *MockState) BlockchainSettings() (*settings.BlockchainSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockchainSettings")
	ret0, _ := ret[0].(*settings.BlockchainSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockchainSettings indicates an expected call of BlockchainSettings
func (mr *MockStateMockRecorder) BlockchainSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockchainSettings", reflect.TypeOf((*MockState)(nil).BlockchainSettings))
}

// Peers mocks base method
func (m *MockState) Peers() ([]proto.TCPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peers")
	ret0, _ := ret[0].([]proto.TCPAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Peers indicates an expected call of Peers
func (mr *MockStateMockRecorder) Peers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peers", reflect.TypeOf((*MockState)(nil).Peers))
}

// VotesNum mocks base method
func (m *MockState) VotesNum(featureID int16) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VotesNum", featureID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VotesNum indicates an expected call of VotesNum
func (mr *MockStateMockRecorder) VotesNum(featureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VotesNum", reflect.TypeOf((*MockState)(nil).VotesNum), featureID)
}

// VotesNumAtHeight mocks base method
func (m *MockState) VotesNumAtHeight(featureID int16, height proto.Height) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VotesNumAtHeight", featureID, height)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VotesNumAtHeight indicates an expected call of VotesNumAtHeight
func (mr *MockStateMockRecorder) VotesNumAtHeight(featureID, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VotesNumAtHeight", reflect.TypeOf((*MockState)(nil).VotesNumAtHeight), featureID, height)
}

// IsActivated mocks base method
func (m *MockState) IsActivated(featureID int16) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActivated", featureID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsActivated indicates an expected call of IsActivated
func (mr *MockStateMockRecorder) IsActivated(featureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActivated", reflect.TypeOf((*MockState)(nil).IsActivated), featureID)
}

// IsActiveAtHeight mocks base method
func (m *MockState) IsActiveAtHeight(featureID int16, height proto.Height) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActiveAtHeight", featureID, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsActiveAtHeight indicates an expected call of IsActiveAtHeight
func (mr *MockStateMockRecorder) IsActiveAtHeight(featureID, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActiveAtHeight", reflect.TypeOf((*MockState)(nil).IsActiveAtHeight), featureID, height)
}

// ActivationHeight mocks base method
func (m *MockState) ActivationHeight(featureID int16) (proto.Height, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivationHeight", featureID)
	ret0, _ := ret[0].(proto.Height)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivationHeight indicates an expected call of ActivationHeight
func (mr *MockStateMockRecorder) ActivationHeight(featureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivationHeight", reflect.TypeOf((*MockState)(nil).ActivationHeight), featureID)
}

// IsApproved mocks base method
func (m *MockState) IsApproved(featureID int16) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsApproved", featureID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsApproved indicates an expected call of IsApproved
func (mr *MockStateMockRecorder) IsApproved(featureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsApproved", reflect.TypeOf((*MockState)(nil).IsApproved), featureID)
}

// IsApprovedAtHeight mocks base method
func (m *MockState) IsApprovedAtHeight(featureID int16, height proto.Height) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsApprovedAtHeight", featureID, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsApprovedAtHeight indicates an expected call of IsApprovedAtHeight
func (mr *MockStateMockRecorder) IsApprovedAtHeight(featureID, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsApprovedAtHeight", reflect.TypeOf((*MockState)(nil).IsApprovedAtHeight), featureID, height)
}

// ApprovalHeight mocks base method
func (m *MockState) ApprovalHeight(featureID int16) (proto.Height, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovalHeight", featureID)
	ret0, _ := ret[0].(proto.Height)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovalHeight indicates an expected call of ApprovalHeight
func (mr *MockStateMockRecorder) ApprovalHeight(featureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovalHeight", reflect.TypeOf((*MockState)(nil).ApprovalHeight), featureID)
}

// AllFeatures mocks base method
func (m *MockState) AllFeatures() ([]int16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllFeatures")
	ret0, _ := ret[0].([]int16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllFeatures indicates an expected call of AllFeatures
func (mr *MockStateMockRecorder) AllFeatures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllFeatures", reflect.TypeOf((*MockState)(nil).AllFeatures))
}

// AddrByAlias mocks base method
func (m *MockState) AddrByAlias(alias proto.Alias) (proto.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddrByAlias", alias)
	ret0, _ := ret[0].(proto.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddrByAlias indicates an expected call of AddrByAlias
func (mr *MockStateMockRecorder) AddrByAlias(alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddrByAlias", reflect.TypeOf((*MockState)(nil).AddrByAlias), alias)
}

// RetrieveEntries mocks base method
func (m *MockState) RetrieveEntries(account proto.Recipient) ([]proto.DataEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveEntries", account)
	ret0, _ := ret[0].([]proto.DataEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveEntries indicates an expected call of RetrieveEntries
func (mr *MockStateMockRecorder) RetrieveEntries(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveEntries", reflect.TypeOf((*MockState)(nil).RetrieveEntries), account)
}

// RetrieveEntry mocks base method
func (m *MockState) RetrieveEntry(account proto.Recipient, key string) (proto.DataEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveEntry", account, key)
	ret0, _ := ret[0].(proto.DataEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveEntry indicates an expected call of RetrieveEntry
func (mr *MockStateMockRecorder) RetrieveEntry(account, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveEntry", reflect.TypeOf((*MockState)(nil).RetrieveEntry), account, key)
}

// RetrieveIntegerEntry mocks base method
func (m *MockState) RetrieveIntegerEntry(account proto.Recipient, key string) (*proto.IntegerDataEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveIntegerEntry", account, key)
	ret0, _ := ret[0].(*proto.IntegerDataEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveIntegerEntry indicates an expected call of RetrieveIntegerEntry
func (mr *MockStateMockRecorder) RetrieveIntegerEntry(account, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveIntegerEntry", reflect.TypeOf((*MockState)(nil).RetrieveIntegerEntry), account, key)
}

// RetrieveBooleanEntry mocks base method
func (m *MockState) RetrieveBooleanEntry(account proto.Recipient, key string) (*proto.BooleanDataEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveBooleanEntry", account, key)
	ret0, _ := ret[0].(*proto.BooleanDataEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveBooleanEntry indicates an expected call of RetrieveBooleanEntry
func (mr *MockStateMockRecorder) RetrieveBooleanEntry(account, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveBooleanEntry", reflect.TypeOf((*MockState)(nil).RetrieveBooleanEntry), account, key)
}

// RetrieveStringEntry mocks base method
func (m *MockState) RetrieveStringEntry(account proto.Recipient, key string) (*proto.StringDataEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveStringEntry", account, key)
	ret0, _ := ret[0].(*proto.StringDataEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveStringEntry indicates an expected call of RetrieveStringEntry
func (mr *MockStateMockRecorder) RetrieveStringEntry(account, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveStringEntry", reflect.TypeOf((*MockState)(nil).RetrieveStringEntry), account, key)
}

// RetrieveBinaryEntry mocks base method
func (m *MockState) RetrieveBinaryEntry(account proto.Recipient, key string) (*proto.BinaryDataEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveBinaryEntry", account, key)
	ret0, _ := ret[0].(*proto.BinaryDataEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveBinaryEntry indicates an expected call of RetrieveBinaryEntry
func (mr *MockStateMockRecorder) RetrieveBinaryEntry(account, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveBinaryEntry", reflect.TypeOf((*MockState)(nil).RetrieveBinaryEntry), account, key)
}

// TransactionByID mocks base method
func (m *MockState) TransactionByID(id []byte) (proto.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionByID", id)
	ret0, _ := ret[0].(proto.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionByID indicates an expected call of TransactionByID
func (mr *MockStateMockRecorder) TransactionByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionByID", reflect.TypeOf((*MockState)(nil).TransactionByID), id)
}

// TransactionByIDWithStatus mocks base method
func (m *MockState) TransactionByIDWithStatus(id []byte) (proto.Transaction, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionByIDWithStatus", id)
	ret0, _ := ret[0].(proto.Transaction)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TransactionByIDWithStatus indicates an expected call of TransactionByIDWithStatus
func (mr *MockStateMockRecorder) TransactionByIDWithStatus(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionByIDWithStatus", reflect.TypeOf((*MockState)(nil).TransactionByIDWithStatus), id)
}

// TransactionHeightByID mocks base method
func (m *MockState) TransactionHeightByID(id []byte) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionHeightByID", id)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionHeightByID indicates an expected call of TransactionHeightByID
func (mr *MockStateMockRecorder) TransactionHeightByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionHeightByID", reflect.TypeOf((*MockState)(nil).TransactionHeightByID), id)
}

// NewAddrTransactionsIterator mocks base method
func (m *MockState) NewAddrTransactionsIterator(addr proto.Address) (state.TransactionIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAddrTransactionsIterator", addr)
	ret0, _ := ret[0].(state.TransactionIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAddrTransactionsIterator indicates an expected call of NewAddrTransactionsIterator
func (mr *MockStateMockRecorder) NewAddrTransactionsIterator(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAddrTransactionsIterator", reflect.TypeOf((*MockState)(nil).NewAddrTransactionsIterator), addr)
}

// AssetIsSponsored mocks base method
func (m *MockState) AssetIsSponsored(assetID crypto.Digest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssetIsSponsored", assetID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssetIsSponsored indicates an expected call of AssetIsSponsored
func (mr *MockStateMockRecorder) AssetIsSponsored(assetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssetIsSponsored", reflect.TypeOf((*MockState)(nil).AssetIsSponsored), assetID)
}

// AssetInfo mocks base method
func (m *MockState) AssetInfo(assetID crypto.Digest) (*proto.AssetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssetInfo", assetID)
	ret0, _ := ret[0].(*proto.AssetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssetInfo indicates an expected call of AssetInfo
func (mr *MockStateMockRecorder) AssetInfo(assetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssetInfo", reflect.TypeOf((*MockState)(nil).AssetInfo), assetID)
}

// FullAssetInfo mocks base method
func (m *MockState) FullAssetInfo(assetID crypto.Digest) (*proto.FullAssetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullAssetInfo", assetID)
	ret0, _ := ret[0].(*proto.FullAssetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FullAssetInfo indicates an expected call of FullAssetInfo
func (mr *MockStateMockRecorder) FullAssetInfo(assetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullAssetInfo", reflect.TypeOf((*MockState)(nil).FullAssetInfo), assetID)
}

// ScriptInfoByAccount mocks base method
func (m *MockState) ScriptInfoByAccount(account proto.Recipient) (*proto.ScriptInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScriptInfoByAccount", account)
	ret0, _ := ret[0].(*proto.ScriptInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScriptInfoByAccount indicates an expected call of ScriptInfoByAccount
func (mr *MockStateMockRecorder) ScriptInfoByAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptInfoByAccount", reflect.TypeOf((*MockState)(nil).ScriptInfoByAccount), account)
}

// ScriptInfoByAsset mocks base method
func (m *MockState) ScriptInfoByAsset(assetID crypto.Digest) (*proto.ScriptInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScriptInfoByAsset", assetID)
	ret0, _ := ret[0].(*proto.ScriptInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScriptInfoByAsset indicates an expected call of ScriptInfoByAsset
func (mr *MockStateMockRecorder) ScriptInfoByAsset(assetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptInfoByAsset", reflect.TypeOf((*MockState)(nil).ScriptInfoByAsset), assetID)
}

// IsActiveLeasing mocks base method
func (m *MockState) IsActiveLeasing(leaseID crypto.Digest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActiveLeasing", leaseID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsActiveLeasing indicates an expected call of IsActiveLeasing
func (mr *MockStateMockRecorder) IsActiveLeasing(leaseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActiveLeasing", reflect.TypeOf((*MockState)(nil).IsActiveLeasing), leaseID)
}

// InvokeResultByID mocks base method
func (m *MockState) InvokeResultByID(invokeID crypto.Digest) (*proto.ScriptResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeResultByID", invokeID)
	ret0, _ := ret[0].(*proto.ScriptResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeResultByID indicates an expected call of InvokeResultByID
func (mr *MockStateMockRecorder) InvokeResultByID(invokeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeResultByID", reflect.TypeOf((*MockState)(nil).InvokeResultByID), invokeID)
}

// ProvidesExtendedApi mocks base method
func (m *MockState) ProvidesExtendedApi() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvidesExtendedApi")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvidesExtendedApi indicates an expected call of ProvidesExtendedApi
func (mr *MockStateMockRecorder) ProvidesExtendedApi() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvidesExtendedApi", reflect.TypeOf((*MockState)(nil).ProvidesExtendedApi))
}

// ProvidesStateHashes mocks base method
func (m *MockState) ProvidesStateHashes() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvidesStateHashes")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvidesStateHashes indicates an expected call of ProvidesStateHashes
func (mr *MockStateMockRecorder) ProvidesStateHashes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvidesStateHashes", reflect.TypeOf((*MockState)(nil).ProvidesStateHashes))
}

// StateHashAtHeight mocks base method
func (m *MockState) StateHashAtHeight(height uint64) (*proto.StateHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateHashAtHeight", height)
	ret0, _ := ret[0].(*proto.StateHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateHashAtHeight indicates an expected call of StateHashAtHeight
func (mr *MockStateMockRecorder) StateHashAtHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateHashAtHeight", reflect.TypeOf((*MockState)(nil).StateHashAtHeight), height)
}

// MapR mocks base method
func (m *MockState) MapR(arg0 func(state.StateInfo) (interface{}, error)) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapR", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapR indicates an expected call of MapR
func (mr *MockStateMockRecorder) MapR(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapR", reflect.TypeOf((*MockState)(nil).MapR), arg0)
}

// HitSourceAtHeight mocks base method
func (m *MockState) HitSourceAtHeight(height proto.Height) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HitSourceAtHeight", height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HitSourceAtHeight indicates an expected call of HitSourceAtHeight
func (mr *MockStateMockRecorder) HitSourceAtHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HitSourceAtHeight", reflect.TypeOf((*MockState)(nil).HitSourceAtHeight), height)
}

// BlockVRF mocks base method
func (m *MockState) BlockVRF(blockHeader *proto.BlockHeader, height proto.Height) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockVRF", blockHeader, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockVRF indicates an expected call of BlockVRF
func (mr *MockStateMockRecorder) BlockVRF(blockHeader, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockVRF", reflect.TypeOf((*MockState)(nil).BlockVRF), blockHeader, height)
}

// ShouldPersistAddressTransactions mocks base method
func (m *MockState) ShouldPersistAddressTransactions() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldPersistAddressTransactions")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldPersistAddressTransactions indicates an expected call of ShouldPersistAddressTransactions
func (mr *MockStateMockRecorder) ShouldPersistAddressTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldPersistAddressTransactions", reflect.TypeOf((*MockState)(nil).ShouldPersistAddressTransactions))
}

// AddBlock mocks base method
func (m *MockState) AddBlock(block []byte) (*proto.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlock", block)
	ret0, _ := ret[0].(*proto.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBlock indicates an expected call of AddBlock
func (mr *MockStateMockRecorder) AddBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlock", reflect.TypeOf((*MockState)(nil).AddBlock), block)
}

// AddDeserializedBlock mocks base method
func (m *MockState) AddDeserializedBlock(block *proto.Block) (*proto.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeserializedBlock", block)
	ret0, _ := ret[0].(*proto.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDeserializedBlock indicates an expected call of AddDeserializedBlock
func (mr *MockStateMockRecorder) AddDeserializedBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeserializedBlock", reflect.TypeOf((*MockState)(nil).AddDeserializedBlock), block)
}

// AddNewBlocks mocks base method
func (m *MockState) AddNewBlocks(blocks [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewBlocks", blocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewBlocks indicates an expected call of AddNewBlocks
func (mr *MockStateMockRecorder) AddNewBlocks(blocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewBlocks", reflect.TypeOf((*MockState)(nil).AddNewBlocks), blocks)
}

// AddNewDeserializedBlocks mocks base method
func (m *MockState) AddNewDeserializedBlocks(blocks []*proto.Block) (*proto.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewDeserializedBlocks", blocks)
	ret0, _ := ret[0].(*proto.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewDeserializedBlocks indicates an expected call of AddNewDeserializedBlocks
func (mr *MockStateMockRecorder) AddNewDeserializedBlocks(blocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewDeserializedBlocks", reflect.TypeOf((*MockState)(nil).AddNewDeserializedBlocks), blocks)
}

// AddOldBlocks mocks base method
func (m *MockState) AddOldBlocks(blocks [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOldBlocks", blocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOldBlocks indicates an expected call of AddOldBlocks
func (mr *MockStateMockRecorder) AddOldBlocks(blocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOldBlocks", reflect.TypeOf((*MockState)(nil).AddOldBlocks), blocks)
}

// AddOldDeserializedBlocks mocks base method
func (m *MockState) AddOldDeserializedBlocks(blocks []*proto.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOldDeserializedBlocks", blocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOldDeserializedBlocks indicates an expected call of AddOldDeserializedBlocks
func (mr *MockStateMockRecorder) AddOldDeserializedBlocks(blocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOldDeserializedBlocks", reflect.TypeOf((*MockState)(nil).AddOldDeserializedBlocks), blocks)
}

// RollbackToHeight mocks base method
func (m *MockState) RollbackToHeight(height proto.Height) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackToHeight", height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackToHeight indicates an expected call of RollbackToHeight
func (mr *MockStateMockRecorder) RollbackToHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackToHeight", reflect.TypeOf((*MockState)(nil).RollbackToHeight), height)
}

// RollbackTo mocks base method
func (m *MockState) RollbackTo(removalEdge proto.BlockID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTo", removalEdge)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTo indicates an expected call of RollbackTo
func (mr *MockStateMockRecorder) RollbackTo(removalEdge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTo", reflect.TypeOf((*MockState)(nil).RollbackTo), removalEdge)
}

// ValidateNextTx mocks base method
func (m *MockState) ValidateNextTx(tx proto.Transaction, currentTimestamp, parentTimestamp uint64, blockVersion proto.BlockVersion, checkScripts bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateNextTx", tx, currentTimestamp, parentTimestamp, blockVersion, checkScripts)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateNextTx indicates an expected call of ValidateNextTx
func (mr *MockStateMockRecorder) ValidateNextTx(tx, currentTimestamp, parentTimestamp, blockVersion, checkScripts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateNextTx", reflect.TypeOf((*MockState)(nil).ValidateNextTx), tx, currentTimestamp, parentTimestamp, blockVersion, checkScripts)
}

// ResetValidationList mocks base method
func (m *MockState) ResetValidationList() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetValidationList")
}

// ResetValidationList indicates an expected call of ResetValidationList
func (mr *MockStateMockRecorder) ResetValidationList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetValidationList", reflect.TypeOf((*MockState)(nil).ResetValidationList))
}

// TxValidation mocks base method
func (m *MockState) TxValidation(arg0 func(state.TxValidation) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxValidation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TxValidation indicates an expected call of TxValidation
func (mr *MockStateMockRecorder) TxValidation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxValidation", reflect.TypeOf((*MockState)(nil).TxValidation), arg0)
}

// Map mocks base method
func (m *MockState) Map(arg0 func(state.NonThreadSafeState) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Map indicates an expected call of Map
func (mr *MockStateMockRecorder) Map(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockState)(nil).Map), arg0)
}

// SavePeers mocks base method
func (m *MockState) SavePeers(arg0 []proto.TCPAddr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePeers", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePeers indicates an expected call of SavePeers
func (mr *MockStateMockRecorder) SavePeers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePeers", reflect.TypeOf((*MockState)(nil).SavePeers), arg0)
}

// StartProvidingExtendedApi mocks base method
func (m *MockState) StartProvidingExtendedApi() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProvidingExtendedApi")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartProvidingExtendedApi indicates an expected call of StartProvidingExtendedApi
func (mr *MockStateMockRecorder) StartProvidingExtendedApi() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProvidingExtendedApi", reflect.TypeOf((*MockState)(nil).StartProvidingExtendedApi))
}

// PersistAddressTransactions mocks base method
func (m *MockState) PersistAddressTransactions() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistAddressTransactions")
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistAddressTransactions indicates an expected call of PersistAddressTransactions
func (mr *MockStateMockRecorder) PersistAddressTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistAddressTransactions", reflect.TypeOf((*MockState)(nil).PersistAddressTransactions))
}

// Close mocks base method
func (m *MockState) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStateMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockState)(nil).Close))
}

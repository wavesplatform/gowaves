// Code generated by mockery v2.50.1. DO NOT EDIT.

package networking

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
	networking "github.com/wavesplatform/gowaves/pkg/networking"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// OnClose provides a mock function with given fields: _a0
func (_m *MockHandler) OnClose(_a0 *networking.Session) {
	_m.Called(_a0)
}

// MockHandler_OnClose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnClose'
type MockHandler_OnClose_Call struct {
	*mock.Call
}

// OnClose is a helper method to define mock.On call
//   - _a0 *networking.Session
func (_e *MockHandler_Expecter) OnClose(_a0 interface{}) *MockHandler_OnClose_Call {
	return &MockHandler_OnClose_Call{Call: _e.mock.On("OnClose", _a0)}
}

func (_c *MockHandler_OnClose_Call) Run(run func(_a0 *networking.Session)) *MockHandler_OnClose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*networking.Session))
	})
	return _c
}

func (_c *MockHandler_OnClose_Call) Return() *MockHandler_OnClose_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_OnClose_Call) RunAndReturn(run func(*networking.Session)) *MockHandler_OnClose_Call {
	_c.Run(run)
	return _c
}

// OnHandshake provides a mock function with given fields: _a0, _a1
func (_m *MockHandler) OnHandshake(_a0 *networking.Session, _a1 networking.Handshake) {
	_m.Called(_a0, _a1)
}

// MockHandler_OnHandshake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnHandshake'
type MockHandler_OnHandshake_Call struct {
	*mock.Call
}

// OnHandshake is a helper method to define mock.On call
//   - _a0 *networking.Session
//   - _a1 networking.Handshake
func (_e *MockHandler_Expecter) OnHandshake(_a0 interface{}, _a1 interface{}) *MockHandler_OnHandshake_Call {
	return &MockHandler_OnHandshake_Call{Call: _e.mock.On("OnHandshake", _a0, _a1)}
}

func (_c *MockHandler_OnHandshake_Call) Run(run func(_a0 *networking.Session, _a1 networking.Handshake)) *MockHandler_OnHandshake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*networking.Session), args[1].(networking.Handshake))
	})
	return _c
}

func (_c *MockHandler_OnHandshake_Call) Return() *MockHandler_OnHandshake_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_OnHandshake_Call) RunAndReturn(run func(*networking.Session, networking.Handshake)) *MockHandler_OnHandshake_Call {
	_c.Run(run)
	return _c
}

// OnReceive provides a mock function with given fields: _a0, _a1
func (_m *MockHandler) OnReceive(_a0 *networking.Session, _a1 io.Reader) {
	_m.Called(_a0, _a1)
}

// MockHandler_OnReceive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnReceive'
type MockHandler_OnReceive_Call struct {
	*mock.Call
}

// OnReceive is a helper method to define mock.On call
//   - _a0 *networking.Session
//   - _a1 io.Reader
func (_e *MockHandler_Expecter) OnReceive(_a0 interface{}, _a1 interface{}) *MockHandler_OnReceive_Call {
	return &MockHandler_OnReceive_Call{Call: _e.mock.On("OnReceive", _a0, _a1)}
}

func (_c *MockHandler_OnReceive_Call) Run(run func(_a0 *networking.Session, _a1 io.Reader)) *MockHandler_OnReceive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*networking.Session), args[1].(io.Reader))
	})
	return _c
}

func (_c *MockHandler_OnReceive_Call) Return() *MockHandler_OnReceive_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_OnReceive_Call) RunAndReturn(run func(*networking.Session, io.Reader)) *MockHandler_OnReceive_Call {
	_c.Run(run)
	return _c
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

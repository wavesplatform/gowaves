// Code generated by mockery v2.52.2. DO NOT EDIT.

package networking

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
	networking "github.com/wavesplatform/gowaves/pkg/networking"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler[HS networking.Handshake] struct {
	mock.Mock
}

type MockHandler_Expecter[HS networking.Handshake] struct {
	mock *mock.Mock
}

func (_m *MockHandler[HS]) EXPECT() *MockHandler_Expecter[HS] {
	return &MockHandler_Expecter[HS]{mock: &_m.Mock}
}

// OnClose provides a mock function with given fields: _a0
func (_m *MockHandler[HS]) OnClose(_a0 *networking.Session[HS]) {
	_m.Called(_a0)
}

// MockHandler_OnClose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnClose'
type MockHandler_OnClose_Call[HS networking.Handshake] struct {
	*mock.Call
}

// OnClose is a helper method to define mock.On call
//   - _a0 *networking.Session[HS]
func (_e *MockHandler_Expecter[HS]) OnClose(_a0 interface{}) *MockHandler_OnClose_Call[HS] {
	return &MockHandler_OnClose_Call[HS]{Call: _e.mock.On("OnClose", _a0)}
}

func (_c *MockHandler_OnClose_Call[HS]) Run(run func(_a0 *networking.Session[HS])) *MockHandler_OnClose_Call[HS] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*networking.Session[HS]))
	})
	return _c
}

func (_c *MockHandler_OnClose_Call[HS]) Return() *MockHandler_OnClose_Call[HS] {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_OnClose_Call[HS]) RunAndReturn(run func(*networking.Session[HS])) *MockHandler_OnClose_Call[HS] {
	_c.Run(run)
	return _c
}

// OnHandshake provides a mock function with given fields: _a0, _a1
func (_m *MockHandler[HS]) OnHandshake(_a0 *networking.Session[HS], _a1 HS) {
	_m.Called(_a0, _a1)
}

// MockHandler_OnHandshake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnHandshake'
type MockHandler_OnHandshake_Call[HS networking.Handshake] struct {
	*mock.Call
}

// OnHandshake is a helper method to define mock.On call
//   - _a0 *networking.Session[HS]
//   - _a1 HS
func (_e *MockHandler_Expecter[HS]) OnHandshake(_a0 interface{}, _a1 interface{}) *MockHandler_OnHandshake_Call[HS] {
	return &MockHandler_OnHandshake_Call[HS]{Call: _e.mock.On("OnHandshake", _a0, _a1)}
}

func (_c *MockHandler_OnHandshake_Call[HS]) Run(run func(_a0 *networking.Session[HS], _a1 HS)) *MockHandler_OnHandshake_Call[HS] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*networking.Session[HS]), args[1].(HS))
	})
	return _c
}

func (_c *MockHandler_OnHandshake_Call[HS]) Return() *MockHandler_OnHandshake_Call[HS] {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_OnHandshake_Call[HS]) RunAndReturn(run func(*networking.Session[HS], HS)) *MockHandler_OnHandshake_Call[HS] {
	_c.Run(run)
	return _c
}

// OnHandshakeFailed provides a mock function with given fields: _a0, _a1
func (_m *MockHandler[HS]) OnHandshakeFailed(_a0 *networking.Session[HS], _a1 HS) {
	_m.Called(_a0, _a1)
}

// MockHandler_OnHandshakeFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnHandshakeFailed'
type MockHandler_OnHandshakeFailed_Call[HS networking.Handshake] struct {
	*mock.Call
}

// OnHandshakeFailed is a helper method to define mock.On call
//   - _a0 *networking.Session[HS]
//   - _a1 HS
func (_e *MockHandler_Expecter[HS]) OnHandshakeFailed(_a0 interface{}, _a1 interface{}) *MockHandler_OnHandshakeFailed_Call[HS] {
	return &MockHandler_OnHandshakeFailed_Call[HS]{Call: _e.mock.On("OnHandshakeFailed", _a0, _a1)}
}

func (_c *MockHandler_OnHandshakeFailed_Call[HS]) Run(run func(_a0 *networking.Session[HS], _a1 HS)) *MockHandler_OnHandshakeFailed_Call[HS] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*networking.Session[HS]), args[1].(HS))
	})
	return _c
}

func (_c *MockHandler_OnHandshakeFailed_Call[HS]) Return() *MockHandler_OnHandshakeFailed_Call[HS] {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_OnHandshakeFailed_Call[HS]) RunAndReturn(run func(*networking.Session[HS], HS)) *MockHandler_OnHandshakeFailed_Call[HS] {
	_c.Run(run)
	return _c
}

// OnReceive provides a mock function with given fields: _a0, _a1
func (_m *MockHandler[HS]) OnReceive(_a0 *networking.Session[HS], _a1 io.Reader) {
	_m.Called(_a0, _a1)
}

// MockHandler_OnReceive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnReceive'
type MockHandler_OnReceive_Call[HS networking.Handshake] struct {
	*mock.Call
}

// OnReceive is a helper method to define mock.On call
//   - _a0 *networking.Session[HS]
//   - _a1 io.Reader
func (_e *MockHandler_Expecter[HS]) OnReceive(_a0 interface{}, _a1 interface{}) *MockHandler_OnReceive_Call[HS] {
	return &MockHandler_OnReceive_Call[HS]{Call: _e.mock.On("OnReceive", _a0, _a1)}
}

func (_c *MockHandler_OnReceive_Call[HS]) Run(run func(_a0 *networking.Session[HS], _a1 io.Reader)) *MockHandler_OnReceive_Call[HS] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*networking.Session[HS]), args[1].(io.Reader))
	})
	return _c
}

func (_c *MockHandler_OnReceive_Call[HS]) Return() *MockHandler_OnReceive_Call[HS] {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_OnReceive_Call[HS]) RunAndReturn(run func(*networking.Session[HS], io.Reader)) *MockHandler_OnReceive_Call[HS] {
	_c.Run(run)
	return _c
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler[HS networking.Handshake](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler[HS] {
	mock := &MockHandler[HS]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

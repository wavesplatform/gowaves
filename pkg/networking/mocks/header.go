// Code generated by mockery v2.50.1. DO NOT EDIT.

package networking

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockHeader is an autogenerated mock type for the Header type
type MockHeader struct {
	mock.Mock
}

type MockHeader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHeader) EXPECT() *MockHeader_Expecter {
	return &MockHeader_Expecter{mock: &_m.Mock}
}

// HeaderLength provides a mock function with no fields
func (_m *MockHeader) HeaderLength() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HeaderLength")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// MockHeader_HeaderLength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeaderLength'
type MockHeader_HeaderLength_Call struct {
	*mock.Call
}

// HeaderLength is a helper method to define mock.On call
func (_e *MockHeader_Expecter) HeaderLength() *MockHeader_HeaderLength_Call {
	return &MockHeader_HeaderLength_Call{Call: _e.mock.On("HeaderLength")}
}

func (_c *MockHeader_HeaderLength_Call) Run(run func()) *MockHeader_HeaderLength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeader_HeaderLength_Call) Return(_a0 uint32) *MockHeader_HeaderLength_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeader_HeaderLength_Call) RunAndReturn(run func() uint32) *MockHeader_HeaderLength_Call {
	_c.Call.Return(run)
	return _c
}

// PayloadLength provides a mock function with no fields
func (_m *MockHeader) PayloadLength() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PayloadLength")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// MockHeader_PayloadLength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayloadLength'
type MockHeader_PayloadLength_Call struct {
	*mock.Call
}

// PayloadLength is a helper method to define mock.On call
func (_e *MockHeader_Expecter) PayloadLength() *MockHeader_PayloadLength_Call {
	return &MockHeader_PayloadLength_Call{Call: _e.mock.On("PayloadLength")}
}

func (_c *MockHeader_PayloadLength_Call) Run(run func()) *MockHeader_PayloadLength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeader_PayloadLength_Call) Return(_a0 uint32) *MockHeader_PayloadLength_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeader_PayloadLength_Call) RunAndReturn(run func() uint32) *MockHeader_PayloadLength_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFrom provides a mock function with given fields: r
func (_m *MockHeader) ReadFrom(r io.Reader) (int64, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ReadFrom")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader) (int64, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(io.Reader) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeader_ReadFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFrom'
type MockHeader_ReadFrom_Call struct {
	*mock.Call
}

// ReadFrom is a helper method to define mock.On call
//   - r io.Reader
func (_e *MockHeader_Expecter) ReadFrom(r interface{}) *MockHeader_ReadFrom_Call {
	return &MockHeader_ReadFrom_Call{Call: _e.mock.On("ReadFrom", r)}
}

func (_c *MockHeader_ReadFrom_Call) Run(run func(r io.Reader)) *MockHeader_ReadFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *MockHeader_ReadFrom_Call) Return(n int64, err error) *MockHeader_ReadFrom_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockHeader_ReadFrom_Call) RunAndReturn(run func(io.Reader) (int64, error)) *MockHeader_ReadFrom_Call {
	_c.Call.Return(run)
	return _c
}

// WriteTo provides a mock function with given fields: w
func (_m *MockHeader) WriteTo(w io.Writer) (int64, error) {
	ret := _m.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for WriteTo")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Writer) (int64, error)); ok {
		return rf(w)
	}
	if rf, ok := ret.Get(0).(func(io.Writer) int64); ok {
		r0 = rf(w)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(io.Writer) error); ok {
		r1 = rf(w)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeader_WriteTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteTo'
type MockHeader_WriteTo_Call struct {
	*mock.Call
}

// WriteTo is a helper method to define mock.On call
//   - w io.Writer
func (_e *MockHeader_Expecter) WriteTo(w interface{}) *MockHeader_WriteTo_Call {
	return &MockHeader_WriteTo_Call{Call: _e.mock.On("WriteTo", w)}
}

func (_c *MockHeader_WriteTo_Call) Run(run func(w io.Writer)) *MockHeader_WriteTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *MockHeader_WriteTo_Call) Return(n int64, err error) *MockHeader_WriteTo_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockHeader_WriteTo_Call) RunAndReturn(run func(io.Writer) (int64, error)) *MockHeader_WriteTo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHeader creates a new instance of MockHeader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHeader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHeader {
	mock := &MockHeader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package networking

import (
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// OnClose provides a mock function for the type MockHandler
func (_mock *MockHandler) OnClose(session *Session) {
	_mock.Called(session)
	return
}

// MockHandler_OnClose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnClose'
type MockHandler_OnClose_Call struct {
	*mock.Call
}

// OnClose is a helper method to define mock.On call
//   - session
func (_e *MockHandler_Expecter) OnClose(session interface{}) *MockHandler_OnClose_Call {
	return &MockHandler_OnClose_Call{Call: _e.mock.On("OnClose", session)}
}

func (_c *MockHandler_OnClose_Call) Run(run func(session *Session)) *MockHandler_OnClose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Session))
	})
	return _c
}

func (_c *MockHandler_OnClose_Call) Return() *MockHandler_OnClose_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_OnClose_Call) RunAndReturn(run func(session *Session)) *MockHandler_OnClose_Call {
	_c.Run(run)
	return _c
}

// OnFailure provides a mock function for the type MockHandler
func (_mock *MockHandler) OnFailure(session *Session, err error) {
	_mock.Called(session, err)
	return
}

// MockHandler_OnFailure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnFailure'
type MockHandler_OnFailure_Call struct {
	*mock.Call
}

// OnFailure is a helper method to define mock.On call
//   - session
//   - err
func (_e *MockHandler_Expecter) OnFailure(session interface{}, err interface{}) *MockHandler_OnFailure_Call {
	return &MockHandler_OnFailure_Call{Call: _e.mock.On("OnFailure", session, err)}
}

func (_c *MockHandler_OnFailure_Call) Run(run func(session *Session, err error)) *MockHandler_OnFailure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Session), args[1].(error))
	})
	return _c
}

func (_c *MockHandler_OnFailure_Call) Return() *MockHandler_OnFailure_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_OnFailure_Call) RunAndReturn(run func(session *Session, err error)) *MockHandler_OnFailure_Call {
	_c.Run(run)
	return _c
}

// OnHandshake provides a mock function for the type MockHandler
func (_mock *MockHandler) OnHandshake(session *Session, handshake Handshake) {
	_mock.Called(session, handshake)
	return
}

// MockHandler_OnHandshake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnHandshake'
type MockHandler_OnHandshake_Call struct {
	*mock.Call
}

// OnHandshake is a helper method to define mock.On call
//   - session
//   - handshake
func (_e *MockHandler_Expecter) OnHandshake(session interface{}, handshake interface{}) *MockHandler_OnHandshake_Call {
	return &MockHandler_OnHandshake_Call{Call: _e.mock.On("OnHandshake", session, handshake)}
}

func (_c *MockHandler_OnHandshake_Call) Run(run func(session *Session, handshake Handshake)) *MockHandler_OnHandshake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Session), args[1].(Handshake))
	})
	return _c
}

func (_c *MockHandler_OnHandshake_Call) Return() *MockHandler_OnHandshake_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_OnHandshake_Call) RunAndReturn(run func(session *Session, handshake Handshake)) *MockHandler_OnHandshake_Call {
	_c.Run(run)
	return _c
}

// OnHandshakeFailed provides a mock function for the type MockHandler
func (_mock *MockHandler) OnHandshakeFailed(session *Session, handshake Handshake) {
	_mock.Called(session, handshake)
	return
}

// MockHandler_OnHandshakeFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnHandshakeFailed'
type MockHandler_OnHandshakeFailed_Call struct {
	*mock.Call
}

// OnHandshakeFailed is a helper method to define mock.On call
//   - session
//   - handshake
func (_e *MockHandler_Expecter) OnHandshakeFailed(session interface{}, handshake interface{}) *MockHandler_OnHandshakeFailed_Call {
	return &MockHandler_OnHandshakeFailed_Call{Call: _e.mock.On("OnHandshakeFailed", session, handshake)}
}

func (_c *MockHandler_OnHandshakeFailed_Call) Run(run func(session *Session, handshake Handshake)) *MockHandler_OnHandshakeFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Session), args[1].(Handshake))
	})
	return _c
}

func (_c *MockHandler_OnHandshakeFailed_Call) Return() *MockHandler_OnHandshakeFailed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_OnHandshakeFailed_Call) RunAndReturn(run func(session *Session, handshake Handshake)) *MockHandler_OnHandshakeFailed_Call {
	_c.Run(run)
	return _c
}

// OnReceive provides a mock function for the type MockHandler
func (_mock *MockHandler) OnReceive(session *Session, reader io.Reader) {
	_mock.Called(session, reader)
	return
}

// MockHandler_OnReceive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnReceive'
type MockHandler_OnReceive_Call struct {
	*mock.Call
}

// OnReceive is a helper method to define mock.On call
//   - session
//   - reader
func (_e *MockHandler_Expecter) OnReceive(session interface{}, reader interface{}) *MockHandler_OnReceive_Call {
	return &MockHandler_OnReceive_Call{Call: _e.mock.On("OnReceive", session, reader)}
}

func (_c *MockHandler_OnReceive_Call) Run(run func(session *Session, reader io.Reader)) *MockHandler_OnReceive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Session), args[1].(io.Reader))
	})
	return _c
}

func (_c *MockHandler_OnReceive_Call) Return() *MockHandler_OnReceive_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_OnReceive_Call) RunAndReturn(run func(session *Session, reader io.Reader)) *MockHandler_OnReceive_Call {
	_c.Run(run)
	return _c
}

// NewMockHeader creates a new instance of MockHeader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHeader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHeader {
	mock := &MockHeader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHeader is an autogenerated mock type for the Header type
type MockHeader struct {
	mock.Mock
}

type MockHeader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHeader) EXPECT() *MockHeader_Expecter {
	return &MockHeader_Expecter{mock: &_m.Mock}
}

// HeaderLength provides a mock function for the type MockHeader
func (_mock *MockHeader) HeaderLength() uint32 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for HeaderLength")
	}

	var r0 uint32
	if returnFunc, ok := ret.Get(0).(func() uint32); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint32)
	}
	return r0
}

// MockHeader_HeaderLength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeaderLength'
type MockHeader_HeaderLength_Call struct {
	*mock.Call
}

// HeaderLength is a helper method to define mock.On call
func (_e *MockHeader_Expecter) HeaderLength() *MockHeader_HeaderLength_Call {
	return &MockHeader_HeaderLength_Call{Call: _e.mock.On("HeaderLength")}
}

func (_c *MockHeader_HeaderLength_Call) Run(run func()) *MockHeader_HeaderLength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeader_HeaderLength_Call) Return(v uint32) *MockHeader_HeaderLength_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockHeader_HeaderLength_Call) RunAndReturn(run func() uint32) *MockHeader_HeaderLength_Call {
	_c.Call.Return(run)
	return _c
}

// PayloadLength provides a mock function for the type MockHeader
func (_mock *MockHeader) PayloadLength() uint32 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PayloadLength")
	}

	var r0 uint32
	if returnFunc, ok := ret.Get(0).(func() uint32); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint32)
	}
	return r0
}

// MockHeader_PayloadLength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayloadLength'
type MockHeader_PayloadLength_Call struct {
	*mock.Call
}

// PayloadLength is a helper method to define mock.On call
func (_e *MockHeader_Expecter) PayloadLength() *MockHeader_PayloadLength_Call {
	return &MockHeader_PayloadLength_Call{Call: _e.mock.On("PayloadLength")}
}

func (_c *MockHeader_PayloadLength_Call) Run(run func()) *MockHeader_PayloadLength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeader_PayloadLength_Call) Return(v uint32) *MockHeader_PayloadLength_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockHeader_PayloadLength_Call) RunAndReturn(run func() uint32) *MockHeader_PayloadLength_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFrom provides a mock function for the type MockHeader
func (_mock *MockHeader) ReadFrom(r io.Reader) (int64, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ReadFrom")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(io.Reader) (int64, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(io.Reader) int64); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHeader_ReadFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFrom'
type MockHeader_ReadFrom_Call struct {
	*mock.Call
}

// ReadFrom is a helper method to define mock.On call
//   - r
func (_e *MockHeader_Expecter) ReadFrom(r interface{}) *MockHeader_ReadFrom_Call {
	return &MockHeader_ReadFrom_Call{Call: _e.mock.On("ReadFrom", r)}
}

func (_c *MockHeader_ReadFrom_Call) Run(run func(r io.Reader)) *MockHeader_ReadFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *MockHeader_ReadFrom_Call) Return(n int64, err error) *MockHeader_ReadFrom_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockHeader_ReadFrom_Call) RunAndReturn(run func(r io.Reader) (int64, error)) *MockHeader_ReadFrom_Call {
	_c.Call.Return(run)
	return _c
}

// WriteTo provides a mock function for the type MockHeader
func (_mock *MockHeader) WriteTo(w io.Writer) (int64, error) {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for WriteTo")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(io.Writer) (int64, error)); ok {
		return returnFunc(w)
	}
	if returnFunc, ok := ret.Get(0).(func(io.Writer) int64); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(io.Writer) error); ok {
		r1 = returnFunc(w)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHeader_WriteTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteTo'
type MockHeader_WriteTo_Call struct {
	*mock.Call
}

// WriteTo is a helper method to define mock.On call
//   - w
func (_e *MockHeader_Expecter) WriteTo(w interface{}) *MockHeader_WriteTo_Call {
	return &MockHeader_WriteTo_Call{Call: _e.mock.On("WriteTo", w)}
}

func (_c *MockHeader_WriteTo_Call) Run(run func(w io.Writer)) *MockHeader_WriteTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *MockHeader_WriteTo_Call) Return(n int64, err error) *MockHeader_WriteTo_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockHeader_WriteTo_Call) RunAndReturn(run func(w io.Writer) (int64, error)) *MockHeader_WriteTo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProtocol creates a new instance of MockProtocol. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProtocol(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProtocol {
	mock := &MockProtocol{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProtocol is an autogenerated mock type for the Protocol type
type MockProtocol struct {
	mock.Mock
}

type MockProtocol_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProtocol) EXPECT() *MockProtocol_Expecter {
	return &MockProtocol_Expecter{mock: &_m.Mock}
}

// EmptyHandshake provides a mock function for the type MockProtocol
func (_mock *MockProtocol) EmptyHandshake() Handshake {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EmptyHandshake")
	}

	var r0 Handshake
	if returnFunc, ok := ret.Get(0).(func() Handshake); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Handshake)
		}
	}
	return r0
}

// MockProtocol_EmptyHandshake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmptyHandshake'
type MockProtocol_EmptyHandshake_Call struct {
	*mock.Call
}

// EmptyHandshake is a helper method to define mock.On call
func (_e *MockProtocol_Expecter) EmptyHandshake() *MockProtocol_EmptyHandshake_Call {
	return &MockProtocol_EmptyHandshake_Call{Call: _e.mock.On("EmptyHandshake")}
}

func (_c *MockProtocol_EmptyHandshake_Call) Run(run func()) *MockProtocol_EmptyHandshake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProtocol_EmptyHandshake_Call) Return(handshake Handshake) *MockProtocol_EmptyHandshake_Call {
	_c.Call.Return(handshake)
	return _c
}

func (_c *MockProtocol_EmptyHandshake_Call) RunAndReturn(run func() Handshake) *MockProtocol_EmptyHandshake_Call {
	_c.Call.Return(run)
	return _c
}

// EmptyHeader provides a mock function for the type MockProtocol
func (_mock *MockProtocol) EmptyHeader() Header {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EmptyHeader")
	}

	var r0 Header
	if returnFunc, ok := ret.Get(0).(func() Header); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Header)
		}
	}
	return r0
}

// MockProtocol_EmptyHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmptyHeader'
type MockProtocol_EmptyHeader_Call struct {
	*mock.Call
}

// EmptyHeader is a helper method to define mock.On call
func (_e *MockProtocol_Expecter) EmptyHeader() *MockProtocol_EmptyHeader_Call {
	return &MockProtocol_EmptyHeader_Call{Call: _e.mock.On("EmptyHeader")}
}

func (_c *MockProtocol_EmptyHeader_Call) Run(run func()) *MockProtocol_EmptyHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProtocol_EmptyHeader_Call) Return(header Header) *MockProtocol_EmptyHeader_Call {
	_c.Call.Return(header)
	return _c
}

func (_c *MockProtocol_EmptyHeader_Call) RunAndReturn(run func() Header) *MockProtocol_EmptyHeader_Call {
	_c.Call.Return(run)
	return _c
}

// IsAcceptableHandshake provides a mock function for the type MockProtocol
func (_mock *MockProtocol) IsAcceptableHandshake(session *Session, handshake Handshake) bool {
	ret := _mock.Called(session, handshake)

	if len(ret) == 0 {
		panic("no return value specified for IsAcceptableHandshake")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(*Session, Handshake) bool); ok {
		r0 = returnFunc(session, handshake)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockProtocol_IsAcceptableHandshake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAcceptableHandshake'
type MockProtocol_IsAcceptableHandshake_Call struct {
	*mock.Call
}

// IsAcceptableHandshake is a helper method to define mock.On call
//   - session
//   - handshake
func (_e *MockProtocol_Expecter) IsAcceptableHandshake(session interface{}, handshake interface{}) *MockProtocol_IsAcceptableHandshake_Call {
	return &MockProtocol_IsAcceptableHandshake_Call{Call: _e.mock.On("IsAcceptableHandshake", session, handshake)}
}

func (_c *MockProtocol_IsAcceptableHandshake_Call) Run(run func(session *Session, handshake Handshake)) *MockProtocol_IsAcceptableHandshake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Session), args[1].(Handshake))
	})
	return _c
}

func (_c *MockProtocol_IsAcceptableHandshake_Call) Return(b bool) *MockProtocol_IsAcceptableHandshake_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockProtocol_IsAcceptableHandshake_Call) RunAndReturn(run func(session *Session, handshake Handshake) bool) *MockProtocol_IsAcceptableHandshake_Call {
	_c.Call.Return(run)
	return _c
}

// IsAcceptableMessage provides a mock function for the type MockProtocol
func (_mock *MockProtocol) IsAcceptableMessage(session *Session, header Header) bool {
	ret := _mock.Called(session, header)

	if len(ret) == 0 {
		panic("no return value specified for IsAcceptableMessage")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(*Session, Header) bool); ok {
		r0 = returnFunc(session, header)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockProtocol_IsAcceptableMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAcceptableMessage'
type MockProtocol_IsAcceptableMessage_Call struct {
	*mock.Call
}

// IsAcceptableMessage is a helper method to define mock.On call
//   - session
//   - header
func (_e *MockProtocol_Expecter) IsAcceptableMessage(session interface{}, header interface{}) *MockProtocol_IsAcceptableMessage_Call {
	return &MockProtocol_IsAcceptableMessage_Call{Call: _e.mock.On("IsAcceptableMessage", session, header)}
}

func (_c *MockProtocol_IsAcceptableMessage_Call) Run(run func(session *Session, header Header)) *MockProtocol_IsAcceptableMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Session), args[1].(Header))
	})
	return _c
}

func (_c *MockProtocol_IsAcceptableMessage_Call) Return(b bool) *MockProtocol_IsAcceptableMessage_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockProtocol_IsAcceptableMessage_Call) RunAndReturn(run func(session *Session, header Header) bool) *MockProtocol_IsAcceptableMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockProtocol
func (_mock *MockProtocol) Ping() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProtocol_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockProtocol_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *MockProtocol_Expecter) Ping() *MockProtocol_Ping_Call {
	return &MockProtocol_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *MockProtocol_Ping_Call) Run(run func()) *MockProtocol_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProtocol_Ping_Call) Return(bytes []byte, err error) *MockProtocol_Ping_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockProtocol_Ping_Call) RunAndReturn(run func() ([]byte, error)) *MockProtocol_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Code generated by "enumer -type LoggerType -trimprefix Logger -text -output loggertype_string.go"; DO NOT EDIT.

package logging

import (
	"fmt"
	"strings"
)

const _LoggerTypeName = "TextJSONPrettyPrettyNoColorTextDevJSONDevPrettyDevPrettyNoColorDev"

var _LoggerTypeIndex = [...]uint8{0, 4, 8, 14, 27, 34, 41, 50, 66}

const _LoggerTypeLowerName = "textjsonprettyprettynocolortextdevjsondevprettydevprettynocolordev"

func (i LoggerType) String() string {
	if i < 0 || i >= LoggerType(len(_LoggerTypeIndex)-1) {
		return fmt.Sprintf("LoggerType(%d)", i)
	}
	return _LoggerTypeName[_LoggerTypeIndex[i]:_LoggerTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LoggerTypeNoOp() {
	var x [1]struct{}
	_ = x[LoggerText-(0)]
	_ = x[LoggerJSON-(1)]
	_ = x[LoggerPretty-(2)]
	_ = x[LoggerPrettyNoColor-(3)]
	_ = x[LoggerTextDev-(4)]
	_ = x[LoggerJSONDev-(5)]
	_ = x[LoggerPrettyDev-(6)]
	_ = x[LoggerPrettyNoColorDev-(7)]
}

var _LoggerTypeValues = []LoggerType{LoggerText, LoggerJSON, LoggerPretty, LoggerPrettyNoColor, LoggerTextDev, LoggerJSONDev, LoggerPrettyDev, LoggerPrettyNoColorDev}

var _LoggerTypeNameToValueMap = map[string]LoggerType{
	_LoggerTypeName[0:4]:        LoggerText,
	_LoggerTypeLowerName[0:4]:   LoggerText,
	_LoggerTypeName[4:8]:        LoggerJSON,
	_LoggerTypeLowerName[4:8]:   LoggerJSON,
	_LoggerTypeName[8:14]:       LoggerPretty,
	_LoggerTypeLowerName[8:14]:  LoggerPretty,
	_LoggerTypeName[14:27]:      LoggerPrettyNoColor,
	_LoggerTypeLowerName[14:27]: LoggerPrettyNoColor,
	_LoggerTypeName[27:34]:      LoggerTextDev,
	_LoggerTypeLowerName[27:34]: LoggerTextDev,
	_LoggerTypeName[34:41]:      LoggerJSONDev,
	_LoggerTypeLowerName[34:41]: LoggerJSONDev,
	_LoggerTypeName[41:50]:      LoggerPrettyDev,
	_LoggerTypeLowerName[41:50]: LoggerPrettyDev,
	_LoggerTypeName[50:66]:      LoggerPrettyNoColorDev,
	_LoggerTypeLowerName[50:66]: LoggerPrettyNoColorDev,
}

var _LoggerTypeNames = []string{
	_LoggerTypeName[0:4],
	_LoggerTypeName[4:8],
	_LoggerTypeName[8:14],
	_LoggerTypeName[14:27],
	_LoggerTypeName[27:34],
	_LoggerTypeName[34:41],
	_LoggerTypeName[41:50],
	_LoggerTypeName[50:66],
}

// LoggerTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LoggerTypeString(s string) (LoggerType, error) {
	if val, ok := _LoggerTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LoggerTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LoggerType values", s)
}

// LoggerTypeValues returns all values of the enum
func LoggerTypeValues() []LoggerType {
	return _LoggerTypeValues
}

// LoggerTypeStrings returns a slice of all String values of the enum
func LoggerTypeStrings() []string {
	strs := make([]string, len(_LoggerTypeNames))
	copy(strs, _LoggerTypeNames)
	return strs
}

// IsALoggerType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LoggerType) IsALoggerType() bool {
	for _, v := range _LoggerTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for LoggerType
func (i LoggerType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for LoggerType
func (i *LoggerType) UnmarshalText(text []byte) error {
	var err error
	*i, err = LoggerTypeString(string(text))
	return err
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package consensus

import (
	"github.com/wavesplatform/gowaves/pkg/proto"
	"sync"
)

// Ensure, that stateInfoProviderMock does implement stateInfoProvider.
// If this is not the case, regenerate this file with moq.
var _ stateInfoProvider = &stateInfoProviderMock{}

// stateInfoProviderMock is a mock implementation of stateInfoProvider.
//
//	func TestSomethingThatUsesstateInfoProvider(t *testing.T) {
//
//		// make and configure a mocked stateInfoProvider
//		mockedstateInfoProvider := &stateInfoProviderMock{
//			HeaderByHeightFunc: func(height uint64) (*proto.BlockHeader, error) {
//				panic("mock out the HeaderByHeight method")
//			},
//			NewestAccountHasScriptFunc: func(addr proto.WavesAddress) (bool, error) {
//				panic("mock out the NewestAccountHasScript method")
//			},
//			NewestActivationHeightFunc: func(featureID int16) (uint64, error) {
//				panic("mock out the NewestActivationHeight method")
//			},
//			NewestEffectiveBalanceFunc: func(addr proto.Recipient, startHeight uint64, endHeight uint64) (uint64, error) {
//				panic("mock out the NewestEffectiveBalance method")
//			},
//			NewestHitSourceAtHeightFunc: func(height uint64) ([]byte, error) {
//				panic("mock out the NewestHitSourceAtHeight method")
//			},
//			NewestIsActiveAtHeightFunc: func(featureID int16, height uint64) (bool, error) {
//				panic("mock out the NewestIsActiveAtHeight method")
//			},
//		}
//
//		// use mockedstateInfoProvider in code that requires stateInfoProvider
//		// and then make assertions.
//
//	}
type stateInfoProviderMock struct {
	// HeaderByHeightFunc mocks the HeaderByHeight method.
	HeaderByHeightFunc func(height uint64) (*proto.BlockHeader, error)

	// NewestAccountHasScriptFunc mocks the NewestAccountHasScript method.
	NewestAccountHasScriptFunc func(addr proto.WavesAddress) (bool, error)

	// NewestActivationHeightFunc mocks the NewestActivationHeight method.
	NewestActivationHeightFunc func(featureID int16) (uint64, error)

	// NewestEffectiveBalanceFunc mocks the NewestEffectiveBalance method.
	NewestEffectiveBalanceFunc func(addr proto.Recipient, startHeight uint64, endHeight uint64) (uint64, error)

	// NewestHitSourceAtHeightFunc mocks the NewestHitSourceAtHeight method.
	NewestHitSourceAtHeightFunc func(height uint64) ([]byte, error)

	// NewestIsActiveAtHeightFunc mocks the NewestIsActiveAtHeight method.
	NewestIsActiveAtHeightFunc func(featureID int16, height uint64) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// HeaderByHeight holds details about calls to the HeaderByHeight method.
		HeaderByHeight []struct {
			// Height is the height argument value.
			Height uint64
		}
		// NewestAccountHasScript holds details about calls to the NewestAccountHasScript method.
		NewestAccountHasScript []struct {
			// Addr is the addr argument value.
			Addr proto.WavesAddress
		}
		// NewestActivationHeight holds details about calls to the NewestActivationHeight method.
		NewestActivationHeight []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
		}
		// NewestEffectiveBalance holds details about calls to the NewestEffectiveBalance method.
		NewestEffectiveBalance []struct {
			// Addr is the addr argument value.
			Addr proto.Recipient
			// StartHeight is the startHeight argument value.
			StartHeight uint64
			// EndHeight is the endHeight argument value.
			EndHeight uint64
		}
		// NewestHitSourceAtHeight holds details about calls to the NewestHitSourceAtHeight method.
		NewestHitSourceAtHeight []struct {
			// Height is the height argument value.
			Height uint64
		}
		// NewestIsActiveAtHeight holds details about calls to the NewestIsActiveAtHeight method.
		NewestIsActiveAtHeight []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
			// Height is the height argument value.
			Height uint64
		}
	}
	lockHeaderByHeight          sync.RWMutex
	lockNewestAccountHasScript  sync.RWMutex
	lockNewestActivationHeight  sync.RWMutex
	lockNewestEffectiveBalance  sync.RWMutex
	lockNewestHitSourceAtHeight sync.RWMutex
	lockNewestIsActiveAtHeight  sync.RWMutex
}

// HeaderByHeight calls HeaderByHeightFunc.
func (mock *stateInfoProviderMock) HeaderByHeight(height uint64) (*proto.BlockHeader, error) {
	if mock.HeaderByHeightFunc == nil {
		panic("stateInfoProviderMock.HeaderByHeightFunc: method is nil but stateInfoProvider.HeaderByHeight was just called")
	}
	callInfo := struct {
		Height uint64
	}{
		Height: height,
	}
	mock.lockHeaderByHeight.Lock()
	mock.calls.HeaderByHeight = append(mock.calls.HeaderByHeight, callInfo)
	mock.lockHeaderByHeight.Unlock()
	return mock.HeaderByHeightFunc(height)
}

// HeaderByHeightCalls gets all the calls that were made to HeaderByHeight.
// Check the length with:
//
//	len(mockedstateInfoProvider.HeaderByHeightCalls())
func (mock *stateInfoProviderMock) HeaderByHeightCalls() []struct {
	Height uint64
} {
	var calls []struct {
		Height uint64
	}
	mock.lockHeaderByHeight.RLock()
	calls = mock.calls.HeaderByHeight
	mock.lockHeaderByHeight.RUnlock()
	return calls
}

// NewestAccountHasScript calls NewestAccountHasScriptFunc.
func (mock *stateInfoProviderMock) NewestAccountHasScript(addr proto.WavesAddress) (bool, error) {
	if mock.NewestAccountHasScriptFunc == nil {
		panic("stateInfoProviderMock.NewestAccountHasScriptFunc: method is nil but stateInfoProvider.NewestAccountHasScript was just called")
	}
	callInfo := struct {
		Addr proto.WavesAddress
	}{
		Addr: addr,
	}
	mock.lockNewestAccountHasScript.Lock()
	mock.calls.NewestAccountHasScript = append(mock.calls.NewestAccountHasScript, callInfo)
	mock.lockNewestAccountHasScript.Unlock()
	return mock.NewestAccountHasScriptFunc(addr)
}

// NewestAccountHasScriptCalls gets all the calls that were made to NewestAccountHasScript.
// Check the length with:
//
//	len(mockedstateInfoProvider.NewestAccountHasScriptCalls())
func (mock *stateInfoProviderMock) NewestAccountHasScriptCalls() []struct {
	Addr proto.WavesAddress
} {
	var calls []struct {
		Addr proto.WavesAddress
	}
	mock.lockNewestAccountHasScript.RLock()
	calls = mock.calls.NewestAccountHasScript
	mock.lockNewestAccountHasScript.RUnlock()
	return calls
}

// NewestActivationHeight calls NewestActivationHeightFunc.
func (mock *stateInfoProviderMock) NewestActivationHeight(featureID int16) (uint64, error) {
	if mock.NewestActivationHeightFunc == nil {
		panic("stateInfoProviderMock.NewestActivationHeightFunc: method is nil but stateInfoProvider.NewestActivationHeight was just called")
	}
	callInfo := struct {
		FeatureID int16
	}{
		FeatureID: featureID,
	}
	mock.lockNewestActivationHeight.Lock()
	mock.calls.NewestActivationHeight = append(mock.calls.NewestActivationHeight, callInfo)
	mock.lockNewestActivationHeight.Unlock()
	return mock.NewestActivationHeightFunc(featureID)
}

// NewestActivationHeightCalls gets all the calls that were made to NewestActivationHeight.
// Check the length with:
//
//	len(mockedstateInfoProvider.NewestActivationHeightCalls())
func (mock *stateInfoProviderMock) NewestActivationHeightCalls() []struct {
	FeatureID int16
} {
	var calls []struct {
		FeatureID int16
	}
	mock.lockNewestActivationHeight.RLock()
	calls = mock.calls.NewestActivationHeight
	mock.lockNewestActivationHeight.RUnlock()
	return calls
}

// NewestEffectiveBalance calls NewestEffectiveBalanceFunc.
func (mock *stateInfoProviderMock) NewestEffectiveBalance(addr proto.Recipient, startHeight uint64, endHeight uint64) (uint64, error) {
	if mock.NewestEffectiveBalanceFunc == nil {
		panic("stateInfoProviderMock.NewestEffectiveBalanceFunc: method is nil but stateInfoProvider.NewestEffectiveBalance was just called")
	}
	callInfo := struct {
		Addr        proto.Recipient
		StartHeight uint64
		EndHeight   uint64
	}{
		Addr:        addr,
		StartHeight: startHeight,
		EndHeight:   endHeight,
	}
	mock.lockNewestEffectiveBalance.Lock()
	mock.calls.NewestEffectiveBalance = append(mock.calls.NewestEffectiveBalance, callInfo)
	mock.lockNewestEffectiveBalance.Unlock()
	return mock.NewestEffectiveBalanceFunc(addr, startHeight, endHeight)
}

// NewestEffectiveBalanceCalls gets all the calls that were made to NewestEffectiveBalance.
// Check the length with:
//
//	len(mockedstateInfoProvider.NewestEffectiveBalanceCalls())
func (mock *stateInfoProviderMock) NewestEffectiveBalanceCalls() []struct {
	Addr        proto.Recipient
	StartHeight uint64
	EndHeight   uint64
} {
	var calls []struct {
		Addr        proto.Recipient
		StartHeight uint64
		EndHeight   uint64
	}
	mock.lockNewestEffectiveBalance.RLock()
	calls = mock.calls.NewestEffectiveBalance
	mock.lockNewestEffectiveBalance.RUnlock()
	return calls
}

// NewestHitSourceAtHeight calls NewestHitSourceAtHeightFunc.
func (mock *stateInfoProviderMock) NewestHitSourceAtHeight(height uint64) ([]byte, error) {
	if mock.NewestHitSourceAtHeightFunc == nil {
		panic("stateInfoProviderMock.NewestHitSourceAtHeightFunc: method is nil but stateInfoProvider.NewestHitSourceAtHeight was just called")
	}
	callInfo := struct {
		Height uint64
	}{
		Height: height,
	}
	mock.lockNewestHitSourceAtHeight.Lock()
	mock.calls.NewestHitSourceAtHeight = append(mock.calls.NewestHitSourceAtHeight, callInfo)
	mock.lockNewestHitSourceAtHeight.Unlock()
	return mock.NewestHitSourceAtHeightFunc(height)
}

// NewestHitSourceAtHeightCalls gets all the calls that were made to NewestHitSourceAtHeight.
// Check the length with:
//
//	len(mockedstateInfoProvider.NewestHitSourceAtHeightCalls())
func (mock *stateInfoProviderMock) NewestHitSourceAtHeightCalls() []struct {
	Height uint64
} {
	var calls []struct {
		Height uint64
	}
	mock.lockNewestHitSourceAtHeight.RLock()
	calls = mock.calls.NewestHitSourceAtHeight
	mock.lockNewestHitSourceAtHeight.RUnlock()
	return calls
}

// NewestIsActiveAtHeight calls NewestIsActiveAtHeightFunc.
func (mock *stateInfoProviderMock) NewestIsActiveAtHeight(featureID int16, height uint64) (bool, error) {
	if mock.NewestIsActiveAtHeightFunc == nil {
		panic("stateInfoProviderMock.NewestIsActiveAtHeightFunc: method is nil but stateInfoProvider.NewestIsActiveAtHeight was just called")
	}
	callInfo := struct {
		FeatureID int16
		Height    uint64
	}{
		FeatureID: featureID,
		Height:    height,
	}
	mock.lockNewestIsActiveAtHeight.Lock()
	mock.calls.NewestIsActiveAtHeight = append(mock.calls.NewestIsActiveAtHeight, callInfo)
	mock.lockNewestIsActiveAtHeight.Unlock()
	return mock.NewestIsActiveAtHeightFunc(featureID, height)
}

// NewestIsActiveAtHeightCalls gets all the calls that were made to NewestIsActiveAtHeight.
// Check the length with:
//
//	len(mockedstateInfoProvider.NewestIsActiveAtHeightCalls())
func (mock *stateInfoProviderMock) NewestIsActiveAtHeightCalls() []struct {
	FeatureID int16
	Height    uint64
} {
	var calls []struct {
		FeatureID int16
		Height    uint64
	}
	mock.lockNewestIsActiveAtHeight.RLock()
	calls = mock.calls.NewestIsActiveAtHeight
	mock.lockNewestIsActiveAtHeight.RUnlock()
	return calls
}

// Code generated by ride/generate/main.go. DO NOT EDIT.

package ride

import (
	"fmt"
	"github.com/pkg/errors"
	"strconv"
	"strings"
)

type rideTuple interface {
	get(name string) (rideType, error)
	size() int
}

type tuple2 struct {
	el1 rideType
	el2 rideType
}

func newTuple2(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 2 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple2{
		el1: args[0],
		el2: args[1],
	}, nil
}

func (a tuple2) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple2 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple2 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	default:
		return nil, errors.Errorf("tuple2 has no element '%s'", name)
	}
}

func (a tuple2) instanceOf() string {
	return fmt.Sprintf("(%s, %s)", a.el1.instanceOf(), a.el2.instanceOf())
}

func (a tuple2) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple2)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2)
}

func (a tuple2) size() int {
	return 2
}

func (a tuple2) lines() []string {
	return []string{a.String()}
}

func (a tuple2) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple3 struct {
	el1 rideType
	el2 rideType
	el3 rideType
}

func newTuple3(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 3 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple3{
		el1: args[0],
		el2: args[1],
		el3: args[2],
	}, nil
}

func (a tuple3) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple3 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple3 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	default:
		return nil, errors.Errorf("tuple3 has no element '%s'", name)
	}
}

func (a tuple3) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf())
}

func (a tuple3) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple3)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3)
}

func (a tuple3) size() int {
	return 3
}

func (a tuple3) lines() []string {
	return []string{a.String()}
}

func (a tuple3) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple4 struct {
	el1 rideType
	el2 rideType
	el3 rideType
	el4 rideType
}

func newTuple4(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 4 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple4{
		el1: args[0],
		el2: args[1],
		el3: args[2],
		el4: args[3],
	}, nil
}

func (a tuple4) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple4 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple4 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	default:
		return nil, errors.Errorf("tuple4 has no element '%s'", name)
	}
}

func (a tuple4) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf())
}

func (a tuple4) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple4)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4)
}

func (a tuple4) size() int {
	return 4
}

func (a tuple4) lines() []string {
	return []string{a.String()}
}

func (a tuple4) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple5 struct {
	el1 rideType
	el2 rideType
	el3 rideType
	el4 rideType
	el5 rideType
}

func newTuple5(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 5 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple5{
		el1: args[0],
		el2: args[1],
		el3: args[2],
		el4: args[3],
		el5: args[4],
	}, nil
}

func (a tuple5) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple5 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple5 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	default:
		return nil, errors.Errorf("tuple5 has no element '%s'", name)
	}
}

func (a tuple5) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf())
}

func (a tuple5) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple5)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5)
}

func (a tuple5) size() int {
	return 5
}

func (a tuple5) lines() []string {
	return []string{a.String()}
}

func (a tuple5) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple6 struct {
	el1 rideType
	el2 rideType
	el3 rideType
	el4 rideType
	el5 rideType
	el6 rideType
}

func newTuple6(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 6 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple6{
		el1: args[0],
		el2: args[1],
		el3: args[2],
		el4: args[3],
		el5: args[4],
		el6: args[5],
	}, nil
}

func (a tuple6) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple6 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple6 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	default:
		return nil, errors.Errorf("tuple6 has no element '%s'", name)
	}
}

func (a tuple6) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf())
}

func (a tuple6) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple6)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6)
}

func (a tuple6) size() int {
	return 6
}

func (a tuple6) lines() []string {
	return []string{a.String()}
}

func (a tuple6) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple7 struct {
	el1 rideType
	el2 rideType
	el3 rideType
	el4 rideType
	el5 rideType
	el6 rideType
	el7 rideType
}

func newTuple7(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 7 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple7{
		el1: args[0],
		el2: args[1],
		el3: args[2],
		el4: args[3],
		el5: args[4],
		el6: args[5],
		el7: args[6],
	}, nil
}

func (a tuple7) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple7 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple7 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	case 7:
		return a.el7, nil
	default:
		return nil, errors.Errorf("tuple7 has no element '%s'", name)
	}
}

func (a tuple7) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf(), a.el7.instanceOf())
}

func (a tuple7) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple7)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6) && a.el7.eq(o.el7)
}

func (a tuple7) size() int {
	return 7
}

func (a tuple7) lines() []string {
	return []string{a.String()}
}

func (a tuple7) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el7.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple8 struct {
	el1 rideType
	el2 rideType
	el3 rideType
	el4 rideType
	el5 rideType
	el6 rideType
	el7 rideType
	el8 rideType
}

func newTuple8(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 8 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple8{
		el1: args[0],
		el2: args[1],
		el3: args[2],
		el4: args[3],
		el5: args[4],
		el6: args[5],
		el7: args[6],
		el8: args[7],
	}, nil
}

func (a tuple8) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple8 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple8 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	case 7:
		return a.el7, nil
	case 8:
		return a.el8, nil
	default:
		return nil, errors.Errorf("tuple8 has no element '%s'", name)
	}
}

func (a tuple8) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf(), a.el7.instanceOf(), a.el8.instanceOf())
}

func (a tuple8) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple8)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6) && a.el7.eq(o.el7) && a.el8.eq(o.el8)
}

func (a tuple8) size() int {
	return 8
}

func (a tuple8) lines() []string {
	return []string{a.String()}
}

func (a tuple8) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el7.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el8.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple9 struct {
	el1 rideType
	el2 rideType
	el3 rideType
	el4 rideType
	el5 rideType
	el6 rideType
	el7 rideType
	el8 rideType
	el9 rideType
}

func newTuple9(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 9 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple9{
		el1: args[0],
		el2: args[1],
		el3: args[2],
		el4: args[3],
		el5: args[4],
		el6: args[5],
		el7: args[6],
		el8: args[7],
		el9: args[8],
	}, nil
}

func (a tuple9) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple9 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple9 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	case 7:
		return a.el7, nil
	case 8:
		return a.el8, nil
	case 9:
		return a.el9, nil
	default:
		return nil, errors.Errorf("tuple9 has no element '%s'", name)
	}
}

func (a tuple9) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf(), a.el7.instanceOf(), a.el8.instanceOf(), a.el9.instanceOf())
}

func (a tuple9) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple9)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6) && a.el7.eq(o.el7) && a.el8.eq(o.el8) && a.el9.eq(o.el9)
}

func (a tuple9) size() int {
	return 9
}

func (a tuple9) lines() []string {
	return []string{a.String()}
}

func (a tuple9) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el7.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el8.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el9.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple10 struct {
	el1  rideType
	el2  rideType
	el3  rideType
	el4  rideType
	el5  rideType
	el6  rideType
	el7  rideType
	el8  rideType
	el9  rideType
	el10 rideType
}

func newTuple10(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 10 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple10{
		el1:  args[0],
		el2:  args[1],
		el3:  args[2],
		el4:  args[3],
		el5:  args[4],
		el6:  args[5],
		el7:  args[6],
		el8:  args[7],
		el9:  args[8],
		el10: args[9],
	}, nil
}

func (a tuple10) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple10 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple10 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	case 7:
		return a.el7, nil
	case 8:
		return a.el8, nil
	case 9:
		return a.el9, nil
	case 10:
		return a.el10, nil
	default:
		return nil, errors.Errorf("tuple10 has no element '%s'", name)
	}
}

func (a tuple10) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf(), a.el7.instanceOf(), a.el8.instanceOf(), a.el9.instanceOf(), a.el10.instanceOf())
}

func (a tuple10) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple10)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6) && a.el7.eq(o.el7) && a.el8.eq(o.el8) && a.el9.eq(o.el9) && a.el10.eq(o.el10)
}

func (a tuple10) size() int {
	return 10
}

func (a tuple10) lines() []string {
	return []string{a.String()}
}

func (a tuple10) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el7.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el8.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el9.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el10.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple11 struct {
	el1  rideType
	el2  rideType
	el3  rideType
	el4  rideType
	el5  rideType
	el6  rideType
	el7  rideType
	el8  rideType
	el9  rideType
	el10 rideType
	el11 rideType
}

func newTuple11(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 11 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple11{
		el1:  args[0],
		el2:  args[1],
		el3:  args[2],
		el4:  args[3],
		el5:  args[4],
		el6:  args[5],
		el7:  args[6],
		el8:  args[7],
		el9:  args[8],
		el10: args[9],
		el11: args[10],
	}, nil
}

func (a tuple11) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple11 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple11 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	case 7:
		return a.el7, nil
	case 8:
		return a.el8, nil
	case 9:
		return a.el9, nil
	case 10:
		return a.el10, nil
	case 11:
		return a.el11, nil
	default:
		return nil, errors.Errorf("tuple11 has no element '%s'", name)
	}
}

func (a tuple11) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf(), a.el7.instanceOf(), a.el8.instanceOf(), a.el9.instanceOf(), a.el10.instanceOf(), a.el11.instanceOf())
}

func (a tuple11) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple11)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6) && a.el7.eq(o.el7) && a.el8.eq(o.el8) && a.el9.eq(o.el9) && a.el10.eq(o.el10) && a.el11.eq(o.el11)
}

func (a tuple11) size() int {
	return 11
}

func (a tuple11) lines() []string {
	return []string{a.String()}
}

func (a tuple11) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el7.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el8.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el9.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el10.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el11.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple12 struct {
	el1  rideType
	el2  rideType
	el3  rideType
	el4  rideType
	el5  rideType
	el6  rideType
	el7  rideType
	el8  rideType
	el9  rideType
	el10 rideType
	el11 rideType
	el12 rideType
}

func newTuple12(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 12 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple12{
		el1:  args[0],
		el2:  args[1],
		el3:  args[2],
		el4:  args[3],
		el5:  args[4],
		el6:  args[5],
		el7:  args[6],
		el8:  args[7],
		el9:  args[8],
		el10: args[9],
		el11: args[10],
		el12: args[11],
	}, nil
}

func (a tuple12) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple12 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple12 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	case 7:
		return a.el7, nil
	case 8:
		return a.el8, nil
	case 9:
		return a.el9, nil
	case 10:
		return a.el10, nil
	case 11:
		return a.el11, nil
	case 12:
		return a.el12, nil
	default:
		return nil, errors.Errorf("tuple12 has no element '%s'", name)
	}
}

func (a tuple12) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf(), a.el7.instanceOf(), a.el8.instanceOf(), a.el9.instanceOf(), a.el10.instanceOf(), a.el11.instanceOf(), a.el12.instanceOf())
}

func (a tuple12) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple12)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6) && a.el7.eq(o.el7) && a.el8.eq(o.el8) && a.el9.eq(o.el9) && a.el10.eq(o.el10) && a.el11.eq(o.el11) && a.el12.eq(o.el12)
}

func (a tuple12) size() int {
	return 12
}

func (a tuple12) lines() []string {
	return []string{a.String()}
}

func (a tuple12) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el7.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el8.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el9.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el10.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el11.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el12.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple13 struct {
	el1  rideType
	el2  rideType
	el3  rideType
	el4  rideType
	el5  rideType
	el6  rideType
	el7  rideType
	el8  rideType
	el9  rideType
	el10 rideType
	el11 rideType
	el12 rideType
	el13 rideType
}

func newTuple13(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 13 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple13{
		el1:  args[0],
		el2:  args[1],
		el3:  args[2],
		el4:  args[3],
		el5:  args[4],
		el6:  args[5],
		el7:  args[6],
		el8:  args[7],
		el9:  args[8],
		el10: args[9],
		el11: args[10],
		el12: args[11],
		el13: args[12],
	}, nil
}

func (a tuple13) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple13 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple13 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	case 7:
		return a.el7, nil
	case 8:
		return a.el8, nil
	case 9:
		return a.el9, nil
	case 10:
		return a.el10, nil
	case 11:
		return a.el11, nil
	case 12:
		return a.el12, nil
	case 13:
		return a.el13, nil
	default:
		return nil, errors.Errorf("tuple13 has no element '%s'", name)
	}
}

func (a tuple13) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf(), a.el7.instanceOf(), a.el8.instanceOf(), a.el9.instanceOf(), a.el10.instanceOf(), a.el11.instanceOf(), a.el12.instanceOf(), a.el13.instanceOf())
}

func (a tuple13) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple13)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6) && a.el7.eq(o.el7) && a.el8.eq(o.el8) && a.el9.eq(o.el9) && a.el10.eq(o.el10) && a.el11.eq(o.el11) && a.el12.eq(o.el12) && a.el13.eq(o.el13)
}

func (a tuple13) size() int {
	return 13
}

func (a tuple13) lines() []string {
	return []string{a.String()}
}

func (a tuple13) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el7.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el8.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el9.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el10.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el11.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el12.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el13.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple14 struct {
	el1  rideType
	el2  rideType
	el3  rideType
	el4  rideType
	el5  rideType
	el6  rideType
	el7  rideType
	el8  rideType
	el9  rideType
	el10 rideType
	el11 rideType
	el12 rideType
	el13 rideType
	el14 rideType
}

func newTuple14(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 14 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple14{
		el1:  args[0],
		el2:  args[1],
		el3:  args[2],
		el4:  args[3],
		el5:  args[4],
		el6:  args[5],
		el7:  args[6],
		el8:  args[7],
		el9:  args[8],
		el10: args[9],
		el11: args[10],
		el12: args[11],
		el13: args[12],
		el14: args[13],
	}, nil
}

func (a tuple14) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple14 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple14 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	case 7:
		return a.el7, nil
	case 8:
		return a.el8, nil
	case 9:
		return a.el9, nil
	case 10:
		return a.el10, nil
	case 11:
		return a.el11, nil
	case 12:
		return a.el12, nil
	case 13:
		return a.el13, nil
	case 14:
		return a.el14, nil
	default:
		return nil, errors.Errorf("tuple14 has no element '%s'", name)
	}
}

func (a tuple14) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf(), a.el7.instanceOf(), a.el8.instanceOf(), a.el9.instanceOf(), a.el10.instanceOf(), a.el11.instanceOf(), a.el12.instanceOf(), a.el13.instanceOf(), a.el14.instanceOf())
}

func (a tuple14) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple14)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6) && a.el7.eq(o.el7) && a.el8.eq(o.el8) && a.el9.eq(o.el9) && a.el10.eq(o.el10) && a.el11.eq(o.el11) && a.el12.eq(o.el12) && a.el13.eq(o.el13) && a.el14.eq(o.el14)
}

func (a tuple14) size() int {
	return 14
}

func (a tuple14) lines() []string {
	return []string{a.String()}
}

func (a tuple14) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el7.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el8.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el9.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el10.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el11.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el12.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el13.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el14.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple15 struct {
	el1  rideType
	el2  rideType
	el3  rideType
	el4  rideType
	el5  rideType
	el6  rideType
	el7  rideType
	el8  rideType
	el9  rideType
	el10 rideType
	el11 rideType
	el12 rideType
	el13 rideType
	el14 rideType
	el15 rideType
}

func newTuple15(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 15 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple15{
		el1:  args[0],
		el2:  args[1],
		el3:  args[2],
		el4:  args[3],
		el5:  args[4],
		el6:  args[5],
		el7:  args[6],
		el8:  args[7],
		el9:  args[8],
		el10: args[9],
		el11: args[10],
		el12: args[11],
		el13: args[12],
		el14: args[13],
		el15: args[14],
	}, nil
}

func (a tuple15) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple15 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple15 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	case 7:
		return a.el7, nil
	case 8:
		return a.el8, nil
	case 9:
		return a.el9, nil
	case 10:
		return a.el10, nil
	case 11:
		return a.el11, nil
	case 12:
		return a.el12, nil
	case 13:
		return a.el13, nil
	case 14:
		return a.el14, nil
	case 15:
		return a.el15, nil
	default:
		return nil, errors.Errorf("tuple15 has no element '%s'", name)
	}
}

func (a tuple15) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf(), a.el7.instanceOf(), a.el8.instanceOf(), a.el9.instanceOf(), a.el10.instanceOf(), a.el11.instanceOf(), a.el12.instanceOf(), a.el13.instanceOf(), a.el14.instanceOf(), a.el15.instanceOf())
}

func (a tuple15) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple15)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6) && a.el7.eq(o.el7) && a.el8.eq(o.el8) && a.el9.eq(o.el9) && a.el10.eq(o.el10) && a.el11.eq(o.el11) && a.el12.eq(o.el12) && a.el13.eq(o.el13) && a.el14.eq(o.el14) && a.el15.eq(o.el15)
}

func (a tuple15) size() int {
	return 15
}

func (a tuple15) lines() []string {
	return []string{a.String()}
}

func (a tuple15) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el7.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el8.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el9.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el10.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el11.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el12.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el13.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el14.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el15.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple16 struct {
	el1  rideType
	el2  rideType
	el3  rideType
	el4  rideType
	el5  rideType
	el6  rideType
	el7  rideType
	el8  rideType
	el9  rideType
	el10 rideType
	el11 rideType
	el12 rideType
	el13 rideType
	el14 rideType
	el15 rideType
	el16 rideType
}

func newTuple16(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 16 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple16{
		el1:  args[0],
		el2:  args[1],
		el3:  args[2],
		el4:  args[3],
		el5:  args[4],
		el6:  args[5],
		el7:  args[6],
		el8:  args[7],
		el9:  args[8],
		el10: args[9],
		el11: args[10],
		el12: args[11],
		el13: args[12],
		el14: args[13],
		el15: args[14],
		el16: args[15],
	}, nil
}

func (a tuple16) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple16 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple16 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	case 7:
		return a.el7, nil
	case 8:
		return a.el8, nil
	case 9:
		return a.el9, nil
	case 10:
		return a.el10, nil
	case 11:
		return a.el11, nil
	case 12:
		return a.el12, nil
	case 13:
		return a.el13, nil
	case 14:
		return a.el14, nil
	case 15:
		return a.el15, nil
	case 16:
		return a.el16, nil
	default:
		return nil, errors.Errorf("tuple16 has no element '%s'", name)
	}
}

func (a tuple16) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf(), a.el7.instanceOf(), a.el8.instanceOf(), a.el9.instanceOf(), a.el10.instanceOf(), a.el11.instanceOf(), a.el12.instanceOf(), a.el13.instanceOf(), a.el14.instanceOf(), a.el15.instanceOf(), a.el16.instanceOf())
}

func (a tuple16) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple16)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6) && a.el7.eq(o.el7) && a.el8.eq(o.el8) && a.el9.eq(o.el9) && a.el10.eq(o.el10) && a.el11.eq(o.el11) && a.el12.eq(o.el12) && a.el13.eq(o.el13) && a.el14.eq(o.el14) && a.el15.eq(o.el15) && a.el16.eq(o.el16)
}

func (a tuple16) size() int {
	return 16
}

func (a tuple16) lines() []string {
	return []string{a.String()}
}

func (a tuple16) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el7.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el8.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el9.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el10.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el11.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el12.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el13.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el14.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el15.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el16.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple17 struct {
	el1  rideType
	el2  rideType
	el3  rideType
	el4  rideType
	el5  rideType
	el6  rideType
	el7  rideType
	el8  rideType
	el9  rideType
	el10 rideType
	el11 rideType
	el12 rideType
	el13 rideType
	el14 rideType
	el15 rideType
	el16 rideType
	el17 rideType
}

func newTuple17(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 17 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple17{
		el1:  args[0],
		el2:  args[1],
		el3:  args[2],
		el4:  args[3],
		el5:  args[4],
		el6:  args[5],
		el7:  args[6],
		el8:  args[7],
		el9:  args[8],
		el10: args[9],
		el11: args[10],
		el12: args[11],
		el13: args[12],
		el14: args[13],
		el15: args[14],
		el16: args[15],
		el17: args[16],
	}, nil
}

func (a tuple17) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple17 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple17 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	case 7:
		return a.el7, nil
	case 8:
		return a.el8, nil
	case 9:
		return a.el9, nil
	case 10:
		return a.el10, nil
	case 11:
		return a.el11, nil
	case 12:
		return a.el12, nil
	case 13:
		return a.el13, nil
	case 14:
		return a.el14, nil
	case 15:
		return a.el15, nil
	case 16:
		return a.el16, nil
	case 17:
		return a.el17, nil
	default:
		return nil, errors.Errorf("tuple17 has no element '%s'", name)
	}
}

func (a tuple17) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf(), a.el7.instanceOf(), a.el8.instanceOf(), a.el9.instanceOf(), a.el10.instanceOf(), a.el11.instanceOf(), a.el12.instanceOf(), a.el13.instanceOf(), a.el14.instanceOf(), a.el15.instanceOf(), a.el16.instanceOf(), a.el17.instanceOf())
}

func (a tuple17) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple17)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6) && a.el7.eq(o.el7) && a.el8.eq(o.el8) && a.el9.eq(o.el9) && a.el10.eq(o.el10) && a.el11.eq(o.el11) && a.el12.eq(o.el12) && a.el13.eq(o.el13) && a.el14.eq(o.el14) && a.el15.eq(o.el15) && a.el16.eq(o.el16) && a.el17.eq(o.el17)
}

func (a tuple17) size() int {
	return 17
}

func (a tuple17) lines() []string {
	return []string{a.String()}
}

func (a tuple17) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el7.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el8.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el9.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el10.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el11.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el12.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el13.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el14.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el15.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el16.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el17.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple18 struct {
	el1  rideType
	el2  rideType
	el3  rideType
	el4  rideType
	el5  rideType
	el6  rideType
	el7  rideType
	el8  rideType
	el9  rideType
	el10 rideType
	el11 rideType
	el12 rideType
	el13 rideType
	el14 rideType
	el15 rideType
	el16 rideType
	el17 rideType
	el18 rideType
}

func newTuple18(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 18 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple18{
		el1:  args[0],
		el2:  args[1],
		el3:  args[2],
		el4:  args[3],
		el5:  args[4],
		el6:  args[5],
		el7:  args[6],
		el8:  args[7],
		el9:  args[8],
		el10: args[9],
		el11: args[10],
		el12: args[11],
		el13: args[12],
		el14: args[13],
		el15: args[14],
		el16: args[15],
		el17: args[16],
		el18: args[17],
	}, nil
}

func (a tuple18) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple18 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple18 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	case 7:
		return a.el7, nil
	case 8:
		return a.el8, nil
	case 9:
		return a.el9, nil
	case 10:
		return a.el10, nil
	case 11:
		return a.el11, nil
	case 12:
		return a.el12, nil
	case 13:
		return a.el13, nil
	case 14:
		return a.el14, nil
	case 15:
		return a.el15, nil
	case 16:
		return a.el16, nil
	case 17:
		return a.el17, nil
	case 18:
		return a.el18, nil
	default:
		return nil, errors.Errorf("tuple18 has no element '%s'", name)
	}
}

func (a tuple18) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf(), a.el7.instanceOf(), a.el8.instanceOf(), a.el9.instanceOf(), a.el10.instanceOf(), a.el11.instanceOf(), a.el12.instanceOf(), a.el13.instanceOf(), a.el14.instanceOf(), a.el15.instanceOf(), a.el16.instanceOf(), a.el17.instanceOf(), a.el18.instanceOf())
}

func (a tuple18) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple18)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6) && a.el7.eq(o.el7) && a.el8.eq(o.el8) && a.el9.eq(o.el9) && a.el10.eq(o.el10) && a.el11.eq(o.el11) && a.el12.eq(o.el12) && a.el13.eq(o.el13) && a.el14.eq(o.el14) && a.el15.eq(o.el15) && a.el16.eq(o.el16) && a.el17.eq(o.el17) && a.el18.eq(o.el18)
}

func (a tuple18) size() int {
	return 18
}

func (a tuple18) lines() []string {
	return []string{a.String()}
}

func (a tuple18) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el7.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el8.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el9.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el10.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el11.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el12.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el13.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el14.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el15.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el16.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el17.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el18.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple19 struct {
	el1  rideType
	el2  rideType
	el3  rideType
	el4  rideType
	el5  rideType
	el6  rideType
	el7  rideType
	el8  rideType
	el9  rideType
	el10 rideType
	el11 rideType
	el12 rideType
	el13 rideType
	el14 rideType
	el15 rideType
	el16 rideType
	el17 rideType
	el18 rideType
	el19 rideType
}

func newTuple19(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 19 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple19{
		el1:  args[0],
		el2:  args[1],
		el3:  args[2],
		el4:  args[3],
		el5:  args[4],
		el6:  args[5],
		el7:  args[6],
		el8:  args[7],
		el9:  args[8],
		el10: args[9],
		el11: args[10],
		el12: args[11],
		el13: args[12],
		el14: args[13],
		el15: args[14],
		el16: args[15],
		el17: args[16],
		el18: args[17],
		el19: args[18],
	}, nil
}

func (a tuple19) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple19 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple19 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	case 7:
		return a.el7, nil
	case 8:
		return a.el8, nil
	case 9:
		return a.el9, nil
	case 10:
		return a.el10, nil
	case 11:
		return a.el11, nil
	case 12:
		return a.el12, nil
	case 13:
		return a.el13, nil
	case 14:
		return a.el14, nil
	case 15:
		return a.el15, nil
	case 16:
		return a.el16, nil
	case 17:
		return a.el17, nil
	case 18:
		return a.el18, nil
	case 19:
		return a.el19, nil
	default:
		return nil, errors.Errorf("tuple19 has no element '%s'", name)
	}
}

func (a tuple19) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf(), a.el7.instanceOf(), a.el8.instanceOf(), a.el9.instanceOf(), a.el10.instanceOf(), a.el11.instanceOf(), a.el12.instanceOf(), a.el13.instanceOf(), a.el14.instanceOf(), a.el15.instanceOf(), a.el16.instanceOf(), a.el17.instanceOf(), a.el18.instanceOf(), a.el19.instanceOf())
}

func (a tuple19) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple19)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6) && a.el7.eq(o.el7) && a.el8.eq(o.el8) && a.el9.eq(o.el9) && a.el10.eq(o.el10) && a.el11.eq(o.el11) && a.el12.eq(o.el12) && a.el13.eq(o.el13) && a.el14.eq(o.el14) && a.el15.eq(o.el15) && a.el16.eq(o.el16) && a.el17.eq(o.el17) && a.el18.eq(o.el18) && a.el19.eq(o.el19)
}

func (a tuple19) size() int {
	return 19
}

func (a tuple19) lines() []string {
	return []string{a.String()}
}

func (a tuple19) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el7.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el8.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el9.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el10.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el11.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el12.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el13.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el14.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el15.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el16.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el17.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el18.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el19.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple20 struct {
	el1  rideType
	el2  rideType
	el3  rideType
	el4  rideType
	el5  rideType
	el6  rideType
	el7  rideType
	el8  rideType
	el9  rideType
	el10 rideType
	el11 rideType
	el12 rideType
	el13 rideType
	el14 rideType
	el15 rideType
	el16 rideType
	el17 rideType
	el18 rideType
	el19 rideType
	el20 rideType
}

func newTuple20(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 20 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple20{
		el1:  args[0],
		el2:  args[1],
		el3:  args[2],
		el4:  args[3],
		el5:  args[4],
		el6:  args[5],
		el7:  args[6],
		el8:  args[7],
		el9:  args[8],
		el10: args[9],
		el11: args[10],
		el12: args[11],
		el13: args[12],
		el14: args[13],
		el15: args[14],
		el16: args[15],
		el17: args[16],
		el18: args[17],
		el19: args[18],
		el20: args[19],
	}, nil
}

func (a tuple20) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple20 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple20 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	case 7:
		return a.el7, nil
	case 8:
		return a.el8, nil
	case 9:
		return a.el9, nil
	case 10:
		return a.el10, nil
	case 11:
		return a.el11, nil
	case 12:
		return a.el12, nil
	case 13:
		return a.el13, nil
	case 14:
		return a.el14, nil
	case 15:
		return a.el15, nil
	case 16:
		return a.el16, nil
	case 17:
		return a.el17, nil
	case 18:
		return a.el18, nil
	case 19:
		return a.el19, nil
	case 20:
		return a.el20, nil
	default:
		return nil, errors.Errorf("tuple20 has no element '%s'", name)
	}
}

func (a tuple20) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf(), a.el7.instanceOf(), a.el8.instanceOf(), a.el9.instanceOf(), a.el10.instanceOf(), a.el11.instanceOf(), a.el12.instanceOf(), a.el13.instanceOf(), a.el14.instanceOf(), a.el15.instanceOf(), a.el16.instanceOf(), a.el17.instanceOf(), a.el18.instanceOf(), a.el19.instanceOf(), a.el20.instanceOf())
}

func (a tuple20) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple20)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6) && a.el7.eq(o.el7) && a.el8.eq(o.el8) && a.el9.eq(o.el9) && a.el10.eq(o.el10) && a.el11.eq(o.el11) && a.el12.eq(o.el12) && a.el13.eq(o.el13) && a.el14.eq(o.el14) && a.el15.eq(o.el15) && a.el16.eq(o.el16) && a.el17.eq(o.el17) && a.el18.eq(o.el18) && a.el19.eq(o.el19) && a.el20.eq(o.el20)
}

func (a tuple20) size() int {
	return 20
}

func (a tuple20) lines() []string {
	return []string{a.String()}
}

func (a tuple20) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el7.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el8.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el9.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el10.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el11.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el12.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el13.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el14.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el15.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el16.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el17.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el18.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el19.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el20.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple21 struct {
	el1  rideType
	el2  rideType
	el3  rideType
	el4  rideType
	el5  rideType
	el6  rideType
	el7  rideType
	el8  rideType
	el9  rideType
	el10 rideType
	el11 rideType
	el12 rideType
	el13 rideType
	el14 rideType
	el15 rideType
	el16 rideType
	el17 rideType
	el18 rideType
	el19 rideType
	el20 rideType
	el21 rideType
}

func newTuple21(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 21 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple21{
		el1:  args[0],
		el2:  args[1],
		el3:  args[2],
		el4:  args[3],
		el5:  args[4],
		el6:  args[5],
		el7:  args[6],
		el8:  args[7],
		el9:  args[8],
		el10: args[9],
		el11: args[10],
		el12: args[11],
		el13: args[12],
		el14: args[13],
		el15: args[14],
		el16: args[15],
		el17: args[16],
		el18: args[17],
		el19: args[18],
		el20: args[19],
		el21: args[20],
	}, nil
}

func (a tuple21) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple21 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple21 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	case 7:
		return a.el7, nil
	case 8:
		return a.el8, nil
	case 9:
		return a.el9, nil
	case 10:
		return a.el10, nil
	case 11:
		return a.el11, nil
	case 12:
		return a.el12, nil
	case 13:
		return a.el13, nil
	case 14:
		return a.el14, nil
	case 15:
		return a.el15, nil
	case 16:
		return a.el16, nil
	case 17:
		return a.el17, nil
	case 18:
		return a.el18, nil
	case 19:
		return a.el19, nil
	case 20:
		return a.el20, nil
	case 21:
		return a.el21, nil
	default:
		return nil, errors.Errorf("tuple21 has no element '%s'", name)
	}
}

func (a tuple21) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf(), a.el7.instanceOf(), a.el8.instanceOf(), a.el9.instanceOf(), a.el10.instanceOf(), a.el11.instanceOf(), a.el12.instanceOf(), a.el13.instanceOf(), a.el14.instanceOf(), a.el15.instanceOf(), a.el16.instanceOf(), a.el17.instanceOf(), a.el18.instanceOf(), a.el19.instanceOf(), a.el20.instanceOf(), a.el21.instanceOf())
}

func (a tuple21) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple21)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6) && a.el7.eq(o.el7) && a.el8.eq(o.el8) && a.el9.eq(o.el9) && a.el10.eq(o.el10) && a.el11.eq(o.el11) && a.el12.eq(o.el12) && a.el13.eq(o.el13) && a.el14.eq(o.el14) && a.el15.eq(o.el15) && a.el16.eq(o.el16) && a.el17.eq(o.el17) && a.el18.eq(o.el18) && a.el19.eq(o.el19) && a.el20.eq(o.el20) && a.el21.eq(o.el21)
}

func (a tuple21) size() int {
	return 21
}

func (a tuple21) lines() []string {
	return []string{a.String()}
}

func (a tuple21) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el7.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el8.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el9.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el10.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el11.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el12.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el13.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el14.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el15.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el16.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el17.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el18.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el19.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el20.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el21.String())
	sb.WriteRune(')')
	return sb.String()
}

type tuple22 struct {
	el1  rideType
	el2  rideType
	el3  rideType
	el4  rideType
	el5  rideType
	el6  rideType
	el7  rideType
	el8  rideType
	el9  rideType
	el10 rideType
	el11 rideType
	el12 rideType
	el13 rideType
	el14 rideType
	el15 rideType
	el16 rideType
	el17 rideType
	el18 rideType
	el19 rideType
	el20 rideType
	el21 rideType
	el22 rideType
}

func newTuple22(_ environment, args ...rideType) (rideType, error) {
	if len(args) != 22 {
		return nil, errors.New("invalid number of arguments")
	}
	return tuple22{
		el1:  args[0],
		el2:  args[1],
		el3:  args[2],
		el4:  args[3],
		el5:  args[4],
		el6:  args[5],
		el7:  args[6],
		el8:  args[7],
		el9:  args[8],
		el10: args[9],
		el11: args[10],
		el12: args[11],
		el13: args[12],
		el14: args[13],
		el15: args[14],
		el16: args[15],
		el17: args[16],
		el18: args[17],
		el19: args[18],
		el20: args[19],
		el21: args[20],
		el22: args[21],
	}, nil
}

func (a tuple22) get(name string) (rideType, error) {
	if !strings.HasPrefix(name, "_") {
		return nil, errors.Errorf("tuple22 has no element '%s'", name)
	}
	i, err := strconv.Atoi(strings.TrimPrefix(name, "_"))
	if err != nil {
		return nil, errors.Errorf("tuple22 has no element '%s'", name)
	}
	switch i {
	case 1:
		return a.el1, nil
	case 2:
		return a.el2, nil
	case 3:
		return a.el3, nil
	case 4:
		return a.el4, nil
	case 5:
		return a.el5, nil
	case 6:
		return a.el6, nil
	case 7:
		return a.el7, nil
	case 8:
		return a.el8, nil
	case 9:
		return a.el9, nil
	case 10:
		return a.el10, nil
	case 11:
		return a.el11, nil
	case 12:
		return a.el12, nil
	case 13:
		return a.el13, nil
	case 14:
		return a.el14, nil
	case 15:
		return a.el15, nil
	case 16:
		return a.el16, nil
	case 17:
		return a.el17, nil
	case 18:
		return a.el18, nil
	case 19:
		return a.el19, nil
	case 20:
		return a.el20, nil
	case 21:
		return a.el21, nil
	case 22:
		return a.el22, nil
	default:
		return nil, errors.Errorf("tuple22 has no element '%s'", name)
	}
}

func (a tuple22) instanceOf() string {
	return fmt.Sprintf("(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", a.el1.instanceOf(), a.el2.instanceOf(), a.el3.instanceOf(), a.el4.instanceOf(), a.el5.instanceOf(), a.el6.instanceOf(), a.el7.instanceOf(), a.el8.instanceOf(), a.el9.instanceOf(), a.el10.instanceOf(), a.el11.instanceOf(), a.el12.instanceOf(), a.el13.instanceOf(), a.el14.instanceOf(), a.el15.instanceOf(), a.el16.instanceOf(), a.el17.instanceOf(), a.el18.instanceOf(), a.el19.instanceOf(), a.el20.instanceOf(), a.el21.instanceOf(), a.el22.instanceOf())
}

func (a tuple22) eq(other rideType) bool {
	if a.instanceOf() != other.instanceOf() {
		return false
	}
	o, ok := other.(tuple22)
	if !ok {
		return false
	}
	return a.el1.eq(o.el1) && a.el2.eq(o.el2) && a.el3.eq(o.el3) && a.el4.eq(o.el4) && a.el5.eq(o.el5) && a.el6.eq(o.el6) && a.el7.eq(o.el7) && a.el8.eq(o.el8) && a.el9.eq(o.el9) && a.el10.eq(o.el10) && a.el11.eq(o.el11) && a.el12.eq(o.el12) && a.el13.eq(o.el13) && a.el14.eq(o.el14) && a.el15.eq(o.el15) && a.el16.eq(o.el16) && a.el17.eq(o.el17) && a.el18.eq(o.el18) && a.el19.eq(o.el19) && a.el20.eq(o.el20) && a.el21.eq(o.el21) && a.el22.eq(o.el22)
}

func (a tuple22) size() int {
	return 22
}

func (a tuple22) lines() []string {
	return []string{a.String()}
}

func (a tuple22) String() string {
	sb := new(strings.Builder)
	sb.WriteRune('(')
	sb.WriteString(a.el1.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el2.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el3.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el4.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el5.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el6.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el7.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el8.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el9.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el10.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el11.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el12.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el13.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el14.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el15.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el16.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el17.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el18.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el19.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el20.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el21.String())
	sb.WriteRune(',')
	sb.WriteRune(' ')
	sb.WriteString(a.el22.String())
	sb.WriteRune(')')
	return sb.String()
}

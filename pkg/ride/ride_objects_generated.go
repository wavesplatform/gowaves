// Code generated by ride/generate_ride_objects/main.go. DO NOT EDIT.

package ride

import (
	"strings"

	"github.com/pkg/errors"
)

type AssetPair struct {
	amountAsset rideType
	priceAsset  rideType
}

func NewAssetPair(amountAsset rideType, priceAsset rideType) AssetPair {
	return AssetPair{
		amountAsset: amountAsset,
		priceAsset:  priceAsset,
	}
}

func (o AssetPair) instanceOf() string {
	return assetPairTypeName
}

func (o AssetPair) eq(other rideType) bool {
	if oo, ok := other.(AssetPair); ok {
		if !o.amountAsset.eq(oo.amountAsset) {
			return false
		}
		if !o.priceAsset.eq(oo.priceAsset) {
			return false
		}
		return true
	}
	return false
}

func (o AssetPair) get(prop string) (rideType, error) {
	switch prop {
	case amountAssetField:
		return o.amountAsset, nil
	case priceAssetField:
		return o.priceAsset, nil
	default:
		return nil, errors.Errorf("type '%s' has no property '%s'", o.instanceOf(), prop)
	}
}

func (o AssetPair) copy() rideType {
	return NewAssetPair(o.amountAsset, o.priceAsset)
}

func (o AssetPair) lines() []string {
	r := make([]string, 0, 2+2)
	r = append(r, assetPairTypeName+"(")
	r = append(r, fieldLines(amountAssetField, o.amountAsset.lines())...)
	r = append(r, fieldLines(priceAssetField, o.priceAsset.lines())...)
	r = append(r, ")")
	return r
}

func (o AssetPair) String() string {
	return strings.Join(o.lines(), "\n")
}

type TransferEntry struct {
	recipient rideType
	amount    rideType
}

func NewTransferEntry(recipient rideType, amount rideType) TransferEntry {
	return TransferEntry{
		recipient: recipient,
		amount:    amount,
	}
}

func (o TransferEntry) instanceOf() string {
	return transferEntryTypeName
}

func (o TransferEntry) eq(other rideType) bool {
	if oo, ok := other.(TransferEntry); ok {
		if !o.recipient.eq(oo.recipient) {
			return false
		}
		if !o.amount.eq(oo.amount) {
			return false
		}
		return true
	}
	return false
}

func (o TransferEntry) get(prop string) (rideType, error) {
	switch prop {
	case recipientField:
		return o.recipient, nil
	case amountField:
		return o.amount, nil
	default:
		return nil, errors.Errorf("type '%s' has no property '%s'", o.instanceOf(), prop)
	}
}

func (o TransferEntry) copy() rideType {
	return NewTransferEntry(o.recipient, o.amount)
}

func (o TransferEntry) lines() []string {
	r := make([]string, 0, 2+2)
	r = append(r, transferEntryTypeName+"(")
	r = append(r, fieldLines(recipientField, o.recipient.lines())...)
	r = append(r, fieldLines(amountField, o.amount.lines())...)
	r = append(r, ")")
	return r
}

func (o TransferEntry) String() string {
	return strings.Join(o.lines(), "\n")
}

package internal

import (
	"fmt"
	"go/format"
	"os"
	"strings"
)

type Coder struct {
	pkg     string
	imports []string
	sb      *strings.Builder
}

func NewCoder(pkg string) *Coder {
	return &Coder{
		pkg: pkg,
		sb:  new(strings.Builder),
	}
}

func (c *Coder) Import(imp string, as ...string) {
	al := ""
	if len(as) > 0 {
		al = as[0]
	}
	c.imports = append(c.imports, al+"\""+imp+"\"")
}

func (c *Coder) Line(format string, args ...any) {
	c.sb.WriteString(fmt.Sprintf(format+"\n", args...))
}

func (c *Coder) Save(name string) error {
	sb := new(strings.Builder)
	sb.WriteString("// Code generated by ride/generate/main.go. DO NOT EDIT.\n")
	sb.WriteString("\n")
	sb.WriteString(fmt.Sprintf("package %s\n", c.pkg))
	sb.WriteString("\n")
	if len(c.imports) > 0 {
		sb.WriteString("import (\n")
		for _, imp := range c.imports {
			sb.WriteString(imp + "\n")
		}
		sb.WriteString(")\n")
	}
	sb.WriteString(c.sb.String())
	code := sb.String()
	b, err := format.Source([]byte(code))
	if err != nil {
		fmt.Println("====== Generated code ======")
		fmt.Println(code)
		fmt.Println("============================")
		return err
	}
	return os.WriteFile(name, b, 0600)
}

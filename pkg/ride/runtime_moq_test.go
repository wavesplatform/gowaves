// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ride

import (
	"github.com/wavesplatform/gowaves/pkg/proto"
	"github.com/wavesplatform/gowaves/pkg/types"
	"sync"
)

// Ensure, that MockRideEnvironment does implement RideEnvironment.
// If this is not the case, regenerate this file with moq.
var _ RideEnvironment = &MockRideEnvironment{}

// MockRideEnvironment is a mock implementation of RideEnvironment.
//
//     func TestSomethingThatUsesRideEnvironment(t *testing.T) {
//
//         // make and configure a mocked RideEnvironment
//         mockedRideEnvironment := &MockRideEnvironment{
//             SetInvocationFunc: func(inv rideObject)  {
// 	               panic("mock out the SetInvocation method")
//             },
//             actionsFunc: func() []proto.ScriptAction {
// 	               panic("mock out the actions method")
//             },
//             appendActionsFunc: func(actions []proto.ScriptAction)  {
// 	               panic("mock out the appendActions method")
//             },
//             applyToStateFunc: func(actions []proto.ScriptAction) error {
// 	               panic("mock out the applyToState method")
//             },
//             blockFunc: func() rideObject {
// 	               panic("mock out the block method")
//             },
//             checkMessageLengthFunc: func(in1 int) bool {
// 	               panic("mock out the checkMessageLength method")
//             },
//             heightFunc: func() rideInt {
// 	               panic("mock out the height method")
//             },
//             incrementInvCountFunc: func()  {
// 	               panic("mock out the incrementInvCount method")
//             },
//             invCountFunc: func() uint64 {
// 	               panic("mock out the invCount method")
//             },
//             invocationFunc: func() rideObject {
// 	               panic("mock out the invocation method")
//             },
//             schemeFunc: func() byte {
// 	               panic("mock out the scheme method")
//             },
//             setNewDAppAddressFunc: func(address proto.Address)  {
// 	               panic("mock out the setNewDAppAddress method")
//             },
//             smartAppendActionsFunc: func(actions []proto.ScriptAction) error {
// 	               panic("mock out the smartAppendActions method")
//             },
//             stateFunc: func() types.SmartState {
// 	               panic("mock out the state method")
//             },
//             thisFunc: func() rideType {
// 	               panic("mock out the this method")
//             },
//             transactionFunc: func() rideObject {
// 	               panic("mock out the transaction method")
//             },
//             txIDFunc: func() rideType {
// 	               panic("mock out the txID method")
//             },
//         }
//
//         // use mockedRideEnvironment in code that requires RideEnvironment
//         // and then make assertions.
//
//     }
type MockRideEnvironment struct {
	// SetInvocationFunc mocks the SetInvocation method.
	SetInvocationFunc func(inv rideObject)

	// actionsFunc mocks the actions method.
	actionsFunc func() []proto.ScriptAction

	// appendActionsFunc mocks the appendActions method.
	appendActionsFunc func(actions []proto.ScriptAction)

	// applyToStateFunc mocks the applyToState method.
	applyToStateFunc func(actions []proto.ScriptAction) error

	// blockFunc mocks the block method.
	blockFunc func() rideObject

	// checkMessageLengthFunc mocks the checkMessageLength method.
	checkMessageLengthFunc func(in1 int) bool

	// heightFunc mocks the height method.
	heightFunc func() rideInt

	// incrementInvCountFunc mocks the incrementInvCount method.
	incrementInvCountFunc func()

	// invCountFunc mocks the invCount method.
	invCountFunc func() uint64

	// invocationFunc mocks the invocation method.
	invocationFunc func() rideObject

	// schemeFunc mocks the scheme method.
	schemeFunc func() byte

	// setNewDAppAddressFunc mocks the setNewDAppAddress method.
	setNewDAppAddressFunc func(address proto.Address)

	// smartAppendActionsFunc mocks the smartAppendActions method.
	smartAppendActionsFunc func(actions []proto.ScriptAction) error

	// stateFunc mocks the state method.
	stateFunc func() types.SmartState

	// thisFunc mocks the this method.
	thisFunc func() rideType

	// transactionFunc mocks the transaction method.
	transactionFunc func() rideObject

	// txIDFunc mocks the txID method.
	txIDFunc func() rideType

	// calls tracks calls to the methods.
	calls struct {
		// SetInvocation holds details about calls to the SetInvocation method.
		SetInvocation []struct {
			// Inv is the inv argument value.
			Inv rideObject
		}
		// actions holds details about calls to the actions method.
		actions []struct {
		}
		// appendActions holds details about calls to the appendActions method.
		appendActions []struct {
			// Actions is the actions argument value.
			Actions []proto.ScriptAction
		}
		// applyToState holds details about calls to the applyToState method.
		applyToState []struct {
			// Actions is the actions argument value.
			Actions []proto.ScriptAction
		}
		// block holds details about calls to the block method.
		block []struct {
		}
		// checkMessageLength holds details about calls to the checkMessageLength method.
		checkMessageLength []struct {
			// In1 is the in1 argument value.
			In1 int
		}
		// height holds details about calls to the height method.
		height []struct {
		}
		// incrementInvCount holds details about calls to the incrementInvCount method.
		incrementInvCount []struct {
		}
		// invCount holds details about calls to the invCount method.
		invCount []struct {
		}
		// invocation holds details about calls to the invocation method.
		invocation []struct {
		}
		// scheme holds details about calls to the scheme method.
		scheme []struct {
		}
		// setNewDAppAddress holds details about calls to the setNewDAppAddress method.
		setNewDAppAddress []struct {
			// Address is the address argument value.
			Address proto.Address
		}
		// smartAppendActions holds details about calls to the smartAppendActions method.
		smartAppendActions []struct {
			// Actions is the actions argument value.
			Actions []proto.ScriptAction
		}
		// state holds details about calls to the state method.
		state []struct {
		}
		// this holds details about calls to the this method.
		this []struct {
		}
		// transaction holds details about calls to the transaction method.
		transaction []struct {
		}
		// txID holds details about calls to the txID method.
		txID []struct {
		}
	}
	lockSetInvocation      sync.RWMutex
	lockactions            sync.RWMutex
	lockappendActions      sync.RWMutex
	lockapplyToState       sync.RWMutex
	lockblock              sync.RWMutex
	lockcheckMessageLength sync.RWMutex
	lockheight             sync.RWMutex
	lockincrementInvCount  sync.RWMutex
	lockinvCount           sync.RWMutex
	lockinvocation         sync.RWMutex
	lockscheme             sync.RWMutex
	locksetNewDAppAddress  sync.RWMutex
	locksmartAppendActions sync.RWMutex
	lockstate              sync.RWMutex
	lockthis               sync.RWMutex
	locktransaction        sync.RWMutex
	locktxID               sync.RWMutex
}

// SetInvocation calls SetInvocationFunc.
func (mock *MockRideEnvironment) SetInvocation(inv rideObject) {
	if mock.SetInvocationFunc == nil {
		panic("MockRideEnvironment.SetInvocationFunc: method is nil but RideEnvironment.SetInvocation was just called")
	}
	callInfo := struct {
		Inv rideObject
	}{
		Inv: inv,
	}
	mock.lockSetInvocation.Lock()
	mock.calls.SetInvocation = append(mock.calls.SetInvocation, callInfo)
	mock.lockSetInvocation.Unlock()
	mock.SetInvocationFunc(inv)
}

// SetInvocationCalls gets all the calls that were made to SetInvocation.
// Check the length with:
//     len(mockedRideEnvironment.SetInvocationCalls())
func (mock *MockRideEnvironment) SetInvocationCalls() []struct {
	Inv rideObject
} {
	var calls []struct {
		Inv rideObject
	}
	mock.lockSetInvocation.RLock()
	calls = mock.calls.SetInvocation
	mock.lockSetInvocation.RUnlock()
	return calls
}

// actions calls actionsFunc.
func (mock *MockRideEnvironment) actions() []proto.ScriptAction {
	if mock.actionsFunc == nil {
		panic("MockRideEnvironment.actionsFunc: method is nil but RideEnvironment.actions was just called")
	}
	callInfo := struct {
	}{}
	mock.lockactions.Lock()
	mock.calls.actions = append(mock.calls.actions, callInfo)
	mock.lockactions.Unlock()
	return mock.actionsFunc()
}

// actionsCalls gets all the calls that were made to actions.
// Check the length with:
//     len(mockedRideEnvironment.actionsCalls())
func (mock *MockRideEnvironment) actionsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockactions.RLock()
	calls = mock.calls.actions
	mock.lockactions.RUnlock()
	return calls
}

// appendActions calls appendActionsFunc.
func (mock *MockRideEnvironment) appendActions(actions []proto.ScriptAction) {
	if mock.appendActionsFunc == nil {
		panic("MockRideEnvironment.appendActionsFunc: method is nil but RideEnvironment.appendActions was just called")
	}
	callInfo := struct {
		Actions []proto.ScriptAction
	}{
		Actions: actions,
	}
	mock.lockappendActions.Lock()
	mock.calls.appendActions = append(mock.calls.appendActions, callInfo)
	mock.lockappendActions.Unlock()
	mock.appendActionsFunc(actions)
}

// appendActionsCalls gets all the calls that were made to appendActions.
// Check the length with:
//     len(mockedRideEnvironment.appendActionsCalls())
func (mock *MockRideEnvironment) appendActionsCalls() []struct {
	Actions []proto.ScriptAction
} {
	var calls []struct {
		Actions []proto.ScriptAction
	}
	mock.lockappendActions.RLock()
	calls = mock.calls.appendActions
	mock.lockappendActions.RUnlock()
	return calls
}

// applyToState calls applyToStateFunc.
func (mock *MockRideEnvironment) applyToState(actions []proto.ScriptAction) error {
	if mock.applyToStateFunc == nil {
		panic("MockRideEnvironment.applyToStateFunc: method is nil but RideEnvironment.applyToState was just called")
	}
	callInfo := struct {
		Actions []proto.ScriptAction
	}{
		Actions: actions,
	}
	mock.lockapplyToState.Lock()
	mock.calls.applyToState = append(mock.calls.applyToState, callInfo)
	mock.lockapplyToState.Unlock()
	return mock.applyToStateFunc(actions)
}

// applyToStateCalls gets all the calls that were made to applyToState.
// Check the length with:
//     len(mockedRideEnvironment.applyToStateCalls())
func (mock *MockRideEnvironment) applyToStateCalls() []struct {
	Actions []proto.ScriptAction
} {
	var calls []struct {
		Actions []proto.ScriptAction
	}
	mock.lockapplyToState.RLock()
	calls = mock.calls.applyToState
	mock.lockapplyToState.RUnlock()
	return calls
}

// block calls blockFunc.
func (mock *MockRideEnvironment) block() rideObject {
	if mock.blockFunc == nil {
		panic("MockRideEnvironment.blockFunc: method is nil but RideEnvironment.block was just called")
	}
	callInfo := struct {
	}{}
	mock.lockblock.Lock()
	mock.calls.block = append(mock.calls.block, callInfo)
	mock.lockblock.Unlock()
	return mock.blockFunc()
}

// blockCalls gets all the calls that were made to block.
// Check the length with:
//     len(mockedRideEnvironment.blockCalls())
func (mock *MockRideEnvironment) blockCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockblock.RLock()
	calls = mock.calls.block
	mock.lockblock.RUnlock()
	return calls
}

// checkMessageLength calls checkMessageLengthFunc.
func (mock *MockRideEnvironment) checkMessageLength(in1 int) bool {
	if mock.checkMessageLengthFunc == nil {
		panic("MockRideEnvironment.checkMessageLengthFunc: method is nil but RideEnvironment.checkMessageLength was just called")
	}
	callInfo := struct {
		In1 int
	}{
		In1: in1,
	}
	mock.lockcheckMessageLength.Lock()
	mock.calls.checkMessageLength = append(mock.calls.checkMessageLength, callInfo)
	mock.lockcheckMessageLength.Unlock()
	return mock.checkMessageLengthFunc(in1)
}

// checkMessageLengthCalls gets all the calls that were made to checkMessageLength.
// Check the length with:
//     len(mockedRideEnvironment.checkMessageLengthCalls())
func (mock *MockRideEnvironment) checkMessageLengthCalls() []struct {
	In1 int
} {
	var calls []struct {
		In1 int
	}
	mock.lockcheckMessageLength.RLock()
	calls = mock.calls.checkMessageLength
	mock.lockcheckMessageLength.RUnlock()
	return calls
}

// height calls heightFunc.
func (mock *MockRideEnvironment) height() rideInt {
	if mock.heightFunc == nil {
		panic("MockRideEnvironment.heightFunc: method is nil but RideEnvironment.height was just called")
	}
	callInfo := struct {
	}{}
	mock.lockheight.Lock()
	mock.calls.height = append(mock.calls.height, callInfo)
	mock.lockheight.Unlock()
	return mock.heightFunc()
}

// heightCalls gets all the calls that were made to height.
// Check the length with:
//     len(mockedRideEnvironment.heightCalls())
func (mock *MockRideEnvironment) heightCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockheight.RLock()
	calls = mock.calls.height
	mock.lockheight.RUnlock()
	return calls
}

// incrementInvCount calls incrementInvCountFunc.
func (mock *MockRideEnvironment) incrementInvCount() {
	if mock.incrementInvCountFunc == nil {
		panic("MockRideEnvironment.incrementInvCountFunc: method is nil but RideEnvironment.incrementInvCount was just called")
	}
	callInfo := struct {
	}{}
	mock.lockincrementInvCount.Lock()
	mock.calls.incrementInvCount = append(mock.calls.incrementInvCount, callInfo)
	mock.lockincrementInvCount.Unlock()
	mock.incrementInvCountFunc()
}

// incrementInvCountCalls gets all the calls that were made to incrementInvCount.
// Check the length with:
//     len(mockedRideEnvironment.incrementInvCountCalls())
func (mock *MockRideEnvironment) incrementInvCountCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockincrementInvCount.RLock()
	calls = mock.calls.incrementInvCount
	mock.lockincrementInvCount.RUnlock()
	return calls
}

// invCount calls invCountFunc.
func (mock *MockRideEnvironment) invCount() uint64 {
	if mock.invCountFunc == nil {
		panic("MockRideEnvironment.invCountFunc: method is nil but RideEnvironment.invCount was just called")
	}
	callInfo := struct {
	}{}
	mock.lockinvCount.Lock()
	mock.calls.invCount = append(mock.calls.invCount, callInfo)
	mock.lockinvCount.Unlock()
	return mock.invCountFunc()
}

// invCountCalls gets all the calls that were made to invCount.
// Check the length with:
//     len(mockedRideEnvironment.invCountCalls())
func (mock *MockRideEnvironment) invCountCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockinvCount.RLock()
	calls = mock.calls.invCount
	mock.lockinvCount.RUnlock()
	return calls
}

// invocation calls invocationFunc.
func (mock *MockRideEnvironment) invocation() rideObject {
	if mock.invocationFunc == nil {
		panic("MockRideEnvironment.invocationFunc: method is nil but RideEnvironment.invocation was just called")
	}
	callInfo := struct {
	}{}
	mock.lockinvocation.Lock()
	mock.calls.invocation = append(mock.calls.invocation, callInfo)
	mock.lockinvocation.Unlock()
	return mock.invocationFunc()
}

// invocationCalls gets all the calls that were made to invocation.
// Check the length with:
//     len(mockedRideEnvironment.invocationCalls())
func (mock *MockRideEnvironment) invocationCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockinvocation.RLock()
	calls = mock.calls.invocation
	mock.lockinvocation.RUnlock()
	return calls
}

// scheme calls schemeFunc.
func (mock *MockRideEnvironment) scheme() byte {
	if mock.schemeFunc == nil {
		panic("MockRideEnvironment.schemeFunc: method is nil but RideEnvironment.scheme was just called")
	}
	callInfo := struct {
	}{}
	mock.lockscheme.Lock()
	mock.calls.scheme = append(mock.calls.scheme, callInfo)
	mock.lockscheme.Unlock()
	return mock.schemeFunc()
}

// schemeCalls gets all the calls that were made to scheme.
// Check the length with:
//     len(mockedRideEnvironment.schemeCalls())
func (mock *MockRideEnvironment) schemeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockscheme.RLock()
	calls = mock.calls.scheme
	mock.lockscheme.RUnlock()
	return calls
}

// setNewDAppAddress calls setNewDAppAddressFunc.
func (mock *MockRideEnvironment) setNewDAppAddress(address proto.Address) {
	if mock.setNewDAppAddressFunc == nil {
		panic("MockRideEnvironment.setNewDAppAddressFunc: method is nil but RideEnvironment.setNewDAppAddress was just called")
	}
	callInfo := struct {
		Address proto.Address
	}{
		Address: address,
	}
	mock.locksetNewDAppAddress.Lock()
	mock.calls.setNewDAppAddress = append(mock.calls.setNewDAppAddress, callInfo)
	mock.locksetNewDAppAddress.Unlock()
	mock.setNewDAppAddressFunc(address)
}

// setNewDAppAddressCalls gets all the calls that were made to setNewDAppAddress.
// Check the length with:
//     len(mockedRideEnvironment.setNewDAppAddressCalls())
func (mock *MockRideEnvironment) setNewDAppAddressCalls() []struct {
	Address proto.Address
} {
	var calls []struct {
		Address proto.Address
	}
	mock.locksetNewDAppAddress.RLock()
	calls = mock.calls.setNewDAppAddress
	mock.locksetNewDAppAddress.RUnlock()
	return calls
}

// smartAppendActions calls smartAppendActionsFunc.
func (mock *MockRideEnvironment) smartAppendActions(actions []proto.ScriptAction) error {
	if mock.smartAppendActionsFunc == nil {
		panic("MockRideEnvironment.smartAppendActionsFunc: method is nil but RideEnvironment.smartAppendActions was just called")
	}
	callInfo := struct {
		Actions []proto.ScriptAction
	}{
		Actions: actions,
	}
	mock.locksmartAppendActions.Lock()
	mock.calls.smartAppendActions = append(mock.calls.smartAppendActions, callInfo)
	mock.locksmartAppendActions.Unlock()
	return mock.smartAppendActionsFunc(actions)
}

// smartAppendActionsCalls gets all the calls that were made to smartAppendActions.
// Check the length with:
//     len(mockedRideEnvironment.smartAppendActionsCalls())
func (mock *MockRideEnvironment) smartAppendActionsCalls() []struct {
	Actions []proto.ScriptAction
} {
	var calls []struct {
		Actions []proto.ScriptAction
	}
	mock.locksmartAppendActions.RLock()
	calls = mock.calls.smartAppendActions
	mock.locksmartAppendActions.RUnlock()
	return calls
}

// state calls stateFunc.
func (mock *MockRideEnvironment) state() types.SmartState {
	if mock.stateFunc == nil {
		panic("MockRideEnvironment.stateFunc: method is nil but RideEnvironment.state was just called")
	}
	callInfo := struct {
	}{}
	mock.lockstate.Lock()
	mock.calls.state = append(mock.calls.state, callInfo)
	mock.lockstate.Unlock()
	return mock.stateFunc()
}

// stateCalls gets all the calls that were made to state.
// Check the length with:
//     len(mockedRideEnvironment.stateCalls())
func (mock *MockRideEnvironment) stateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockstate.RLock()
	calls = mock.calls.state
	mock.lockstate.RUnlock()
	return calls
}

// this calls thisFunc.
func (mock *MockRideEnvironment) this() rideType {
	if mock.thisFunc == nil {
		panic("MockRideEnvironment.thisFunc: method is nil but RideEnvironment.this was just called")
	}
	callInfo := struct {
	}{}
	mock.lockthis.Lock()
	mock.calls.this = append(mock.calls.this, callInfo)
	mock.lockthis.Unlock()
	return mock.thisFunc()
}

// thisCalls gets all the calls that were made to this.
// Check the length with:
//     len(mockedRideEnvironment.thisCalls())
func (mock *MockRideEnvironment) thisCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockthis.RLock()
	calls = mock.calls.this
	mock.lockthis.RUnlock()
	return calls
}

// transaction calls transactionFunc.
func (mock *MockRideEnvironment) transaction() rideObject {
	if mock.transactionFunc == nil {
		panic("MockRideEnvironment.transactionFunc: method is nil but RideEnvironment.transaction was just called")
	}
	callInfo := struct {
	}{}
	mock.locktransaction.Lock()
	mock.calls.transaction = append(mock.calls.transaction, callInfo)
	mock.locktransaction.Unlock()
	return mock.transactionFunc()
}

// transactionCalls gets all the calls that were made to transaction.
// Check the length with:
//     len(mockedRideEnvironment.transactionCalls())
func (mock *MockRideEnvironment) transactionCalls() []struct {
} {
	var calls []struct {
	}
	mock.locktransaction.RLock()
	calls = mock.calls.transaction
	mock.locktransaction.RUnlock()
	return calls
}

// txID calls txIDFunc.
func (mock *MockRideEnvironment) txID() rideType {
	if mock.txIDFunc == nil {
		panic("MockRideEnvironment.txIDFunc: method is nil but RideEnvironment.txID was just called")
	}
	callInfo := struct {
	}{}
	mock.locktxID.Lock()
	mock.calls.txID = append(mock.calls.txID, callInfo)
	mock.locktxID.Unlock()
	return mock.txIDFunc()
}

// txIDCalls gets all the calls that were made to txID.
// Check the length with:
//     len(mockedRideEnvironment.txIDCalls())
func (mock *MockRideEnvironment) txIDCalls() []struct {
} {
	var calls []struct {
	}
	mock.locktxID.RLock()
	calls = mock.calls.txID
	mock.locktxID.RUnlock()
	return calls
}

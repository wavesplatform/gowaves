package main

import (
	"html/template"
	"os"
)

const templateFile = `// Code generated by ride/generate_ride_objects/main.go. DO NOT EDIT.

package ride

import (
	"strings"

	"github.com/pkg/errors"
)

{{range $action := .Actions}}type {{$action.StructName}} struct {
{{range $fields := $action.Fields}}	{{$fields.Name}} rideType
{{end}}}

func New{{$action.StructName}}({{range $fields := $action.Fields}}{{$fields.Name}} rideType, {{end}}) {{$action.StructName}} {
	return {{$action.StructName}}{
{{range $fields := $action.Fields}}		{{$fields.Name}}: {{$fields.Name}},
{{end}}   }
}

func (o {{$action.StructName}}) instanceOf() string {
	return {{$action.Name}}TypeName
}

func (o {{$action.StructName}}) eq(other rideType) bool {
	if oo, ok := other.({{$action.StructName}}); ok {
{{range $fields := $action.Fields}}		if !o.{{$fields.Name}}.eq(oo.{{$fields.Name}}) {
			return false
		}
{{end}}		return true
	}
	return false
}

func (o {{$action.StructName}}) get(prop string) (rideType, error) {
	switch prop {
{{range $fields := $action.Fields}}	case {{$fields.Name}}Field:
        return o.{{$fields.Name}}, nil
{{end}}	default:
		return nil, errors.Errorf("type '%s' has no property '%s'", o.instanceOf(), prop)
	}
}

func (o {{$action.StructName}}) copy() rideType {
	return New{{$action.StructName}}({{range $fields := $action.Fields}}o.{{$fields.Name}}, {{end}})
}

func (o {{$action.StructName}}) lines() []string {
	r := make([]string, 0, {{len $action.Fields}} + 2)
	r = append(r, {{$action.Name}}TypeName+"(")
{{range $fields := $action.Fields}}	r = append(r, fieldLines({{$fields.Name}}Field, o.{{$fields.Name}}.lines())...)
{{end}}	r = append(r, ")")
	return r
}

func (o {{$action.StructName}}) String() string {
	return strings.Join(o.lines(), "\n")
}

{{end}}
`

func main() {
	s, err := parseConfig()
	if err != nil {
		panic(err)
	}
	f, err := os.Create("ride_objects_generated.go")
	if err != nil {
		panic(err)
	}
	t, err := template.New("some").Parse(templateFile)
	if err != nil {
		panic(err)
	}
	err = t.Execute(f, s)
	if err != nil {
		panic(err)
	}
}

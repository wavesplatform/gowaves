package main

// Code generated by peg -output=compiler.peg.go compiler.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleCode
	rule_
	ruleEOL
	ruleNewLine
	ruleComment
	ruleEOF
	ruleTypes
	ruleInt
	ruleUint
	ruleBoolean
	ruleByteVector
	ruleDirectives
	ruleStartDirective
	ruleEndDirective
	ruleStdLibVersionDirective
	ruleWord
	ruleScriptTypeDirective
	ruleContentTypeDirective
	ruleDeclaration
)

var rul3s = [...]string{
	"Unknown",
	"Code",
	"_",
	"EOL",
	"NewLine",
	"Comment",
	"EOF",
	"Types",
	"Int",
	"Uint",
	"Boolean",
	"ByteVector",
	"Directives",
	"StartDirective",
	"EndDirective",
	"StdLibVersionDirective",
	"Word",
	"ScriptTypeDirective",
	"ContentTypeDirective",
	"Declaration",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Result struct {
	Buffer string
	buffer []rune
	rules  [20]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Result) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Result) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Result
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Result) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Result) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Result) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Result) error {
	return func(p *Result) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Result) error {
	return func(p *Result) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Result) Init(options ...func(*Result) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Code <- <(EOL? Directives Declaration+ EOF)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[ruleEOL]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				if !_rules[ruleDirectives]() {
					goto l0
				}
				if !_rules[ruleDeclaration]() {
					goto l0
				}
			l4:
				{
					position5, tokenIndex5 := position, tokenIndex
					if !_rules[ruleDeclaration]() {
						goto l5
					}
					goto l4
				l5:
					position, tokenIndex = position5, tokenIndex5
				}
				if !_rules[ruleEOF]() {
					goto l0
				}
				add(ruleCode, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 _ <- <(' ' / '\t')+> */
		func() bool {
			position6, tokenIndex6 := position, tokenIndex
			{
				position7 := position
				{
					position10, tokenIndex10 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l11
					}
					position++
					goto l10
				l11:
					position, tokenIndex = position10, tokenIndex10
					if buffer[position] != rune('\t') {
						goto l6
					}
					position++
				}
			l10:
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					{
						position12, tokenIndex12 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l13
						}
						position++
						goto l12
					l13:
						position, tokenIndex = position12, tokenIndex12
						if buffer[position] != rune('\t') {
							goto l9
						}
						position++
					}
				l12:
					goto l8
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
				add(rule_, position7)
			}
			return true
		l6:
			position, tokenIndex = position6, tokenIndex6
			return false
		},
		/* 2 EOL <- <(Comment / NewLine)+> */
		func() bool {
			position14, tokenIndex14 := position, tokenIndex
			{
				position15 := position
				{
					position18, tokenIndex18 := position, tokenIndex
					if !_rules[ruleComment]() {
						goto l19
					}
					goto l18
				l19:
					position, tokenIndex = position18, tokenIndex18
					if !_rules[ruleNewLine]() {
						goto l14
					}
				}
			l18:
			l16:
				{
					position17, tokenIndex17 := position, tokenIndex
					{
						position20, tokenIndex20 := position, tokenIndex
						if !_rules[ruleComment]() {
							goto l21
						}
						goto l20
					l21:
						position, tokenIndex = position20, tokenIndex20
						if !_rules[ruleNewLine]() {
							goto l17
						}
					}
				l20:
					goto l16
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				add(ruleEOL, position15)
			}
			return true
		l14:
			position, tokenIndex = position14, tokenIndex14
			return false
		},
		/* 3 NewLine <- <(_? (('\r' '\n') / ('\n' '\r') / '\r' / '\n'))> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[rule_]() {
						goto l24
					}
					goto l25
				l24:
					position, tokenIndex = position24, tokenIndex24
				}
			l25:
				{
					position26, tokenIndex26 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l27
					}
					position++
					if buffer[position] != rune('\n') {
						goto l27
					}
					position++
					goto l26
				l27:
					position, tokenIndex = position26, tokenIndex26
					if buffer[position] != rune('\n') {
						goto l28
					}
					position++
					if buffer[position] != rune('\r') {
						goto l28
					}
					position++
					goto l26
				l28:
					position, tokenIndex = position26, tokenIndex26
					if buffer[position] != rune('\r') {
						goto l29
					}
					position++
					goto l26
				l29:
					position, tokenIndex = position26, tokenIndex26
					if buffer[position] != rune('\n') {
						goto l22
					}
					position++
				}
			l26:
				add(ruleNewLine, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 4 Comment <- <(_? '#' (!('\r' / '\n') .)*)> */
		func() bool {
			position30, tokenIndex30 := position, tokenIndex
			{
				position31 := position
				{
					position32, tokenIndex32 := position, tokenIndex
					if !_rules[rule_]() {
						goto l32
					}
					goto l33
				l32:
					position, tokenIndex = position32, tokenIndex32
				}
			l33:
				if buffer[position] != rune('#') {
					goto l30
				}
				position++
			l34:
				{
					position35, tokenIndex35 := position, tokenIndex
					{
						position36, tokenIndex36 := position, tokenIndex
						{
							position37, tokenIndex37 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l38
							}
							position++
							goto l37
						l38:
							position, tokenIndex = position37, tokenIndex37
							if buffer[position] != rune('\n') {
								goto l36
							}
							position++
						}
					l37:
						goto l35
					l36:
						position, tokenIndex = position36, tokenIndex36
					}
					if !matchDot() {
						goto l35
					}
					goto l34
				l35:
					position, tokenIndex = position35, tokenIndex35
				}
				add(ruleComment, position31)
			}
			return true
		l30:
			position, tokenIndex = position30, tokenIndex30
			return false
		},
		/* 5 EOF <- <!.> */
		func() bool {
			position39, tokenIndex39 := position, tokenIndex
			{
				position40 := position
				{
					position41, tokenIndex41 := position, tokenIndex
					if !matchDot() {
						goto l41
					}
					goto l39
				l41:
					position, tokenIndex = position41, tokenIndex41
				}
				add(ruleEOF, position40)
			}
			return true
		l39:
			position, tokenIndex = position39, tokenIndex39
			return false
		},
		/* 6 Types <- <(Int / Uint / Boolean / ByteVector)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				{
					position44, tokenIndex44 := position, tokenIndex
					if !_rules[ruleInt]() {
						goto l45
					}
					goto l44
				l45:
					position, tokenIndex = position44, tokenIndex44
					if !_rules[ruleUint]() {
						goto l46
					}
					goto l44
				l46:
					position, tokenIndex = position44, tokenIndex44
					if !_rules[ruleBoolean]() {
						goto l47
					}
					goto l44
				l47:
					position, tokenIndex = position44, tokenIndex44
					if !_rules[ruleByteVector]() {
						goto l42
					}
				}
			l44:
				add(ruleTypes, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 7 Int <- <('-'? [0-9]+)> */
		func() bool {
			position48, tokenIndex48 := position, tokenIndex
			{
				position49 := position
				{
					position50, tokenIndex50 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l50
					}
					position++
					goto l51
				l50:
					position, tokenIndex = position50, tokenIndex50
				}
			l51:
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l48
				}
				position++
			l52:
				{
					position53, tokenIndex53 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l53
					}
					position++
					goto l52
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
				add(ruleInt, position49)
			}
			return true
		l48:
			position, tokenIndex = position48, tokenIndex48
			return false
		},
		/* 8 Uint <- <[0-9]+> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l54
				}
				position++
			l56:
				{
					position57, tokenIndex57 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l57
					}
					position++
					goto l56
				l57:
					position, tokenIndex = position57, tokenIndex57
				}
				add(ruleUint, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 9 Boolean <- <((('t' / 'T') ('r' / 'R') ('u' / 'U') ('e' / 'E')) / (('f' / 'F') ('a' / 'A') ('l' / 'L') ('s' / 'S') ('e' / 'E')))> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				{
					position60, tokenIndex60 := position, tokenIndex
					{
						position62, tokenIndex62 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l63
						}
						position++
						goto l62
					l63:
						position, tokenIndex = position62, tokenIndex62
						if buffer[position] != rune('T') {
							goto l61
						}
						position++
					}
				l62:
					{
						position64, tokenIndex64 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l65
						}
						position++
						goto l64
					l65:
						position, tokenIndex = position64, tokenIndex64
						if buffer[position] != rune('R') {
							goto l61
						}
						position++
					}
				l64:
					{
						position66, tokenIndex66 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l67
						}
						position++
						goto l66
					l67:
						position, tokenIndex = position66, tokenIndex66
						if buffer[position] != rune('U') {
							goto l61
						}
						position++
					}
				l66:
					{
						position68, tokenIndex68 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l69
						}
						position++
						goto l68
					l69:
						position, tokenIndex = position68, tokenIndex68
						if buffer[position] != rune('E') {
							goto l61
						}
						position++
					}
				l68:
					goto l60
				l61:
					position, tokenIndex = position60, tokenIndex60
					{
						position70, tokenIndex70 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l71
						}
						position++
						goto l70
					l71:
						position, tokenIndex = position70, tokenIndex70
						if buffer[position] != rune('F') {
							goto l58
						}
						position++
					}
				l70:
					{
						position72, tokenIndex72 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l73
						}
						position++
						goto l72
					l73:
						position, tokenIndex = position72, tokenIndex72
						if buffer[position] != rune('A') {
							goto l58
						}
						position++
					}
				l72:
					{
						position74, tokenIndex74 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l75
						}
						position++
						goto l74
					l75:
						position, tokenIndex = position74, tokenIndex74
						if buffer[position] != rune('L') {
							goto l58
						}
						position++
					}
				l74:
					{
						position76, tokenIndex76 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l77
						}
						position++
						goto l76
					l77:
						position, tokenIndex = position76, tokenIndex76
						if buffer[position] != rune('S') {
							goto l58
						}
						position++
					}
				l76:
					{
						position78, tokenIndex78 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l79
						}
						position++
						goto l78
					l79:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('E') {
							goto l58
						}
						position++
					}
				l78:
				}
			l60:
				add(ruleBoolean, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 10 ByteVector <- <(((('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '1' '6') / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '5' '8') / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '6' '4')) '\'' (!('\'' / '\r' / '\n') .)* '\'')> */
		func() bool {
			position80, tokenIndex80 := position, tokenIndex
			{
				position81 := position
				{
					position82, tokenIndex82 := position, tokenIndex
					{
						position84, tokenIndex84 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l85
						}
						position++
						goto l84
					l85:
						position, tokenIndex = position84, tokenIndex84
						if buffer[position] != rune('B') {
							goto l83
						}
						position++
					}
				l84:
					{
						position86, tokenIndex86 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l87
						}
						position++
						goto l86
					l87:
						position, tokenIndex = position86, tokenIndex86
						if buffer[position] != rune('A') {
							goto l83
						}
						position++
					}
				l86:
					{
						position88, tokenIndex88 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l89
						}
						position++
						goto l88
					l89:
						position, tokenIndex = position88, tokenIndex88
						if buffer[position] != rune('S') {
							goto l83
						}
						position++
					}
				l88:
					{
						position90, tokenIndex90 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l91
						}
						position++
						goto l90
					l91:
						position, tokenIndex = position90, tokenIndex90
						if buffer[position] != rune('E') {
							goto l83
						}
						position++
					}
				l90:
					if buffer[position] != rune('1') {
						goto l83
					}
					position++
					if buffer[position] != rune('6') {
						goto l83
					}
					position++
					goto l82
				l83:
					position, tokenIndex = position82, tokenIndex82
					{
						position93, tokenIndex93 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l94
						}
						position++
						goto l93
					l94:
						position, tokenIndex = position93, tokenIndex93
						if buffer[position] != rune('B') {
							goto l92
						}
						position++
					}
				l93:
					{
						position95, tokenIndex95 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l96
						}
						position++
						goto l95
					l96:
						position, tokenIndex = position95, tokenIndex95
						if buffer[position] != rune('A') {
							goto l92
						}
						position++
					}
				l95:
					{
						position97, tokenIndex97 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l98
						}
						position++
						goto l97
					l98:
						position, tokenIndex = position97, tokenIndex97
						if buffer[position] != rune('S') {
							goto l92
						}
						position++
					}
				l97:
					{
						position99, tokenIndex99 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l100
						}
						position++
						goto l99
					l100:
						position, tokenIndex = position99, tokenIndex99
						if buffer[position] != rune('E') {
							goto l92
						}
						position++
					}
				l99:
					if buffer[position] != rune('5') {
						goto l92
					}
					position++
					if buffer[position] != rune('8') {
						goto l92
					}
					position++
					goto l82
				l92:
					position, tokenIndex = position82, tokenIndex82
					{
						position101, tokenIndex101 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l102
						}
						position++
						goto l101
					l102:
						position, tokenIndex = position101, tokenIndex101
						if buffer[position] != rune('B') {
							goto l80
						}
						position++
					}
				l101:
					{
						position103, tokenIndex103 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l104
						}
						position++
						goto l103
					l104:
						position, tokenIndex = position103, tokenIndex103
						if buffer[position] != rune('A') {
							goto l80
						}
						position++
					}
				l103:
					{
						position105, tokenIndex105 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l106
						}
						position++
						goto l105
					l106:
						position, tokenIndex = position105, tokenIndex105
						if buffer[position] != rune('S') {
							goto l80
						}
						position++
					}
				l105:
					{
						position107, tokenIndex107 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l108
						}
						position++
						goto l107
					l108:
						position, tokenIndex = position107, tokenIndex107
						if buffer[position] != rune('E') {
							goto l80
						}
						position++
					}
				l107:
					if buffer[position] != rune('6') {
						goto l80
					}
					position++
					if buffer[position] != rune('4') {
						goto l80
					}
					position++
				}
			l82:
				if buffer[position] != rune('\'') {
					goto l80
				}
				position++
			l109:
				{
					position110, tokenIndex110 := position, tokenIndex
					{
						position111, tokenIndex111 := position, tokenIndex
						{
							position112, tokenIndex112 := position, tokenIndex
							if buffer[position] != rune('\'') {
								goto l113
							}
							position++
							goto l112
						l113:
							position, tokenIndex = position112, tokenIndex112
							if buffer[position] != rune('\r') {
								goto l114
							}
							position++
							goto l112
						l114:
							position, tokenIndex = position112, tokenIndex112
							if buffer[position] != rune('\n') {
								goto l111
							}
							position++
						}
					l112:
						goto l110
					l111:
						position, tokenIndex = position111, tokenIndex111
					}
					if !matchDot() {
						goto l110
					}
					goto l109
				l110:
					position, tokenIndex = position110, tokenIndex110
				}
				if buffer[position] != rune('\'') {
					goto l80
				}
				position++
				add(ruleByteVector, position81)
			}
			return true
		l80:
			position, tokenIndex = position80, tokenIndex80
			return false
		},
		/* 11 Directives <- <((StdLibVersionDirective / ScriptTypeDirective / ContentTypeDirective) EOL)+> */
		func() bool {
			position115, tokenIndex115 := position, tokenIndex
			{
				position116 := position
				{
					position119, tokenIndex119 := position, tokenIndex
					if !_rules[ruleStdLibVersionDirective]() {
						goto l120
					}
					goto l119
				l120:
					position, tokenIndex = position119, tokenIndex119
					if !_rules[ruleScriptTypeDirective]() {
						goto l121
					}
					goto l119
				l121:
					position, tokenIndex = position119, tokenIndex119
					if !_rules[ruleContentTypeDirective]() {
						goto l115
					}
				}
			l119:
				if !_rules[ruleEOL]() {
					goto l115
				}
			l117:
				{
					position118, tokenIndex118 := position, tokenIndex
					{
						position122, tokenIndex122 := position, tokenIndex
						if !_rules[ruleStdLibVersionDirective]() {
							goto l123
						}
						goto l122
					l123:
						position, tokenIndex = position122, tokenIndex122
						if !_rules[ruleScriptTypeDirective]() {
							goto l124
						}
						goto l122
					l124:
						position, tokenIndex = position122, tokenIndex122
						if !_rules[ruleContentTypeDirective]() {
							goto l118
						}
					}
				l122:
					if !_rules[ruleEOL]() {
						goto l118
					}
					goto l117
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
				add(ruleDirectives, position116)
			}
			return true
		l115:
			position, tokenIndex = position115, tokenIndex115
			return false
		},
		/* 12 StartDirective <- <('{' '-' '#')> */
		func() bool {
			position125, tokenIndex125 := position, tokenIndex
			{
				position126 := position
				if buffer[position] != rune('{') {
					goto l125
				}
				position++
				if buffer[position] != rune('-') {
					goto l125
				}
				position++
				if buffer[position] != rune('#') {
					goto l125
				}
				position++
				add(ruleStartDirective, position126)
			}
			return true
		l125:
			position, tokenIndex = position125, tokenIndex125
			return false
		},
		/* 13 EndDirective <- <('#' '-' '}')> */
		func() bool {
			position127, tokenIndex127 := position, tokenIndex
			{
				position128 := position
				if buffer[position] != rune('#') {
					goto l127
				}
				position++
				if buffer[position] != rune('-') {
					goto l127
				}
				position++
				if buffer[position] != rune('}') {
					goto l127
				}
				position++
				add(ruleEndDirective, position128)
			}
			return true
		l127:
			position, tokenIndex = position127, tokenIndex127
			return false
		},
		/* 14 StdLibVersionDirective <- <(StartDirective _ (('s' / 'S') ('t' / 'T') ('d' / 'D') ('l' / 'L') ('i' / 'I') ('b' / 'B') '_' ('v' / 'V') ('e' / 'E') ('r' / 'R') ('s' / 'S') ('i' / 'I') ('o' / 'O') ('n' / 'N')) _ Int _ EndDirective)> */
		func() bool {
			position129, tokenIndex129 := position, tokenIndex
			{
				position130 := position
				if !_rules[ruleStartDirective]() {
					goto l129
				}
				if !_rules[rule_]() {
					goto l129
				}
				{
					position131, tokenIndex131 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l132
					}
					position++
					goto l131
				l132:
					position, tokenIndex = position131, tokenIndex131
					if buffer[position] != rune('S') {
						goto l129
					}
					position++
				}
			l131:
				{
					position133, tokenIndex133 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l134
					}
					position++
					goto l133
				l134:
					position, tokenIndex = position133, tokenIndex133
					if buffer[position] != rune('T') {
						goto l129
					}
					position++
				}
			l133:
				{
					position135, tokenIndex135 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l136
					}
					position++
					goto l135
				l136:
					position, tokenIndex = position135, tokenIndex135
					if buffer[position] != rune('D') {
						goto l129
					}
					position++
				}
			l135:
				{
					position137, tokenIndex137 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l138
					}
					position++
					goto l137
				l138:
					position, tokenIndex = position137, tokenIndex137
					if buffer[position] != rune('L') {
						goto l129
					}
					position++
				}
			l137:
				{
					position139, tokenIndex139 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l140
					}
					position++
					goto l139
				l140:
					position, tokenIndex = position139, tokenIndex139
					if buffer[position] != rune('I') {
						goto l129
					}
					position++
				}
			l139:
				{
					position141, tokenIndex141 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l142
					}
					position++
					goto l141
				l142:
					position, tokenIndex = position141, tokenIndex141
					if buffer[position] != rune('B') {
						goto l129
					}
					position++
				}
			l141:
				if buffer[position] != rune('_') {
					goto l129
				}
				position++
				{
					position143, tokenIndex143 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l144
					}
					position++
					goto l143
				l144:
					position, tokenIndex = position143, tokenIndex143
					if buffer[position] != rune('V') {
						goto l129
					}
					position++
				}
			l143:
				{
					position145, tokenIndex145 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l146
					}
					position++
					goto l145
				l146:
					position, tokenIndex = position145, tokenIndex145
					if buffer[position] != rune('E') {
						goto l129
					}
					position++
				}
			l145:
				{
					position147, tokenIndex147 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l148
					}
					position++
					goto l147
				l148:
					position, tokenIndex = position147, tokenIndex147
					if buffer[position] != rune('R') {
						goto l129
					}
					position++
				}
			l147:
				{
					position149, tokenIndex149 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l150
					}
					position++
					goto l149
				l150:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('S') {
						goto l129
					}
					position++
				}
			l149:
				{
					position151, tokenIndex151 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l152
					}
					position++
					goto l151
				l152:
					position, tokenIndex = position151, tokenIndex151
					if buffer[position] != rune('I') {
						goto l129
					}
					position++
				}
			l151:
				{
					position153, tokenIndex153 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l154
					}
					position++
					goto l153
				l154:
					position, tokenIndex = position153, tokenIndex153
					if buffer[position] != rune('O') {
						goto l129
					}
					position++
				}
			l153:
				{
					position155, tokenIndex155 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l156
					}
					position++
					goto l155
				l156:
					position, tokenIndex = position155, tokenIndex155
					if buffer[position] != rune('N') {
						goto l129
					}
					position++
				}
			l155:
				if !_rules[rule_]() {
					goto l129
				}
				if !_rules[ruleInt]() {
					goto l129
				}
				if !_rules[rule_]() {
					goto l129
				}
				if !_rules[ruleEndDirective]() {
					goto l129
				}
				add(ruleStdLibVersionDirective, position130)
			}
			return true
		l129:
			position, tokenIndex = position129, tokenIndex129
			return false
		},
		/* 15 Word <- <(('_' / [a-z] / [A-Z] / '-') ('_' / [a-z] / [A-Z] / [0-9] / '-')*)> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				{
					position159, tokenIndex159 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l160
					}
					position++
					goto l159
				l160:
					position, tokenIndex = position159, tokenIndex159
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l161
					}
					position++
					goto l159
				l161:
					position, tokenIndex = position159, tokenIndex159
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l162
					}
					position++
					goto l159
				l162:
					position, tokenIndex = position159, tokenIndex159
					if buffer[position] != rune('-') {
						goto l157
					}
					position++
				}
			l159:
			l163:
				{
					position164, tokenIndex164 := position, tokenIndex
					{
						position165, tokenIndex165 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l166
						}
						position++
						goto l165
					l166:
						position, tokenIndex = position165, tokenIndex165
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l167
						}
						position++
						goto l165
					l167:
						position, tokenIndex = position165, tokenIndex165
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l168
						}
						position++
						goto l165
					l168:
						position, tokenIndex = position165, tokenIndex165
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l169
						}
						position++
						goto l165
					l169:
						position, tokenIndex = position165, tokenIndex165
						if buffer[position] != rune('-') {
							goto l164
						}
						position++
					}
				l165:
					goto l163
				l164:
					position, tokenIndex = position164, tokenIndex164
				}
				add(ruleWord, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 16 ScriptTypeDirective <- <(StartDirective _ (('s' / 'S') ('c' / 'C') ('r' / 'R') ('i' / 'I') ('p' / 'P') ('t' / 'T') '_' ('t' / 'T') ('y' / 'Y') ('p' / 'P') ('e' / 'E')) _ Word _ EndDirective)> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				if !_rules[ruleStartDirective]() {
					goto l170
				}
				if !_rules[rule_]() {
					goto l170
				}
				{
					position172, tokenIndex172 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l173
					}
					position++
					goto l172
				l173:
					position, tokenIndex = position172, tokenIndex172
					if buffer[position] != rune('S') {
						goto l170
					}
					position++
				}
			l172:
				{
					position174, tokenIndex174 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l175
					}
					position++
					goto l174
				l175:
					position, tokenIndex = position174, tokenIndex174
					if buffer[position] != rune('C') {
						goto l170
					}
					position++
				}
			l174:
				{
					position176, tokenIndex176 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l177
					}
					position++
					goto l176
				l177:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('R') {
						goto l170
					}
					position++
				}
			l176:
				{
					position178, tokenIndex178 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l179
					}
					position++
					goto l178
				l179:
					position, tokenIndex = position178, tokenIndex178
					if buffer[position] != rune('I') {
						goto l170
					}
					position++
				}
			l178:
				{
					position180, tokenIndex180 := position, tokenIndex
					if buffer[position] != rune('p') {
						goto l181
					}
					position++
					goto l180
				l181:
					position, tokenIndex = position180, tokenIndex180
					if buffer[position] != rune('P') {
						goto l170
					}
					position++
				}
			l180:
				{
					position182, tokenIndex182 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l183
					}
					position++
					goto l182
				l183:
					position, tokenIndex = position182, tokenIndex182
					if buffer[position] != rune('T') {
						goto l170
					}
					position++
				}
			l182:
				if buffer[position] != rune('_') {
					goto l170
				}
				position++
				{
					position184, tokenIndex184 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l185
					}
					position++
					goto l184
				l185:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('T') {
						goto l170
					}
					position++
				}
			l184:
				{
					position186, tokenIndex186 := position, tokenIndex
					if buffer[position] != rune('y') {
						goto l187
					}
					position++
					goto l186
				l187:
					position, tokenIndex = position186, tokenIndex186
					if buffer[position] != rune('Y') {
						goto l170
					}
					position++
				}
			l186:
				{
					position188, tokenIndex188 := position, tokenIndex
					if buffer[position] != rune('p') {
						goto l189
					}
					position++
					goto l188
				l189:
					position, tokenIndex = position188, tokenIndex188
					if buffer[position] != rune('P') {
						goto l170
					}
					position++
				}
			l188:
				{
					position190, tokenIndex190 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l191
					}
					position++
					goto l190
				l191:
					position, tokenIndex = position190, tokenIndex190
					if buffer[position] != rune('E') {
						goto l170
					}
					position++
				}
			l190:
				if !_rules[rule_]() {
					goto l170
				}
				if !_rules[ruleWord]() {
					goto l170
				}
				if !_rules[rule_]() {
					goto l170
				}
				if !_rules[ruleEndDirective]() {
					goto l170
				}
				add(ruleScriptTypeDirective, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 17 ContentTypeDirective <- <(StartDirective _ (('c' / 'C') ('o' / 'O') ('n' / 'N') ('t' / 'T') ('e' / 'E') ('n' / 'N') ('t' / 'T') '_' ('t' / 'T') ('y' / 'Y') ('p' / 'P') ('e' / 'E')) _ Word _ EndDirective)> */
		func() bool {
			position192, tokenIndex192 := position, tokenIndex
			{
				position193 := position
				if !_rules[ruleStartDirective]() {
					goto l192
				}
				if !_rules[rule_]() {
					goto l192
				}
				{
					position194, tokenIndex194 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l195
					}
					position++
					goto l194
				l195:
					position, tokenIndex = position194, tokenIndex194
					if buffer[position] != rune('C') {
						goto l192
					}
					position++
				}
			l194:
				{
					position196, tokenIndex196 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l197
					}
					position++
					goto l196
				l197:
					position, tokenIndex = position196, tokenIndex196
					if buffer[position] != rune('O') {
						goto l192
					}
					position++
				}
			l196:
				{
					position198, tokenIndex198 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l199
					}
					position++
					goto l198
				l199:
					position, tokenIndex = position198, tokenIndex198
					if buffer[position] != rune('N') {
						goto l192
					}
					position++
				}
			l198:
				{
					position200, tokenIndex200 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l201
					}
					position++
					goto l200
				l201:
					position, tokenIndex = position200, tokenIndex200
					if buffer[position] != rune('T') {
						goto l192
					}
					position++
				}
			l200:
				{
					position202, tokenIndex202 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l203
					}
					position++
					goto l202
				l203:
					position, tokenIndex = position202, tokenIndex202
					if buffer[position] != rune('E') {
						goto l192
					}
					position++
				}
			l202:
				{
					position204, tokenIndex204 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l205
					}
					position++
					goto l204
				l205:
					position, tokenIndex = position204, tokenIndex204
					if buffer[position] != rune('N') {
						goto l192
					}
					position++
				}
			l204:
				{
					position206, tokenIndex206 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l207
					}
					position++
					goto l206
				l207:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('T') {
						goto l192
					}
					position++
				}
			l206:
				if buffer[position] != rune('_') {
					goto l192
				}
				position++
				{
					position208, tokenIndex208 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l209
					}
					position++
					goto l208
				l209:
					position, tokenIndex = position208, tokenIndex208
					if buffer[position] != rune('T') {
						goto l192
					}
					position++
				}
			l208:
				{
					position210, tokenIndex210 := position, tokenIndex
					if buffer[position] != rune('y') {
						goto l211
					}
					position++
					goto l210
				l211:
					position, tokenIndex = position210, tokenIndex210
					if buffer[position] != rune('Y') {
						goto l192
					}
					position++
				}
			l210:
				{
					position212, tokenIndex212 := position, tokenIndex
					if buffer[position] != rune('p') {
						goto l213
					}
					position++
					goto l212
				l213:
					position, tokenIndex = position212, tokenIndex212
					if buffer[position] != rune('P') {
						goto l192
					}
					position++
				}
			l212:
				{
					position214, tokenIndex214 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l215
					}
					position++
					goto l214
				l215:
					position, tokenIndex = position214, tokenIndex214
					if buffer[position] != rune('E') {
						goto l192
					}
					position++
				}
			l214:
				if !_rules[rule_]() {
					goto l192
				}
				if !_rules[ruleWord]() {
					goto l192
				}
				if !_rules[rule_]() {
					goto l192
				}
				if !_rules[ruleEndDirective]() {
					goto l192
				}
				add(ruleContentTypeDirective, position193)
			}
			return true
		l192:
			position, tokenIndex = position192, tokenIndex192
			return false
		},
		/* 18 Declaration <- <(('l' / 'L') ('e' / 'E') ('t' / 'T') _ Word _ '=' _ Types EOL)> */
		func() bool {
			position216, tokenIndex216 := position, tokenIndex
			{
				position217 := position
				{
					position218, tokenIndex218 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l219
					}
					position++
					goto l218
				l219:
					position, tokenIndex = position218, tokenIndex218
					if buffer[position] != rune('L') {
						goto l216
					}
					position++
				}
			l218:
				{
					position220, tokenIndex220 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l221
					}
					position++
					goto l220
				l221:
					position, tokenIndex = position220, tokenIndex220
					if buffer[position] != rune('E') {
						goto l216
					}
					position++
				}
			l220:
				{
					position222, tokenIndex222 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l223
					}
					position++
					goto l222
				l223:
					position, tokenIndex = position222, tokenIndex222
					if buffer[position] != rune('T') {
						goto l216
					}
					position++
				}
			l222:
				if !_rules[rule_]() {
					goto l216
				}
				if !_rules[ruleWord]() {
					goto l216
				}
				if !_rules[rule_]() {
					goto l216
				}
				if buffer[position] != rune('=') {
					goto l216
				}
				position++
				if !_rules[rule_]() {
					goto l216
				}
				if !_rules[ruleTypes]() {
					goto l216
				}
				if !_rules[ruleEOL]() {
					goto l216
				}
				add(ruleDeclaration, position217)
			}
			return true
		l216:
			position, tokenIndex = position216, tokenIndex216
			return false
		},
	}
	p.rules = _rules
	return nil
}

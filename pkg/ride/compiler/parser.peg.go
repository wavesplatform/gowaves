package compiler

// Code generated by peg -output=parser.peg.go ride.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleCode
	ruleDAppRoot
	ruleScriptRoot
	ruleWS
	ruleEOL
	ruleComment
	rule_
	ruleEOF
	ruleDirectiveName
	ruleUpperCaseString
	ruleIntString
	rulePathString
	ruleDirective
	ruleDeclaration
	ruleVariable
	ruleStrictVariable
	ruleFunc
	ruleFuncArgSeq
	ruleFuncArg
	ruleAnnotatedFunc
	ruleAnnotation
	ruleIdentifierSeq
	ruleAnnotationSeq
	ruleOrOp
	ruleAndOp
	ruleEqGroupOp
	ruleEqOp
	ruleNeOp
	ruleCompareGroupOp
	ruleGtOp
	ruleGeOp
	ruleLtOp
	ruleLeOp
	ruleListGroupOp
	ruleConsOp
	ruleConcatOp
	ruleAppendOp
	ruleSumGroupOp
	ruleSumOp
	ruleSubOp
	ruleMultGroupOp
	ruleMulOp
	ruleDivOp
	ruleModOp
	ruleUnaryOp
	rulePositiveOp
	ruleNegativeOp
	ruleNotOp
	ruleReservedWords
	ruleConst
	ruleIdentifier
	ruleType
	ruleGenericType
	ruleTupleType
	ruleTypes
	ruleBase16
	ruleBase58
	ruleBase64
	ruleByteVector
	ruleBoolean
	ruleString
	ruleUnicodeChar
	ruleEscapedChar
	ruleChar
	ruleInteger
	ruleList
	ruleExprSeq
	ruleAtomExpr
	ruleMultGroupOpAtom
	ruleSumGroupOpAtom
	ruleListGroupOpAtom
	ruleCompareGroupOpAtom
	ruleEqualityGroupOpAtom
	ruleAndOpAtom
	ruleOrOpAtom
	ruleExpr
	ruleParExpr
	ruleGettableExpr
	ruleFunctionCallAccess
	ruleIdentifierAccess
	ruleListAccess
	ruleBlock
	ruleBlockWithoutPar
	ruleFunctionCall
	ruleFoldMacro
	ruleIfWithError
	ruleIf
	ruleFailedIfWithoutElse
	ruleMatch
	ruleCase
	rulePlaceholder
	ruleValuePattern
	ruleTupleValuesPattern
	ruleTuplePattern
	ruleObjectFieldsPattern
	ruleObjectPattern
	ruleTuple
	ruleTupleRef
	ruleTupleAccess
)

var rul3s = [...]string{
	"Unknown",
	"Code",
	"DAppRoot",
	"ScriptRoot",
	"WS",
	"EOL",
	"Comment",
	"_",
	"EOF",
	"DirectiveName",
	"UpperCaseString",
	"IntString",
	"PathString",
	"Directive",
	"Declaration",
	"Variable",
	"StrictVariable",
	"Func",
	"FuncArgSeq",
	"FuncArg",
	"AnnotatedFunc",
	"Annotation",
	"IdentifierSeq",
	"AnnotationSeq",
	"OrOp",
	"AndOp",
	"EqGroupOp",
	"EqOp",
	"NeOp",
	"CompareGroupOp",
	"GtOp",
	"GeOp",
	"LtOp",
	"LeOp",
	"ListGroupOp",
	"ConsOp",
	"ConcatOp",
	"AppendOp",
	"SumGroupOp",
	"SumOp",
	"SubOp",
	"MultGroupOp",
	"MulOp",
	"DivOp",
	"ModOp",
	"UnaryOp",
	"PositiveOp",
	"NegativeOp",
	"NotOp",
	"ReservedWords",
	"Const",
	"Identifier",
	"Type",
	"GenericType",
	"TupleType",
	"Types",
	"Base16",
	"Base58",
	"Base64",
	"ByteVector",
	"Boolean",
	"String",
	"UnicodeChar",
	"EscapedChar",
	"Char",
	"Integer",
	"List",
	"ExprSeq",
	"AtomExpr",
	"MultGroupOpAtom",
	"SumGroupOpAtom",
	"ListGroupOpAtom",
	"CompareGroupOpAtom",
	"EqualityGroupOpAtom",
	"AndOpAtom",
	"OrOpAtom",
	"Expr",
	"ParExpr",
	"GettableExpr",
	"FunctionCallAccess",
	"IdentifierAccess",
	"ListAccess",
	"Block",
	"BlockWithoutPar",
	"FunctionCall",
	"FoldMacro",
	"IfWithError",
	"If",
	"FailedIfWithoutElse",
	"Match",
	"Case",
	"Placeholder",
	"ValuePattern",
	"TupleValuesPattern",
	"TuplePattern",
	"ObjectFieldsPattern",
	"ObjectPattern",
	"Tuple",
	"TupleRef",
	"TupleAccess",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Buffer string
	buffer []rune
	rules  [100]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Code <- <(DAppRoot / ScriptRoot)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[ruleDAppRoot]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[ruleScriptRoot]() {
						goto l0
					}
				}
			l2:
				add(ruleCode, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 DAppRoot <- <(_ (Directive _)* (_ Declaration)* (_ AnnotatedFunc)* _ EOF)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
				if !_rules[rule_]() {
					goto l4
				}
			l6:
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l7
					}
					if !_rules[rule_]() {
						goto l7
					}
					goto l6
				l7:
					position, tokenIndex = position7, tokenIndex7
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[rule_]() {
						goto l9
					}
					if !_rules[ruleDeclaration]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
			l10:
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[rule_]() {
						goto l11
					}
					if !_rules[ruleAnnotatedFunc]() {
						goto l11
					}
					goto l10
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				if !_rules[rule_]() {
					goto l4
				}
				if !_rules[ruleEOF]() {
					goto l4
				}
				add(ruleDAppRoot, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 ScriptRoot <- <(_ (Directive _)* (_ Declaration)* _ Expr _ EOF)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[rule_]() {
					goto l12
				}
			l14:
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l15
					}
					if !_rules[rule_]() {
						goto l15
					}
					goto l14
				l15:
					position, tokenIndex = position15, tokenIndex15
				}
			l16:
				{
					position17, tokenIndex17 := position, tokenIndex
					if !_rules[rule_]() {
						goto l17
					}
					if !_rules[ruleDeclaration]() {
						goto l17
					}
					goto l16
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleExpr]() {
					goto l12
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleEOF]() {
					goto l12
				}
				add(ruleScriptRoot, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 WS <- <(' ' / '\t')> */
		func() bool {
			position18, tokenIndex18 := position, tokenIndex
			{
				position19 := position
				{
					position20, tokenIndex20 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l21
					}
					position++
					goto l20
				l21:
					position, tokenIndex = position20, tokenIndex20
					if buffer[position] != rune('\t') {
						goto l18
					}
					position++
				}
			l20:
				add(ruleWS, position19)
			}
			return true
		l18:
			position, tokenIndex = position18, tokenIndex18
			return false
		},
		/* 4 EOL <- <('\n' / '\r' / '\f')> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24, tokenIndex24 := position, tokenIndex
					if buffer[position] != rune('\n') {
						goto l25
					}
					position++
					goto l24
				l25:
					position, tokenIndex = position24, tokenIndex24
					if buffer[position] != rune('\r') {
						goto l26
					}
					position++
					goto l24
				l26:
					position, tokenIndex = position24, tokenIndex24
					if buffer[position] != rune('\f') {
						goto l22
					}
					position++
				}
			l24:
				add(ruleEOL, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 5 Comment <- <('#' (!('\r' / '^' / '\n') .)*)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				if buffer[position] != rune('#') {
					goto l27
				}
				position++
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					{
						position31, tokenIndex31 := position, tokenIndex
						{
							position32, tokenIndex32 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l33
							}
							position++
							goto l32
						l33:
							position, tokenIndex = position32, tokenIndex32
							if buffer[position] != rune('^') {
								goto l34
							}
							position++
							goto l32
						l34:
							position, tokenIndex = position32, tokenIndex32
							if buffer[position] != rune('\n') {
								goto l31
							}
							position++
						}
					l32:
						goto l30
					l31:
						position, tokenIndex = position31, tokenIndex31
					}
					if !matchDot() {
						goto l30
					}
					goto l29
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
				add(ruleComment, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 6 _ <- <(Comment / (WS / EOL)+)*> */
		func() bool {
			{
				position36 := position
			l37:
				{
					position38, tokenIndex38 := position, tokenIndex
					{
						position39, tokenIndex39 := position, tokenIndex
						if !_rules[ruleComment]() {
							goto l40
						}
						goto l39
					l40:
						position, tokenIndex = position39, tokenIndex39
						{
							position43, tokenIndex43 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l44
							}
							goto l43
						l44:
							position, tokenIndex = position43, tokenIndex43
							if !_rules[ruleEOL]() {
								goto l38
							}
						}
					l43:
					l41:
						{
							position42, tokenIndex42 := position, tokenIndex
							{
								position45, tokenIndex45 := position, tokenIndex
								if !_rules[ruleWS]() {
									goto l46
								}
								goto l45
							l46:
								position, tokenIndex = position45, tokenIndex45
								if !_rules[ruleEOL]() {
									goto l42
								}
							}
						l45:
							goto l41
						l42:
							position, tokenIndex = position42, tokenIndex42
						}
					}
				l39:
					goto l37
				l38:
					position, tokenIndex = position38, tokenIndex38
				}
				add(rule_, position36)
			}
			return true
		},
		/* 7 EOF <- <!.> */
		func() bool {
			position47, tokenIndex47 := position, tokenIndex
			{
				position48 := position
				{
					position49, tokenIndex49 := position, tokenIndex
					if !matchDot() {
						goto l49
					}
					goto l47
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
				add(ruleEOF, position48)
			}
			return true
		l47:
			position, tokenIndex = position47, tokenIndex47
			return false
		},
		/* 8 DirectiveName <- <([A-Z]+ ('_' / [A-Z])*)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l50
				}
				position++
			l52:
				{
					position53, tokenIndex53 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l53
					}
					position++
					goto l52
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				{
					position55, tokenIndex55 := position, tokenIndex
					{
						position56, tokenIndex56 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l57
						}
						position++
						goto l56
					l57:
						position, tokenIndex = position56, tokenIndex56
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l55
						}
						position++
					}
				l56:
					goto l54
				l55:
					position, tokenIndex = position55, tokenIndex55
				}
				add(ruleDirectiveName, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 9 UpperCaseString <- <[A-Z]+> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l58
				}
				position++
			l60:
				{
					position61, tokenIndex61 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l61
					}
					position++
					goto l60
				l61:
					position, tokenIndex = position61, tokenIndex61
				}
				add(ruleUpperCaseString, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 10 IntString <- <[0-9]+> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l62
				}
				position++
			l64:
				{
					position65, tokenIndex65 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l65
					}
					position++
					goto l64
				l65:
					position, tokenIndex = position65, tokenIndex65
				}
				add(ruleIntString, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 11 PathString <- <('_' / [a-z] / [A-Z] / [0-9] / '-' / '/' / ',' / '.')+> */
		func() bool {
			position66, tokenIndex66 := position, tokenIndex
			{
				position67 := position
				{
					position70, tokenIndex70 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l71
					}
					position++
					goto l70
				l71:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l72
					}
					position++
					goto l70
				l72:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l73
					}
					position++
					goto l70
				l73:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l74
					}
					position++
					goto l70
				l74:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('-') {
						goto l75
					}
					position++
					goto l70
				l75:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('/') {
						goto l76
					}
					position++
					goto l70
				l76:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune(',') {
						goto l77
					}
					position++
					goto l70
				l77:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('.') {
						goto l66
					}
					position++
				}
			l70:
			l68:
				{
					position69, tokenIndex69 := position, tokenIndex
					{
						position78, tokenIndex78 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l79
						}
						position++
						goto l78
					l79:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l80
						}
						position++
						goto l78
					l80:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l81
						}
						position++
						goto l78
					l81:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l82
						}
						position++
						goto l78
					l82:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('-') {
							goto l83
						}
						position++
						goto l78
					l83:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('/') {
							goto l84
						}
						position++
						goto l78
					l84:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune(',') {
							goto l85
						}
						position++
						goto l78
					l85:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('.') {
							goto l69
						}
						position++
					}
				l78:
					goto l68
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
				add(rulePathString, position67)
			}
			return true
		l66:
			position, tokenIndex = position66, tokenIndex66
			return false
		},
		/* 12 Directive <- <('{' '-' '#' WS+ DirectiveName WS+ (IntString / UpperCaseString / PathString) WS+ ('#' '-' '}'))> */
		func() bool {
			position86, tokenIndex86 := position, tokenIndex
			{
				position87 := position
				if buffer[position] != rune('{') {
					goto l86
				}
				position++
				if buffer[position] != rune('-') {
					goto l86
				}
				position++
				if buffer[position] != rune('#') {
					goto l86
				}
				position++
				if !_rules[ruleWS]() {
					goto l86
				}
			l88:
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l89
					}
					goto l88
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
				if !_rules[ruleDirectiveName]() {
					goto l86
				}
				if !_rules[ruleWS]() {
					goto l86
				}
			l90:
				{
					position91, tokenIndex91 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l91
					}
					goto l90
				l91:
					position, tokenIndex = position91, tokenIndex91
				}
				{
					position92, tokenIndex92 := position, tokenIndex
					if !_rules[ruleIntString]() {
						goto l93
					}
					goto l92
				l93:
					position, tokenIndex = position92, tokenIndex92
					if !_rules[ruleUpperCaseString]() {
						goto l94
					}
					goto l92
				l94:
					position, tokenIndex = position92, tokenIndex92
					if !_rules[rulePathString]() {
						goto l86
					}
				}
			l92:
				if !_rules[ruleWS]() {
					goto l86
				}
			l95:
				{
					position96, tokenIndex96 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l96
					}
					goto l95
				l96:
					position, tokenIndex = position96, tokenIndex96
				}
				if buffer[position] != rune('#') {
					goto l86
				}
				position++
				if buffer[position] != rune('-') {
					goto l86
				}
				position++
				if buffer[position] != rune('}') {
					goto l86
				}
				position++
				add(ruleDirective, position87)
			}
			return true
		l86:
			position, tokenIndex = position86, tokenIndex86
			return false
		},
		/* 13 Declaration <- <((Variable / StrictVariable / Func) _ ';'?)> */
		func() bool {
			position97, tokenIndex97 := position, tokenIndex
			{
				position98 := position
				{
					position99, tokenIndex99 := position, tokenIndex
					if !_rules[ruleVariable]() {
						goto l100
					}
					goto l99
				l100:
					position, tokenIndex = position99, tokenIndex99
					if !_rules[ruleStrictVariable]() {
						goto l101
					}
					goto l99
				l101:
					position, tokenIndex = position99, tokenIndex99
					if !_rules[ruleFunc]() {
						goto l97
					}
				}
			l99:
				if !_rules[rule_]() {
					goto l97
				}
				{
					position102, tokenIndex102 := position, tokenIndex
					if buffer[position] != rune(';') {
						goto l102
					}
					position++
					goto l103
				l102:
					position, tokenIndex = position102, tokenIndex102
				}
			l103:
				add(ruleDeclaration, position98)
			}
			return true
		l97:
			position, tokenIndex = position97, tokenIndex97
			return false
		},
		/* 14 Variable <- <('l' 'e' 't' _ (Identifier / TupleRef) _ '=' _ Expr)> */
		func() bool {
			position104, tokenIndex104 := position, tokenIndex
			{
				position105 := position
				if buffer[position] != rune('l') {
					goto l104
				}
				position++
				if buffer[position] != rune('e') {
					goto l104
				}
				position++
				if buffer[position] != rune('t') {
					goto l104
				}
				position++
				if !_rules[rule_]() {
					goto l104
				}
				{
					position106, tokenIndex106 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l107
					}
					goto l106
				l107:
					position, tokenIndex = position106, tokenIndex106
					if !_rules[ruleTupleRef]() {
						goto l104
					}
				}
			l106:
				if !_rules[rule_]() {
					goto l104
				}
				if buffer[position] != rune('=') {
					goto l104
				}
				position++
				if !_rules[rule_]() {
					goto l104
				}
				if !_rules[ruleExpr]() {
					goto l104
				}
				add(ruleVariable, position105)
			}
			return true
		l104:
			position, tokenIndex = position104, tokenIndex104
			return false
		},
		/* 15 StrictVariable <- <('s' 't' 'r' 'i' 'c' 't' _ (Identifier / TupleRef) _ '=' _ Expr)> */
		func() bool {
			position108, tokenIndex108 := position, tokenIndex
			{
				position109 := position
				if buffer[position] != rune('s') {
					goto l108
				}
				position++
				if buffer[position] != rune('t') {
					goto l108
				}
				position++
				if buffer[position] != rune('r') {
					goto l108
				}
				position++
				if buffer[position] != rune('i') {
					goto l108
				}
				position++
				if buffer[position] != rune('c') {
					goto l108
				}
				position++
				if buffer[position] != rune('t') {
					goto l108
				}
				position++
				if !_rules[rule_]() {
					goto l108
				}
				{
					position110, tokenIndex110 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l111
					}
					goto l110
				l111:
					position, tokenIndex = position110, tokenIndex110
					if !_rules[ruleTupleRef]() {
						goto l108
					}
				}
			l110:
				if !_rules[rule_]() {
					goto l108
				}
				if buffer[position] != rune('=') {
					goto l108
				}
				position++
				if !_rules[rule_]() {
					goto l108
				}
				if !_rules[ruleExpr]() {
					goto l108
				}
				add(ruleStrictVariable, position109)
			}
			return true
		l108:
			position, tokenIndex = position108, tokenIndex108
			return false
		},
		/* 16 Func <- <('f' 'u' 'n' 'c' _ Identifier _ '(' _ FuncArgSeq? _ ')' _ '=' _ Expr)> */
		func() bool {
			position112, tokenIndex112 := position, tokenIndex
			{
				position113 := position
				if buffer[position] != rune('f') {
					goto l112
				}
				position++
				if buffer[position] != rune('u') {
					goto l112
				}
				position++
				if buffer[position] != rune('n') {
					goto l112
				}
				position++
				if buffer[position] != rune('c') {
					goto l112
				}
				position++
				if !_rules[rule_]() {
					goto l112
				}
				if !_rules[ruleIdentifier]() {
					goto l112
				}
				if !_rules[rule_]() {
					goto l112
				}
				if buffer[position] != rune('(') {
					goto l112
				}
				position++
				if !_rules[rule_]() {
					goto l112
				}
				{
					position114, tokenIndex114 := position, tokenIndex
					if !_rules[ruleFuncArgSeq]() {
						goto l114
					}
					goto l115
				l114:
					position, tokenIndex = position114, tokenIndex114
				}
			l115:
				if !_rules[rule_]() {
					goto l112
				}
				if buffer[position] != rune(')') {
					goto l112
				}
				position++
				if !_rules[rule_]() {
					goto l112
				}
				if buffer[position] != rune('=') {
					goto l112
				}
				position++
				if !_rules[rule_]() {
					goto l112
				}
				if !_rules[ruleExpr]() {
					goto l112
				}
				add(ruleFunc, position113)
			}
			return true
		l112:
			position, tokenIndex = position112, tokenIndex112
			return false
		},
		/* 17 FuncArgSeq <- <(FuncArg (_ ',' _ FuncArgSeq)?)> */
		func() bool {
			position116, tokenIndex116 := position, tokenIndex
			{
				position117 := position
				if !_rules[ruleFuncArg]() {
					goto l116
				}
				{
					position118, tokenIndex118 := position, tokenIndex
					if !_rules[rule_]() {
						goto l118
					}
					if buffer[position] != rune(',') {
						goto l118
					}
					position++
					if !_rules[rule_]() {
						goto l118
					}
					if !_rules[ruleFuncArgSeq]() {
						goto l118
					}
					goto l119
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
			l119:
				add(ruleFuncArgSeq, position117)
			}
			return true
		l116:
			position, tokenIndex = position116, tokenIndex116
			return false
		},
		/* 18 FuncArg <- <(Identifier _ ':' _ Types)> */
		func() bool {
			position120, tokenIndex120 := position, tokenIndex
			{
				position121 := position
				if !_rules[ruleIdentifier]() {
					goto l120
				}
				if !_rules[rule_]() {
					goto l120
				}
				if buffer[position] != rune(':') {
					goto l120
				}
				position++
				if !_rules[rule_]() {
					goto l120
				}
				if !_rules[ruleTypes]() {
					goto l120
				}
				add(ruleFuncArg, position121)
			}
			return true
		l120:
			position, tokenIndex = position120, tokenIndex120
			return false
		},
		/* 19 AnnotatedFunc <- <(AnnotationSeq _ Func)> */
		func() bool {
			position122, tokenIndex122 := position, tokenIndex
			{
				position123 := position
				if !_rules[ruleAnnotationSeq]() {
					goto l122
				}
				if !_rules[rule_]() {
					goto l122
				}
				if !_rules[ruleFunc]() {
					goto l122
				}
				add(ruleAnnotatedFunc, position123)
			}
			return true
		l122:
			position, tokenIndex = position122, tokenIndex122
			return false
		},
		/* 20 Annotation <- <('@' Identifier _ '(' _ IdentifierSeq _ ')')> */
		func() bool {
			position124, tokenIndex124 := position, tokenIndex
			{
				position125 := position
				if buffer[position] != rune('@') {
					goto l124
				}
				position++
				if !_rules[ruleIdentifier]() {
					goto l124
				}
				if !_rules[rule_]() {
					goto l124
				}
				if buffer[position] != rune('(') {
					goto l124
				}
				position++
				if !_rules[rule_]() {
					goto l124
				}
				if !_rules[ruleIdentifierSeq]() {
					goto l124
				}
				if !_rules[rule_]() {
					goto l124
				}
				if buffer[position] != rune(')') {
					goto l124
				}
				position++
				add(ruleAnnotation, position125)
			}
			return true
		l124:
			position, tokenIndex = position124, tokenIndex124
			return false
		},
		/* 21 IdentifierSeq <- <(Identifier (_ ',' _ IdentifierSeq)?)> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				if !_rules[ruleIdentifier]() {
					goto l126
				}
				{
					position128, tokenIndex128 := position, tokenIndex
					if !_rules[rule_]() {
						goto l128
					}
					if buffer[position] != rune(',') {
						goto l128
					}
					position++
					if !_rules[rule_]() {
						goto l128
					}
					if !_rules[ruleIdentifierSeq]() {
						goto l128
					}
					goto l129
				l128:
					position, tokenIndex = position128, tokenIndex128
				}
			l129:
				add(ruleIdentifierSeq, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 22 AnnotationSeq <- <(Annotation (_ AnnotationSeq)?)> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				if !_rules[ruleAnnotation]() {
					goto l130
				}
				{
					position132, tokenIndex132 := position, tokenIndex
					if !_rules[rule_]() {
						goto l132
					}
					if !_rules[ruleAnnotationSeq]() {
						goto l132
					}
					goto l133
				l132:
					position, tokenIndex = position132, tokenIndex132
				}
			l133:
				add(ruleAnnotationSeq, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 23 OrOp <- <('|' '|')> */
		func() bool {
			position134, tokenIndex134 := position, tokenIndex
			{
				position135 := position
				if buffer[position] != rune('|') {
					goto l134
				}
				position++
				if buffer[position] != rune('|') {
					goto l134
				}
				position++
				add(ruleOrOp, position135)
			}
			return true
		l134:
			position, tokenIndex = position134, tokenIndex134
			return false
		},
		/* 24 AndOp <- <('&' '&')> */
		func() bool {
			position136, tokenIndex136 := position, tokenIndex
			{
				position137 := position
				if buffer[position] != rune('&') {
					goto l136
				}
				position++
				if buffer[position] != rune('&') {
					goto l136
				}
				position++
				add(ruleAndOp, position137)
			}
			return true
		l136:
			position, tokenIndex = position136, tokenIndex136
			return false
		},
		/* 25 EqGroupOp <- <(EqOp / NeOp)> */
		func() bool {
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
				{
					position140, tokenIndex140 := position, tokenIndex
					if !_rules[ruleEqOp]() {
						goto l141
					}
					goto l140
				l141:
					position, tokenIndex = position140, tokenIndex140
					if !_rules[ruleNeOp]() {
						goto l138
					}
				}
			l140:
				add(ruleEqGroupOp, position139)
			}
			return true
		l138:
			position, tokenIndex = position138, tokenIndex138
			return false
		},
		/* 26 EqOp <- <('=' '=')> */
		func() bool {
			position142, tokenIndex142 := position, tokenIndex
			{
				position143 := position
				if buffer[position] != rune('=') {
					goto l142
				}
				position++
				if buffer[position] != rune('=') {
					goto l142
				}
				position++
				add(ruleEqOp, position143)
			}
			return true
		l142:
			position, tokenIndex = position142, tokenIndex142
			return false
		},
		/* 27 NeOp <- <('!' '=')> */
		func() bool {
			position144, tokenIndex144 := position, tokenIndex
			{
				position145 := position
				if buffer[position] != rune('!') {
					goto l144
				}
				position++
				if buffer[position] != rune('=') {
					goto l144
				}
				position++
				add(ruleNeOp, position145)
			}
			return true
		l144:
			position, tokenIndex = position144, tokenIndex144
			return false
		},
		/* 28 CompareGroupOp <- <(GtOp / GeOp / LtOp / LeOp)> */
		func() bool {
			position146, tokenIndex146 := position, tokenIndex
			{
				position147 := position
				{
					position148, tokenIndex148 := position, tokenIndex
					if !_rules[ruleGtOp]() {
						goto l149
					}
					goto l148
				l149:
					position, tokenIndex = position148, tokenIndex148
					if !_rules[ruleGeOp]() {
						goto l150
					}
					goto l148
				l150:
					position, tokenIndex = position148, tokenIndex148
					if !_rules[ruleLtOp]() {
						goto l151
					}
					goto l148
				l151:
					position, tokenIndex = position148, tokenIndex148
					if !_rules[ruleLeOp]() {
						goto l146
					}
				}
			l148:
				add(ruleCompareGroupOp, position147)
			}
			return true
		l146:
			position, tokenIndex = position146, tokenIndex146
			return false
		},
		/* 29 GtOp <- <('>' !'=')> */
		func() bool {
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				if buffer[position] != rune('>') {
					goto l152
				}
				position++
				{
					position154, tokenIndex154 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l154
					}
					position++
					goto l152
				l154:
					position, tokenIndex = position154, tokenIndex154
				}
				add(ruleGtOp, position153)
			}
			return true
		l152:
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 30 GeOp <- <('>' '=')> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				if buffer[position] != rune('>') {
					goto l155
				}
				position++
				if buffer[position] != rune('=') {
					goto l155
				}
				position++
				add(ruleGeOp, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 31 LtOp <- <('<' !'=')> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				if buffer[position] != rune('<') {
					goto l157
				}
				position++
				{
					position159, tokenIndex159 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l159
					}
					position++
					goto l157
				l159:
					position, tokenIndex = position159, tokenIndex159
				}
				add(ruleLtOp, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 32 LeOp <- <('<' '=')> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				if buffer[position] != rune('<') {
					goto l160
				}
				position++
				if buffer[position] != rune('=') {
					goto l160
				}
				position++
				add(ruleLeOp, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 33 ListGroupOp <- <(ConsOp / ConcatOp / AppendOp)> */
		func() bool {
			position162, tokenIndex162 := position, tokenIndex
			{
				position163 := position
				{
					position164, tokenIndex164 := position, tokenIndex
					if !_rules[ruleConsOp]() {
						goto l165
					}
					goto l164
				l165:
					position, tokenIndex = position164, tokenIndex164
					if !_rules[ruleConcatOp]() {
						goto l166
					}
					goto l164
				l166:
					position, tokenIndex = position164, tokenIndex164
					if !_rules[ruleAppendOp]() {
						goto l162
					}
				}
			l164:
				add(ruleListGroupOp, position163)
			}
			return true
		l162:
			position, tokenIndex = position162, tokenIndex162
			return false
		},
		/* 34 ConsOp <- <(':' ':')> */
		func() bool {
			position167, tokenIndex167 := position, tokenIndex
			{
				position168 := position
				if buffer[position] != rune(':') {
					goto l167
				}
				position++
				if buffer[position] != rune(':') {
					goto l167
				}
				position++
				add(ruleConsOp, position168)
			}
			return true
		l167:
			position, tokenIndex = position167, tokenIndex167
			return false
		},
		/* 35 ConcatOp <- <('+' '+')> */
		func() bool {
			position169, tokenIndex169 := position, tokenIndex
			{
				position170 := position
				if buffer[position] != rune('+') {
					goto l169
				}
				position++
				if buffer[position] != rune('+') {
					goto l169
				}
				position++
				add(ruleConcatOp, position170)
			}
			return true
		l169:
			position, tokenIndex = position169, tokenIndex169
			return false
		},
		/* 36 AppendOp <- <(':' '+')> */
		func() bool {
			position171, tokenIndex171 := position, tokenIndex
			{
				position172 := position
				if buffer[position] != rune(':') {
					goto l171
				}
				position++
				if buffer[position] != rune('+') {
					goto l171
				}
				position++
				add(ruleAppendOp, position172)
			}
			return true
		l171:
			position, tokenIndex = position171, tokenIndex171
			return false
		},
		/* 37 SumGroupOp <- <(SumOp / SubOp)> */
		func() bool {
			position173, tokenIndex173 := position, tokenIndex
			{
				position174 := position
				{
					position175, tokenIndex175 := position, tokenIndex
					if !_rules[ruleSumOp]() {
						goto l176
					}
					goto l175
				l176:
					position, tokenIndex = position175, tokenIndex175
					if !_rules[ruleSubOp]() {
						goto l173
					}
				}
			l175:
				add(ruleSumGroupOp, position174)
			}
			return true
		l173:
			position, tokenIndex = position173, tokenIndex173
			return false
		},
		/* 38 SumOp <- <('+' !'+')> */
		func() bool {
			position177, tokenIndex177 := position, tokenIndex
			{
				position178 := position
				if buffer[position] != rune('+') {
					goto l177
				}
				position++
				{
					position179, tokenIndex179 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l179
					}
					position++
					goto l177
				l179:
					position, tokenIndex = position179, tokenIndex179
				}
				add(ruleSumOp, position178)
			}
			return true
		l177:
			position, tokenIndex = position177, tokenIndex177
			return false
		},
		/* 39 SubOp <- <'-'> */
		func() bool {
			position180, tokenIndex180 := position, tokenIndex
			{
				position181 := position
				if buffer[position] != rune('-') {
					goto l180
				}
				position++
				add(ruleSubOp, position181)
			}
			return true
		l180:
			position, tokenIndex = position180, tokenIndex180
			return false
		},
		/* 40 MultGroupOp <- <(MulOp / DivOp / ModOp)> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				{
					position184, tokenIndex184 := position, tokenIndex
					if !_rules[ruleMulOp]() {
						goto l185
					}
					goto l184
				l185:
					position, tokenIndex = position184, tokenIndex184
					if !_rules[ruleDivOp]() {
						goto l186
					}
					goto l184
				l186:
					position, tokenIndex = position184, tokenIndex184
					if !_rules[ruleModOp]() {
						goto l182
					}
				}
			l184:
				add(ruleMultGroupOp, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 41 MulOp <- <'*'> */
		func() bool {
			position187, tokenIndex187 := position, tokenIndex
			{
				position188 := position
				if buffer[position] != rune('*') {
					goto l187
				}
				position++
				add(ruleMulOp, position188)
			}
			return true
		l187:
			position, tokenIndex = position187, tokenIndex187
			return false
		},
		/* 42 DivOp <- <'/'> */
		func() bool {
			position189, tokenIndex189 := position, tokenIndex
			{
				position190 := position
				if buffer[position] != rune('/') {
					goto l189
				}
				position++
				add(ruleDivOp, position190)
			}
			return true
		l189:
			position, tokenIndex = position189, tokenIndex189
			return false
		},
		/* 43 ModOp <- <'%'> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				if buffer[position] != rune('%') {
					goto l191
				}
				position++
				add(ruleModOp, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 44 UnaryOp <- <(PositiveOp / NegativeOp / NotOp)> */
		func() bool {
			position193, tokenIndex193 := position, tokenIndex
			{
				position194 := position
				{
					position195, tokenIndex195 := position, tokenIndex
					if !_rules[rulePositiveOp]() {
						goto l196
					}
					goto l195
				l196:
					position, tokenIndex = position195, tokenIndex195
					if !_rules[ruleNegativeOp]() {
						goto l197
					}
					goto l195
				l197:
					position, tokenIndex = position195, tokenIndex195
					if !_rules[ruleNotOp]() {
						goto l193
					}
				}
			l195:
				add(ruleUnaryOp, position194)
			}
			return true
		l193:
			position, tokenIndex = position193, tokenIndex193
			return false
		},
		/* 45 PositiveOp <- <'+'> */
		func() bool {
			position198, tokenIndex198 := position, tokenIndex
			{
				position199 := position
				if buffer[position] != rune('+') {
					goto l198
				}
				position++
				add(rulePositiveOp, position199)
			}
			return true
		l198:
			position, tokenIndex = position198, tokenIndex198
			return false
		},
		/* 46 NegativeOp <- <('-' !'#')> */
		func() bool {
			position200, tokenIndex200 := position, tokenIndex
			{
				position201 := position
				if buffer[position] != rune('-') {
					goto l200
				}
				position++
				{
					position202, tokenIndex202 := position, tokenIndex
					if buffer[position] != rune('#') {
						goto l202
					}
					position++
					goto l200
				l202:
					position, tokenIndex = position202, tokenIndex202
				}
				add(ruleNegativeOp, position201)
			}
			return true
		l200:
			position, tokenIndex = position200, tokenIndex200
			return false
		},
		/* 47 NotOp <- <'!'> */
		func() bool {
			position203, tokenIndex203 := position, tokenIndex
			{
				position204 := position
				if buffer[position] != rune('!') {
					goto l203
				}
				position++
				add(ruleNotOp, position204)
			}
			return true
		l203:
			position, tokenIndex = position203, tokenIndex203
			return false
		},
		/* 48 ReservedWords <- <(('l' 'e' 't') / ('s' 't' 'r' 'i' 'c' 't') / ('b' 'a' 's' 'e' '1' '6') / ('b' 'a' 's' 'e' '5' '8') / ('b' 'a' 's' 'e' '6' '4') / ('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e') / ('i' 'f') / ('t' 'h' 'e' 'n') / ('e' 'l' 's' 'e') / ('m' 'a' 't' 'c' 'h') / ('c' 'a' 's' 'e') / ('f' 'u' 'n' 'c') / ('F' 'O' 'L' 'D'))> */
		func() bool {
			position205, tokenIndex205 := position, tokenIndex
			{
				position206 := position
				{
					position207, tokenIndex207 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l208
					}
					position++
					if buffer[position] != rune('e') {
						goto l208
					}
					position++
					if buffer[position] != rune('t') {
						goto l208
					}
					position++
					goto l207
				l208:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('s') {
						goto l209
					}
					position++
					if buffer[position] != rune('t') {
						goto l209
					}
					position++
					if buffer[position] != rune('r') {
						goto l209
					}
					position++
					if buffer[position] != rune('i') {
						goto l209
					}
					position++
					if buffer[position] != rune('c') {
						goto l209
					}
					position++
					if buffer[position] != rune('t') {
						goto l209
					}
					position++
					goto l207
				l209:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('b') {
						goto l210
					}
					position++
					if buffer[position] != rune('a') {
						goto l210
					}
					position++
					if buffer[position] != rune('s') {
						goto l210
					}
					position++
					if buffer[position] != rune('e') {
						goto l210
					}
					position++
					if buffer[position] != rune('1') {
						goto l210
					}
					position++
					if buffer[position] != rune('6') {
						goto l210
					}
					position++
					goto l207
				l210:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('b') {
						goto l211
					}
					position++
					if buffer[position] != rune('a') {
						goto l211
					}
					position++
					if buffer[position] != rune('s') {
						goto l211
					}
					position++
					if buffer[position] != rune('e') {
						goto l211
					}
					position++
					if buffer[position] != rune('5') {
						goto l211
					}
					position++
					if buffer[position] != rune('8') {
						goto l211
					}
					position++
					goto l207
				l211:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('b') {
						goto l212
					}
					position++
					if buffer[position] != rune('a') {
						goto l212
					}
					position++
					if buffer[position] != rune('s') {
						goto l212
					}
					position++
					if buffer[position] != rune('e') {
						goto l212
					}
					position++
					if buffer[position] != rune('6') {
						goto l212
					}
					position++
					if buffer[position] != rune('4') {
						goto l212
					}
					position++
					goto l207
				l212:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('t') {
						goto l213
					}
					position++
					if buffer[position] != rune('r') {
						goto l213
					}
					position++
					if buffer[position] != rune('u') {
						goto l213
					}
					position++
					if buffer[position] != rune('e') {
						goto l213
					}
					position++
					goto l207
				l213:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('f') {
						goto l214
					}
					position++
					if buffer[position] != rune('a') {
						goto l214
					}
					position++
					if buffer[position] != rune('l') {
						goto l214
					}
					position++
					if buffer[position] != rune('s') {
						goto l214
					}
					position++
					if buffer[position] != rune('e') {
						goto l214
					}
					position++
					goto l207
				l214:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('i') {
						goto l215
					}
					position++
					if buffer[position] != rune('f') {
						goto l215
					}
					position++
					goto l207
				l215:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('t') {
						goto l216
					}
					position++
					if buffer[position] != rune('h') {
						goto l216
					}
					position++
					if buffer[position] != rune('e') {
						goto l216
					}
					position++
					if buffer[position] != rune('n') {
						goto l216
					}
					position++
					goto l207
				l216:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('e') {
						goto l217
					}
					position++
					if buffer[position] != rune('l') {
						goto l217
					}
					position++
					if buffer[position] != rune('s') {
						goto l217
					}
					position++
					if buffer[position] != rune('e') {
						goto l217
					}
					position++
					goto l207
				l217:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('m') {
						goto l218
					}
					position++
					if buffer[position] != rune('a') {
						goto l218
					}
					position++
					if buffer[position] != rune('t') {
						goto l218
					}
					position++
					if buffer[position] != rune('c') {
						goto l218
					}
					position++
					if buffer[position] != rune('h') {
						goto l218
					}
					position++
					goto l207
				l218:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('c') {
						goto l219
					}
					position++
					if buffer[position] != rune('a') {
						goto l219
					}
					position++
					if buffer[position] != rune('s') {
						goto l219
					}
					position++
					if buffer[position] != rune('e') {
						goto l219
					}
					position++
					goto l207
				l219:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('f') {
						goto l220
					}
					position++
					if buffer[position] != rune('u') {
						goto l220
					}
					position++
					if buffer[position] != rune('n') {
						goto l220
					}
					position++
					if buffer[position] != rune('c') {
						goto l220
					}
					position++
					goto l207
				l220:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('F') {
						goto l205
					}
					position++
					if buffer[position] != rune('O') {
						goto l205
					}
					position++
					if buffer[position] != rune('L') {
						goto l205
					}
					position++
					if buffer[position] != rune('D') {
						goto l205
					}
					position++
				}
			l207:
				add(ruleReservedWords, position206)
			}
			return true
		l205:
			position, tokenIndex = position205, tokenIndex205
			return false
		},
		/* 49 Const <- <(Integer / String / ByteVector / Boolean)> */
		func() bool {
			position221, tokenIndex221 := position, tokenIndex
			{
				position222 := position
				{
					position223, tokenIndex223 := position, tokenIndex
					if !_rules[ruleInteger]() {
						goto l224
					}
					goto l223
				l224:
					position, tokenIndex = position223, tokenIndex223
					if !_rules[ruleString]() {
						goto l225
					}
					goto l223
				l225:
					position, tokenIndex = position223, tokenIndex223
					if !_rules[ruleByteVector]() {
						goto l226
					}
					goto l223
				l226:
					position, tokenIndex = position223, tokenIndex223
					if !_rules[ruleBoolean]() {
						goto l221
					}
				}
			l223:
				add(ruleConst, position222)
			}
			return true
		l221:
			position, tokenIndex = position221, tokenIndex221
			return false
		},
		/* 50 Identifier <- <((!ReservedWords ([A-Z] / [a-z] / ('_' &([A-Z] / [a-z]))) ([A-Z] / [a-z] / [0-9] / ('_' !'_'))*) / (ReservedWords ([A-Z] / [a-z] / [0-9] / ('_' !'_'))+))> */
		func() bool {
			position227, tokenIndex227 := position, tokenIndex
			{
				position228 := position
				{
					position229, tokenIndex229 := position, tokenIndex
					{
						position231, tokenIndex231 := position, tokenIndex
						if !_rules[ruleReservedWords]() {
							goto l231
						}
						goto l230
					l231:
						position, tokenIndex = position231, tokenIndex231
					}
					{
						position232, tokenIndex232 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l233
						}
						position++
						goto l232
					l233:
						position, tokenIndex = position232, tokenIndex232
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l234
						}
						position++
						goto l232
					l234:
						position, tokenIndex = position232, tokenIndex232
						if buffer[position] != rune('_') {
							goto l230
						}
						position++
						{
							position235, tokenIndex235 := position, tokenIndex
							{
								position236, tokenIndex236 := position, tokenIndex
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l237
								}
								position++
								goto l236
							l237:
								position, tokenIndex = position236, tokenIndex236
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l230
								}
								position++
							}
						l236:
							position, tokenIndex = position235, tokenIndex235
						}
					}
				l232:
				l238:
					{
						position239, tokenIndex239 := position, tokenIndex
						{
							position240, tokenIndex240 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l241
							}
							position++
							goto l240
						l241:
							position, tokenIndex = position240, tokenIndex240
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l242
							}
							position++
							goto l240
						l242:
							position, tokenIndex = position240, tokenIndex240
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l243
							}
							position++
							goto l240
						l243:
							position, tokenIndex = position240, tokenIndex240
							if buffer[position] != rune('_') {
								goto l239
							}
							position++
							{
								position244, tokenIndex244 := position, tokenIndex
								if buffer[position] != rune('_') {
									goto l244
								}
								position++
								goto l239
							l244:
								position, tokenIndex = position244, tokenIndex244
							}
						}
					l240:
						goto l238
					l239:
						position, tokenIndex = position239, tokenIndex239
					}
					goto l229
				l230:
					position, tokenIndex = position229, tokenIndex229
					if !_rules[ruleReservedWords]() {
						goto l227
					}
					{
						position247, tokenIndex247 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l248
						}
						position++
						goto l247
					l248:
						position, tokenIndex = position247, tokenIndex247
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l249
						}
						position++
						goto l247
					l249:
						position, tokenIndex = position247, tokenIndex247
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l250
						}
						position++
						goto l247
					l250:
						position, tokenIndex = position247, tokenIndex247
						if buffer[position] != rune('_') {
							goto l227
						}
						position++
						{
							position251, tokenIndex251 := position, tokenIndex
							if buffer[position] != rune('_') {
								goto l251
							}
							position++
							goto l227
						l251:
							position, tokenIndex = position251, tokenIndex251
						}
					}
				l247:
				l245:
					{
						position246, tokenIndex246 := position, tokenIndex
						{
							position252, tokenIndex252 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l253
							}
							position++
							goto l252
						l253:
							position, tokenIndex = position252, tokenIndex252
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l254
							}
							position++
							goto l252
						l254:
							position, tokenIndex = position252, tokenIndex252
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l255
							}
							position++
							goto l252
						l255:
							position, tokenIndex = position252, tokenIndex252
							if buffer[position] != rune('_') {
								goto l246
							}
							position++
							{
								position256, tokenIndex256 := position, tokenIndex
								if buffer[position] != rune('_') {
									goto l256
								}
								position++
								goto l246
							l256:
								position, tokenIndex = position256, tokenIndex256
							}
						}
					l252:
						goto l245
					l246:
						position, tokenIndex = position246, tokenIndex246
					}
				}
			l229:
				add(ruleIdentifier, position228)
			}
			return true
		l227:
			position, tokenIndex = position227, tokenIndex227
			return false
		},
		/* 51 Type <- <(([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])*)> */
		func() bool {
			position257, tokenIndex257 := position, tokenIndex
			{
				position258 := position
				{
					position259, tokenIndex259 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l260
					}
					position++
					goto l259
				l260:
					position, tokenIndex = position259, tokenIndex259
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l257
					}
					position++
				}
			l259:
			l261:
				{
					position262, tokenIndex262 := position, tokenIndex
					{
						position263, tokenIndex263 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l264
						}
						position++
						goto l263
					l264:
						position, tokenIndex = position263, tokenIndex263
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l265
						}
						position++
						goto l263
					l265:
						position, tokenIndex = position263, tokenIndex263
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l262
						}
						position++
					}
				l263:
					goto l261
				l262:
					position, tokenIndex = position262, tokenIndex262
				}
				add(ruleType, position258)
			}
			return true
		l257:
			position, tokenIndex = position257, tokenIndex257
			return false
		},
		/* 52 GenericType <- <(Type _ '[' _ Types _ ']')> */
		func() bool {
			position266, tokenIndex266 := position, tokenIndex
			{
				position267 := position
				if !_rules[ruleType]() {
					goto l266
				}
				if !_rules[rule_]() {
					goto l266
				}
				if buffer[position] != rune('[') {
					goto l266
				}
				position++
				if !_rules[rule_]() {
					goto l266
				}
				if !_rules[ruleTypes]() {
					goto l266
				}
				if !_rules[rule_]() {
					goto l266
				}
				if buffer[position] != rune(']') {
					goto l266
				}
				position++
				add(ruleGenericType, position267)
			}
			return true
		l266:
			position, tokenIndex = position266, tokenIndex266
			return false
		},
		/* 53 TupleType <- <('(' _ Types _ (',' _ Types)+ _ ')')> */
		func() bool {
			position268, tokenIndex268 := position, tokenIndex
			{
				position269 := position
				if buffer[position] != rune('(') {
					goto l268
				}
				position++
				if !_rules[rule_]() {
					goto l268
				}
				if !_rules[ruleTypes]() {
					goto l268
				}
				if !_rules[rule_]() {
					goto l268
				}
				if buffer[position] != rune(',') {
					goto l268
				}
				position++
				if !_rules[rule_]() {
					goto l268
				}
				if !_rules[ruleTypes]() {
					goto l268
				}
			l270:
				{
					position271, tokenIndex271 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l271
					}
					position++
					if !_rules[rule_]() {
						goto l271
					}
					if !_rules[ruleTypes]() {
						goto l271
					}
					goto l270
				l271:
					position, tokenIndex = position271, tokenIndex271
				}
				if !_rules[rule_]() {
					goto l268
				}
				if buffer[position] != rune(')') {
					goto l268
				}
				position++
				add(ruleTupleType, position269)
			}
			return true
		l268:
			position, tokenIndex = position268, tokenIndex268
			return false
		},
		/* 54 Types <- <((GenericType / TupleType / Type) (_ '|' _ Types)?)> */
		func() bool {
			position272, tokenIndex272 := position, tokenIndex
			{
				position273 := position
				{
					position274, tokenIndex274 := position, tokenIndex
					if !_rules[ruleGenericType]() {
						goto l275
					}
					goto l274
				l275:
					position, tokenIndex = position274, tokenIndex274
					if !_rules[ruleTupleType]() {
						goto l276
					}
					goto l274
				l276:
					position, tokenIndex = position274, tokenIndex274
					if !_rules[ruleType]() {
						goto l272
					}
				}
			l274:
				{
					position277, tokenIndex277 := position, tokenIndex
					if !_rules[rule_]() {
						goto l277
					}
					if buffer[position] != rune('|') {
						goto l277
					}
					position++
					if !_rules[rule_]() {
						goto l277
					}
					if !_rules[ruleTypes]() {
						goto l277
					}
					goto l278
				l277:
					position, tokenIndex = position277, tokenIndex277
				}
			l278:
				add(ruleTypes, position273)
			}
			return true
		l272:
			position, tokenIndex = position272, tokenIndex272
			return false
		},
		/* 55 Base16 <- <('b' 'a' 's' 'e' '1' '6' '\'' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')* '\'')> */
		func() bool {
			position279, tokenIndex279 := position, tokenIndex
			{
				position280 := position
				if buffer[position] != rune('b') {
					goto l279
				}
				position++
				if buffer[position] != rune('a') {
					goto l279
				}
				position++
				if buffer[position] != rune('s') {
					goto l279
				}
				position++
				if buffer[position] != rune('e') {
					goto l279
				}
				position++
				if buffer[position] != rune('1') {
					goto l279
				}
				position++
				if buffer[position] != rune('6') {
					goto l279
				}
				position++
				if buffer[position] != rune('\'') {
					goto l279
				}
				position++
			l281:
				{
					position282, tokenIndex282 := position, tokenIndex
					{
						position283, tokenIndex283 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l284
						}
						position++
						goto l283
					l284:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('A') {
							goto l285
						}
						position++
						goto l283
					l285:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('B') {
							goto l286
						}
						position++
						goto l283
					l286:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('C') {
							goto l287
						}
						position++
						goto l283
					l287:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('D') {
							goto l288
						}
						position++
						goto l283
					l288:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('E') {
							goto l289
						}
						position++
						goto l283
					l289:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('F') {
							goto l290
						}
						position++
						goto l283
					l290:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('a') {
							goto l291
						}
						position++
						goto l283
					l291:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('b') {
							goto l292
						}
						position++
						goto l283
					l292:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('c') {
							goto l293
						}
						position++
						goto l283
					l293:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('d') {
							goto l294
						}
						position++
						goto l283
					l294:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('e') {
							goto l295
						}
						position++
						goto l283
					l295:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('f') {
							goto l282
						}
						position++
					}
				l283:
					goto l281
				l282:
					position, tokenIndex = position282, tokenIndex282
				}
				if buffer[position] != rune('\'') {
					goto l279
				}
				position++
				add(ruleBase16, position280)
			}
			return true
		l279:
			position, tokenIndex = position279, tokenIndex279
			return false
		},
		/* 56 Base58 <- <('b' 'a' 's' 'e' '5' '8' '\'' ('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'J' / 'K' / 'L' / 'M' / 'N' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z')* '\'')> */
		func() bool {
			position296, tokenIndex296 := position, tokenIndex
			{
				position297 := position
				if buffer[position] != rune('b') {
					goto l296
				}
				position++
				if buffer[position] != rune('a') {
					goto l296
				}
				position++
				if buffer[position] != rune('s') {
					goto l296
				}
				position++
				if buffer[position] != rune('e') {
					goto l296
				}
				position++
				if buffer[position] != rune('5') {
					goto l296
				}
				position++
				if buffer[position] != rune('8') {
					goto l296
				}
				position++
				if buffer[position] != rune('\'') {
					goto l296
				}
				position++
			l298:
				{
					position299, tokenIndex299 := position, tokenIndex
					{
						position300, tokenIndex300 := position, tokenIndex
						if buffer[position] != rune('1') {
							goto l301
						}
						position++
						goto l300
					l301:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('2') {
							goto l302
						}
						position++
						goto l300
					l302:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('3') {
							goto l303
						}
						position++
						goto l300
					l303:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('4') {
							goto l304
						}
						position++
						goto l300
					l304:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('5') {
							goto l305
						}
						position++
						goto l300
					l305:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('6') {
							goto l306
						}
						position++
						goto l300
					l306:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('7') {
							goto l307
						}
						position++
						goto l300
					l307:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('8') {
							goto l308
						}
						position++
						goto l300
					l308:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('9') {
							goto l309
						}
						position++
						goto l300
					l309:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('A') {
							goto l310
						}
						position++
						goto l300
					l310:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('B') {
							goto l311
						}
						position++
						goto l300
					l311:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('C') {
							goto l312
						}
						position++
						goto l300
					l312:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('D') {
							goto l313
						}
						position++
						goto l300
					l313:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('E') {
							goto l314
						}
						position++
						goto l300
					l314:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('F') {
							goto l315
						}
						position++
						goto l300
					l315:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('G') {
							goto l316
						}
						position++
						goto l300
					l316:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('H') {
							goto l317
						}
						position++
						goto l300
					l317:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('J') {
							goto l318
						}
						position++
						goto l300
					l318:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('K') {
							goto l319
						}
						position++
						goto l300
					l319:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('L') {
							goto l320
						}
						position++
						goto l300
					l320:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('M') {
							goto l321
						}
						position++
						goto l300
					l321:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('N') {
							goto l322
						}
						position++
						goto l300
					l322:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('P') {
							goto l323
						}
						position++
						goto l300
					l323:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('Q') {
							goto l324
						}
						position++
						goto l300
					l324:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('R') {
							goto l325
						}
						position++
						goto l300
					l325:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('S') {
							goto l326
						}
						position++
						goto l300
					l326:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('T') {
							goto l327
						}
						position++
						goto l300
					l327:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('U') {
							goto l328
						}
						position++
						goto l300
					l328:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('V') {
							goto l329
						}
						position++
						goto l300
					l329:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('W') {
							goto l330
						}
						position++
						goto l300
					l330:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('X') {
							goto l331
						}
						position++
						goto l300
					l331:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('Y') {
							goto l332
						}
						position++
						goto l300
					l332:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('Z') {
							goto l333
						}
						position++
						goto l300
					l333:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('a') {
							goto l334
						}
						position++
						goto l300
					l334:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('b') {
							goto l335
						}
						position++
						goto l300
					l335:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('c') {
							goto l336
						}
						position++
						goto l300
					l336:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('d') {
							goto l337
						}
						position++
						goto l300
					l337:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('e') {
							goto l338
						}
						position++
						goto l300
					l338:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('f') {
							goto l339
						}
						position++
						goto l300
					l339:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('g') {
							goto l340
						}
						position++
						goto l300
					l340:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('h') {
							goto l341
						}
						position++
						goto l300
					l341:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('i') {
							goto l342
						}
						position++
						goto l300
					l342:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('j') {
							goto l343
						}
						position++
						goto l300
					l343:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('k') {
							goto l344
						}
						position++
						goto l300
					l344:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('m') {
							goto l345
						}
						position++
						goto l300
					l345:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('n') {
							goto l346
						}
						position++
						goto l300
					l346:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('o') {
							goto l347
						}
						position++
						goto l300
					l347:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('p') {
							goto l348
						}
						position++
						goto l300
					l348:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('q') {
							goto l349
						}
						position++
						goto l300
					l349:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('r') {
							goto l350
						}
						position++
						goto l300
					l350:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('s') {
							goto l351
						}
						position++
						goto l300
					l351:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('t') {
							goto l352
						}
						position++
						goto l300
					l352:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('u') {
							goto l353
						}
						position++
						goto l300
					l353:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('v') {
							goto l354
						}
						position++
						goto l300
					l354:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('w') {
							goto l355
						}
						position++
						goto l300
					l355:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('x') {
							goto l356
						}
						position++
						goto l300
					l356:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('y') {
							goto l357
						}
						position++
						goto l300
					l357:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('z') {
							goto l299
						}
						position++
					}
				l300:
					goto l298
				l299:
					position, tokenIndex = position299, tokenIndex299
				}
				if buffer[position] != rune('\'') {
					goto l296
				}
				position++
				add(ruleBase58, position297)
			}
			return true
		l296:
			position, tokenIndex = position296, tokenIndex296
			return false
		},
		/* 57 Base64 <- <('b' 'a' 's' 'e' '6' '4' '\'' ('A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'I' / 'J' / 'K' / 'L' / 'M' / 'N' / 'O' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '0' / '1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / '+' / '/' / '=')* '\'')> */
		func() bool {
			position358, tokenIndex358 := position, tokenIndex
			{
				position359 := position
				if buffer[position] != rune('b') {
					goto l358
				}
				position++
				if buffer[position] != rune('a') {
					goto l358
				}
				position++
				if buffer[position] != rune('s') {
					goto l358
				}
				position++
				if buffer[position] != rune('e') {
					goto l358
				}
				position++
				if buffer[position] != rune('6') {
					goto l358
				}
				position++
				if buffer[position] != rune('4') {
					goto l358
				}
				position++
				if buffer[position] != rune('\'') {
					goto l358
				}
				position++
			l360:
				{
					position361, tokenIndex361 := position, tokenIndex
					{
						position362, tokenIndex362 := position, tokenIndex
						if buffer[position] != rune('A') {
							goto l363
						}
						position++
						goto l362
					l363:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('B') {
							goto l364
						}
						position++
						goto l362
					l364:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('C') {
							goto l365
						}
						position++
						goto l362
					l365:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('D') {
							goto l366
						}
						position++
						goto l362
					l366:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('E') {
							goto l367
						}
						position++
						goto l362
					l367:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('F') {
							goto l368
						}
						position++
						goto l362
					l368:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('G') {
							goto l369
						}
						position++
						goto l362
					l369:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('H') {
							goto l370
						}
						position++
						goto l362
					l370:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('I') {
							goto l371
						}
						position++
						goto l362
					l371:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('J') {
							goto l372
						}
						position++
						goto l362
					l372:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('K') {
							goto l373
						}
						position++
						goto l362
					l373:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('L') {
							goto l374
						}
						position++
						goto l362
					l374:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('M') {
							goto l375
						}
						position++
						goto l362
					l375:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('N') {
							goto l376
						}
						position++
						goto l362
					l376:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('O') {
							goto l377
						}
						position++
						goto l362
					l377:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('P') {
							goto l378
						}
						position++
						goto l362
					l378:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('Q') {
							goto l379
						}
						position++
						goto l362
					l379:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('R') {
							goto l380
						}
						position++
						goto l362
					l380:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('S') {
							goto l381
						}
						position++
						goto l362
					l381:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('T') {
							goto l382
						}
						position++
						goto l362
					l382:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('U') {
							goto l383
						}
						position++
						goto l362
					l383:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('V') {
							goto l384
						}
						position++
						goto l362
					l384:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('W') {
							goto l385
						}
						position++
						goto l362
					l385:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('X') {
							goto l386
						}
						position++
						goto l362
					l386:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('Y') {
							goto l387
						}
						position++
						goto l362
					l387:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('Z') {
							goto l388
						}
						position++
						goto l362
					l388:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('a') {
							goto l389
						}
						position++
						goto l362
					l389:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('b') {
							goto l390
						}
						position++
						goto l362
					l390:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('c') {
							goto l391
						}
						position++
						goto l362
					l391:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('d') {
							goto l392
						}
						position++
						goto l362
					l392:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('e') {
							goto l393
						}
						position++
						goto l362
					l393:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('f') {
							goto l394
						}
						position++
						goto l362
					l394:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('g') {
							goto l395
						}
						position++
						goto l362
					l395:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('h') {
							goto l396
						}
						position++
						goto l362
					l396:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('i') {
							goto l397
						}
						position++
						goto l362
					l397:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('j') {
							goto l398
						}
						position++
						goto l362
					l398:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('k') {
							goto l399
						}
						position++
						goto l362
					l399:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('l') {
							goto l400
						}
						position++
						goto l362
					l400:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('m') {
							goto l401
						}
						position++
						goto l362
					l401:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('n') {
							goto l402
						}
						position++
						goto l362
					l402:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('o') {
							goto l403
						}
						position++
						goto l362
					l403:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('p') {
							goto l404
						}
						position++
						goto l362
					l404:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('q') {
							goto l405
						}
						position++
						goto l362
					l405:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('r') {
							goto l406
						}
						position++
						goto l362
					l406:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('s') {
							goto l407
						}
						position++
						goto l362
					l407:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('t') {
							goto l408
						}
						position++
						goto l362
					l408:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('u') {
							goto l409
						}
						position++
						goto l362
					l409:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('v') {
							goto l410
						}
						position++
						goto l362
					l410:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('w') {
							goto l411
						}
						position++
						goto l362
					l411:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('x') {
							goto l412
						}
						position++
						goto l362
					l412:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('y') {
							goto l413
						}
						position++
						goto l362
					l413:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('z') {
							goto l414
						}
						position++
						goto l362
					l414:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('0') {
							goto l415
						}
						position++
						goto l362
					l415:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('1') {
							goto l416
						}
						position++
						goto l362
					l416:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('2') {
							goto l417
						}
						position++
						goto l362
					l417:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('3') {
							goto l418
						}
						position++
						goto l362
					l418:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('4') {
							goto l419
						}
						position++
						goto l362
					l419:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('5') {
							goto l420
						}
						position++
						goto l362
					l420:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('6') {
							goto l421
						}
						position++
						goto l362
					l421:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('7') {
							goto l422
						}
						position++
						goto l362
					l422:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('8') {
							goto l423
						}
						position++
						goto l362
					l423:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('9') {
							goto l424
						}
						position++
						goto l362
					l424:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('+') {
							goto l425
						}
						position++
						goto l362
					l425:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('/') {
							goto l426
						}
						position++
						goto l362
					l426:
						position, tokenIndex = position362, tokenIndex362
						if buffer[position] != rune('=') {
							goto l361
						}
						position++
					}
				l362:
					goto l360
				l361:
					position, tokenIndex = position361, tokenIndex361
				}
				if buffer[position] != rune('\'') {
					goto l358
				}
				position++
				add(ruleBase64, position359)
			}
			return true
		l358:
			position, tokenIndex = position358, tokenIndex358
			return false
		},
		/* 58 ByteVector <- <(Base16 / Base58 / Base64)> */
		func() bool {
			position427, tokenIndex427 := position, tokenIndex
			{
				position428 := position
				{
					position429, tokenIndex429 := position, tokenIndex
					if !_rules[ruleBase16]() {
						goto l430
					}
					goto l429
				l430:
					position, tokenIndex = position429, tokenIndex429
					if !_rules[ruleBase58]() {
						goto l431
					}
					goto l429
				l431:
					position, tokenIndex = position429, tokenIndex429
					if !_rules[ruleBase64]() {
						goto l427
					}
				}
			l429:
				add(ruleByteVector, position428)
			}
			return true
		l427:
			position, tokenIndex = position427, tokenIndex427
			return false
		},
		/* 59 Boolean <- <(('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e'))> */
		func() bool {
			position432, tokenIndex432 := position, tokenIndex
			{
				position433 := position
				{
					position434, tokenIndex434 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l435
					}
					position++
					if buffer[position] != rune('r') {
						goto l435
					}
					position++
					if buffer[position] != rune('u') {
						goto l435
					}
					position++
					if buffer[position] != rune('e') {
						goto l435
					}
					position++
					goto l434
				l435:
					position, tokenIndex = position434, tokenIndex434
					if buffer[position] != rune('f') {
						goto l432
					}
					position++
					if buffer[position] != rune('a') {
						goto l432
					}
					position++
					if buffer[position] != rune('l') {
						goto l432
					}
					position++
					if buffer[position] != rune('s') {
						goto l432
					}
					position++
					if buffer[position] != rune('e') {
						goto l432
					}
					position++
				}
			l434:
				add(ruleBoolean, position433)
			}
			return true
		l432:
			position, tokenIndex = position432, tokenIndex432
			return false
		},
		/* 60 String <- <('"' (UnicodeChar / EscapedChar / Char)* '"')> */
		func() bool {
			position436, tokenIndex436 := position, tokenIndex
			{
				position437 := position
				if buffer[position] != rune('"') {
					goto l436
				}
				position++
			l438:
				{
					position439, tokenIndex439 := position, tokenIndex
					{
						position440, tokenIndex440 := position, tokenIndex
						if !_rules[ruleUnicodeChar]() {
							goto l441
						}
						goto l440
					l441:
						position, tokenIndex = position440, tokenIndex440
						if !_rules[ruleEscapedChar]() {
							goto l442
						}
						goto l440
					l442:
						position, tokenIndex = position440, tokenIndex440
						if !_rules[ruleChar]() {
							goto l439
						}
					}
				l440:
					goto l438
				l439:
					position, tokenIndex = position439, tokenIndex439
				}
				if buffer[position] != rune('"') {
					goto l436
				}
				position++
				add(ruleString, position437)
			}
			return true
		l436:
			position, tokenIndex = position436, tokenIndex436
			return false
		},
		/* 61 UnicodeChar <- <('\\' 'u' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f'))> */
		func() bool {
			position443, tokenIndex443 := position, tokenIndex
			{
				position444 := position
				if buffer[position] != rune('\\') {
					goto l443
				}
				position++
				if buffer[position] != rune('u') {
					goto l443
				}
				position++
				{
					position445, tokenIndex445 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l446
					}
					position++
					goto l445
				l446:
					position, tokenIndex = position445, tokenIndex445
					if buffer[position] != rune('A') {
						goto l447
					}
					position++
					goto l445
				l447:
					position, tokenIndex = position445, tokenIndex445
					if buffer[position] != rune('B') {
						goto l448
					}
					position++
					goto l445
				l448:
					position, tokenIndex = position445, tokenIndex445
					if buffer[position] != rune('C') {
						goto l449
					}
					position++
					goto l445
				l449:
					position, tokenIndex = position445, tokenIndex445
					if buffer[position] != rune('D') {
						goto l450
					}
					position++
					goto l445
				l450:
					position, tokenIndex = position445, tokenIndex445
					if buffer[position] != rune('E') {
						goto l451
					}
					position++
					goto l445
				l451:
					position, tokenIndex = position445, tokenIndex445
					if buffer[position] != rune('F') {
						goto l452
					}
					position++
					goto l445
				l452:
					position, tokenIndex = position445, tokenIndex445
					if buffer[position] != rune('a') {
						goto l453
					}
					position++
					goto l445
				l453:
					position, tokenIndex = position445, tokenIndex445
					if buffer[position] != rune('b') {
						goto l454
					}
					position++
					goto l445
				l454:
					position, tokenIndex = position445, tokenIndex445
					if buffer[position] != rune('c') {
						goto l455
					}
					position++
					goto l445
				l455:
					position, tokenIndex = position445, tokenIndex445
					if buffer[position] != rune('d') {
						goto l456
					}
					position++
					goto l445
				l456:
					position, tokenIndex = position445, tokenIndex445
					if buffer[position] != rune('e') {
						goto l457
					}
					position++
					goto l445
				l457:
					position, tokenIndex = position445, tokenIndex445
					if buffer[position] != rune('f') {
						goto l443
					}
					position++
				}
			l445:
				{
					position458, tokenIndex458 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l459
					}
					position++
					goto l458
				l459:
					position, tokenIndex = position458, tokenIndex458
					if buffer[position] != rune('A') {
						goto l460
					}
					position++
					goto l458
				l460:
					position, tokenIndex = position458, tokenIndex458
					if buffer[position] != rune('B') {
						goto l461
					}
					position++
					goto l458
				l461:
					position, tokenIndex = position458, tokenIndex458
					if buffer[position] != rune('C') {
						goto l462
					}
					position++
					goto l458
				l462:
					position, tokenIndex = position458, tokenIndex458
					if buffer[position] != rune('D') {
						goto l463
					}
					position++
					goto l458
				l463:
					position, tokenIndex = position458, tokenIndex458
					if buffer[position] != rune('E') {
						goto l464
					}
					position++
					goto l458
				l464:
					position, tokenIndex = position458, tokenIndex458
					if buffer[position] != rune('F') {
						goto l465
					}
					position++
					goto l458
				l465:
					position, tokenIndex = position458, tokenIndex458
					if buffer[position] != rune('a') {
						goto l466
					}
					position++
					goto l458
				l466:
					position, tokenIndex = position458, tokenIndex458
					if buffer[position] != rune('b') {
						goto l467
					}
					position++
					goto l458
				l467:
					position, tokenIndex = position458, tokenIndex458
					if buffer[position] != rune('c') {
						goto l468
					}
					position++
					goto l458
				l468:
					position, tokenIndex = position458, tokenIndex458
					if buffer[position] != rune('d') {
						goto l469
					}
					position++
					goto l458
				l469:
					position, tokenIndex = position458, tokenIndex458
					if buffer[position] != rune('e') {
						goto l470
					}
					position++
					goto l458
				l470:
					position, tokenIndex = position458, tokenIndex458
					if buffer[position] != rune('f') {
						goto l443
					}
					position++
				}
			l458:
				{
					position471, tokenIndex471 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l472
					}
					position++
					goto l471
				l472:
					position, tokenIndex = position471, tokenIndex471
					if buffer[position] != rune('A') {
						goto l473
					}
					position++
					goto l471
				l473:
					position, tokenIndex = position471, tokenIndex471
					if buffer[position] != rune('B') {
						goto l474
					}
					position++
					goto l471
				l474:
					position, tokenIndex = position471, tokenIndex471
					if buffer[position] != rune('C') {
						goto l475
					}
					position++
					goto l471
				l475:
					position, tokenIndex = position471, tokenIndex471
					if buffer[position] != rune('D') {
						goto l476
					}
					position++
					goto l471
				l476:
					position, tokenIndex = position471, tokenIndex471
					if buffer[position] != rune('E') {
						goto l477
					}
					position++
					goto l471
				l477:
					position, tokenIndex = position471, tokenIndex471
					if buffer[position] != rune('F') {
						goto l478
					}
					position++
					goto l471
				l478:
					position, tokenIndex = position471, tokenIndex471
					if buffer[position] != rune('a') {
						goto l479
					}
					position++
					goto l471
				l479:
					position, tokenIndex = position471, tokenIndex471
					if buffer[position] != rune('b') {
						goto l480
					}
					position++
					goto l471
				l480:
					position, tokenIndex = position471, tokenIndex471
					if buffer[position] != rune('c') {
						goto l481
					}
					position++
					goto l471
				l481:
					position, tokenIndex = position471, tokenIndex471
					if buffer[position] != rune('d') {
						goto l482
					}
					position++
					goto l471
				l482:
					position, tokenIndex = position471, tokenIndex471
					if buffer[position] != rune('e') {
						goto l483
					}
					position++
					goto l471
				l483:
					position, tokenIndex = position471, tokenIndex471
					if buffer[position] != rune('f') {
						goto l443
					}
					position++
				}
			l471:
				{
					position484, tokenIndex484 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l485
					}
					position++
					goto l484
				l485:
					position, tokenIndex = position484, tokenIndex484
					if buffer[position] != rune('A') {
						goto l486
					}
					position++
					goto l484
				l486:
					position, tokenIndex = position484, tokenIndex484
					if buffer[position] != rune('B') {
						goto l487
					}
					position++
					goto l484
				l487:
					position, tokenIndex = position484, tokenIndex484
					if buffer[position] != rune('C') {
						goto l488
					}
					position++
					goto l484
				l488:
					position, tokenIndex = position484, tokenIndex484
					if buffer[position] != rune('D') {
						goto l489
					}
					position++
					goto l484
				l489:
					position, tokenIndex = position484, tokenIndex484
					if buffer[position] != rune('E') {
						goto l490
					}
					position++
					goto l484
				l490:
					position, tokenIndex = position484, tokenIndex484
					if buffer[position] != rune('F') {
						goto l491
					}
					position++
					goto l484
				l491:
					position, tokenIndex = position484, tokenIndex484
					if buffer[position] != rune('a') {
						goto l492
					}
					position++
					goto l484
				l492:
					position, tokenIndex = position484, tokenIndex484
					if buffer[position] != rune('b') {
						goto l493
					}
					position++
					goto l484
				l493:
					position, tokenIndex = position484, tokenIndex484
					if buffer[position] != rune('c') {
						goto l494
					}
					position++
					goto l484
				l494:
					position, tokenIndex = position484, tokenIndex484
					if buffer[position] != rune('d') {
						goto l495
					}
					position++
					goto l484
				l495:
					position, tokenIndex = position484, tokenIndex484
					if buffer[position] != rune('e') {
						goto l496
					}
					position++
					goto l484
				l496:
					position, tokenIndex = position484, tokenIndex484
					if buffer[position] != rune('f') {
						goto l443
					}
					position++
				}
			l484:
				add(ruleUnicodeChar, position444)
			}
			return true
		l443:
			position, tokenIndex = position443, tokenIndex443
			return false
		},
		/* 62 EscapedChar <- <('\\' .)> */
		func() bool {
			position497, tokenIndex497 := position, tokenIndex
			{
				position498 := position
				if buffer[position] != rune('\\') {
					goto l497
				}
				position++
				if !matchDot() {
					goto l497
				}
				add(ruleEscapedChar, position498)
			}
			return true
		l497:
			position, tokenIndex = position497, tokenIndex497
			return false
		},
		/* 63 Char <- <(!'"' .)> */
		func() bool {
			position499, tokenIndex499 := position, tokenIndex
			{
				position500 := position
				{
					position501, tokenIndex501 := position, tokenIndex
					if buffer[position] != rune('"') {
						goto l501
					}
					position++
					goto l499
				l501:
					position, tokenIndex = position501, tokenIndex501
				}
				if !matchDot() {
					goto l499
				}
				add(ruleChar, position500)
			}
			return true
		l499:
			position, tokenIndex = position499, tokenIndex499
			return false
		},
		/* 64 Integer <- <([0-9] ('_' &[0-9])?)+> */
		func() bool {
			position502, tokenIndex502 := position, tokenIndex
			{
				position503 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l502
				}
				position++
				{
					position506, tokenIndex506 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l506
					}
					position++
					{
						position508, tokenIndex508 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l506
						}
						position++
						position, tokenIndex = position508, tokenIndex508
					}
					goto l507
				l506:
					position, tokenIndex = position506, tokenIndex506
				}
			l507:
			l504:
				{
					position505, tokenIndex505 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l505
					}
					position++
					{
						position509, tokenIndex509 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l509
						}
						position++
						{
							position511, tokenIndex511 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l509
							}
							position++
							position, tokenIndex = position511, tokenIndex511
						}
						goto l510
					l509:
						position, tokenIndex = position509, tokenIndex509
					}
				l510:
					goto l504
				l505:
					position, tokenIndex = position505, tokenIndex505
				}
				add(ruleInteger, position503)
			}
			return true
		l502:
			position, tokenIndex = position502, tokenIndex502
			return false
		},
		/* 65 List <- <('[' _ ExprSeq? _ ']')> */
		func() bool {
			position512, tokenIndex512 := position, tokenIndex
			{
				position513 := position
				if buffer[position] != rune('[') {
					goto l512
				}
				position++
				if !_rules[rule_]() {
					goto l512
				}
				{
					position514, tokenIndex514 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l514
					}
					goto l515
				l514:
					position, tokenIndex = position514, tokenIndex514
				}
			l515:
				if !_rules[rule_]() {
					goto l512
				}
				if buffer[position] != rune(']') {
					goto l512
				}
				position++
				add(ruleList, position513)
			}
			return true
		l512:
			position, tokenIndex = position512, tokenIndex512
			return false
		},
		/* 66 ExprSeq <- <(Expr (_ ',' _ ExprSeq)?)> */
		func() bool {
			position516, tokenIndex516 := position, tokenIndex
			{
				position517 := position
				if !_rules[ruleExpr]() {
					goto l516
				}
				{
					position518, tokenIndex518 := position, tokenIndex
					if !_rules[rule_]() {
						goto l518
					}
					if buffer[position] != rune(',') {
						goto l518
					}
					position++
					if !_rules[rule_]() {
						goto l518
					}
					if !_rules[ruleExprSeq]() {
						goto l518
					}
					goto l519
				l518:
					position, tokenIndex = position518, tokenIndex518
				}
			l519:
				add(ruleExprSeq, position517)
			}
			return true
		l516:
			position, tokenIndex = position516, tokenIndex516
			return false
		},
		/* 67 AtomExpr <- <(UnaryOp? _ (FoldMacro / GettableExpr / IfWithError / Match / Const / List / Tuple))> */
		func() bool {
			position520, tokenIndex520 := position, tokenIndex
			{
				position521 := position
				{
					position522, tokenIndex522 := position, tokenIndex
					if !_rules[ruleUnaryOp]() {
						goto l522
					}
					goto l523
				l522:
					position, tokenIndex = position522, tokenIndex522
				}
			l523:
				if !_rules[rule_]() {
					goto l520
				}
				{
					position524, tokenIndex524 := position, tokenIndex
					if !_rules[ruleFoldMacro]() {
						goto l525
					}
					goto l524
				l525:
					position, tokenIndex = position524, tokenIndex524
					if !_rules[ruleGettableExpr]() {
						goto l526
					}
					goto l524
				l526:
					position, tokenIndex = position524, tokenIndex524
					if !_rules[ruleIfWithError]() {
						goto l527
					}
					goto l524
				l527:
					position, tokenIndex = position524, tokenIndex524
					if !_rules[ruleMatch]() {
						goto l528
					}
					goto l524
				l528:
					position, tokenIndex = position524, tokenIndex524
					if !_rules[ruleConst]() {
						goto l529
					}
					goto l524
				l529:
					position, tokenIndex = position524, tokenIndex524
					if !_rules[ruleList]() {
						goto l530
					}
					goto l524
				l530:
					position, tokenIndex = position524, tokenIndex524
					if !_rules[ruleTuple]() {
						goto l520
					}
				}
			l524:
				add(ruleAtomExpr, position521)
			}
			return true
		l520:
			position, tokenIndex = position520, tokenIndex520
			return false
		},
		/* 68 MultGroupOpAtom <- <(AtomExpr (_ MultGroupOp _ AtomExpr)*)> */
		func() bool {
			position531, tokenIndex531 := position, tokenIndex
			{
				position532 := position
				if !_rules[ruleAtomExpr]() {
					goto l531
				}
			l533:
				{
					position534, tokenIndex534 := position, tokenIndex
					if !_rules[rule_]() {
						goto l534
					}
					if !_rules[ruleMultGroupOp]() {
						goto l534
					}
					if !_rules[rule_]() {
						goto l534
					}
					if !_rules[ruleAtomExpr]() {
						goto l534
					}
					goto l533
				l534:
					position, tokenIndex = position534, tokenIndex534
				}
				add(ruleMultGroupOpAtom, position532)
			}
			return true
		l531:
			position, tokenIndex = position531, tokenIndex531
			return false
		},
		/* 69 SumGroupOpAtom <- <(MultGroupOpAtom (_ SumGroupOp _ MultGroupOpAtom)*)> */
		func() bool {
			position535, tokenIndex535 := position, tokenIndex
			{
				position536 := position
				if !_rules[ruleMultGroupOpAtom]() {
					goto l535
				}
			l537:
				{
					position538, tokenIndex538 := position, tokenIndex
					if !_rules[rule_]() {
						goto l538
					}
					if !_rules[ruleSumGroupOp]() {
						goto l538
					}
					if !_rules[rule_]() {
						goto l538
					}
					if !_rules[ruleMultGroupOpAtom]() {
						goto l538
					}
					goto l537
				l538:
					position, tokenIndex = position538, tokenIndex538
				}
				add(ruleSumGroupOpAtom, position536)
			}
			return true
		l535:
			position, tokenIndex = position535, tokenIndex535
			return false
		},
		/* 70 ListGroupOpAtom <- <(SumGroupOpAtom (_ ListGroupOp _ SumGroupOpAtom)*)> */
		func() bool {
			position539, tokenIndex539 := position, tokenIndex
			{
				position540 := position
				if !_rules[ruleSumGroupOpAtom]() {
					goto l539
				}
			l541:
				{
					position542, tokenIndex542 := position, tokenIndex
					if !_rules[rule_]() {
						goto l542
					}
					if !_rules[ruleListGroupOp]() {
						goto l542
					}
					if !_rules[rule_]() {
						goto l542
					}
					if !_rules[ruleSumGroupOpAtom]() {
						goto l542
					}
					goto l541
				l542:
					position, tokenIndex = position542, tokenIndex542
				}
				add(ruleListGroupOpAtom, position540)
			}
			return true
		l539:
			position, tokenIndex = position539, tokenIndex539
			return false
		},
		/* 71 CompareGroupOpAtom <- <(ListGroupOpAtom (_ CompareGroupOp _ ListGroupOpAtom)*)> */
		func() bool {
			position543, tokenIndex543 := position, tokenIndex
			{
				position544 := position
				if !_rules[ruleListGroupOpAtom]() {
					goto l543
				}
			l545:
				{
					position546, tokenIndex546 := position, tokenIndex
					if !_rules[rule_]() {
						goto l546
					}
					if !_rules[ruleCompareGroupOp]() {
						goto l546
					}
					if !_rules[rule_]() {
						goto l546
					}
					if !_rules[ruleListGroupOpAtom]() {
						goto l546
					}
					goto l545
				l546:
					position, tokenIndex = position546, tokenIndex546
				}
				add(ruleCompareGroupOpAtom, position544)
			}
			return true
		l543:
			position, tokenIndex = position543, tokenIndex543
			return false
		},
		/* 72 EqualityGroupOpAtom <- <(CompareGroupOpAtom (_ EqGroupOp _ CompareGroupOpAtom)*)> */
		func() bool {
			position547, tokenIndex547 := position, tokenIndex
			{
				position548 := position
				if !_rules[ruleCompareGroupOpAtom]() {
					goto l547
				}
			l549:
				{
					position550, tokenIndex550 := position, tokenIndex
					if !_rules[rule_]() {
						goto l550
					}
					if !_rules[ruleEqGroupOp]() {
						goto l550
					}
					if !_rules[rule_]() {
						goto l550
					}
					if !_rules[ruleCompareGroupOpAtom]() {
						goto l550
					}
					goto l549
				l550:
					position, tokenIndex = position550, tokenIndex550
				}
				add(ruleEqualityGroupOpAtom, position548)
			}
			return true
		l547:
			position, tokenIndex = position547, tokenIndex547
			return false
		},
		/* 73 AndOpAtom <- <(EqualityGroupOpAtom (_ AndOp _ EqualityGroupOpAtom)*)> */
		func() bool {
			position551, tokenIndex551 := position, tokenIndex
			{
				position552 := position
				if !_rules[ruleEqualityGroupOpAtom]() {
					goto l551
				}
			l553:
				{
					position554, tokenIndex554 := position, tokenIndex
					if !_rules[rule_]() {
						goto l554
					}
					if !_rules[ruleAndOp]() {
						goto l554
					}
					if !_rules[rule_]() {
						goto l554
					}
					if !_rules[ruleEqualityGroupOpAtom]() {
						goto l554
					}
					goto l553
				l554:
					position, tokenIndex = position554, tokenIndex554
				}
				add(ruleAndOpAtom, position552)
			}
			return true
		l551:
			position, tokenIndex = position551, tokenIndex551
			return false
		},
		/* 74 OrOpAtom <- <(AndOpAtom (_ OrOp _ AndOpAtom)*)> */
		func() bool {
			position555, tokenIndex555 := position, tokenIndex
			{
				position556 := position
				if !_rules[ruleAndOpAtom]() {
					goto l555
				}
			l557:
				{
					position558, tokenIndex558 := position, tokenIndex
					if !_rules[rule_]() {
						goto l558
					}
					if !_rules[ruleOrOp]() {
						goto l558
					}
					if !_rules[rule_]() {
						goto l558
					}
					if !_rules[ruleAndOpAtom]() {
						goto l558
					}
					goto l557
				l558:
					position, tokenIndex = position558, tokenIndex558
				}
				add(ruleOrOpAtom, position556)
			}
			return true
		l555:
			position, tokenIndex = position555, tokenIndex555
			return false
		},
		/* 75 Expr <- <OrOpAtom> */
		func() bool {
			position559, tokenIndex559 := position, tokenIndex
			{
				position560 := position
				if !_rules[ruleOrOpAtom]() {
					goto l559
				}
				add(ruleExpr, position560)
			}
			return true
		l559:
			position, tokenIndex = position559, tokenIndex559
			return false
		},
		/* 76 ParExpr <- <('(' _ Expr _ ')')> */
		func() bool {
			position561, tokenIndex561 := position, tokenIndex
			{
				position562 := position
				if buffer[position] != rune('(') {
					goto l561
				}
				position++
				if !_rules[rule_]() {
					goto l561
				}
				if !_rules[ruleExpr]() {
					goto l561
				}
				if !_rules[rule_]() {
					goto l561
				}
				if buffer[position] != rune(')') {
					goto l561
				}
				position++
				add(ruleParExpr, position562)
			}
			return true
		l561:
			position, tokenIndex = position561, tokenIndex561
			return false
		},
		/* 77 GettableExpr <- <((ParExpr / Block / FunctionCall / Identifier / List / Tuple) (_ (ListAccess / ('.' _ (FunctionCallAccess / IdentifierAccess / TupleAccess))))*)> */
		func() bool {
			position563, tokenIndex563 := position, tokenIndex
			{
				position564 := position
				{
					position565, tokenIndex565 := position, tokenIndex
					if !_rules[ruleParExpr]() {
						goto l566
					}
					goto l565
				l566:
					position, tokenIndex = position565, tokenIndex565
					if !_rules[ruleBlock]() {
						goto l567
					}
					goto l565
				l567:
					position, tokenIndex = position565, tokenIndex565
					if !_rules[ruleFunctionCall]() {
						goto l568
					}
					goto l565
				l568:
					position, tokenIndex = position565, tokenIndex565
					if !_rules[ruleIdentifier]() {
						goto l569
					}
					goto l565
				l569:
					position, tokenIndex = position565, tokenIndex565
					if !_rules[ruleList]() {
						goto l570
					}
					goto l565
				l570:
					position, tokenIndex = position565, tokenIndex565
					if !_rules[ruleTuple]() {
						goto l563
					}
				}
			l565:
			l571:
				{
					position572, tokenIndex572 := position, tokenIndex
					if !_rules[rule_]() {
						goto l572
					}
					{
						position573, tokenIndex573 := position, tokenIndex
						if !_rules[ruleListAccess]() {
							goto l574
						}
						goto l573
					l574:
						position, tokenIndex = position573, tokenIndex573
						if buffer[position] != rune('.') {
							goto l572
						}
						position++
						if !_rules[rule_]() {
							goto l572
						}
						{
							position575, tokenIndex575 := position, tokenIndex
							if !_rules[ruleFunctionCallAccess]() {
								goto l576
							}
							goto l575
						l576:
							position, tokenIndex = position575, tokenIndex575
							if !_rules[ruleIdentifierAccess]() {
								goto l577
							}
							goto l575
						l577:
							position, tokenIndex = position575, tokenIndex575
							if !_rules[ruleTupleAccess]() {
								goto l572
							}
						}
					l575:
					}
				l573:
					goto l571
				l572:
					position, tokenIndex = position572, tokenIndex572
				}
				add(ruleGettableExpr, position564)
			}
			return true
		l563:
			position, tokenIndex = position563, tokenIndex563
			return false
		},
		/* 78 FunctionCallAccess <- <FunctionCall> */
		func() bool {
			position578, tokenIndex578 := position, tokenIndex
			{
				position579 := position
				if !_rules[ruleFunctionCall]() {
					goto l578
				}
				add(ruleFunctionCallAccess, position579)
			}
			return true
		l578:
			position, tokenIndex = position578, tokenIndex578
			return false
		},
		/* 79 IdentifierAccess <- <Identifier> */
		func() bool {
			position580, tokenIndex580 := position, tokenIndex
			{
				position581 := position
				if !_rules[ruleIdentifier]() {
					goto l580
				}
				add(ruleIdentifierAccess, position581)
			}
			return true
		l580:
			position, tokenIndex = position580, tokenIndex580
			return false
		},
		/* 80 ListAccess <- <('[' _ (Expr / Identifier) _ ']')> */
		func() bool {
			position582, tokenIndex582 := position, tokenIndex
			{
				position583 := position
				if buffer[position] != rune('[') {
					goto l582
				}
				position++
				if !_rules[rule_]() {
					goto l582
				}
				{
					position584, tokenIndex584 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l585
					}
					goto l584
				l585:
					position, tokenIndex = position584, tokenIndex584
					if !_rules[ruleIdentifier]() {
						goto l582
					}
				}
			l584:
				if !_rules[rule_]() {
					goto l582
				}
				if buffer[position] != rune(']') {
					goto l582
				}
				position++
				add(ruleListAccess, position583)
			}
			return true
		l582:
			position, tokenIndex = position582, tokenIndex582
			return false
		},
		/* 81 Block <- <('{' (_ Declaration)* _ Expr _ '}')> */
		func() bool {
			position586, tokenIndex586 := position, tokenIndex
			{
				position587 := position
				if buffer[position] != rune('{') {
					goto l586
				}
				position++
			l588:
				{
					position589, tokenIndex589 := position, tokenIndex
					if !_rules[rule_]() {
						goto l589
					}
					if !_rules[ruleDeclaration]() {
						goto l589
					}
					goto l588
				l589:
					position, tokenIndex = position589, tokenIndex589
				}
				if !_rules[rule_]() {
					goto l586
				}
				if !_rules[ruleExpr]() {
					goto l586
				}
				if !_rules[rule_]() {
					goto l586
				}
				if buffer[position] != rune('}') {
					goto l586
				}
				position++
				add(ruleBlock, position587)
			}
			return true
		l586:
			position, tokenIndex = position586, tokenIndex586
			return false
		},
		/* 82 BlockWithoutPar <- <((_ Declaration)* _ Expr)> */
		func() bool {
			position590, tokenIndex590 := position, tokenIndex
			{
				position591 := position
			l592:
				{
					position593, tokenIndex593 := position, tokenIndex
					if !_rules[rule_]() {
						goto l593
					}
					if !_rules[ruleDeclaration]() {
						goto l593
					}
					goto l592
				l593:
					position, tokenIndex = position593, tokenIndex593
				}
				if !_rules[rule_]() {
					goto l590
				}
				if !_rules[ruleExpr]() {
					goto l590
				}
				add(ruleBlockWithoutPar, position591)
			}
			return true
		l590:
			position, tokenIndex = position590, tokenIndex590
			return false
		},
		/* 83 FunctionCall <- <(Identifier _ '(' _ ExprSeq? _ ')')> */
		func() bool {
			position594, tokenIndex594 := position, tokenIndex
			{
				position595 := position
				if !_rules[ruleIdentifier]() {
					goto l594
				}
				if !_rules[rule_]() {
					goto l594
				}
				if buffer[position] != rune('(') {
					goto l594
				}
				position++
				if !_rules[rule_]() {
					goto l594
				}
				{
					position596, tokenIndex596 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l596
					}
					goto l597
				l596:
					position, tokenIndex = position596, tokenIndex596
				}
			l597:
				if !_rules[rule_]() {
					goto l594
				}
				if buffer[position] != rune(')') {
					goto l594
				}
				position++
				add(ruleFunctionCall, position595)
			}
			return true
		l594:
			position, tokenIndex = position594, tokenIndex594
			return false
		},
		/* 84 FoldMacro <- <('F' 'O' 'L' 'D' _ '<' _ Integer _ '>' _ '(' _ Expr _ ',' _ Expr _ ',' _ Identifier _ ')')> */
		func() bool {
			position598, tokenIndex598 := position, tokenIndex
			{
				position599 := position
				if buffer[position] != rune('F') {
					goto l598
				}
				position++
				if buffer[position] != rune('O') {
					goto l598
				}
				position++
				if buffer[position] != rune('L') {
					goto l598
				}
				position++
				if buffer[position] != rune('D') {
					goto l598
				}
				position++
				if !_rules[rule_]() {
					goto l598
				}
				if buffer[position] != rune('<') {
					goto l598
				}
				position++
				if !_rules[rule_]() {
					goto l598
				}
				if !_rules[ruleInteger]() {
					goto l598
				}
				if !_rules[rule_]() {
					goto l598
				}
				if buffer[position] != rune('>') {
					goto l598
				}
				position++
				if !_rules[rule_]() {
					goto l598
				}
				if buffer[position] != rune('(') {
					goto l598
				}
				position++
				if !_rules[rule_]() {
					goto l598
				}
				if !_rules[ruleExpr]() {
					goto l598
				}
				if !_rules[rule_]() {
					goto l598
				}
				if buffer[position] != rune(',') {
					goto l598
				}
				position++
				if !_rules[rule_]() {
					goto l598
				}
				if !_rules[ruleExpr]() {
					goto l598
				}
				if !_rules[rule_]() {
					goto l598
				}
				if buffer[position] != rune(',') {
					goto l598
				}
				position++
				if !_rules[rule_]() {
					goto l598
				}
				if !_rules[ruleIdentifier]() {
					goto l598
				}
				if !_rules[rule_]() {
					goto l598
				}
				if buffer[position] != rune(')') {
					goto l598
				}
				position++
				add(ruleFoldMacro, position599)
			}
			return true
		l598:
			position, tokenIndex = position598, tokenIndex598
			return false
		},
		/* 85 IfWithError <- <(If / FailedIfWithoutElse)> */
		func() bool {
			position600, tokenIndex600 := position, tokenIndex
			{
				position601 := position
				{
					position602, tokenIndex602 := position, tokenIndex
					if !_rules[ruleIf]() {
						goto l603
					}
					goto l602
				l603:
					position, tokenIndex = position602, tokenIndex602
					if !_rules[ruleFailedIfWithoutElse]() {
						goto l600
					}
				}
			l602:
				add(ruleIfWithError, position601)
			}
			return true
		l600:
			position, tokenIndex = position600, tokenIndex600
			return false
		},
		/* 86 If <- <('i' 'f' _ Expr _ ('t' 'h' 'e' 'n') _ Expr _ ('e' 'l' 's' 'e') _ Expr)> */
		func() bool {
			position604, tokenIndex604 := position, tokenIndex
			{
				position605 := position
				if buffer[position] != rune('i') {
					goto l604
				}
				position++
				if buffer[position] != rune('f') {
					goto l604
				}
				position++
				if !_rules[rule_]() {
					goto l604
				}
				if !_rules[ruleExpr]() {
					goto l604
				}
				if !_rules[rule_]() {
					goto l604
				}
				if buffer[position] != rune('t') {
					goto l604
				}
				position++
				if buffer[position] != rune('h') {
					goto l604
				}
				position++
				if buffer[position] != rune('e') {
					goto l604
				}
				position++
				if buffer[position] != rune('n') {
					goto l604
				}
				position++
				if !_rules[rule_]() {
					goto l604
				}
				if !_rules[ruleExpr]() {
					goto l604
				}
				if !_rules[rule_]() {
					goto l604
				}
				if buffer[position] != rune('e') {
					goto l604
				}
				position++
				if buffer[position] != rune('l') {
					goto l604
				}
				position++
				if buffer[position] != rune('s') {
					goto l604
				}
				position++
				if buffer[position] != rune('e') {
					goto l604
				}
				position++
				if !_rules[rule_]() {
					goto l604
				}
				if !_rules[ruleExpr]() {
					goto l604
				}
				add(ruleIf, position605)
			}
			return true
		l604:
			position, tokenIndex = position604, tokenIndex604
			return false
		},
		/* 87 FailedIfWithoutElse <- <('i' 'f' _ Expr _ ('t' 'h' 'e' 'n') _ Expr)> */
		func() bool {
			position606, tokenIndex606 := position, tokenIndex
			{
				position607 := position
				if buffer[position] != rune('i') {
					goto l606
				}
				position++
				if buffer[position] != rune('f') {
					goto l606
				}
				position++
				if !_rules[rule_]() {
					goto l606
				}
				if !_rules[ruleExpr]() {
					goto l606
				}
				if !_rules[rule_]() {
					goto l606
				}
				if buffer[position] != rune('t') {
					goto l606
				}
				position++
				if buffer[position] != rune('h') {
					goto l606
				}
				position++
				if buffer[position] != rune('e') {
					goto l606
				}
				position++
				if buffer[position] != rune('n') {
					goto l606
				}
				position++
				if !_rules[rule_]() {
					goto l606
				}
				if !_rules[ruleExpr]() {
					goto l606
				}
				add(ruleFailedIfWithoutElse, position607)
			}
			return true
		l606:
			position, tokenIndex = position606, tokenIndex606
			return false
		},
		/* 88 Match <- <('m' 'a' 't' 'c' 'h' _ Expr _ '{' (_ Case)+ _ '}')> */
		func() bool {
			position608, tokenIndex608 := position, tokenIndex
			{
				position609 := position
				if buffer[position] != rune('m') {
					goto l608
				}
				position++
				if buffer[position] != rune('a') {
					goto l608
				}
				position++
				if buffer[position] != rune('t') {
					goto l608
				}
				position++
				if buffer[position] != rune('c') {
					goto l608
				}
				position++
				if buffer[position] != rune('h') {
					goto l608
				}
				position++
				if !_rules[rule_]() {
					goto l608
				}
				if !_rules[ruleExpr]() {
					goto l608
				}
				if !_rules[rule_]() {
					goto l608
				}
				if buffer[position] != rune('{') {
					goto l608
				}
				position++
				if !_rules[rule_]() {
					goto l608
				}
				if !_rules[ruleCase]() {
					goto l608
				}
			l610:
				{
					position611, tokenIndex611 := position, tokenIndex
					if !_rules[rule_]() {
						goto l611
					}
					if !_rules[ruleCase]() {
						goto l611
					}
					goto l610
				l611:
					position, tokenIndex = position611, tokenIndex611
				}
				if !_rules[rule_]() {
					goto l608
				}
				if buffer[position] != rune('}') {
					goto l608
				}
				position++
				add(ruleMatch, position609)
			}
			return true
		l608:
			position, tokenIndex = position608, tokenIndex608
			return false
		},
		/* 89 Case <- <('c' 'a' 's' 'e' _ (ValuePattern / TuplePattern / ObjectPattern / Placeholder) _ ('=' '>') _ (Block / BlockWithoutPar))> */
		func() bool {
			position612, tokenIndex612 := position, tokenIndex
			{
				position613 := position
				if buffer[position] != rune('c') {
					goto l612
				}
				position++
				if buffer[position] != rune('a') {
					goto l612
				}
				position++
				if buffer[position] != rune('s') {
					goto l612
				}
				position++
				if buffer[position] != rune('e') {
					goto l612
				}
				position++
				if !_rules[rule_]() {
					goto l612
				}
				{
					position614, tokenIndex614 := position, tokenIndex
					if !_rules[ruleValuePattern]() {
						goto l615
					}
					goto l614
				l615:
					position, tokenIndex = position614, tokenIndex614
					if !_rules[ruleTuplePattern]() {
						goto l616
					}
					goto l614
				l616:
					position, tokenIndex = position614, tokenIndex614
					if !_rules[ruleObjectPattern]() {
						goto l617
					}
					goto l614
				l617:
					position, tokenIndex = position614, tokenIndex614
					if !_rules[rulePlaceholder]() {
						goto l612
					}
				}
			l614:
				if !_rules[rule_]() {
					goto l612
				}
				if buffer[position] != rune('=') {
					goto l612
				}
				position++
				if buffer[position] != rune('>') {
					goto l612
				}
				position++
				if !_rules[rule_]() {
					goto l612
				}
				{
					position618, tokenIndex618 := position, tokenIndex
					if !_rules[ruleBlock]() {
						goto l619
					}
					goto l618
				l619:
					position, tokenIndex = position618, tokenIndex618
					if !_rules[ruleBlockWithoutPar]() {
						goto l612
					}
				}
			l618:
				add(ruleCase, position613)
			}
			return true
		l612:
			position, tokenIndex = position612, tokenIndex612
			return false
		},
		/* 90 Placeholder <- <'_'> */
		func() bool {
			position620, tokenIndex620 := position, tokenIndex
			{
				position621 := position
				if buffer[position] != rune('_') {
					goto l620
				}
				position++
				add(rulePlaceholder, position621)
			}
			return true
		l620:
			position, tokenIndex = position620, tokenIndex620
			return false
		},
		/* 91 ValuePattern <- <((Placeholder / Identifier) _ ':' _ Types)> */
		func() bool {
			position622, tokenIndex622 := position, tokenIndex
			{
				position623 := position
				{
					position624, tokenIndex624 := position, tokenIndex
					if !_rules[rulePlaceholder]() {
						goto l625
					}
					goto l624
				l625:
					position, tokenIndex = position624, tokenIndex624
					if !_rules[ruleIdentifier]() {
						goto l622
					}
				}
			l624:
				if !_rules[rule_]() {
					goto l622
				}
				if buffer[position] != rune(':') {
					goto l622
				}
				position++
				if !_rules[rule_]() {
					goto l622
				}
				if !_rules[ruleTypes]() {
					goto l622
				}
				add(ruleValuePattern, position623)
			}
			return true
		l622:
			position, tokenIndex = position622, tokenIndex622
			return false
		},
		/* 92 TupleValuesPattern <- <((ValuePattern / Placeholder / Expr / Const / GettableExpr) (_ ',' _ TupleValuesPattern)?)> */
		func() bool {
			position626, tokenIndex626 := position, tokenIndex
			{
				position627 := position
				{
					position628, tokenIndex628 := position, tokenIndex
					if !_rules[ruleValuePattern]() {
						goto l629
					}
					goto l628
				l629:
					position, tokenIndex = position628, tokenIndex628
					if !_rules[rulePlaceholder]() {
						goto l630
					}
					goto l628
				l630:
					position, tokenIndex = position628, tokenIndex628
					if !_rules[ruleExpr]() {
						goto l631
					}
					goto l628
				l631:
					position, tokenIndex = position628, tokenIndex628
					if !_rules[ruleConst]() {
						goto l632
					}
					goto l628
				l632:
					position, tokenIndex = position628, tokenIndex628
					if !_rules[ruleGettableExpr]() {
						goto l626
					}
				}
			l628:
				{
					position633, tokenIndex633 := position, tokenIndex
					if !_rules[rule_]() {
						goto l633
					}
					if buffer[position] != rune(',') {
						goto l633
					}
					position++
					if !_rules[rule_]() {
						goto l633
					}
					if !_rules[ruleTupleValuesPattern]() {
						goto l633
					}
					goto l634
				l633:
					position, tokenIndex = position633, tokenIndex633
				}
			l634:
				add(ruleTupleValuesPattern, position627)
			}
			return true
		l626:
			position, tokenIndex = position626, tokenIndex626
			return false
		},
		/* 93 TuplePattern <- <('(' _ TupleValuesPattern _ ')')> */
		func() bool {
			position635, tokenIndex635 := position, tokenIndex
			{
				position636 := position
				if buffer[position] != rune('(') {
					goto l635
				}
				position++
				if !_rules[rule_]() {
					goto l635
				}
				if !_rules[ruleTupleValuesPattern]() {
					goto l635
				}
				if !_rules[rule_]() {
					goto l635
				}
				if buffer[position] != rune(')') {
					goto l635
				}
				position++
				add(ruleTuplePattern, position636)
			}
			return true
		l635:
			position, tokenIndex = position635, tokenIndex635
			return false
		},
		/* 94 ObjectFieldsPattern <- <(Identifier _ '=' _ (Expr / Const / GettableExpr) (_ ',' _ ObjectFieldsPattern)?)> */
		func() bool {
			position637, tokenIndex637 := position, tokenIndex
			{
				position638 := position
				if !_rules[ruleIdentifier]() {
					goto l637
				}
				if !_rules[rule_]() {
					goto l637
				}
				if buffer[position] != rune('=') {
					goto l637
				}
				position++
				if !_rules[rule_]() {
					goto l637
				}
				{
					position639, tokenIndex639 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l640
					}
					goto l639
				l640:
					position, tokenIndex = position639, tokenIndex639
					if !_rules[ruleConst]() {
						goto l641
					}
					goto l639
				l641:
					position, tokenIndex = position639, tokenIndex639
					if !_rules[ruleGettableExpr]() {
						goto l637
					}
				}
			l639:
				{
					position642, tokenIndex642 := position, tokenIndex
					if !_rules[rule_]() {
						goto l642
					}
					if buffer[position] != rune(',') {
						goto l642
					}
					position++
					if !_rules[rule_]() {
						goto l642
					}
					if !_rules[ruleObjectFieldsPattern]() {
						goto l642
					}
					goto l643
				l642:
					position, tokenIndex = position642, tokenIndex642
				}
			l643:
				add(ruleObjectFieldsPattern, position638)
			}
			return true
		l637:
			position, tokenIndex = position637, tokenIndex637
			return false
		},
		/* 95 ObjectPattern <- <(Identifier _ '(' _ ObjectFieldsPattern _ ')')> */
		func() bool {
			position644, tokenIndex644 := position, tokenIndex
			{
				position645 := position
				if !_rules[ruleIdentifier]() {
					goto l644
				}
				if !_rules[rule_]() {
					goto l644
				}
				if buffer[position] != rune('(') {
					goto l644
				}
				position++
				if !_rules[rule_]() {
					goto l644
				}
				if !_rules[ruleObjectFieldsPattern]() {
					goto l644
				}
				if !_rules[rule_]() {
					goto l644
				}
				if buffer[position] != rune(')') {
					goto l644
				}
				position++
				add(ruleObjectPattern, position645)
			}
			return true
		l644:
			position, tokenIndex = position644, tokenIndex644
			return false
		},
		/* 96 Tuple <- <('(' _ AtomExpr (_ ',' _ AtomExpr)+ _ ')')> */
		func() bool {
			position646, tokenIndex646 := position, tokenIndex
			{
				position647 := position
				if buffer[position] != rune('(') {
					goto l646
				}
				position++
				if !_rules[rule_]() {
					goto l646
				}
				if !_rules[ruleAtomExpr]() {
					goto l646
				}
				if !_rules[rule_]() {
					goto l646
				}
				if buffer[position] != rune(',') {
					goto l646
				}
				position++
				if !_rules[rule_]() {
					goto l646
				}
				if !_rules[ruleAtomExpr]() {
					goto l646
				}
			l648:
				{
					position649, tokenIndex649 := position, tokenIndex
					if !_rules[rule_]() {
						goto l649
					}
					if buffer[position] != rune(',') {
						goto l649
					}
					position++
					if !_rules[rule_]() {
						goto l649
					}
					if !_rules[ruleAtomExpr]() {
						goto l649
					}
					goto l648
				l649:
					position, tokenIndex = position649, tokenIndex649
				}
				if !_rules[rule_]() {
					goto l646
				}
				if buffer[position] != rune(')') {
					goto l646
				}
				position++
				add(ruleTuple, position647)
			}
			return true
		l646:
			position, tokenIndex = position646, tokenIndex646
			return false
		},
		/* 97 TupleRef <- <('(' _ Identifier (_ ',' _ Identifier)+ _ ')')> */
		func() bool {
			position650, tokenIndex650 := position, tokenIndex
			{
				position651 := position
				if buffer[position] != rune('(') {
					goto l650
				}
				position++
				if !_rules[rule_]() {
					goto l650
				}
				if !_rules[ruleIdentifier]() {
					goto l650
				}
				if !_rules[rule_]() {
					goto l650
				}
				if buffer[position] != rune(',') {
					goto l650
				}
				position++
				if !_rules[rule_]() {
					goto l650
				}
				if !_rules[ruleIdentifier]() {
					goto l650
				}
			l652:
				{
					position653, tokenIndex653 := position, tokenIndex
					if !_rules[rule_]() {
						goto l653
					}
					if buffer[position] != rune(',') {
						goto l653
					}
					position++
					if !_rules[rule_]() {
						goto l653
					}
					if !_rules[ruleIdentifier]() {
						goto l653
					}
					goto l652
				l653:
					position, tokenIndex = position653, tokenIndex653
				}
				if !_rules[rule_]() {
					goto l650
				}
				if buffer[position] != rune(')') {
					goto l650
				}
				position++
				add(ruleTupleRef, position651)
			}
			return true
		l650:
			position, tokenIndex = position650, tokenIndex650
			return false
		},
		/* 98 TupleAccess <- <('_' [0-9]+)> */
		func() bool {
			position654, tokenIndex654 := position, tokenIndex
			{
				position655 := position
				if buffer[position] != rune('_') {
					goto l654
				}
				position++
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l654
				}
				position++
			l656:
				{
					position657, tokenIndex657 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l657
					}
					position++
					goto l656
				l657:
					position, tokenIndex = position657, tokenIndex657
				}
				add(ruleTupleAccess, position655)
			}
			return true
		l654:
			position, tokenIndex = position654, tokenIndex654
			return false
		},
	}
	p.rules = _rules
	return nil
}

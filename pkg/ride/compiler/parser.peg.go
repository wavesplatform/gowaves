package compiler

// Code generated by peg -output=parser.peg.go ride.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleCode
	ruleDAppRoot
	ruleScriptRoot
	ruleWS
	ruleEOL
	ruleComment
	rule_
	ruleEOF
	ruleDirectiveName
	ruleUpperCaseString
	ruleIntString
	rulePathString
	ruleDirective
	ruleDeclaration
	ruleVariable
	ruleStrictVariable
	ruleFunc
	ruleFuncArg
	ruleFuncArgSeq
	ruleAnnotatedFunc
	ruleAnnotation
	ruleIdentifierAtomSeq
	ruleAnnotationSeq
	ruleOrOp
	ruleAndOp
	ruleEqGroupOp
	ruleEqOp
	ruleNeOp
	ruleCompareGroupOp
	ruleGtOp
	ruleGeOp
	ruleLtOp
	ruleLeOp
	ruleConsOp
	ruleSumGroupOp
	ruleSumOp
	ruleSubOp
	ruleMultGroupOp
	ruleMulOp
	ruleDivOp
	ruleModOp
	ruleUnaryOp
	rulePositiveOp
	ruleNegativeOp
	ruleNotOp
	ruleReservedWords
	ruleConstAtom
	ruleIdentifierAtom
	ruleGenericTypesAtom
	ruleOneGenericTypeAtom
	ruleTypesAtom
	ruleOneTypeAtom
	ruleBase16
	ruleBase58
	ruleBase64
	ruleByteVectorAtom
	ruleBooleanAtom
	ruleStringAtom
	ruleUnicodeCharAtom
	ruleEscapedCharAtom
	ruleCharAtom
	ruleIntegerAtom
	ruleListAtom
	ruleExprSeq
	ruleAtomExpr
	ruleMultGroupOpAtom
	ruleSumGroupOpAtom
	ruleConsOpAtom
	ruleCompareGroupOpAtom
	ruleEqualityGroupOpAtom
	ruleAndOpAtom
	ruleOrOpAtom
	ruleExpr
	ruleParExpr
	ruleGettableExpr
	ruleFunctionCallAccess
	ruleIdentifierAtomAccess
	ruleListAccess
	ruleBlock
	ruleBlockWithoutPar
	ruleBlockDecExprSep
	ruleFunctionCall
	ruleFoldMacro
	ruleIfWithError
	ruleIf
	ruleFailedIfWithoutElse
	ruleMatch
	ruleMatchCase
	ruleDefaultMatchCasePart
)

var rul3s = [...]string{
	"Unknown",
	"Code",
	"DAppRoot",
	"ScriptRoot",
	"WS",
	"EOL",
	"Comment",
	"_",
	"EOF",
	"DirectiveName",
	"UpperCaseString",
	"IntString",
	"PathString",
	"Directive",
	"Declaration",
	"Variable",
	"StrictVariable",
	"Func",
	"FuncArg",
	"FuncArgSeq",
	"AnnotatedFunc",
	"Annotation",
	"IdentifierAtomSeq",
	"AnnotationSeq",
	"OrOp",
	"AndOp",
	"EqGroupOp",
	"EqOp",
	"NeOp",
	"CompareGroupOp",
	"GtOp",
	"GeOp",
	"LtOp",
	"LeOp",
	"ConsOp",
	"SumGroupOp",
	"SumOp",
	"SubOp",
	"MultGroupOp",
	"MulOp",
	"DivOp",
	"ModOp",
	"UnaryOp",
	"PositiveOp",
	"NegativeOp",
	"NotOp",
	"ReservedWords",
	"ConstAtom",
	"IdentifierAtom",
	"GenericTypesAtom",
	"OneGenericTypeAtom",
	"TypesAtom",
	"OneTypeAtom",
	"Base16",
	"Base58",
	"Base64",
	"ByteVectorAtom",
	"BooleanAtom",
	"StringAtom",
	"UnicodeCharAtom",
	"EscapedCharAtom",
	"CharAtom",
	"IntegerAtom",
	"ListAtom",
	"ExprSeq",
	"AtomExpr",
	"MultGroupOpAtom",
	"SumGroupOpAtom",
	"ConsOpAtom",
	"CompareGroupOpAtom",
	"EqualityGroupOpAtom",
	"AndOpAtom",
	"OrOpAtom",
	"Expr",
	"ParExpr",
	"GettableExpr",
	"FunctionCallAccess",
	"IdentifierAtomAccess",
	"ListAccess",
	"Block",
	"BlockWithoutPar",
	"BlockDecExprSep",
	"FunctionCall",
	"FoldMacro",
	"IfWithError",
	"If",
	"FailedIfWithoutElse",
	"Match",
	"MatchCase",
	"DefaultMatchCasePart",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Buffer string
	buffer []rune
	rules  [90]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Code <- <(DAppRoot / ScriptRoot)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[ruleDAppRoot]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[ruleScriptRoot]() {
						goto l0
					}
				}
			l2:
				add(ruleCode, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 DAppRoot <- <(_ (Directive _)* (_ Declaration)* (_ AnnotatedFunc)* _ EOF)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
				if !_rules[rule_]() {
					goto l4
				}
			l6:
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l7
					}
					if !_rules[rule_]() {
						goto l7
					}
					goto l6
				l7:
					position, tokenIndex = position7, tokenIndex7
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[rule_]() {
						goto l9
					}
					if !_rules[ruleDeclaration]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
			l10:
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[rule_]() {
						goto l11
					}
					if !_rules[ruleAnnotatedFunc]() {
						goto l11
					}
					goto l10
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				if !_rules[rule_]() {
					goto l4
				}
				if !_rules[ruleEOF]() {
					goto l4
				}
				add(ruleDAppRoot, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 ScriptRoot <- <(_ (Directive _)* (_ Declaration)* _ BlockDecExprSep? _ Expr _ EOF)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[rule_]() {
					goto l12
				}
			l14:
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l15
					}
					if !_rules[rule_]() {
						goto l15
					}
					goto l14
				l15:
					position, tokenIndex = position15, tokenIndex15
				}
			l16:
				{
					position17, tokenIndex17 := position, tokenIndex
					if !_rules[rule_]() {
						goto l17
					}
					if !_rules[ruleDeclaration]() {
						goto l17
					}
					goto l16
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				if !_rules[rule_]() {
					goto l12
				}
				{
					position18, tokenIndex18 := position, tokenIndex
					if !_rules[ruleBlockDecExprSep]() {
						goto l18
					}
					goto l19
				l18:
					position, tokenIndex = position18, tokenIndex18
				}
			l19:
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleExpr]() {
					goto l12
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleEOF]() {
					goto l12
				}
				add(ruleScriptRoot, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 WS <- <(' ' / '\t')> */
		func() bool {
			position20, tokenIndex20 := position, tokenIndex
			{
				position21 := position
				{
					position22, tokenIndex22 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l23
					}
					position++
					goto l22
				l23:
					position, tokenIndex = position22, tokenIndex22
					if buffer[position] != rune('\t') {
						goto l20
					}
					position++
				}
			l22:
				add(ruleWS, position21)
			}
			return true
		l20:
			position, tokenIndex = position20, tokenIndex20
			return false
		},
		/* 4 EOL <- <('\n' / '\r' / '\f')> */
		func() bool {
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26, tokenIndex26 := position, tokenIndex
					if buffer[position] != rune('\n') {
						goto l27
					}
					position++
					goto l26
				l27:
					position, tokenIndex = position26, tokenIndex26
					if buffer[position] != rune('\r') {
						goto l28
					}
					position++
					goto l26
				l28:
					position, tokenIndex = position26, tokenIndex26
					if buffer[position] != rune('\f') {
						goto l24
					}
					position++
				}
			l26:
				add(ruleEOL, position25)
			}
			return true
		l24:
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 5 Comment <- <('#' (!('\r' / '^' / '\n') .)*)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				if buffer[position] != rune('#') {
					goto l29
				}
				position++
			l31:
				{
					position32, tokenIndex32 := position, tokenIndex
					{
						position33, tokenIndex33 := position, tokenIndex
						{
							position34, tokenIndex34 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l35
							}
							position++
							goto l34
						l35:
							position, tokenIndex = position34, tokenIndex34
							if buffer[position] != rune('^') {
								goto l36
							}
							position++
							goto l34
						l36:
							position, tokenIndex = position34, tokenIndex34
							if buffer[position] != rune('\n') {
								goto l33
							}
							position++
						}
					l34:
						goto l32
					l33:
						position, tokenIndex = position33, tokenIndex33
					}
					if !matchDot() {
						goto l32
					}
					goto l31
				l32:
					position, tokenIndex = position32, tokenIndex32
				}
				add(ruleComment, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 6 _ <- <(Comment / (WS / EOL)+)*> */
		func() bool {
			{
				position38 := position
			l39:
				{
					position40, tokenIndex40 := position, tokenIndex
					{
						position41, tokenIndex41 := position, tokenIndex
						if !_rules[ruleComment]() {
							goto l42
						}
						goto l41
					l42:
						position, tokenIndex = position41, tokenIndex41
						{
							position45, tokenIndex45 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l46
							}
							goto l45
						l46:
							position, tokenIndex = position45, tokenIndex45
							if !_rules[ruleEOL]() {
								goto l40
							}
						}
					l45:
					l43:
						{
							position44, tokenIndex44 := position, tokenIndex
							{
								position47, tokenIndex47 := position, tokenIndex
								if !_rules[ruleWS]() {
									goto l48
								}
								goto l47
							l48:
								position, tokenIndex = position47, tokenIndex47
								if !_rules[ruleEOL]() {
									goto l44
								}
							}
						l47:
							goto l43
						l44:
							position, tokenIndex = position44, tokenIndex44
						}
					}
				l41:
					goto l39
				l40:
					position, tokenIndex = position40, tokenIndex40
				}
				add(rule_, position38)
			}
			return true
		},
		/* 7 EOF <- <!.> */
		func() bool {
			position49, tokenIndex49 := position, tokenIndex
			{
				position50 := position
				{
					position51, tokenIndex51 := position, tokenIndex
					if !matchDot() {
						goto l51
					}
					goto l49
				l51:
					position, tokenIndex = position51, tokenIndex51
				}
				add(ruleEOF, position50)
			}
			return true
		l49:
			position, tokenIndex = position49, tokenIndex49
			return false
		},
		/* 8 DirectiveName <- <([A-Z]+ ('_' / [A-Z])*)> */
		func() bool {
			position52, tokenIndex52 := position, tokenIndex
			{
				position53 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l52
				}
				position++
			l54:
				{
					position55, tokenIndex55 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l55
					}
					position++
					goto l54
				l55:
					position, tokenIndex = position55, tokenIndex55
				}
			l56:
				{
					position57, tokenIndex57 := position, tokenIndex
					{
						position58, tokenIndex58 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l59
						}
						position++
						goto l58
					l59:
						position, tokenIndex = position58, tokenIndex58
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l57
						}
						position++
					}
				l58:
					goto l56
				l57:
					position, tokenIndex = position57, tokenIndex57
				}
				add(ruleDirectiveName, position53)
			}
			return true
		l52:
			position, tokenIndex = position52, tokenIndex52
			return false
		},
		/* 9 UpperCaseString <- <[A-Z]+> */
		func() bool {
			position60, tokenIndex60 := position, tokenIndex
			{
				position61 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l60
				}
				position++
			l62:
				{
					position63, tokenIndex63 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l63
					}
					position++
					goto l62
				l63:
					position, tokenIndex = position63, tokenIndex63
				}
				add(ruleUpperCaseString, position61)
			}
			return true
		l60:
			position, tokenIndex = position60, tokenIndex60
			return false
		},
		/* 10 IntString <- <[0-9]+> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l64
				}
				position++
			l66:
				{
					position67, tokenIndex67 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l67
					}
					position++
					goto l66
				l67:
					position, tokenIndex = position67, tokenIndex67
				}
				add(ruleIntString, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 11 PathString <- <('_' / [a-z] / [A-Z] / [0-9] / '-' / '/' / ',' / '.')+> */
		func() bool {
			position68, tokenIndex68 := position, tokenIndex
			{
				position69 := position
				{
					position72, tokenIndex72 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l73
					}
					position++
					goto l72
				l73:
					position, tokenIndex = position72, tokenIndex72
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l74
					}
					position++
					goto l72
				l74:
					position, tokenIndex = position72, tokenIndex72
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l75
					}
					position++
					goto l72
				l75:
					position, tokenIndex = position72, tokenIndex72
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l76
					}
					position++
					goto l72
				l76:
					position, tokenIndex = position72, tokenIndex72
					if buffer[position] != rune('-') {
						goto l77
					}
					position++
					goto l72
				l77:
					position, tokenIndex = position72, tokenIndex72
					if buffer[position] != rune('/') {
						goto l78
					}
					position++
					goto l72
				l78:
					position, tokenIndex = position72, tokenIndex72
					if buffer[position] != rune(',') {
						goto l79
					}
					position++
					goto l72
				l79:
					position, tokenIndex = position72, tokenIndex72
					if buffer[position] != rune('.') {
						goto l68
					}
					position++
				}
			l72:
			l70:
				{
					position71, tokenIndex71 := position, tokenIndex
					{
						position80, tokenIndex80 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l81
						}
						position++
						goto l80
					l81:
						position, tokenIndex = position80, tokenIndex80
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l82
						}
						position++
						goto l80
					l82:
						position, tokenIndex = position80, tokenIndex80
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l83
						}
						position++
						goto l80
					l83:
						position, tokenIndex = position80, tokenIndex80
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l84
						}
						position++
						goto l80
					l84:
						position, tokenIndex = position80, tokenIndex80
						if buffer[position] != rune('-') {
							goto l85
						}
						position++
						goto l80
					l85:
						position, tokenIndex = position80, tokenIndex80
						if buffer[position] != rune('/') {
							goto l86
						}
						position++
						goto l80
					l86:
						position, tokenIndex = position80, tokenIndex80
						if buffer[position] != rune(',') {
							goto l87
						}
						position++
						goto l80
					l87:
						position, tokenIndex = position80, tokenIndex80
						if buffer[position] != rune('.') {
							goto l71
						}
						position++
					}
				l80:
					goto l70
				l71:
					position, tokenIndex = position71, tokenIndex71
				}
				add(rulePathString, position69)
			}
			return true
		l68:
			position, tokenIndex = position68, tokenIndex68
			return false
		},
		/* 12 Directive <- <('{' '-' '#' WS+ DirectiveName WS+ (IntString / UpperCaseString / PathString) WS+ ('#' '-' '}'))> */
		func() bool {
			position88, tokenIndex88 := position, tokenIndex
			{
				position89 := position
				if buffer[position] != rune('{') {
					goto l88
				}
				position++
				if buffer[position] != rune('-') {
					goto l88
				}
				position++
				if buffer[position] != rune('#') {
					goto l88
				}
				position++
				if !_rules[ruleWS]() {
					goto l88
				}
			l90:
				{
					position91, tokenIndex91 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l91
					}
					goto l90
				l91:
					position, tokenIndex = position91, tokenIndex91
				}
				if !_rules[ruleDirectiveName]() {
					goto l88
				}
				if !_rules[ruleWS]() {
					goto l88
				}
			l92:
				{
					position93, tokenIndex93 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l93
					}
					goto l92
				l93:
					position, tokenIndex = position93, tokenIndex93
				}
				{
					position94, tokenIndex94 := position, tokenIndex
					if !_rules[ruleIntString]() {
						goto l95
					}
					goto l94
				l95:
					position, tokenIndex = position94, tokenIndex94
					if !_rules[ruleUpperCaseString]() {
						goto l96
					}
					goto l94
				l96:
					position, tokenIndex = position94, tokenIndex94
					if !_rules[rulePathString]() {
						goto l88
					}
				}
			l94:
				if !_rules[ruleWS]() {
					goto l88
				}
			l97:
				{
					position98, tokenIndex98 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l98
					}
					goto l97
				l98:
					position, tokenIndex = position98, tokenIndex98
				}
				if buffer[position] != rune('#') {
					goto l88
				}
				position++
				if buffer[position] != rune('-') {
					goto l88
				}
				position++
				if buffer[position] != rune('}') {
					goto l88
				}
				position++
				add(ruleDirective, position89)
			}
			return true
		l88:
			position, tokenIndex = position88, tokenIndex88
			return false
		},
		/* 13 Declaration <- <(Variable / StrictVariable / Func)> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				{
					position101, tokenIndex101 := position, tokenIndex
					if !_rules[ruleVariable]() {
						goto l102
					}
					goto l101
				l102:
					position, tokenIndex = position101, tokenIndex101
					if !_rules[ruleStrictVariable]() {
						goto l103
					}
					goto l101
				l103:
					position, tokenIndex = position101, tokenIndex101
					if !_rules[ruleFunc]() {
						goto l99
					}
				}
			l101:
				add(ruleDeclaration, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 14 Variable <- <(('l' / 'L') ('e' / 'E') ('t' / 'T') _ IdentifierAtom _ '=' _ Expr)> */
		func() bool {
			position104, tokenIndex104 := position, tokenIndex
			{
				position105 := position
				{
					position106, tokenIndex106 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l107
					}
					position++
					goto l106
				l107:
					position, tokenIndex = position106, tokenIndex106
					if buffer[position] != rune('L') {
						goto l104
					}
					position++
				}
			l106:
				{
					position108, tokenIndex108 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l109
					}
					position++
					goto l108
				l109:
					position, tokenIndex = position108, tokenIndex108
					if buffer[position] != rune('E') {
						goto l104
					}
					position++
				}
			l108:
				{
					position110, tokenIndex110 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l111
					}
					position++
					goto l110
				l111:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('T') {
						goto l104
					}
					position++
				}
			l110:
				if !_rules[rule_]() {
					goto l104
				}
				if !_rules[ruleIdentifierAtom]() {
					goto l104
				}
				if !_rules[rule_]() {
					goto l104
				}
				if buffer[position] != rune('=') {
					goto l104
				}
				position++
				if !_rules[rule_]() {
					goto l104
				}
				if !_rules[ruleExpr]() {
					goto l104
				}
				add(ruleVariable, position105)
			}
			return true
		l104:
			position, tokenIndex = position104, tokenIndex104
			return false
		},
		/* 15 StrictVariable <- <(('s' / 'S') ('t' / 'T') ('r' / 'R') ('i' / 'I') ('c' / 'C') ('t' / 'T') _ IdentifierAtom _ '=' _ Expr)> */
		func() bool {
			position112, tokenIndex112 := position, tokenIndex
			{
				position113 := position
				{
					position114, tokenIndex114 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l115
					}
					position++
					goto l114
				l115:
					position, tokenIndex = position114, tokenIndex114
					if buffer[position] != rune('S') {
						goto l112
					}
					position++
				}
			l114:
				{
					position116, tokenIndex116 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l117
					}
					position++
					goto l116
				l117:
					position, tokenIndex = position116, tokenIndex116
					if buffer[position] != rune('T') {
						goto l112
					}
					position++
				}
			l116:
				{
					position118, tokenIndex118 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l119
					}
					position++
					goto l118
				l119:
					position, tokenIndex = position118, tokenIndex118
					if buffer[position] != rune('R') {
						goto l112
					}
					position++
				}
			l118:
				{
					position120, tokenIndex120 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l121
					}
					position++
					goto l120
				l121:
					position, tokenIndex = position120, tokenIndex120
					if buffer[position] != rune('I') {
						goto l112
					}
					position++
				}
			l120:
				{
					position122, tokenIndex122 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l123
					}
					position++
					goto l122
				l123:
					position, tokenIndex = position122, tokenIndex122
					if buffer[position] != rune('C') {
						goto l112
					}
					position++
				}
			l122:
				{
					position124, tokenIndex124 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l125
					}
					position++
					goto l124
				l125:
					position, tokenIndex = position124, tokenIndex124
					if buffer[position] != rune('T') {
						goto l112
					}
					position++
				}
			l124:
				if !_rules[rule_]() {
					goto l112
				}
				if !_rules[ruleIdentifierAtom]() {
					goto l112
				}
				if !_rules[rule_]() {
					goto l112
				}
				if buffer[position] != rune('=') {
					goto l112
				}
				position++
				if !_rules[rule_]() {
					goto l112
				}
				if !_rules[ruleExpr]() {
					goto l112
				}
				add(ruleStrictVariable, position113)
			}
			return true
		l112:
			position, tokenIndex = position112, tokenIndex112
			return false
		},
		/* 16 Func <- <(('f' / 'F') ('u' / 'U') ('n' / 'N') ('c' / 'C') _ IdentifierAtom _ '(' _ FuncArgSeq? _ ')' _ '=' _ Expr)> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				{
					position128, tokenIndex128 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l129
					}
					position++
					goto l128
				l129:
					position, tokenIndex = position128, tokenIndex128
					if buffer[position] != rune('F') {
						goto l126
					}
					position++
				}
			l128:
				{
					position130, tokenIndex130 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l131
					}
					position++
					goto l130
				l131:
					position, tokenIndex = position130, tokenIndex130
					if buffer[position] != rune('U') {
						goto l126
					}
					position++
				}
			l130:
				{
					position132, tokenIndex132 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l133
					}
					position++
					goto l132
				l133:
					position, tokenIndex = position132, tokenIndex132
					if buffer[position] != rune('N') {
						goto l126
					}
					position++
				}
			l132:
				{
					position134, tokenIndex134 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l135
					}
					position++
					goto l134
				l135:
					position, tokenIndex = position134, tokenIndex134
					if buffer[position] != rune('C') {
						goto l126
					}
					position++
				}
			l134:
				if !_rules[rule_]() {
					goto l126
				}
				if !_rules[ruleIdentifierAtom]() {
					goto l126
				}
				if !_rules[rule_]() {
					goto l126
				}
				if buffer[position] != rune('(') {
					goto l126
				}
				position++
				if !_rules[rule_]() {
					goto l126
				}
				{
					position136, tokenIndex136 := position, tokenIndex
					if !_rules[ruleFuncArgSeq]() {
						goto l136
					}
					goto l137
				l136:
					position, tokenIndex = position136, tokenIndex136
				}
			l137:
				if !_rules[rule_]() {
					goto l126
				}
				if buffer[position] != rune(')') {
					goto l126
				}
				position++
				if !_rules[rule_]() {
					goto l126
				}
				if buffer[position] != rune('=') {
					goto l126
				}
				position++
				if !_rules[rule_]() {
					goto l126
				}
				if !_rules[ruleExpr]() {
					goto l126
				}
				add(ruleFunc, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 17 FuncArg <- <(IdentifierAtom _ ':' _ GenericTypesAtom)> */
		func() bool {
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
				if !_rules[ruleIdentifierAtom]() {
					goto l138
				}
				if !_rules[rule_]() {
					goto l138
				}
				if buffer[position] != rune(':') {
					goto l138
				}
				position++
				if !_rules[rule_]() {
					goto l138
				}
				if !_rules[ruleGenericTypesAtom]() {
					goto l138
				}
				add(ruleFuncArg, position139)
			}
			return true
		l138:
			position, tokenIndex = position138, tokenIndex138
			return false
		},
		/* 18 FuncArgSeq <- <(FuncArg (_ ',' _ FuncArgSeq)?)> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				if !_rules[ruleFuncArg]() {
					goto l140
				}
				{
					position142, tokenIndex142 := position, tokenIndex
					if !_rules[rule_]() {
						goto l142
					}
					if buffer[position] != rune(',') {
						goto l142
					}
					position++
					if !_rules[rule_]() {
						goto l142
					}
					if !_rules[ruleFuncArgSeq]() {
						goto l142
					}
					goto l143
				l142:
					position, tokenIndex = position142, tokenIndex142
				}
			l143:
				add(ruleFuncArgSeq, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 19 AnnotatedFunc <- <(AnnotationSeq _ Func)> */
		func() bool {
			position144, tokenIndex144 := position, tokenIndex
			{
				position145 := position
				if !_rules[ruleAnnotationSeq]() {
					goto l144
				}
				if !_rules[rule_]() {
					goto l144
				}
				if !_rules[ruleFunc]() {
					goto l144
				}
				add(ruleAnnotatedFunc, position145)
			}
			return true
		l144:
			position, tokenIndex = position144, tokenIndex144
			return false
		},
		/* 20 Annotation <- <('@' IdentifierAtom _ '(' _ IdentifierAtomSeq _ ')')> */
		func() bool {
			position146, tokenIndex146 := position, tokenIndex
			{
				position147 := position
				if buffer[position] != rune('@') {
					goto l146
				}
				position++
				if !_rules[ruleIdentifierAtom]() {
					goto l146
				}
				if !_rules[rule_]() {
					goto l146
				}
				if buffer[position] != rune('(') {
					goto l146
				}
				position++
				if !_rules[rule_]() {
					goto l146
				}
				if !_rules[ruleIdentifierAtomSeq]() {
					goto l146
				}
				if !_rules[rule_]() {
					goto l146
				}
				if buffer[position] != rune(')') {
					goto l146
				}
				position++
				add(ruleAnnotation, position147)
			}
			return true
		l146:
			position, tokenIndex = position146, tokenIndex146
			return false
		},
		/* 21 IdentifierAtomSeq <- <(IdentifierAtom (_ ',' _ IdentifierAtomSeq)?)> */
		func() bool {
			position148, tokenIndex148 := position, tokenIndex
			{
				position149 := position
				if !_rules[ruleIdentifierAtom]() {
					goto l148
				}
				{
					position150, tokenIndex150 := position, tokenIndex
					if !_rules[rule_]() {
						goto l150
					}
					if buffer[position] != rune(',') {
						goto l150
					}
					position++
					if !_rules[rule_]() {
						goto l150
					}
					if !_rules[ruleIdentifierAtomSeq]() {
						goto l150
					}
					goto l151
				l150:
					position, tokenIndex = position150, tokenIndex150
				}
			l151:
				add(ruleIdentifierAtomSeq, position149)
			}
			return true
		l148:
			position, tokenIndex = position148, tokenIndex148
			return false
		},
		/* 22 AnnotationSeq <- <(Annotation (_ AnnotationSeq)?)> */
		func() bool {
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				if !_rules[ruleAnnotation]() {
					goto l152
				}
				{
					position154, tokenIndex154 := position, tokenIndex
					if !_rules[rule_]() {
						goto l154
					}
					if !_rules[ruleAnnotationSeq]() {
						goto l154
					}
					goto l155
				l154:
					position, tokenIndex = position154, tokenIndex154
				}
			l155:
				add(ruleAnnotationSeq, position153)
			}
			return true
		l152:
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 23 OrOp <- <('|' '|')> */
		func() bool {
			position156, tokenIndex156 := position, tokenIndex
			{
				position157 := position
				if buffer[position] != rune('|') {
					goto l156
				}
				position++
				if buffer[position] != rune('|') {
					goto l156
				}
				position++
				add(ruleOrOp, position157)
			}
			return true
		l156:
			position, tokenIndex = position156, tokenIndex156
			return false
		},
		/* 24 AndOp <- <('&' '&')> */
		func() bool {
			position158, tokenIndex158 := position, tokenIndex
			{
				position159 := position
				if buffer[position] != rune('&') {
					goto l158
				}
				position++
				if buffer[position] != rune('&') {
					goto l158
				}
				position++
				add(ruleAndOp, position159)
			}
			return true
		l158:
			position, tokenIndex = position158, tokenIndex158
			return false
		},
		/* 25 EqGroupOp <- <(EqOp / NeOp)> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				{
					position162, tokenIndex162 := position, tokenIndex
					if !_rules[ruleEqOp]() {
						goto l163
					}
					goto l162
				l163:
					position, tokenIndex = position162, tokenIndex162
					if !_rules[ruleNeOp]() {
						goto l160
					}
				}
			l162:
				add(ruleEqGroupOp, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 26 EqOp <- <('=' '=')> */
		func() bool {
			position164, tokenIndex164 := position, tokenIndex
			{
				position165 := position
				if buffer[position] != rune('=') {
					goto l164
				}
				position++
				if buffer[position] != rune('=') {
					goto l164
				}
				position++
				add(ruleEqOp, position165)
			}
			return true
		l164:
			position, tokenIndex = position164, tokenIndex164
			return false
		},
		/* 27 NeOp <- <('!' '=')> */
		func() bool {
			position166, tokenIndex166 := position, tokenIndex
			{
				position167 := position
				if buffer[position] != rune('!') {
					goto l166
				}
				position++
				if buffer[position] != rune('=') {
					goto l166
				}
				position++
				add(ruleNeOp, position167)
			}
			return true
		l166:
			position, tokenIndex = position166, tokenIndex166
			return false
		},
		/* 28 CompareGroupOp <- <(GtOp / GeOp / LtOp / LeOp)> */
		func() bool {
			position168, tokenIndex168 := position, tokenIndex
			{
				position169 := position
				{
					position170, tokenIndex170 := position, tokenIndex
					if !_rules[ruleGtOp]() {
						goto l171
					}
					goto l170
				l171:
					position, tokenIndex = position170, tokenIndex170
					if !_rules[ruleGeOp]() {
						goto l172
					}
					goto l170
				l172:
					position, tokenIndex = position170, tokenIndex170
					if !_rules[ruleLtOp]() {
						goto l173
					}
					goto l170
				l173:
					position, tokenIndex = position170, tokenIndex170
					if !_rules[ruleLeOp]() {
						goto l168
					}
				}
			l170:
				add(ruleCompareGroupOp, position169)
			}
			return true
		l168:
			position, tokenIndex = position168, tokenIndex168
			return false
		},
		/* 29 GtOp <- <('>' !'=')> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				if buffer[position] != rune('>') {
					goto l174
				}
				position++
				{
					position176, tokenIndex176 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l176
					}
					position++
					goto l174
				l176:
					position, tokenIndex = position176, tokenIndex176
				}
				add(ruleGtOp, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 30 GeOp <- <('>' '=')> */
		func() bool {
			position177, tokenIndex177 := position, tokenIndex
			{
				position178 := position
				if buffer[position] != rune('>') {
					goto l177
				}
				position++
				if buffer[position] != rune('=') {
					goto l177
				}
				position++
				add(ruleGeOp, position178)
			}
			return true
		l177:
			position, tokenIndex = position177, tokenIndex177
			return false
		},
		/* 31 LtOp <- <('<' !'=')> */
		func() bool {
			position179, tokenIndex179 := position, tokenIndex
			{
				position180 := position
				if buffer[position] != rune('<') {
					goto l179
				}
				position++
				{
					position181, tokenIndex181 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l181
					}
					position++
					goto l179
				l181:
					position, tokenIndex = position181, tokenIndex181
				}
				add(ruleLtOp, position180)
			}
			return true
		l179:
			position, tokenIndex = position179, tokenIndex179
			return false
		},
		/* 32 LeOp <- <('<' '=')> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				if buffer[position] != rune('<') {
					goto l182
				}
				position++
				if buffer[position] != rune('=') {
					goto l182
				}
				position++
				add(ruleLeOp, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 33 ConsOp <- <(':' ':')> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				if buffer[position] != rune(':') {
					goto l184
				}
				position++
				if buffer[position] != rune(':') {
					goto l184
				}
				position++
				add(ruleConsOp, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 34 SumGroupOp <- <(SumOp / SubOp)> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				{
					position188, tokenIndex188 := position, tokenIndex
					if !_rules[ruleSumOp]() {
						goto l189
					}
					goto l188
				l189:
					position, tokenIndex = position188, tokenIndex188
					if !_rules[ruleSubOp]() {
						goto l186
					}
				}
			l188:
				add(ruleSumGroupOp, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 35 SumOp <- <'+'> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if buffer[position] != rune('+') {
					goto l190
				}
				position++
				add(ruleSumOp, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 36 SubOp <- <'-'> */
		func() bool {
			position192, tokenIndex192 := position, tokenIndex
			{
				position193 := position
				if buffer[position] != rune('-') {
					goto l192
				}
				position++
				add(ruleSubOp, position193)
			}
			return true
		l192:
			position, tokenIndex = position192, tokenIndex192
			return false
		},
		/* 37 MultGroupOp <- <(MulOp / DivOp / ModOp)> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
				{
					position196, tokenIndex196 := position, tokenIndex
					if !_rules[ruleMulOp]() {
						goto l197
					}
					goto l196
				l197:
					position, tokenIndex = position196, tokenIndex196
					if !_rules[ruleDivOp]() {
						goto l198
					}
					goto l196
				l198:
					position, tokenIndex = position196, tokenIndex196
					if !_rules[ruleModOp]() {
						goto l194
					}
				}
			l196:
				add(ruleMultGroupOp, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 38 MulOp <- <'*'> */
		func() bool {
			position199, tokenIndex199 := position, tokenIndex
			{
				position200 := position
				if buffer[position] != rune('*') {
					goto l199
				}
				position++
				add(ruleMulOp, position200)
			}
			return true
		l199:
			position, tokenIndex = position199, tokenIndex199
			return false
		},
		/* 39 DivOp <- <'/'> */
		func() bool {
			position201, tokenIndex201 := position, tokenIndex
			{
				position202 := position
				if buffer[position] != rune('/') {
					goto l201
				}
				position++
				add(ruleDivOp, position202)
			}
			return true
		l201:
			position, tokenIndex = position201, tokenIndex201
			return false
		},
		/* 40 ModOp <- <'%'> */
		func() bool {
			position203, tokenIndex203 := position, tokenIndex
			{
				position204 := position
				if buffer[position] != rune('%') {
					goto l203
				}
				position++
				add(ruleModOp, position204)
			}
			return true
		l203:
			position, tokenIndex = position203, tokenIndex203
			return false
		},
		/* 41 UnaryOp <- <(PositiveOp / NegativeOp / NotOp)> */
		func() bool {
			position205, tokenIndex205 := position, tokenIndex
			{
				position206 := position
				{
					position207, tokenIndex207 := position, tokenIndex
					if !_rules[rulePositiveOp]() {
						goto l208
					}
					goto l207
				l208:
					position, tokenIndex = position207, tokenIndex207
					if !_rules[ruleNegativeOp]() {
						goto l209
					}
					goto l207
				l209:
					position, tokenIndex = position207, tokenIndex207
					if !_rules[ruleNotOp]() {
						goto l205
					}
				}
			l207:
				add(ruleUnaryOp, position206)
			}
			return true
		l205:
			position, tokenIndex = position205, tokenIndex205
			return false
		},
		/* 42 PositiveOp <- <'+'> */
		func() bool {
			position210, tokenIndex210 := position, tokenIndex
			{
				position211 := position
				if buffer[position] != rune('+') {
					goto l210
				}
				position++
				add(rulePositiveOp, position211)
			}
			return true
		l210:
			position, tokenIndex = position210, tokenIndex210
			return false
		},
		/* 43 NegativeOp <- <('-' !'#')> */
		func() bool {
			position212, tokenIndex212 := position, tokenIndex
			{
				position213 := position
				if buffer[position] != rune('-') {
					goto l212
				}
				position++
				{
					position214, tokenIndex214 := position, tokenIndex
					if buffer[position] != rune('#') {
						goto l214
					}
					position++
					goto l212
				l214:
					position, tokenIndex = position214, tokenIndex214
				}
				add(ruleNegativeOp, position213)
			}
			return true
		l212:
			position, tokenIndex = position212, tokenIndex212
			return false
		},
		/* 44 NotOp <- <'!'> */
		func() bool {
			position215, tokenIndex215 := position, tokenIndex
			{
				position216 := position
				if buffer[position] != rune('!') {
					goto l215
				}
				position++
				add(ruleNotOp, position216)
			}
			return true
		l215:
			position, tokenIndex = position215, tokenIndex215
			return false
		},
		/* 45 ReservedWords <- <((('l' / 'L') ('e' / 'E') ('t' / 'T')) / (('s' / 'S') ('t' / 'T') ('r' / 'R') ('i' / 'I') ('c' / 'C') ('t' / 'T')) / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '1' '6') / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '5' '8') / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '6' '4') / (('t' / 'T') ('r' / 'R') ('u' / 'U') ('e' / 'E')) / (('f' / 'F') ('a' / 'A') ('l' / 'L') ('s' / 'S') ('e' / 'E')) / (('i' / 'I') ('f' / 'F')) / (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) / (('e' / 'E') ('l' / 'L') ('s' / 'S') ('e' / 'E')) / (('m' / 'M') ('a' / 'A') ('t' / 'T') ('c' / 'C') ('h' / 'H')) / (('c' / 'C') ('a' / 'A') ('s' / 'S') ('e' / 'E')) / (('f' / 'F') ('u' / 'U') ('n' / 'N') ('c' / 'C')))> */
		func() bool {
			position217, tokenIndex217 := position, tokenIndex
			{
				position218 := position
				{
					position219, tokenIndex219 := position, tokenIndex
					{
						position221, tokenIndex221 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l222
						}
						position++
						goto l221
					l222:
						position, tokenIndex = position221, tokenIndex221
						if buffer[position] != rune('L') {
							goto l220
						}
						position++
					}
				l221:
					{
						position223, tokenIndex223 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l224
						}
						position++
						goto l223
					l224:
						position, tokenIndex = position223, tokenIndex223
						if buffer[position] != rune('E') {
							goto l220
						}
						position++
					}
				l223:
					{
						position225, tokenIndex225 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l226
						}
						position++
						goto l225
					l226:
						position, tokenIndex = position225, tokenIndex225
						if buffer[position] != rune('T') {
							goto l220
						}
						position++
					}
				l225:
					goto l219
				l220:
					position, tokenIndex = position219, tokenIndex219
					{
						position228, tokenIndex228 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l229
						}
						position++
						goto l228
					l229:
						position, tokenIndex = position228, tokenIndex228
						if buffer[position] != rune('S') {
							goto l227
						}
						position++
					}
				l228:
					{
						position230, tokenIndex230 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l231
						}
						position++
						goto l230
					l231:
						position, tokenIndex = position230, tokenIndex230
						if buffer[position] != rune('T') {
							goto l227
						}
						position++
					}
				l230:
					{
						position232, tokenIndex232 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l233
						}
						position++
						goto l232
					l233:
						position, tokenIndex = position232, tokenIndex232
						if buffer[position] != rune('R') {
							goto l227
						}
						position++
					}
				l232:
					{
						position234, tokenIndex234 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l235
						}
						position++
						goto l234
					l235:
						position, tokenIndex = position234, tokenIndex234
						if buffer[position] != rune('I') {
							goto l227
						}
						position++
					}
				l234:
					{
						position236, tokenIndex236 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l237
						}
						position++
						goto l236
					l237:
						position, tokenIndex = position236, tokenIndex236
						if buffer[position] != rune('C') {
							goto l227
						}
						position++
					}
				l236:
					{
						position238, tokenIndex238 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l239
						}
						position++
						goto l238
					l239:
						position, tokenIndex = position238, tokenIndex238
						if buffer[position] != rune('T') {
							goto l227
						}
						position++
					}
				l238:
					goto l219
				l227:
					position, tokenIndex = position219, tokenIndex219
					{
						position241, tokenIndex241 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l242
						}
						position++
						goto l241
					l242:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('B') {
							goto l240
						}
						position++
					}
				l241:
					{
						position243, tokenIndex243 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l244
						}
						position++
						goto l243
					l244:
						position, tokenIndex = position243, tokenIndex243
						if buffer[position] != rune('A') {
							goto l240
						}
						position++
					}
				l243:
					{
						position245, tokenIndex245 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l246
						}
						position++
						goto l245
					l246:
						position, tokenIndex = position245, tokenIndex245
						if buffer[position] != rune('S') {
							goto l240
						}
						position++
					}
				l245:
					{
						position247, tokenIndex247 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l248
						}
						position++
						goto l247
					l248:
						position, tokenIndex = position247, tokenIndex247
						if buffer[position] != rune('E') {
							goto l240
						}
						position++
					}
				l247:
					if buffer[position] != rune('1') {
						goto l240
					}
					position++
					if buffer[position] != rune('6') {
						goto l240
					}
					position++
					goto l219
				l240:
					position, tokenIndex = position219, tokenIndex219
					{
						position250, tokenIndex250 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l251
						}
						position++
						goto l250
					l251:
						position, tokenIndex = position250, tokenIndex250
						if buffer[position] != rune('B') {
							goto l249
						}
						position++
					}
				l250:
					{
						position252, tokenIndex252 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l253
						}
						position++
						goto l252
					l253:
						position, tokenIndex = position252, tokenIndex252
						if buffer[position] != rune('A') {
							goto l249
						}
						position++
					}
				l252:
					{
						position254, tokenIndex254 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l255
						}
						position++
						goto l254
					l255:
						position, tokenIndex = position254, tokenIndex254
						if buffer[position] != rune('S') {
							goto l249
						}
						position++
					}
				l254:
					{
						position256, tokenIndex256 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l257
						}
						position++
						goto l256
					l257:
						position, tokenIndex = position256, tokenIndex256
						if buffer[position] != rune('E') {
							goto l249
						}
						position++
					}
				l256:
					if buffer[position] != rune('5') {
						goto l249
					}
					position++
					if buffer[position] != rune('8') {
						goto l249
					}
					position++
					goto l219
				l249:
					position, tokenIndex = position219, tokenIndex219
					{
						position259, tokenIndex259 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l260
						}
						position++
						goto l259
					l260:
						position, tokenIndex = position259, tokenIndex259
						if buffer[position] != rune('B') {
							goto l258
						}
						position++
					}
				l259:
					{
						position261, tokenIndex261 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l262
						}
						position++
						goto l261
					l262:
						position, tokenIndex = position261, tokenIndex261
						if buffer[position] != rune('A') {
							goto l258
						}
						position++
					}
				l261:
					{
						position263, tokenIndex263 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l264
						}
						position++
						goto l263
					l264:
						position, tokenIndex = position263, tokenIndex263
						if buffer[position] != rune('S') {
							goto l258
						}
						position++
					}
				l263:
					{
						position265, tokenIndex265 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l266
						}
						position++
						goto l265
					l266:
						position, tokenIndex = position265, tokenIndex265
						if buffer[position] != rune('E') {
							goto l258
						}
						position++
					}
				l265:
					if buffer[position] != rune('6') {
						goto l258
					}
					position++
					if buffer[position] != rune('4') {
						goto l258
					}
					position++
					goto l219
				l258:
					position, tokenIndex = position219, tokenIndex219
					{
						position268, tokenIndex268 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l269
						}
						position++
						goto l268
					l269:
						position, tokenIndex = position268, tokenIndex268
						if buffer[position] != rune('T') {
							goto l267
						}
						position++
					}
				l268:
					{
						position270, tokenIndex270 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l271
						}
						position++
						goto l270
					l271:
						position, tokenIndex = position270, tokenIndex270
						if buffer[position] != rune('R') {
							goto l267
						}
						position++
					}
				l270:
					{
						position272, tokenIndex272 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l273
						}
						position++
						goto l272
					l273:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('U') {
							goto l267
						}
						position++
					}
				l272:
					{
						position274, tokenIndex274 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l275
						}
						position++
						goto l274
					l275:
						position, tokenIndex = position274, tokenIndex274
						if buffer[position] != rune('E') {
							goto l267
						}
						position++
					}
				l274:
					goto l219
				l267:
					position, tokenIndex = position219, tokenIndex219
					{
						position277, tokenIndex277 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l278
						}
						position++
						goto l277
					l278:
						position, tokenIndex = position277, tokenIndex277
						if buffer[position] != rune('F') {
							goto l276
						}
						position++
					}
				l277:
					{
						position279, tokenIndex279 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l280
						}
						position++
						goto l279
					l280:
						position, tokenIndex = position279, tokenIndex279
						if buffer[position] != rune('A') {
							goto l276
						}
						position++
					}
				l279:
					{
						position281, tokenIndex281 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l282
						}
						position++
						goto l281
					l282:
						position, tokenIndex = position281, tokenIndex281
						if buffer[position] != rune('L') {
							goto l276
						}
						position++
					}
				l281:
					{
						position283, tokenIndex283 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l284
						}
						position++
						goto l283
					l284:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('S') {
							goto l276
						}
						position++
					}
				l283:
					{
						position285, tokenIndex285 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l286
						}
						position++
						goto l285
					l286:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('E') {
							goto l276
						}
						position++
					}
				l285:
					goto l219
				l276:
					position, tokenIndex = position219, tokenIndex219
					{
						position288, tokenIndex288 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l289
						}
						position++
						goto l288
					l289:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('I') {
							goto l287
						}
						position++
					}
				l288:
					{
						position290, tokenIndex290 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l291
						}
						position++
						goto l290
					l291:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('F') {
							goto l287
						}
						position++
					}
				l290:
					goto l219
				l287:
					position, tokenIndex = position219, tokenIndex219
					{
						position293, tokenIndex293 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l294
						}
						position++
						goto l293
					l294:
						position, tokenIndex = position293, tokenIndex293
						if buffer[position] != rune('T') {
							goto l292
						}
						position++
					}
				l293:
					{
						position295, tokenIndex295 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l296
						}
						position++
						goto l295
					l296:
						position, tokenIndex = position295, tokenIndex295
						if buffer[position] != rune('H') {
							goto l292
						}
						position++
					}
				l295:
					{
						position297, tokenIndex297 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l298
						}
						position++
						goto l297
					l298:
						position, tokenIndex = position297, tokenIndex297
						if buffer[position] != rune('E') {
							goto l292
						}
						position++
					}
				l297:
					{
						position299, tokenIndex299 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l300
						}
						position++
						goto l299
					l300:
						position, tokenIndex = position299, tokenIndex299
						if buffer[position] != rune('N') {
							goto l292
						}
						position++
					}
				l299:
					goto l219
				l292:
					position, tokenIndex = position219, tokenIndex219
					{
						position302, tokenIndex302 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l303
						}
						position++
						goto l302
					l303:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('E') {
							goto l301
						}
						position++
					}
				l302:
					{
						position304, tokenIndex304 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l305
						}
						position++
						goto l304
					l305:
						position, tokenIndex = position304, tokenIndex304
						if buffer[position] != rune('L') {
							goto l301
						}
						position++
					}
				l304:
					{
						position306, tokenIndex306 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l307
						}
						position++
						goto l306
					l307:
						position, tokenIndex = position306, tokenIndex306
						if buffer[position] != rune('S') {
							goto l301
						}
						position++
					}
				l306:
					{
						position308, tokenIndex308 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l309
						}
						position++
						goto l308
					l309:
						position, tokenIndex = position308, tokenIndex308
						if buffer[position] != rune('E') {
							goto l301
						}
						position++
					}
				l308:
					goto l219
				l301:
					position, tokenIndex = position219, tokenIndex219
					{
						position311, tokenIndex311 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l312
						}
						position++
						goto l311
					l312:
						position, tokenIndex = position311, tokenIndex311
						if buffer[position] != rune('M') {
							goto l310
						}
						position++
					}
				l311:
					{
						position313, tokenIndex313 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l314
						}
						position++
						goto l313
					l314:
						position, tokenIndex = position313, tokenIndex313
						if buffer[position] != rune('A') {
							goto l310
						}
						position++
					}
				l313:
					{
						position315, tokenIndex315 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l316
						}
						position++
						goto l315
					l316:
						position, tokenIndex = position315, tokenIndex315
						if buffer[position] != rune('T') {
							goto l310
						}
						position++
					}
				l315:
					{
						position317, tokenIndex317 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l318
						}
						position++
						goto l317
					l318:
						position, tokenIndex = position317, tokenIndex317
						if buffer[position] != rune('C') {
							goto l310
						}
						position++
					}
				l317:
					{
						position319, tokenIndex319 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l320
						}
						position++
						goto l319
					l320:
						position, tokenIndex = position319, tokenIndex319
						if buffer[position] != rune('H') {
							goto l310
						}
						position++
					}
				l319:
					goto l219
				l310:
					position, tokenIndex = position219, tokenIndex219
					{
						position322, tokenIndex322 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l323
						}
						position++
						goto l322
					l323:
						position, tokenIndex = position322, tokenIndex322
						if buffer[position] != rune('C') {
							goto l321
						}
						position++
					}
				l322:
					{
						position324, tokenIndex324 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l325
						}
						position++
						goto l324
					l325:
						position, tokenIndex = position324, tokenIndex324
						if buffer[position] != rune('A') {
							goto l321
						}
						position++
					}
				l324:
					{
						position326, tokenIndex326 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l327
						}
						position++
						goto l326
					l327:
						position, tokenIndex = position326, tokenIndex326
						if buffer[position] != rune('S') {
							goto l321
						}
						position++
					}
				l326:
					{
						position328, tokenIndex328 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l329
						}
						position++
						goto l328
					l329:
						position, tokenIndex = position328, tokenIndex328
						if buffer[position] != rune('E') {
							goto l321
						}
						position++
					}
				l328:
					goto l219
				l321:
					position, tokenIndex = position219, tokenIndex219
					{
						position330, tokenIndex330 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l331
						}
						position++
						goto l330
					l331:
						position, tokenIndex = position330, tokenIndex330
						if buffer[position] != rune('F') {
							goto l217
						}
						position++
					}
				l330:
					{
						position332, tokenIndex332 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l333
						}
						position++
						goto l332
					l333:
						position, tokenIndex = position332, tokenIndex332
						if buffer[position] != rune('U') {
							goto l217
						}
						position++
					}
				l332:
					{
						position334, tokenIndex334 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l335
						}
						position++
						goto l334
					l335:
						position, tokenIndex = position334, tokenIndex334
						if buffer[position] != rune('N') {
							goto l217
						}
						position++
					}
				l334:
					{
						position336, tokenIndex336 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l337
						}
						position++
						goto l336
					l337:
						position, tokenIndex = position336, tokenIndex336
						if buffer[position] != rune('C') {
							goto l217
						}
						position++
					}
				l336:
				}
			l219:
				add(ruleReservedWords, position218)
			}
			return true
		l217:
			position, tokenIndex = position217, tokenIndex217
			return false
		},
		/* 46 ConstAtom <- <(IntegerAtom / StringAtom / ByteVectorAtom / BooleanAtom / ListAtom)> */
		func() bool {
			position338, tokenIndex338 := position, tokenIndex
			{
				position339 := position
				{
					position340, tokenIndex340 := position, tokenIndex
					if !_rules[ruleIntegerAtom]() {
						goto l341
					}
					goto l340
				l341:
					position, tokenIndex = position340, tokenIndex340
					if !_rules[ruleStringAtom]() {
						goto l342
					}
					goto l340
				l342:
					position, tokenIndex = position340, tokenIndex340
					if !_rules[ruleByteVectorAtom]() {
						goto l343
					}
					goto l340
				l343:
					position, tokenIndex = position340, tokenIndex340
					if !_rules[ruleBooleanAtom]() {
						goto l344
					}
					goto l340
				l344:
					position, tokenIndex = position340, tokenIndex340
					if !_rules[ruleListAtom]() {
						goto l338
					}
				}
			l340:
				add(ruleConstAtom, position339)
			}
			return true
		l338:
			position, tokenIndex = position338, tokenIndex338
			return false
		},
		/* 47 IdentifierAtom <- <((!ReservedWords ([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])*) / (ReservedWords ([A-Z] / [a-z] / [0-9])+))> */
		func() bool {
			position345, tokenIndex345 := position, tokenIndex
			{
				position346 := position
				{
					position347, tokenIndex347 := position, tokenIndex
					{
						position349, tokenIndex349 := position, tokenIndex
						if !_rules[ruleReservedWords]() {
							goto l349
						}
						goto l348
					l349:
						position, tokenIndex = position349, tokenIndex349
					}
					{
						position350, tokenIndex350 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l351
						}
						position++
						goto l350
					l351:
						position, tokenIndex = position350, tokenIndex350
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l348
						}
						position++
					}
				l350:
				l352:
					{
						position353, tokenIndex353 := position, tokenIndex
						{
							position354, tokenIndex354 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l355
							}
							position++
							goto l354
						l355:
							position, tokenIndex = position354, tokenIndex354
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l356
							}
							position++
							goto l354
						l356:
							position, tokenIndex = position354, tokenIndex354
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l353
							}
							position++
						}
					l354:
						goto l352
					l353:
						position, tokenIndex = position353, tokenIndex353
					}
					goto l347
				l348:
					position, tokenIndex = position347, tokenIndex347
					if !_rules[ruleReservedWords]() {
						goto l345
					}
					{
						position359, tokenIndex359 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l360
						}
						position++
						goto l359
					l360:
						position, tokenIndex = position359, tokenIndex359
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l361
						}
						position++
						goto l359
					l361:
						position, tokenIndex = position359, tokenIndex359
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l345
						}
						position++
					}
				l359:
				l357:
					{
						position358, tokenIndex358 := position, tokenIndex
						{
							position362, tokenIndex362 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l363
							}
							position++
							goto l362
						l363:
							position, tokenIndex = position362, tokenIndex362
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l364
							}
							position++
							goto l362
						l364:
							position, tokenIndex = position362, tokenIndex362
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l358
							}
							position++
						}
					l362:
						goto l357
					l358:
						position, tokenIndex = position358, tokenIndex358
					}
				}
			l347:
				add(ruleIdentifierAtom, position346)
			}
			return true
		l345:
			position, tokenIndex = position345, tokenIndex345
			return false
		},
		/* 48 GenericTypesAtom <- <(OneGenericTypeAtom ((_ '|' _ GenericTypesAtom) / OneGenericTypeAtom)?)> */
		func() bool {
			position365, tokenIndex365 := position, tokenIndex
			{
				position366 := position
				if !_rules[ruleOneGenericTypeAtom]() {
					goto l365
				}
				{
					position367, tokenIndex367 := position, tokenIndex
					{
						position369, tokenIndex369 := position, tokenIndex
						if !_rules[rule_]() {
							goto l370
						}
						if buffer[position] != rune('|') {
							goto l370
						}
						position++
						if !_rules[rule_]() {
							goto l370
						}
						if !_rules[ruleGenericTypesAtom]() {
							goto l370
						}
						goto l369
					l370:
						position, tokenIndex = position369, tokenIndex369
						if !_rules[ruleOneGenericTypeAtom]() {
							goto l367
						}
					}
				l369:
					goto l368
				l367:
					position, tokenIndex = position367, tokenIndex367
				}
			l368:
				add(ruleGenericTypesAtom, position366)
			}
			return true
		l365:
			position, tokenIndex = position365, tokenIndex365
			return false
		},
		/* 49 OneGenericTypeAtom <- <(([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])* (_ '[' _ OneTypeAtom _ ']' _)?)> */
		func() bool {
			position371, tokenIndex371 := position, tokenIndex
			{
				position372 := position
				{
					position373, tokenIndex373 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l374
					}
					position++
					goto l373
				l374:
					position, tokenIndex = position373, tokenIndex373
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l371
					}
					position++
				}
			l373:
			l375:
				{
					position376, tokenIndex376 := position, tokenIndex
					{
						position377, tokenIndex377 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l378
						}
						position++
						goto l377
					l378:
						position, tokenIndex = position377, tokenIndex377
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l379
						}
						position++
						goto l377
					l379:
						position, tokenIndex = position377, tokenIndex377
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l376
						}
						position++
					}
				l377:
					goto l375
				l376:
					position, tokenIndex = position376, tokenIndex376
				}
				{
					position380, tokenIndex380 := position, tokenIndex
					if !_rules[rule_]() {
						goto l380
					}
					if buffer[position] != rune('[') {
						goto l380
					}
					position++
					if !_rules[rule_]() {
						goto l380
					}
					if !_rules[ruleOneTypeAtom]() {
						goto l380
					}
					if !_rules[rule_]() {
						goto l380
					}
					if buffer[position] != rune(']') {
						goto l380
					}
					position++
					if !_rules[rule_]() {
						goto l380
					}
					goto l381
				l380:
					position, tokenIndex = position380, tokenIndex380
				}
			l381:
				add(ruleOneGenericTypeAtom, position372)
			}
			return true
		l371:
			position, tokenIndex = position371, tokenIndex371
			return false
		},
		/* 50 TypesAtom <- <(OneTypeAtom ((_ '|' _ TypesAtom) / OneTypeAtom)?)> */
		func() bool {
			position382, tokenIndex382 := position, tokenIndex
			{
				position383 := position
				if !_rules[ruleOneTypeAtom]() {
					goto l382
				}
				{
					position384, tokenIndex384 := position, tokenIndex
					{
						position386, tokenIndex386 := position, tokenIndex
						if !_rules[rule_]() {
							goto l387
						}
						if buffer[position] != rune('|') {
							goto l387
						}
						position++
						if !_rules[rule_]() {
							goto l387
						}
						if !_rules[ruleTypesAtom]() {
							goto l387
						}
						goto l386
					l387:
						position, tokenIndex = position386, tokenIndex386
						if !_rules[ruleOneTypeAtom]() {
							goto l384
						}
					}
				l386:
					goto l385
				l384:
					position, tokenIndex = position384, tokenIndex384
				}
			l385:
				add(ruleTypesAtom, position383)
			}
			return true
		l382:
			position, tokenIndex = position382, tokenIndex382
			return false
		},
		/* 51 OneTypeAtom <- <(([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])*)> */
		func() bool {
			position388, tokenIndex388 := position, tokenIndex
			{
				position389 := position
				{
					position390, tokenIndex390 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l391
					}
					position++
					goto l390
				l391:
					position, tokenIndex = position390, tokenIndex390
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l388
					}
					position++
				}
			l390:
			l392:
				{
					position393, tokenIndex393 := position, tokenIndex
					{
						position394, tokenIndex394 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l395
						}
						position++
						goto l394
					l395:
						position, tokenIndex = position394, tokenIndex394
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l396
						}
						position++
						goto l394
					l396:
						position, tokenIndex = position394, tokenIndex394
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l393
						}
						position++
					}
				l394:
					goto l392
				l393:
					position, tokenIndex = position393, tokenIndex393
				}
				add(ruleOneTypeAtom, position389)
			}
			return true
		l388:
			position, tokenIndex = position388, tokenIndex388
			return false
		},
		/* 52 Base16 <- <(('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '1' '6' '\'' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')* '\'')> */
		func() bool {
			position397, tokenIndex397 := position, tokenIndex
			{
				position398 := position
				{
					position399, tokenIndex399 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l400
					}
					position++
					goto l399
				l400:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('B') {
						goto l397
					}
					position++
				}
			l399:
				{
					position401, tokenIndex401 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l402
					}
					position++
					goto l401
				l402:
					position, tokenIndex = position401, tokenIndex401
					if buffer[position] != rune('A') {
						goto l397
					}
					position++
				}
			l401:
				{
					position403, tokenIndex403 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l404
					}
					position++
					goto l403
				l404:
					position, tokenIndex = position403, tokenIndex403
					if buffer[position] != rune('S') {
						goto l397
					}
					position++
				}
			l403:
				{
					position405, tokenIndex405 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l406
					}
					position++
					goto l405
				l406:
					position, tokenIndex = position405, tokenIndex405
					if buffer[position] != rune('E') {
						goto l397
					}
					position++
				}
			l405:
				if buffer[position] != rune('1') {
					goto l397
				}
				position++
				if buffer[position] != rune('6') {
					goto l397
				}
				position++
				if buffer[position] != rune('\'') {
					goto l397
				}
				position++
			l407:
				{
					position408, tokenIndex408 := position, tokenIndex
					{
						position409, tokenIndex409 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l410
						}
						position++
						goto l409
					l410:
						position, tokenIndex = position409, tokenIndex409
						if buffer[position] != rune('A') {
							goto l411
						}
						position++
						goto l409
					l411:
						position, tokenIndex = position409, tokenIndex409
						if buffer[position] != rune('B') {
							goto l412
						}
						position++
						goto l409
					l412:
						position, tokenIndex = position409, tokenIndex409
						if buffer[position] != rune('C') {
							goto l413
						}
						position++
						goto l409
					l413:
						position, tokenIndex = position409, tokenIndex409
						if buffer[position] != rune('D') {
							goto l414
						}
						position++
						goto l409
					l414:
						position, tokenIndex = position409, tokenIndex409
						if buffer[position] != rune('E') {
							goto l415
						}
						position++
						goto l409
					l415:
						position, tokenIndex = position409, tokenIndex409
						if buffer[position] != rune('F') {
							goto l416
						}
						position++
						goto l409
					l416:
						position, tokenIndex = position409, tokenIndex409
						if buffer[position] != rune('a') {
							goto l417
						}
						position++
						goto l409
					l417:
						position, tokenIndex = position409, tokenIndex409
						if buffer[position] != rune('b') {
							goto l418
						}
						position++
						goto l409
					l418:
						position, tokenIndex = position409, tokenIndex409
						if buffer[position] != rune('c') {
							goto l419
						}
						position++
						goto l409
					l419:
						position, tokenIndex = position409, tokenIndex409
						if buffer[position] != rune('d') {
							goto l420
						}
						position++
						goto l409
					l420:
						position, tokenIndex = position409, tokenIndex409
						if buffer[position] != rune('e') {
							goto l421
						}
						position++
						goto l409
					l421:
						position, tokenIndex = position409, tokenIndex409
						if buffer[position] != rune('f') {
							goto l408
						}
						position++
					}
				l409:
					goto l407
				l408:
					position, tokenIndex = position408, tokenIndex408
				}
				if buffer[position] != rune('\'') {
					goto l397
				}
				position++
				add(ruleBase16, position398)
			}
			return true
		l397:
			position, tokenIndex = position397, tokenIndex397
			return false
		},
		/* 53 Base58 <- <(('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '5' '8' '\'' ('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'J' / 'K' / 'L' / 'M' / 'N' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z')* '\'')> */
		func() bool {
			position422, tokenIndex422 := position, tokenIndex
			{
				position423 := position
				{
					position424, tokenIndex424 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l425
					}
					position++
					goto l424
				l425:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('B') {
						goto l422
					}
					position++
				}
			l424:
				{
					position426, tokenIndex426 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l427
					}
					position++
					goto l426
				l427:
					position, tokenIndex = position426, tokenIndex426
					if buffer[position] != rune('A') {
						goto l422
					}
					position++
				}
			l426:
				{
					position428, tokenIndex428 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l429
					}
					position++
					goto l428
				l429:
					position, tokenIndex = position428, tokenIndex428
					if buffer[position] != rune('S') {
						goto l422
					}
					position++
				}
			l428:
				{
					position430, tokenIndex430 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l431
					}
					position++
					goto l430
				l431:
					position, tokenIndex = position430, tokenIndex430
					if buffer[position] != rune('E') {
						goto l422
					}
					position++
				}
			l430:
				if buffer[position] != rune('5') {
					goto l422
				}
				position++
				if buffer[position] != rune('8') {
					goto l422
				}
				position++
				if buffer[position] != rune('\'') {
					goto l422
				}
				position++
			l432:
				{
					position433, tokenIndex433 := position, tokenIndex
					{
						position434, tokenIndex434 := position, tokenIndex
						if buffer[position] != rune('1') {
							goto l435
						}
						position++
						goto l434
					l435:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('2') {
							goto l436
						}
						position++
						goto l434
					l436:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('3') {
							goto l437
						}
						position++
						goto l434
					l437:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('4') {
							goto l438
						}
						position++
						goto l434
					l438:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('5') {
							goto l439
						}
						position++
						goto l434
					l439:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('6') {
							goto l440
						}
						position++
						goto l434
					l440:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('7') {
							goto l441
						}
						position++
						goto l434
					l441:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('8') {
							goto l442
						}
						position++
						goto l434
					l442:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('9') {
							goto l443
						}
						position++
						goto l434
					l443:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('A') {
							goto l444
						}
						position++
						goto l434
					l444:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('B') {
							goto l445
						}
						position++
						goto l434
					l445:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('C') {
							goto l446
						}
						position++
						goto l434
					l446:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('D') {
							goto l447
						}
						position++
						goto l434
					l447:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('E') {
							goto l448
						}
						position++
						goto l434
					l448:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('F') {
							goto l449
						}
						position++
						goto l434
					l449:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('G') {
							goto l450
						}
						position++
						goto l434
					l450:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('H') {
							goto l451
						}
						position++
						goto l434
					l451:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('J') {
							goto l452
						}
						position++
						goto l434
					l452:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('K') {
							goto l453
						}
						position++
						goto l434
					l453:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('L') {
							goto l454
						}
						position++
						goto l434
					l454:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('M') {
							goto l455
						}
						position++
						goto l434
					l455:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('N') {
							goto l456
						}
						position++
						goto l434
					l456:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('P') {
							goto l457
						}
						position++
						goto l434
					l457:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('Q') {
							goto l458
						}
						position++
						goto l434
					l458:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('R') {
							goto l459
						}
						position++
						goto l434
					l459:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('S') {
							goto l460
						}
						position++
						goto l434
					l460:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('T') {
							goto l461
						}
						position++
						goto l434
					l461:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('U') {
							goto l462
						}
						position++
						goto l434
					l462:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('V') {
							goto l463
						}
						position++
						goto l434
					l463:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('W') {
							goto l464
						}
						position++
						goto l434
					l464:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('X') {
							goto l465
						}
						position++
						goto l434
					l465:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('Y') {
							goto l466
						}
						position++
						goto l434
					l466:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('Z') {
							goto l467
						}
						position++
						goto l434
					l467:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('a') {
							goto l468
						}
						position++
						goto l434
					l468:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('b') {
							goto l469
						}
						position++
						goto l434
					l469:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('c') {
							goto l470
						}
						position++
						goto l434
					l470:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('d') {
							goto l471
						}
						position++
						goto l434
					l471:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('e') {
							goto l472
						}
						position++
						goto l434
					l472:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('f') {
							goto l473
						}
						position++
						goto l434
					l473:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('g') {
							goto l474
						}
						position++
						goto l434
					l474:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('h') {
							goto l475
						}
						position++
						goto l434
					l475:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('i') {
							goto l476
						}
						position++
						goto l434
					l476:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('j') {
							goto l477
						}
						position++
						goto l434
					l477:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('k') {
							goto l478
						}
						position++
						goto l434
					l478:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('m') {
							goto l479
						}
						position++
						goto l434
					l479:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('n') {
							goto l480
						}
						position++
						goto l434
					l480:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('o') {
							goto l481
						}
						position++
						goto l434
					l481:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('p') {
							goto l482
						}
						position++
						goto l434
					l482:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('q') {
							goto l483
						}
						position++
						goto l434
					l483:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('r') {
							goto l484
						}
						position++
						goto l434
					l484:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('s') {
							goto l485
						}
						position++
						goto l434
					l485:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('t') {
							goto l486
						}
						position++
						goto l434
					l486:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('u') {
							goto l487
						}
						position++
						goto l434
					l487:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('v') {
							goto l488
						}
						position++
						goto l434
					l488:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('w') {
							goto l489
						}
						position++
						goto l434
					l489:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('x') {
							goto l490
						}
						position++
						goto l434
					l490:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('y') {
							goto l491
						}
						position++
						goto l434
					l491:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('z') {
							goto l433
						}
						position++
					}
				l434:
					goto l432
				l433:
					position, tokenIndex = position433, tokenIndex433
				}
				if buffer[position] != rune('\'') {
					goto l422
				}
				position++
				add(ruleBase58, position423)
			}
			return true
		l422:
			position, tokenIndex = position422, tokenIndex422
			return false
		},
		/* 54 Base64 <- <(('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '6' '4' '\'' ('A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'I' / 'J' / 'K' / 'L' / 'M' / 'N' / 'O' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '0' / '1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / '+' / '/' / '=')* '\'')> */
		func() bool {
			position492, tokenIndex492 := position, tokenIndex
			{
				position493 := position
				{
					position494, tokenIndex494 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l495
					}
					position++
					goto l494
				l495:
					position, tokenIndex = position494, tokenIndex494
					if buffer[position] != rune('B') {
						goto l492
					}
					position++
				}
			l494:
				{
					position496, tokenIndex496 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l497
					}
					position++
					goto l496
				l497:
					position, tokenIndex = position496, tokenIndex496
					if buffer[position] != rune('A') {
						goto l492
					}
					position++
				}
			l496:
				{
					position498, tokenIndex498 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l499
					}
					position++
					goto l498
				l499:
					position, tokenIndex = position498, tokenIndex498
					if buffer[position] != rune('S') {
						goto l492
					}
					position++
				}
			l498:
				{
					position500, tokenIndex500 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l501
					}
					position++
					goto l500
				l501:
					position, tokenIndex = position500, tokenIndex500
					if buffer[position] != rune('E') {
						goto l492
					}
					position++
				}
			l500:
				if buffer[position] != rune('6') {
					goto l492
				}
				position++
				if buffer[position] != rune('4') {
					goto l492
				}
				position++
				if buffer[position] != rune('\'') {
					goto l492
				}
				position++
			l502:
				{
					position503, tokenIndex503 := position, tokenIndex
					{
						position504, tokenIndex504 := position, tokenIndex
						if buffer[position] != rune('A') {
							goto l505
						}
						position++
						goto l504
					l505:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('B') {
							goto l506
						}
						position++
						goto l504
					l506:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('C') {
							goto l507
						}
						position++
						goto l504
					l507:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('D') {
							goto l508
						}
						position++
						goto l504
					l508:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('E') {
							goto l509
						}
						position++
						goto l504
					l509:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('F') {
							goto l510
						}
						position++
						goto l504
					l510:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('G') {
							goto l511
						}
						position++
						goto l504
					l511:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('H') {
							goto l512
						}
						position++
						goto l504
					l512:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('I') {
							goto l513
						}
						position++
						goto l504
					l513:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('J') {
							goto l514
						}
						position++
						goto l504
					l514:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('K') {
							goto l515
						}
						position++
						goto l504
					l515:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('L') {
							goto l516
						}
						position++
						goto l504
					l516:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('M') {
							goto l517
						}
						position++
						goto l504
					l517:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('N') {
							goto l518
						}
						position++
						goto l504
					l518:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('O') {
							goto l519
						}
						position++
						goto l504
					l519:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('P') {
							goto l520
						}
						position++
						goto l504
					l520:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('Q') {
							goto l521
						}
						position++
						goto l504
					l521:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('R') {
							goto l522
						}
						position++
						goto l504
					l522:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('S') {
							goto l523
						}
						position++
						goto l504
					l523:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('T') {
							goto l524
						}
						position++
						goto l504
					l524:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('U') {
							goto l525
						}
						position++
						goto l504
					l525:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('V') {
							goto l526
						}
						position++
						goto l504
					l526:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('W') {
							goto l527
						}
						position++
						goto l504
					l527:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('X') {
							goto l528
						}
						position++
						goto l504
					l528:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('Y') {
							goto l529
						}
						position++
						goto l504
					l529:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('Z') {
							goto l530
						}
						position++
						goto l504
					l530:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('a') {
							goto l531
						}
						position++
						goto l504
					l531:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('b') {
							goto l532
						}
						position++
						goto l504
					l532:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('c') {
							goto l533
						}
						position++
						goto l504
					l533:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('d') {
							goto l534
						}
						position++
						goto l504
					l534:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('e') {
							goto l535
						}
						position++
						goto l504
					l535:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('f') {
							goto l536
						}
						position++
						goto l504
					l536:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('g') {
							goto l537
						}
						position++
						goto l504
					l537:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('h') {
							goto l538
						}
						position++
						goto l504
					l538:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('i') {
							goto l539
						}
						position++
						goto l504
					l539:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('j') {
							goto l540
						}
						position++
						goto l504
					l540:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('k') {
							goto l541
						}
						position++
						goto l504
					l541:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('l') {
							goto l542
						}
						position++
						goto l504
					l542:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('m') {
							goto l543
						}
						position++
						goto l504
					l543:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('n') {
							goto l544
						}
						position++
						goto l504
					l544:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('o') {
							goto l545
						}
						position++
						goto l504
					l545:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('p') {
							goto l546
						}
						position++
						goto l504
					l546:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('q') {
							goto l547
						}
						position++
						goto l504
					l547:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('r') {
							goto l548
						}
						position++
						goto l504
					l548:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('s') {
							goto l549
						}
						position++
						goto l504
					l549:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('t') {
							goto l550
						}
						position++
						goto l504
					l550:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('u') {
							goto l551
						}
						position++
						goto l504
					l551:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('v') {
							goto l552
						}
						position++
						goto l504
					l552:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('w') {
							goto l553
						}
						position++
						goto l504
					l553:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('x') {
							goto l554
						}
						position++
						goto l504
					l554:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('y') {
							goto l555
						}
						position++
						goto l504
					l555:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('z') {
							goto l556
						}
						position++
						goto l504
					l556:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('0') {
							goto l557
						}
						position++
						goto l504
					l557:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('1') {
							goto l558
						}
						position++
						goto l504
					l558:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('2') {
							goto l559
						}
						position++
						goto l504
					l559:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('3') {
							goto l560
						}
						position++
						goto l504
					l560:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('4') {
							goto l561
						}
						position++
						goto l504
					l561:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('5') {
							goto l562
						}
						position++
						goto l504
					l562:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('6') {
							goto l563
						}
						position++
						goto l504
					l563:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('7') {
							goto l564
						}
						position++
						goto l504
					l564:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('8') {
							goto l565
						}
						position++
						goto l504
					l565:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('9') {
							goto l566
						}
						position++
						goto l504
					l566:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('+') {
							goto l567
						}
						position++
						goto l504
					l567:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('/') {
							goto l568
						}
						position++
						goto l504
					l568:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('=') {
							goto l503
						}
						position++
					}
				l504:
					goto l502
				l503:
					position, tokenIndex = position503, tokenIndex503
				}
				if buffer[position] != rune('\'') {
					goto l492
				}
				position++
				add(ruleBase64, position493)
			}
			return true
		l492:
			position, tokenIndex = position492, tokenIndex492
			return false
		},
		/* 55 ByteVectorAtom <- <(Base16 / Base58 / Base64)> */
		func() bool {
			position569, tokenIndex569 := position, tokenIndex
			{
				position570 := position
				{
					position571, tokenIndex571 := position, tokenIndex
					if !_rules[ruleBase16]() {
						goto l572
					}
					goto l571
				l572:
					position, tokenIndex = position571, tokenIndex571
					if !_rules[ruleBase58]() {
						goto l573
					}
					goto l571
				l573:
					position, tokenIndex = position571, tokenIndex571
					if !_rules[ruleBase64]() {
						goto l569
					}
				}
			l571:
				add(ruleByteVectorAtom, position570)
			}
			return true
		l569:
			position, tokenIndex = position569, tokenIndex569
			return false
		},
		/* 56 BooleanAtom <- <((('t' / 'T') ('r' / 'R') ('u' / 'U') ('e' / 'E')) / (('f' / 'F') ('a' / 'A') ('l' / 'L') ('s' / 'S') ('e' / 'E')))> */
		func() bool {
			position574, tokenIndex574 := position, tokenIndex
			{
				position575 := position
				{
					position576, tokenIndex576 := position, tokenIndex
					{
						position578, tokenIndex578 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l579
						}
						position++
						goto l578
					l579:
						position, tokenIndex = position578, tokenIndex578
						if buffer[position] != rune('T') {
							goto l577
						}
						position++
					}
				l578:
					{
						position580, tokenIndex580 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l581
						}
						position++
						goto l580
					l581:
						position, tokenIndex = position580, tokenIndex580
						if buffer[position] != rune('R') {
							goto l577
						}
						position++
					}
				l580:
					{
						position582, tokenIndex582 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l583
						}
						position++
						goto l582
					l583:
						position, tokenIndex = position582, tokenIndex582
						if buffer[position] != rune('U') {
							goto l577
						}
						position++
					}
				l582:
					{
						position584, tokenIndex584 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l585
						}
						position++
						goto l584
					l585:
						position, tokenIndex = position584, tokenIndex584
						if buffer[position] != rune('E') {
							goto l577
						}
						position++
					}
				l584:
					goto l576
				l577:
					position, tokenIndex = position576, tokenIndex576
					{
						position586, tokenIndex586 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l587
						}
						position++
						goto l586
					l587:
						position, tokenIndex = position586, tokenIndex586
						if buffer[position] != rune('F') {
							goto l574
						}
						position++
					}
				l586:
					{
						position588, tokenIndex588 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l589
						}
						position++
						goto l588
					l589:
						position, tokenIndex = position588, tokenIndex588
						if buffer[position] != rune('A') {
							goto l574
						}
						position++
					}
				l588:
					{
						position590, tokenIndex590 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l591
						}
						position++
						goto l590
					l591:
						position, tokenIndex = position590, tokenIndex590
						if buffer[position] != rune('L') {
							goto l574
						}
						position++
					}
				l590:
					{
						position592, tokenIndex592 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l593
						}
						position++
						goto l592
					l593:
						position, tokenIndex = position592, tokenIndex592
						if buffer[position] != rune('S') {
							goto l574
						}
						position++
					}
				l592:
					{
						position594, tokenIndex594 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l595
						}
						position++
						goto l594
					l595:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('E') {
							goto l574
						}
						position++
					}
				l594:
				}
			l576:
				add(ruleBooleanAtom, position575)
			}
			return true
		l574:
			position, tokenIndex = position574, tokenIndex574
			return false
		},
		/* 57 StringAtom <- <('"' (UnicodeCharAtom / EscapedCharAtom / CharAtom)* '"')> */
		func() bool {
			position596, tokenIndex596 := position, tokenIndex
			{
				position597 := position
				if buffer[position] != rune('"') {
					goto l596
				}
				position++
			l598:
				{
					position599, tokenIndex599 := position, tokenIndex
					{
						position600, tokenIndex600 := position, tokenIndex
						if !_rules[ruleUnicodeCharAtom]() {
							goto l601
						}
						goto l600
					l601:
						position, tokenIndex = position600, tokenIndex600
						if !_rules[ruleEscapedCharAtom]() {
							goto l602
						}
						goto l600
					l602:
						position, tokenIndex = position600, tokenIndex600
						if !_rules[ruleCharAtom]() {
							goto l599
						}
					}
				l600:
					goto l598
				l599:
					position, tokenIndex = position599, tokenIndex599
				}
				if buffer[position] != rune('"') {
					goto l596
				}
				position++
				add(ruleStringAtom, position597)
			}
			return true
		l596:
			position, tokenIndex = position596, tokenIndex596
			return false
		},
		/* 58 UnicodeCharAtom <- <('\\' ('u' / 'U') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')? ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')? ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')?)> */
		func() bool {
			position603, tokenIndex603 := position, tokenIndex
			{
				position604 := position
				if buffer[position] != rune('\\') {
					goto l603
				}
				position++
				{
					position605, tokenIndex605 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l606
					}
					position++
					goto l605
				l606:
					position, tokenIndex = position605, tokenIndex605
					if buffer[position] != rune('U') {
						goto l603
					}
					position++
				}
			l605:
				{
					position607, tokenIndex607 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l608
					}
					position++
					goto l607
				l608:
					position, tokenIndex = position607, tokenIndex607
					if buffer[position] != rune('A') {
						goto l609
					}
					position++
					goto l607
				l609:
					position, tokenIndex = position607, tokenIndex607
					if buffer[position] != rune('B') {
						goto l610
					}
					position++
					goto l607
				l610:
					position, tokenIndex = position607, tokenIndex607
					if buffer[position] != rune('C') {
						goto l611
					}
					position++
					goto l607
				l611:
					position, tokenIndex = position607, tokenIndex607
					if buffer[position] != rune('D') {
						goto l612
					}
					position++
					goto l607
				l612:
					position, tokenIndex = position607, tokenIndex607
					if buffer[position] != rune('E') {
						goto l613
					}
					position++
					goto l607
				l613:
					position, tokenIndex = position607, tokenIndex607
					if buffer[position] != rune('F') {
						goto l614
					}
					position++
					goto l607
				l614:
					position, tokenIndex = position607, tokenIndex607
					if buffer[position] != rune('a') {
						goto l615
					}
					position++
					goto l607
				l615:
					position, tokenIndex = position607, tokenIndex607
					if buffer[position] != rune('b') {
						goto l616
					}
					position++
					goto l607
				l616:
					position, tokenIndex = position607, tokenIndex607
					if buffer[position] != rune('c') {
						goto l617
					}
					position++
					goto l607
				l617:
					position, tokenIndex = position607, tokenIndex607
					if buffer[position] != rune('d') {
						goto l618
					}
					position++
					goto l607
				l618:
					position, tokenIndex = position607, tokenIndex607
					if buffer[position] != rune('e') {
						goto l619
					}
					position++
					goto l607
				l619:
					position, tokenIndex = position607, tokenIndex607
					if buffer[position] != rune('f') {
						goto l603
					}
					position++
				}
			l607:
				{
					position620, tokenIndex620 := position, tokenIndex
					{
						position622, tokenIndex622 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l623
						}
						position++
						goto l622
					l623:
						position, tokenIndex = position622, tokenIndex622
						if buffer[position] != rune('A') {
							goto l624
						}
						position++
						goto l622
					l624:
						position, tokenIndex = position622, tokenIndex622
						if buffer[position] != rune('B') {
							goto l625
						}
						position++
						goto l622
					l625:
						position, tokenIndex = position622, tokenIndex622
						if buffer[position] != rune('C') {
							goto l626
						}
						position++
						goto l622
					l626:
						position, tokenIndex = position622, tokenIndex622
						if buffer[position] != rune('D') {
							goto l627
						}
						position++
						goto l622
					l627:
						position, tokenIndex = position622, tokenIndex622
						if buffer[position] != rune('E') {
							goto l628
						}
						position++
						goto l622
					l628:
						position, tokenIndex = position622, tokenIndex622
						if buffer[position] != rune('F') {
							goto l629
						}
						position++
						goto l622
					l629:
						position, tokenIndex = position622, tokenIndex622
						if buffer[position] != rune('a') {
							goto l630
						}
						position++
						goto l622
					l630:
						position, tokenIndex = position622, tokenIndex622
						if buffer[position] != rune('b') {
							goto l631
						}
						position++
						goto l622
					l631:
						position, tokenIndex = position622, tokenIndex622
						if buffer[position] != rune('c') {
							goto l632
						}
						position++
						goto l622
					l632:
						position, tokenIndex = position622, tokenIndex622
						if buffer[position] != rune('d') {
							goto l633
						}
						position++
						goto l622
					l633:
						position, tokenIndex = position622, tokenIndex622
						if buffer[position] != rune('e') {
							goto l634
						}
						position++
						goto l622
					l634:
						position, tokenIndex = position622, tokenIndex622
						if buffer[position] != rune('f') {
							goto l620
						}
						position++
					}
				l622:
					goto l621
				l620:
					position, tokenIndex = position620, tokenIndex620
				}
			l621:
				{
					position635, tokenIndex635 := position, tokenIndex
					{
						position637, tokenIndex637 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l638
						}
						position++
						goto l637
					l638:
						position, tokenIndex = position637, tokenIndex637
						if buffer[position] != rune('A') {
							goto l639
						}
						position++
						goto l637
					l639:
						position, tokenIndex = position637, tokenIndex637
						if buffer[position] != rune('B') {
							goto l640
						}
						position++
						goto l637
					l640:
						position, tokenIndex = position637, tokenIndex637
						if buffer[position] != rune('C') {
							goto l641
						}
						position++
						goto l637
					l641:
						position, tokenIndex = position637, tokenIndex637
						if buffer[position] != rune('D') {
							goto l642
						}
						position++
						goto l637
					l642:
						position, tokenIndex = position637, tokenIndex637
						if buffer[position] != rune('E') {
							goto l643
						}
						position++
						goto l637
					l643:
						position, tokenIndex = position637, tokenIndex637
						if buffer[position] != rune('F') {
							goto l644
						}
						position++
						goto l637
					l644:
						position, tokenIndex = position637, tokenIndex637
						if buffer[position] != rune('a') {
							goto l645
						}
						position++
						goto l637
					l645:
						position, tokenIndex = position637, tokenIndex637
						if buffer[position] != rune('b') {
							goto l646
						}
						position++
						goto l637
					l646:
						position, tokenIndex = position637, tokenIndex637
						if buffer[position] != rune('c') {
							goto l647
						}
						position++
						goto l637
					l647:
						position, tokenIndex = position637, tokenIndex637
						if buffer[position] != rune('d') {
							goto l648
						}
						position++
						goto l637
					l648:
						position, tokenIndex = position637, tokenIndex637
						if buffer[position] != rune('e') {
							goto l649
						}
						position++
						goto l637
					l649:
						position, tokenIndex = position637, tokenIndex637
						if buffer[position] != rune('f') {
							goto l635
						}
						position++
					}
				l637:
					goto l636
				l635:
					position, tokenIndex = position635, tokenIndex635
				}
			l636:
				{
					position650, tokenIndex650 := position, tokenIndex
					{
						position652, tokenIndex652 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l653
						}
						position++
						goto l652
					l653:
						position, tokenIndex = position652, tokenIndex652
						if buffer[position] != rune('A') {
							goto l654
						}
						position++
						goto l652
					l654:
						position, tokenIndex = position652, tokenIndex652
						if buffer[position] != rune('B') {
							goto l655
						}
						position++
						goto l652
					l655:
						position, tokenIndex = position652, tokenIndex652
						if buffer[position] != rune('C') {
							goto l656
						}
						position++
						goto l652
					l656:
						position, tokenIndex = position652, tokenIndex652
						if buffer[position] != rune('D') {
							goto l657
						}
						position++
						goto l652
					l657:
						position, tokenIndex = position652, tokenIndex652
						if buffer[position] != rune('E') {
							goto l658
						}
						position++
						goto l652
					l658:
						position, tokenIndex = position652, tokenIndex652
						if buffer[position] != rune('F') {
							goto l659
						}
						position++
						goto l652
					l659:
						position, tokenIndex = position652, tokenIndex652
						if buffer[position] != rune('a') {
							goto l660
						}
						position++
						goto l652
					l660:
						position, tokenIndex = position652, tokenIndex652
						if buffer[position] != rune('b') {
							goto l661
						}
						position++
						goto l652
					l661:
						position, tokenIndex = position652, tokenIndex652
						if buffer[position] != rune('c') {
							goto l662
						}
						position++
						goto l652
					l662:
						position, tokenIndex = position652, tokenIndex652
						if buffer[position] != rune('d') {
							goto l663
						}
						position++
						goto l652
					l663:
						position, tokenIndex = position652, tokenIndex652
						if buffer[position] != rune('e') {
							goto l664
						}
						position++
						goto l652
					l664:
						position, tokenIndex = position652, tokenIndex652
						if buffer[position] != rune('f') {
							goto l650
						}
						position++
					}
				l652:
					goto l651
				l650:
					position, tokenIndex = position650, tokenIndex650
				}
			l651:
				add(ruleUnicodeCharAtom, position604)
			}
			return true
		l603:
			position, tokenIndex = position603, tokenIndex603
			return false
		},
		/* 59 EscapedCharAtom <- <('\\' .)> */
		func() bool {
			position665, tokenIndex665 := position, tokenIndex
			{
				position666 := position
				if buffer[position] != rune('\\') {
					goto l665
				}
				position++
				if !matchDot() {
					goto l665
				}
				add(ruleEscapedCharAtom, position666)
			}
			return true
		l665:
			position, tokenIndex = position665, tokenIndex665
			return false
		},
		/* 60 CharAtom <- <(!'"' .)> */
		func() bool {
			position667, tokenIndex667 := position, tokenIndex
			{
				position668 := position
				{
					position669, tokenIndex669 := position, tokenIndex
					if buffer[position] != rune('"') {
						goto l669
					}
					position++
					goto l667
				l669:
					position, tokenIndex = position669, tokenIndex669
				}
				if !matchDot() {
					goto l667
				}
				add(ruleCharAtom, position668)
			}
			return true
		l667:
			position, tokenIndex = position667, tokenIndex667
			return false
		},
		/* 61 IntegerAtom <- <[0-9]+> */
		func() bool {
			position670, tokenIndex670 := position, tokenIndex
			{
				position671 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l670
				}
				position++
			l672:
				{
					position673, tokenIndex673 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l673
					}
					position++
					goto l672
				l673:
					position, tokenIndex = position673, tokenIndex673
				}
				add(ruleIntegerAtom, position671)
			}
			return true
		l670:
			position, tokenIndex = position670, tokenIndex670
			return false
		},
		/* 62 ListAtom <- <('[' _ ExprSeq? _ ']')> */
		func() bool {
			position674, tokenIndex674 := position, tokenIndex
			{
				position675 := position
				if buffer[position] != rune('[') {
					goto l674
				}
				position++
				if !_rules[rule_]() {
					goto l674
				}
				{
					position676, tokenIndex676 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l676
					}
					goto l677
				l676:
					position, tokenIndex = position676, tokenIndex676
				}
			l677:
				if !_rules[rule_]() {
					goto l674
				}
				if buffer[position] != rune(']') {
					goto l674
				}
				position++
				add(ruleListAtom, position675)
			}
			return true
		l674:
			position, tokenIndex = position674, tokenIndex674
			return false
		},
		/* 63 ExprSeq <- <(Expr (_ ',' _ ExprSeq)?)> */
		func() bool {
			position678, tokenIndex678 := position, tokenIndex
			{
				position679 := position
				if !_rules[ruleExpr]() {
					goto l678
				}
				{
					position680, tokenIndex680 := position, tokenIndex
					if !_rules[rule_]() {
						goto l680
					}
					if buffer[position] != rune(',') {
						goto l680
					}
					position++
					if !_rules[rule_]() {
						goto l680
					}
					if !_rules[ruleExprSeq]() {
						goto l680
					}
					goto l681
				l680:
					position, tokenIndex = position680, tokenIndex680
				}
			l681:
				add(ruleExprSeq, position679)
			}
			return true
		l678:
			position, tokenIndex = position678, tokenIndex678
			return false
		},
		/* 64 AtomExpr <- <(UnaryOp? _ (FoldMacro / GettableExpr / IfWithError / Match / ConstAtom))> */
		func() bool {
			position682, tokenIndex682 := position, tokenIndex
			{
				position683 := position
				{
					position684, tokenIndex684 := position, tokenIndex
					if !_rules[ruleUnaryOp]() {
						goto l684
					}
					goto l685
				l684:
					position, tokenIndex = position684, tokenIndex684
				}
			l685:
				if !_rules[rule_]() {
					goto l682
				}
				{
					position686, tokenIndex686 := position, tokenIndex
					if !_rules[ruleFoldMacro]() {
						goto l687
					}
					goto l686
				l687:
					position, tokenIndex = position686, tokenIndex686
					if !_rules[ruleGettableExpr]() {
						goto l688
					}
					goto l686
				l688:
					position, tokenIndex = position686, tokenIndex686
					if !_rules[ruleIfWithError]() {
						goto l689
					}
					goto l686
				l689:
					position, tokenIndex = position686, tokenIndex686
					if !_rules[ruleMatch]() {
						goto l690
					}
					goto l686
				l690:
					position, tokenIndex = position686, tokenIndex686
					if !_rules[ruleConstAtom]() {
						goto l682
					}
				}
			l686:
				add(ruleAtomExpr, position683)
			}
			return true
		l682:
			position, tokenIndex = position682, tokenIndex682
			return false
		},
		/* 65 MultGroupOpAtom <- <(AtomExpr (_ MultGroupOp _ AtomExpr)*)> */
		func() bool {
			position691, tokenIndex691 := position, tokenIndex
			{
				position692 := position
				if !_rules[ruleAtomExpr]() {
					goto l691
				}
			l693:
				{
					position694, tokenIndex694 := position, tokenIndex
					if !_rules[rule_]() {
						goto l694
					}
					if !_rules[ruleMultGroupOp]() {
						goto l694
					}
					if !_rules[rule_]() {
						goto l694
					}
					if !_rules[ruleAtomExpr]() {
						goto l694
					}
					goto l693
				l694:
					position, tokenIndex = position694, tokenIndex694
				}
				add(ruleMultGroupOpAtom, position692)
			}
			return true
		l691:
			position, tokenIndex = position691, tokenIndex691
			return false
		},
		/* 66 SumGroupOpAtom <- <(MultGroupOpAtom (_ SumGroupOp _ MultGroupOpAtom)*)> */
		func() bool {
			position695, tokenIndex695 := position, tokenIndex
			{
				position696 := position
				if !_rules[ruleMultGroupOpAtom]() {
					goto l695
				}
			l697:
				{
					position698, tokenIndex698 := position, tokenIndex
					if !_rules[rule_]() {
						goto l698
					}
					if !_rules[ruleSumGroupOp]() {
						goto l698
					}
					if !_rules[rule_]() {
						goto l698
					}
					if !_rules[ruleMultGroupOpAtom]() {
						goto l698
					}
					goto l697
				l698:
					position, tokenIndex = position698, tokenIndex698
				}
				add(ruleSumGroupOpAtom, position696)
			}
			return true
		l695:
			position, tokenIndex = position695, tokenIndex695
			return false
		},
		/* 67 ConsOpAtom <- <(SumGroupOpAtom (_ ConsOp _ SumGroupOpAtom)*)> */
		func() bool {
			position699, tokenIndex699 := position, tokenIndex
			{
				position700 := position
				if !_rules[ruleSumGroupOpAtom]() {
					goto l699
				}
			l701:
				{
					position702, tokenIndex702 := position, tokenIndex
					if !_rules[rule_]() {
						goto l702
					}
					if !_rules[ruleConsOp]() {
						goto l702
					}
					if !_rules[rule_]() {
						goto l702
					}
					if !_rules[ruleSumGroupOpAtom]() {
						goto l702
					}
					goto l701
				l702:
					position, tokenIndex = position702, tokenIndex702
				}
				add(ruleConsOpAtom, position700)
			}
			return true
		l699:
			position, tokenIndex = position699, tokenIndex699
			return false
		},
		/* 68 CompareGroupOpAtom <- <(ConsOpAtom (_ CompareGroupOp _ ConsOpAtom)*)> */
		func() bool {
			position703, tokenIndex703 := position, tokenIndex
			{
				position704 := position
				if !_rules[ruleConsOpAtom]() {
					goto l703
				}
			l705:
				{
					position706, tokenIndex706 := position, tokenIndex
					if !_rules[rule_]() {
						goto l706
					}
					if !_rules[ruleCompareGroupOp]() {
						goto l706
					}
					if !_rules[rule_]() {
						goto l706
					}
					if !_rules[ruleConsOpAtom]() {
						goto l706
					}
					goto l705
				l706:
					position, tokenIndex = position706, tokenIndex706
				}
				add(ruleCompareGroupOpAtom, position704)
			}
			return true
		l703:
			position, tokenIndex = position703, tokenIndex703
			return false
		},
		/* 69 EqualityGroupOpAtom <- <(CompareGroupOpAtom (_ EqGroupOp _ CompareGroupOpAtom)*)> */
		func() bool {
			position707, tokenIndex707 := position, tokenIndex
			{
				position708 := position
				if !_rules[ruleCompareGroupOpAtom]() {
					goto l707
				}
			l709:
				{
					position710, tokenIndex710 := position, tokenIndex
					if !_rules[rule_]() {
						goto l710
					}
					if !_rules[ruleEqGroupOp]() {
						goto l710
					}
					if !_rules[rule_]() {
						goto l710
					}
					if !_rules[ruleCompareGroupOpAtom]() {
						goto l710
					}
					goto l709
				l710:
					position, tokenIndex = position710, tokenIndex710
				}
				add(ruleEqualityGroupOpAtom, position708)
			}
			return true
		l707:
			position, tokenIndex = position707, tokenIndex707
			return false
		},
		/* 70 AndOpAtom <- <(EqualityGroupOpAtom (_ AndOp _ EqualityGroupOpAtom)*)> */
		func() bool {
			position711, tokenIndex711 := position, tokenIndex
			{
				position712 := position
				if !_rules[ruleEqualityGroupOpAtom]() {
					goto l711
				}
			l713:
				{
					position714, tokenIndex714 := position, tokenIndex
					if !_rules[rule_]() {
						goto l714
					}
					if !_rules[ruleAndOp]() {
						goto l714
					}
					if !_rules[rule_]() {
						goto l714
					}
					if !_rules[ruleEqualityGroupOpAtom]() {
						goto l714
					}
					goto l713
				l714:
					position, tokenIndex = position714, tokenIndex714
				}
				add(ruleAndOpAtom, position712)
			}
			return true
		l711:
			position, tokenIndex = position711, tokenIndex711
			return false
		},
		/* 71 OrOpAtom <- <(AndOpAtom (_ OrOp _ AndOpAtom)*)> */
		func() bool {
			position715, tokenIndex715 := position, tokenIndex
			{
				position716 := position
				if !_rules[ruleAndOpAtom]() {
					goto l715
				}
			l717:
				{
					position718, tokenIndex718 := position, tokenIndex
					if !_rules[rule_]() {
						goto l718
					}
					if !_rules[ruleOrOp]() {
						goto l718
					}
					if !_rules[rule_]() {
						goto l718
					}
					if !_rules[ruleAndOpAtom]() {
						goto l718
					}
					goto l717
				l718:
					position, tokenIndex = position718, tokenIndex718
				}
				add(ruleOrOpAtom, position716)
			}
			return true
		l715:
			position, tokenIndex = position715, tokenIndex715
			return false
		},
		/* 72 Expr <- <OrOpAtom> */
		func() bool {
			position719, tokenIndex719 := position, tokenIndex
			{
				position720 := position
				if !_rules[ruleOrOpAtom]() {
					goto l719
				}
				add(ruleExpr, position720)
			}
			return true
		l719:
			position, tokenIndex = position719, tokenIndex719
			return false
		},
		/* 73 ParExpr <- <('(' _ Expr _ ')')> */
		func() bool {
			position721, tokenIndex721 := position, tokenIndex
			{
				position722 := position
				if buffer[position] != rune('(') {
					goto l721
				}
				position++
				if !_rules[rule_]() {
					goto l721
				}
				if !_rules[ruleExpr]() {
					goto l721
				}
				if !_rules[rule_]() {
					goto l721
				}
				if buffer[position] != rune(')') {
					goto l721
				}
				position++
				add(ruleParExpr, position722)
			}
			return true
		l721:
			position, tokenIndex = position721, tokenIndex721
			return false
		},
		/* 74 GettableExpr <- <((ParExpr / Block / FunctionCall / IdentifierAtom) (_ (ListAccess / ('.' _ (FunctionCallAccess / IdentifierAtomAccess))))*)> */
		func() bool {
			position723, tokenIndex723 := position, tokenIndex
			{
				position724 := position
				{
					position725, tokenIndex725 := position, tokenIndex
					if !_rules[ruleParExpr]() {
						goto l726
					}
					goto l725
				l726:
					position, tokenIndex = position725, tokenIndex725
					if !_rules[ruleBlock]() {
						goto l727
					}
					goto l725
				l727:
					position, tokenIndex = position725, tokenIndex725
					if !_rules[ruleFunctionCall]() {
						goto l728
					}
					goto l725
				l728:
					position, tokenIndex = position725, tokenIndex725
					if !_rules[ruleIdentifierAtom]() {
						goto l723
					}
				}
			l725:
			l729:
				{
					position730, tokenIndex730 := position, tokenIndex
					if !_rules[rule_]() {
						goto l730
					}
					{
						position731, tokenIndex731 := position, tokenIndex
						if !_rules[ruleListAccess]() {
							goto l732
						}
						goto l731
					l732:
						position, tokenIndex = position731, tokenIndex731
						if buffer[position] != rune('.') {
							goto l730
						}
						position++
						if !_rules[rule_]() {
							goto l730
						}
						{
							position733, tokenIndex733 := position, tokenIndex
							if !_rules[ruleFunctionCallAccess]() {
								goto l734
							}
							goto l733
						l734:
							position, tokenIndex = position733, tokenIndex733
							if !_rules[ruleIdentifierAtomAccess]() {
								goto l730
							}
						}
					l733:
					}
				l731:
					goto l729
				l730:
					position, tokenIndex = position730, tokenIndex730
				}
				add(ruleGettableExpr, position724)
			}
			return true
		l723:
			position, tokenIndex = position723, tokenIndex723
			return false
		},
		/* 75 FunctionCallAccess <- <FunctionCall> */
		func() bool {
			position735, tokenIndex735 := position, tokenIndex
			{
				position736 := position
				if !_rules[ruleFunctionCall]() {
					goto l735
				}
				add(ruleFunctionCallAccess, position736)
			}
			return true
		l735:
			position, tokenIndex = position735, tokenIndex735
			return false
		},
		/* 76 IdentifierAtomAccess <- <IdentifierAtom> */
		func() bool {
			position737, tokenIndex737 := position, tokenIndex
			{
				position738 := position
				if !_rules[ruleIdentifierAtom]() {
					goto l737
				}
				add(ruleIdentifierAtomAccess, position738)
			}
			return true
		l737:
			position, tokenIndex = position737, tokenIndex737
			return false
		},
		/* 77 ListAccess <- <('[' _ (Expr / IdentifierAtom) _ ']')> */
		func() bool {
			position739, tokenIndex739 := position, tokenIndex
			{
				position740 := position
				if buffer[position] != rune('[') {
					goto l739
				}
				position++
				if !_rules[rule_]() {
					goto l739
				}
				{
					position741, tokenIndex741 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l742
					}
					goto l741
				l742:
					position, tokenIndex = position741, tokenIndex741
					if !_rules[ruleIdentifierAtom]() {
						goto l739
					}
				}
			l741:
				if !_rules[rule_]() {
					goto l739
				}
				if buffer[position] != rune(']') {
					goto l739
				}
				position++
				add(ruleListAccess, position740)
			}
			return true
		l739:
			position, tokenIndex = position739, tokenIndex739
			return false
		},
		/* 78 Block <- <('{' (_ Declaration)* _ BlockDecExprSep? _ Expr _ '}')> */
		func() bool {
			position743, tokenIndex743 := position, tokenIndex
			{
				position744 := position
				if buffer[position] != rune('{') {
					goto l743
				}
				position++
			l745:
				{
					position746, tokenIndex746 := position, tokenIndex
					if !_rules[rule_]() {
						goto l746
					}
					if !_rules[ruleDeclaration]() {
						goto l746
					}
					goto l745
				l746:
					position, tokenIndex = position746, tokenIndex746
				}
				if !_rules[rule_]() {
					goto l743
				}
				{
					position747, tokenIndex747 := position, tokenIndex
					if !_rules[ruleBlockDecExprSep]() {
						goto l747
					}
					goto l748
				l747:
					position, tokenIndex = position747, tokenIndex747
				}
			l748:
				if !_rules[rule_]() {
					goto l743
				}
				if !_rules[ruleExpr]() {
					goto l743
				}
				if !_rules[rule_]() {
					goto l743
				}
				if buffer[position] != rune('}') {
					goto l743
				}
				position++
				add(ruleBlock, position744)
			}
			return true
		l743:
			position, tokenIndex = position743, tokenIndex743
			return false
		},
		/* 79 BlockWithoutPar <- <((_ Declaration)* _ BlockDecExprSep? _ Expr)> */
		func() bool {
			position749, tokenIndex749 := position, tokenIndex
			{
				position750 := position
			l751:
				{
					position752, tokenIndex752 := position, tokenIndex
					if !_rules[rule_]() {
						goto l752
					}
					if !_rules[ruleDeclaration]() {
						goto l752
					}
					goto l751
				l752:
					position, tokenIndex = position752, tokenIndex752
				}
				if !_rules[rule_]() {
					goto l749
				}
				{
					position753, tokenIndex753 := position, tokenIndex
					if !_rules[ruleBlockDecExprSep]() {
						goto l753
					}
					goto l754
				l753:
					position, tokenIndex = position753, tokenIndex753
				}
			l754:
				if !_rules[rule_]() {
					goto l749
				}
				if !_rules[ruleExpr]() {
					goto l749
				}
				add(ruleBlockWithoutPar, position750)
			}
			return true
		l749:
			position, tokenIndex = position749, tokenIndex749
			return false
		},
		/* 80 BlockDecExprSep <- <':'> */
		func() bool {
			position755, tokenIndex755 := position, tokenIndex
			{
				position756 := position
				if buffer[position] != rune(':') {
					goto l755
				}
				position++
				add(ruleBlockDecExprSep, position756)
			}
			return true
		l755:
			position, tokenIndex = position755, tokenIndex755
			return false
		},
		/* 81 FunctionCall <- <(IdentifierAtom _ '(' _ ExprSeq? _ ')')> */
		func() bool {
			position757, tokenIndex757 := position, tokenIndex
			{
				position758 := position
				if !_rules[ruleIdentifierAtom]() {
					goto l757
				}
				if !_rules[rule_]() {
					goto l757
				}
				if buffer[position] != rune('(') {
					goto l757
				}
				position++
				if !_rules[rule_]() {
					goto l757
				}
				{
					position759, tokenIndex759 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l759
					}
					goto l760
				l759:
					position, tokenIndex = position759, tokenIndex759
				}
			l760:
				if !_rules[rule_]() {
					goto l757
				}
				if buffer[position] != rune(')') {
					goto l757
				}
				position++
				add(ruleFunctionCall, position758)
			}
			return true
		l757:
			position, tokenIndex = position757, tokenIndex757
			return false
		},
		/* 82 FoldMacro <- <(('f' / 'F') ('o' / 'O') ('l' / 'L') ('d' / 'D') _ '<' _ IntegerAtom _ '>' _ '(' _ Expr _ ',' _ Expr _ ',' _ IdentifierAtom _ ')')> */
		func() bool {
			position761, tokenIndex761 := position, tokenIndex
			{
				position762 := position
				{
					position763, tokenIndex763 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l764
					}
					position++
					goto l763
				l764:
					position, tokenIndex = position763, tokenIndex763
					if buffer[position] != rune('F') {
						goto l761
					}
					position++
				}
			l763:
				{
					position765, tokenIndex765 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l766
					}
					position++
					goto l765
				l766:
					position, tokenIndex = position765, tokenIndex765
					if buffer[position] != rune('O') {
						goto l761
					}
					position++
				}
			l765:
				{
					position767, tokenIndex767 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l768
					}
					position++
					goto l767
				l768:
					position, tokenIndex = position767, tokenIndex767
					if buffer[position] != rune('L') {
						goto l761
					}
					position++
				}
			l767:
				{
					position769, tokenIndex769 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l770
					}
					position++
					goto l769
				l770:
					position, tokenIndex = position769, tokenIndex769
					if buffer[position] != rune('D') {
						goto l761
					}
					position++
				}
			l769:
				if !_rules[rule_]() {
					goto l761
				}
				if buffer[position] != rune('<') {
					goto l761
				}
				position++
				if !_rules[rule_]() {
					goto l761
				}
				if !_rules[ruleIntegerAtom]() {
					goto l761
				}
				if !_rules[rule_]() {
					goto l761
				}
				if buffer[position] != rune('>') {
					goto l761
				}
				position++
				if !_rules[rule_]() {
					goto l761
				}
				if buffer[position] != rune('(') {
					goto l761
				}
				position++
				if !_rules[rule_]() {
					goto l761
				}
				if !_rules[ruleExpr]() {
					goto l761
				}
				if !_rules[rule_]() {
					goto l761
				}
				if buffer[position] != rune(',') {
					goto l761
				}
				position++
				if !_rules[rule_]() {
					goto l761
				}
				if !_rules[ruleExpr]() {
					goto l761
				}
				if !_rules[rule_]() {
					goto l761
				}
				if buffer[position] != rune(',') {
					goto l761
				}
				position++
				if !_rules[rule_]() {
					goto l761
				}
				if !_rules[ruleIdentifierAtom]() {
					goto l761
				}
				if !_rules[rule_]() {
					goto l761
				}
				if buffer[position] != rune(')') {
					goto l761
				}
				position++
				add(ruleFoldMacro, position762)
			}
			return true
		l761:
			position, tokenIndex = position761, tokenIndex761
			return false
		},
		/* 83 IfWithError <- <(If / FailedIfWithoutElse)> */
		func() bool {
			position771, tokenIndex771 := position, tokenIndex
			{
				position772 := position
				{
					position773, tokenIndex773 := position, tokenIndex
					if !_rules[ruleIf]() {
						goto l774
					}
					goto l773
				l774:
					position, tokenIndex = position773, tokenIndex773
					if !_rules[ruleFailedIfWithoutElse]() {
						goto l771
					}
				}
			l773:
				add(ruleIfWithError, position772)
			}
			return true
		l771:
			position, tokenIndex = position771, tokenIndex771
			return false
		},
		/* 84 If <- <(('i' / 'I') ('f' / 'F') _ Expr _ (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) _ Expr _ (('e' / 'E') ('l' / 'L') ('s' / 'S') ('e' / 'E')) _ Expr)> */
		func() bool {
			position775, tokenIndex775 := position, tokenIndex
			{
				position776 := position
				{
					position777, tokenIndex777 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l778
					}
					position++
					goto l777
				l778:
					position, tokenIndex = position777, tokenIndex777
					if buffer[position] != rune('I') {
						goto l775
					}
					position++
				}
			l777:
				{
					position779, tokenIndex779 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l780
					}
					position++
					goto l779
				l780:
					position, tokenIndex = position779, tokenIndex779
					if buffer[position] != rune('F') {
						goto l775
					}
					position++
				}
			l779:
				if !_rules[rule_]() {
					goto l775
				}
				if !_rules[ruleExpr]() {
					goto l775
				}
				if !_rules[rule_]() {
					goto l775
				}
				{
					position781, tokenIndex781 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l782
					}
					position++
					goto l781
				l782:
					position, tokenIndex = position781, tokenIndex781
					if buffer[position] != rune('T') {
						goto l775
					}
					position++
				}
			l781:
				{
					position783, tokenIndex783 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l784
					}
					position++
					goto l783
				l784:
					position, tokenIndex = position783, tokenIndex783
					if buffer[position] != rune('H') {
						goto l775
					}
					position++
				}
			l783:
				{
					position785, tokenIndex785 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l786
					}
					position++
					goto l785
				l786:
					position, tokenIndex = position785, tokenIndex785
					if buffer[position] != rune('E') {
						goto l775
					}
					position++
				}
			l785:
				{
					position787, tokenIndex787 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l788
					}
					position++
					goto l787
				l788:
					position, tokenIndex = position787, tokenIndex787
					if buffer[position] != rune('N') {
						goto l775
					}
					position++
				}
			l787:
				if !_rules[rule_]() {
					goto l775
				}
				if !_rules[ruleExpr]() {
					goto l775
				}
				if !_rules[rule_]() {
					goto l775
				}
				{
					position789, tokenIndex789 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l790
					}
					position++
					goto l789
				l790:
					position, tokenIndex = position789, tokenIndex789
					if buffer[position] != rune('E') {
						goto l775
					}
					position++
				}
			l789:
				{
					position791, tokenIndex791 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l792
					}
					position++
					goto l791
				l792:
					position, tokenIndex = position791, tokenIndex791
					if buffer[position] != rune('L') {
						goto l775
					}
					position++
				}
			l791:
				{
					position793, tokenIndex793 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l794
					}
					position++
					goto l793
				l794:
					position, tokenIndex = position793, tokenIndex793
					if buffer[position] != rune('S') {
						goto l775
					}
					position++
				}
			l793:
				{
					position795, tokenIndex795 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l796
					}
					position++
					goto l795
				l796:
					position, tokenIndex = position795, tokenIndex795
					if buffer[position] != rune('E') {
						goto l775
					}
					position++
				}
			l795:
				if !_rules[rule_]() {
					goto l775
				}
				if !_rules[ruleExpr]() {
					goto l775
				}
				add(ruleIf, position776)
			}
			return true
		l775:
			position, tokenIndex = position775, tokenIndex775
			return false
		},
		/* 85 FailedIfWithoutElse <- <(('i' / 'I') ('f' / 'F') _ Expr _ (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) _ Expr)> */
		func() bool {
			position797, tokenIndex797 := position, tokenIndex
			{
				position798 := position
				{
					position799, tokenIndex799 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l800
					}
					position++
					goto l799
				l800:
					position, tokenIndex = position799, tokenIndex799
					if buffer[position] != rune('I') {
						goto l797
					}
					position++
				}
			l799:
				{
					position801, tokenIndex801 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l802
					}
					position++
					goto l801
				l802:
					position, tokenIndex = position801, tokenIndex801
					if buffer[position] != rune('F') {
						goto l797
					}
					position++
				}
			l801:
				if !_rules[rule_]() {
					goto l797
				}
				if !_rules[ruleExpr]() {
					goto l797
				}
				if !_rules[rule_]() {
					goto l797
				}
				{
					position803, tokenIndex803 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l804
					}
					position++
					goto l803
				l804:
					position, tokenIndex = position803, tokenIndex803
					if buffer[position] != rune('T') {
						goto l797
					}
					position++
				}
			l803:
				{
					position805, tokenIndex805 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l806
					}
					position++
					goto l805
				l806:
					position, tokenIndex = position805, tokenIndex805
					if buffer[position] != rune('H') {
						goto l797
					}
					position++
				}
			l805:
				{
					position807, tokenIndex807 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l808
					}
					position++
					goto l807
				l808:
					position, tokenIndex = position807, tokenIndex807
					if buffer[position] != rune('E') {
						goto l797
					}
					position++
				}
			l807:
				{
					position809, tokenIndex809 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l810
					}
					position++
					goto l809
				l810:
					position, tokenIndex = position809, tokenIndex809
					if buffer[position] != rune('N') {
						goto l797
					}
					position++
				}
			l809:
				if !_rules[rule_]() {
					goto l797
				}
				if !_rules[ruleExpr]() {
					goto l797
				}
				add(ruleFailedIfWithoutElse, position798)
			}
			return true
		l797:
			position, tokenIndex = position797, tokenIndex797
			return false
		},
		/* 86 Match <- <(('m' / 'M') ('a' / 'A') ('t' / 'T') ('c' / 'C') ('h' / 'H') _ Expr _ '{' (_ MatchCase)+ _ '}')> */
		func() bool {
			position811, tokenIndex811 := position, tokenIndex
			{
				position812 := position
				{
					position813, tokenIndex813 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l814
					}
					position++
					goto l813
				l814:
					position, tokenIndex = position813, tokenIndex813
					if buffer[position] != rune('M') {
						goto l811
					}
					position++
				}
			l813:
				{
					position815, tokenIndex815 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l816
					}
					position++
					goto l815
				l816:
					position, tokenIndex = position815, tokenIndex815
					if buffer[position] != rune('A') {
						goto l811
					}
					position++
				}
			l815:
				{
					position817, tokenIndex817 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l818
					}
					position++
					goto l817
				l818:
					position, tokenIndex = position817, tokenIndex817
					if buffer[position] != rune('T') {
						goto l811
					}
					position++
				}
			l817:
				{
					position819, tokenIndex819 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l820
					}
					position++
					goto l819
				l820:
					position, tokenIndex = position819, tokenIndex819
					if buffer[position] != rune('C') {
						goto l811
					}
					position++
				}
			l819:
				{
					position821, tokenIndex821 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l822
					}
					position++
					goto l821
				l822:
					position, tokenIndex = position821, tokenIndex821
					if buffer[position] != rune('H') {
						goto l811
					}
					position++
				}
			l821:
				if !_rules[rule_]() {
					goto l811
				}
				if !_rules[ruleExpr]() {
					goto l811
				}
				if !_rules[rule_]() {
					goto l811
				}
				if buffer[position] != rune('{') {
					goto l811
				}
				position++
				if !_rules[rule_]() {
					goto l811
				}
				if !_rules[ruleMatchCase]() {
					goto l811
				}
			l823:
				{
					position824, tokenIndex824 := position, tokenIndex
					if !_rules[rule_]() {
						goto l824
					}
					if !_rules[ruleMatchCase]() {
						goto l824
					}
					goto l823
				l824:
					position, tokenIndex = position824, tokenIndex824
				}
				if !_rules[rule_]() {
					goto l811
				}
				if buffer[position] != rune('}') {
					goto l811
				}
				position++
				add(ruleMatch, position812)
			}
			return true
		l811:
			position, tokenIndex = position811, tokenIndex811
			return false
		},
		/* 87 MatchCase <- <(('c' / 'C') ('a' / 'A') ('s' / 'S') ('e' / 'E') _ ((IdentifierAtom _ (':' _ TypesAtom)?) / DefaultMatchCasePart) _ ('=' '>') _ BlockWithoutPar)> */
		func() bool {
			position825, tokenIndex825 := position, tokenIndex
			{
				position826 := position
				{
					position827, tokenIndex827 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l828
					}
					position++
					goto l827
				l828:
					position, tokenIndex = position827, tokenIndex827
					if buffer[position] != rune('C') {
						goto l825
					}
					position++
				}
			l827:
				{
					position829, tokenIndex829 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l830
					}
					position++
					goto l829
				l830:
					position, tokenIndex = position829, tokenIndex829
					if buffer[position] != rune('A') {
						goto l825
					}
					position++
				}
			l829:
				{
					position831, tokenIndex831 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l832
					}
					position++
					goto l831
				l832:
					position, tokenIndex = position831, tokenIndex831
					if buffer[position] != rune('S') {
						goto l825
					}
					position++
				}
			l831:
				{
					position833, tokenIndex833 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l834
					}
					position++
					goto l833
				l834:
					position, tokenIndex = position833, tokenIndex833
					if buffer[position] != rune('E') {
						goto l825
					}
					position++
				}
			l833:
				if !_rules[rule_]() {
					goto l825
				}
				{
					position835, tokenIndex835 := position, tokenIndex
					if !_rules[ruleIdentifierAtom]() {
						goto l836
					}
					if !_rules[rule_]() {
						goto l836
					}
					{
						position837, tokenIndex837 := position, tokenIndex
						if buffer[position] != rune(':') {
							goto l837
						}
						position++
						if !_rules[rule_]() {
							goto l837
						}
						if !_rules[ruleTypesAtom]() {
							goto l837
						}
						goto l838
					l837:
						position, tokenIndex = position837, tokenIndex837
					}
				l838:
					goto l835
				l836:
					position, tokenIndex = position835, tokenIndex835
					if !_rules[ruleDefaultMatchCasePart]() {
						goto l825
					}
				}
			l835:
				if !_rules[rule_]() {
					goto l825
				}
				if buffer[position] != rune('=') {
					goto l825
				}
				position++
				if buffer[position] != rune('>') {
					goto l825
				}
				position++
				if !_rules[rule_]() {
					goto l825
				}
				if !_rules[ruleBlockWithoutPar]() {
					goto l825
				}
				add(ruleMatchCase, position826)
			}
			return true
		l825:
			position, tokenIndex = position825, tokenIndex825
			return false
		},
		/* 88 DefaultMatchCasePart <- <('{' _ (':' _ TypesAtom)?)> */
		func() bool {
			position839, tokenIndex839 := position, tokenIndex
			{
				position840 := position
				if buffer[position] != rune('{') {
					goto l839
				}
				position++
				if !_rules[rule_]() {
					goto l839
				}
				{
					position841, tokenIndex841 := position, tokenIndex
					if buffer[position] != rune(':') {
						goto l841
					}
					position++
					if !_rules[rule_]() {
						goto l841
					}
					if !_rules[ruleTypesAtom]() {
						goto l841
					}
					goto l842
				l841:
					position, tokenIndex = position841, tokenIndex841
				}
			l842:
				add(ruleDefaultMatchCasePart, position840)
			}
			return true
		l839:
			position, tokenIndex = position839, tokenIndex839
			return false
		},
	}
	p.rules = _rules
	return nil
}

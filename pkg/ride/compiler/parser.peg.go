package compiler

// Code generated by peg -output=parser.peg.go ride.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleCode
	ruleDAppRoot
	ruleScriptRoot
	ruleWS
	ruleEOL
	ruleComment
	rule_
	ruleEOF
	ruleDirectiveName
	ruleUpperCaseString
	ruleIntString
	rulePathString
	ruleDirective
	ruleDeclaration
	ruleVariable
	ruleStrictVariable
	ruleFunc
	ruleFuncArg
	ruleFuncArgSeq
	ruleAnnotatedFunc
	ruleAnnotation
	ruleIdentifierSeq
	ruleAnnotationSeq
	ruleOrOp
	ruleAndOp
	ruleEqGroupOp
	ruleEqOp
	ruleNeOp
	ruleCompareGroupOp
	ruleGtOp
	ruleGeOp
	ruleLtOp
	ruleLeOp
	ruleConsOp
	ruleSumGroupOp
	ruleSumOp
	ruleSubOp
	ruleMultGroupOp
	ruleMulOp
	ruleDivOp
	ruleModOp
	ruleUnaryOp
	rulePositiveOp
	ruleNegativeOp
	ruleNotOp
	ruleReservedWords
	ruleConst
	ruleIdentifier
	ruleGenericTypesAtom
	ruleOneGenericTypeAtom
	ruleTypesAtom
	ruleOneTypeAtom
	ruleBase16
	ruleBase58
	ruleBase64
	ruleByteVector
	ruleBoolean
	ruleString
	ruleUnicodeChar
	ruleEscapedChar
	ruleChar
	ruleInteger
	ruleList
	ruleExprSeq
	ruleAtomExpr
	ruleMultGroupOpAtom
	ruleSumGroupOpAtom
	ruleConsOpAtom
	ruleCompareGroupOpAtom
	ruleEqualityGroupOpAtom
	ruleAndOpAtom
	ruleOrOpAtom
	ruleExpr
	ruleParExpr
	ruleGettableExpr
	ruleFunctionCallAccess
	ruleIdentifierAccess
	ruleListAccess
	ruleBlock
	ruleBlockWithoutPar
	ruleFunctionCall
	ruleFoldMacro
	ruleIfWithError
	ruleIf
	ruleFailedIfWithoutElse
	ruleMatch
	ruleMatchCase
	ruleDefaultMatchCasePart
)

var rul3s = [...]string{
	"Unknown",
	"Code",
	"DAppRoot",
	"ScriptRoot",
	"WS",
	"EOL",
	"Comment",
	"_",
	"EOF",
	"DirectiveName",
	"UpperCaseString",
	"IntString",
	"PathString",
	"Directive",
	"Declaration",
	"Variable",
	"StrictVariable",
	"Func",
	"FuncArg",
	"FuncArgSeq",
	"AnnotatedFunc",
	"Annotation",
	"IdentifierSeq",
	"AnnotationSeq",
	"OrOp",
	"AndOp",
	"EqGroupOp",
	"EqOp",
	"NeOp",
	"CompareGroupOp",
	"GtOp",
	"GeOp",
	"LtOp",
	"LeOp",
	"ConsOp",
	"SumGroupOp",
	"SumOp",
	"SubOp",
	"MultGroupOp",
	"MulOp",
	"DivOp",
	"ModOp",
	"UnaryOp",
	"PositiveOp",
	"NegativeOp",
	"NotOp",
	"ReservedWords",
	"Const",
	"Identifier",
	"GenericTypesAtom",
	"OneGenericTypeAtom",
	"TypesAtom",
	"OneTypeAtom",
	"Base16",
	"Base58",
	"Base64",
	"ByteVector",
	"Boolean",
	"String",
	"UnicodeChar",
	"EscapedChar",
	"Char",
	"Integer",
	"List",
	"ExprSeq",
	"AtomExpr",
	"MultGroupOpAtom",
	"SumGroupOpAtom",
	"ConsOpAtom",
	"CompareGroupOpAtom",
	"EqualityGroupOpAtom",
	"AndOpAtom",
	"OrOpAtom",
	"Expr",
	"ParExpr",
	"GettableExpr",
	"FunctionCallAccess",
	"IdentifierAccess",
	"ListAccess",
	"Block",
	"BlockWithoutPar",
	"FunctionCall",
	"FoldMacro",
	"IfWithError",
	"If",
	"FailedIfWithoutElse",
	"Match",
	"MatchCase",
	"DefaultMatchCasePart",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Buffer string
	buffer []rune
	rules  [89]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Code <- <(DAppRoot / ScriptRoot)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[ruleDAppRoot]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[ruleScriptRoot]() {
						goto l0
					}
				}
			l2:
				add(ruleCode, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 DAppRoot <- <(_ (Directive _)* (_ Declaration)* (_ AnnotatedFunc)* _ EOF)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
				if !_rules[rule_]() {
					goto l4
				}
			l6:
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l7
					}
					if !_rules[rule_]() {
						goto l7
					}
					goto l6
				l7:
					position, tokenIndex = position7, tokenIndex7
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[rule_]() {
						goto l9
					}
					if !_rules[ruleDeclaration]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
			l10:
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[rule_]() {
						goto l11
					}
					if !_rules[ruleAnnotatedFunc]() {
						goto l11
					}
					goto l10
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				if !_rules[rule_]() {
					goto l4
				}
				if !_rules[ruleEOF]() {
					goto l4
				}
				add(ruleDAppRoot, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 ScriptRoot <- <(_ (Directive _)* (_ Declaration)* _ Expr _ EOF)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[rule_]() {
					goto l12
				}
			l14:
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l15
					}
					if !_rules[rule_]() {
						goto l15
					}
					goto l14
				l15:
					position, tokenIndex = position15, tokenIndex15
				}
			l16:
				{
					position17, tokenIndex17 := position, tokenIndex
					if !_rules[rule_]() {
						goto l17
					}
					if !_rules[ruleDeclaration]() {
						goto l17
					}
					goto l16
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleExpr]() {
					goto l12
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleEOF]() {
					goto l12
				}
				add(ruleScriptRoot, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 WS <- <(' ' / '\t')> */
		func() bool {
			position18, tokenIndex18 := position, tokenIndex
			{
				position19 := position
				{
					position20, tokenIndex20 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l21
					}
					position++
					goto l20
				l21:
					position, tokenIndex = position20, tokenIndex20
					if buffer[position] != rune('\t') {
						goto l18
					}
					position++
				}
			l20:
				add(ruleWS, position19)
			}
			return true
		l18:
			position, tokenIndex = position18, tokenIndex18
			return false
		},
		/* 4 EOL <- <('\n' / '\r' / '\f')> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24, tokenIndex24 := position, tokenIndex
					if buffer[position] != rune('\n') {
						goto l25
					}
					position++
					goto l24
				l25:
					position, tokenIndex = position24, tokenIndex24
					if buffer[position] != rune('\r') {
						goto l26
					}
					position++
					goto l24
				l26:
					position, tokenIndex = position24, tokenIndex24
					if buffer[position] != rune('\f') {
						goto l22
					}
					position++
				}
			l24:
				add(ruleEOL, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 5 Comment <- <('#' (!('\r' / '^' / '\n') .)*)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				if buffer[position] != rune('#') {
					goto l27
				}
				position++
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					{
						position31, tokenIndex31 := position, tokenIndex
						{
							position32, tokenIndex32 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l33
							}
							position++
							goto l32
						l33:
							position, tokenIndex = position32, tokenIndex32
							if buffer[position] != rune('^') {
								goto l34
							}
							position++
							goto l32
						l34:
							position, tokenIndex = position32, tokenIndex32
							if buffer[position] != rune('\n') {
								goto l31
							}
							position++
						}
					l32:
						goto l30
					l31:
						position, tokenIndex = position31, tokenIndex31
					}
					if !matchDot() {
						goto l30
					}
					goto l29
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
				add(ruleComment, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 6 _ <- <(Comment / (WS / EOL)+)*> */
		func() bool {
			{
				position36 := position
			l37:
				{
					position38, tokenIndex38 := position, tokenIndex
					{
						position39, tokenIndex39 := position, tokenIndex
						if !_rules[ruleComment]() {
							goto l40
						}
						goto l39
					l40:
						position, tokenIndex = position39, tokenIndex39
						{
							position43, tokenIndex43 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l44
							}
							goto l43
						l44:
							position, tokenIndex = position43, tokenIndex43
							if !_rules[ruleEOL]() {
								goto l38
							}
						}
					l43:
					l41:
						{
							position42, tokenIndex42 := position, tokenIndex
							{
								position45, tokenIndex45 := position, tokenIndex
								if !_rules[ruleWS]() {
									goto l46
								}
								goto l45
							l46:
								position, tokenIndex = position45, tokenIndex45
								if !_rules[ruleEOL]() {
									goto l42
								}
							}
						l45:
							goto l41
						l42:
							position, tokenIndex = position42, tokenIndex42
						}
					}
				l39:
					goto l37
				l38:
					position, tokenIndex = position38, tokenIndex38
				}
				add(rule_, position36)
			}
			return true
		},
		/* 7 EOF <- <!.> */
		func() bool {
			position47, tokenIndex47 := position, tokenIndex
			{
				position48 := position
				{
					position49, tokenIndex49 := position, tokenIndex
					if !matchDot() {
						goto l49
					}
					goto l47
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
				add(ruleEOF, position48)
			}
			return true
		l47:
			position, tokenIndex = position47, tokenIndex47
			return false
		},
		/* 8 DirectiveName <- <([A-Z]+ ('_' / [A-Z])*)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l50
				}
				position++
			l52:
				{
					position53, tokenIndex53 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l53
					}
					position++
					goto l52
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				{
					position55, tokenIndex55 := position, tokenIndex
					{
						position56, tokenIndex56 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l57
						}
						position++
						goto l56
					l57:
						position, tokenIndex = position56, tokenIndex56
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l55
						}
						position++
					}
				l56:
					goto l54
				l55:
					position, tokenIndex = position55, tokenIndex55
				}
				add(ruleDirectiveName, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 9 UpperCaseString <- <[A-Z]+> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l58
				}
				position++
			l60:
				{
					position61, tokenIndex61 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l61
					}
					position++
					goto l60
				l61:
					position, tokenIndex = position61, tokenIndex61
				}
				add(ruleUpperCaseString, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 10 IntString <- <[0-9]+> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l62
				}
				position++
			l64:
				{
					position65, tokenIndex65 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l65
					}
					position++
					goto l64
				l65:
					position, tokenIndex = position65, tokenIndex65
				}
				add(ruleIntString, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 11 PathString <- <('_' / [a-z] / [A-Z] / [0-9] / '-' / '/' / ',' / '.')+> */
		func() bool {
			position66, tokenIndex66 := position, tokenIndex
			{
				position67 := position
				{
					position70, tokenIndex70 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l71
					}
					position++
					goto l70
				l71:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l72
					}
					position++
					goto l70
				l72:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l73
					}
					position++
					goto l70
				l73:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l74
					}
					position++
					goto l70
				l74:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('-') {
						goto l75
					}
					position++
					goto l70
				l75:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('/') {
						goto l76
					}
					position++
					goto l70
				l76:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune(',') {
						goto l77
					}
					position++
					goto l70
				l77:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('.') {
						goto l66
					}
					position++
				}
			l70:
			l68:
				{
					position69, tokenIndex69 := position, tokenIndex
					{
						position78, tokenIndex78 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l79
						}
						position++
						goto l78
					l79:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l80
						}
						position++
						goto l78
					l80:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l81
						}
						position++
						goto l78
					l81:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l82
						}
						position++
						goto l78
					l82:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('-') {
							goto l83
						}
						position++
						goto l78
					l83:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('/') {
							goto l84
						}
						position++
						goto l78
					l84:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune(',') {
							goto l85
						}
						position++
						goto l78
					l85:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('.') {
							goto l69
						}
						position++
					}
				l78:
					goto l68
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
				add(rulePathString, position67)
			}
			return true
		l66:
			position, tokenIndex = position66, tokenIndex66
			return false
		},
		/* 12 Directive <- <('{' '-' '#' WS+ DirectiveName WS+ (IntString / UpperCaseString / PathString) WS+ ('#' '-' '}'))> */
		func() bool {
			position86, tokenIndex86 := position, tokenIndex
			{
				position87 := position
				if buffer[position] != rune('{') {
					goto l86
				}
				position++
				if buffer[position] != rune('-') {
					goto l86
				}
				position++
				if buffer[position] != rune('#') {
					goto l86
				}
				position++
				if !_rules[ruleWS]() {
					goto l86
				}
			l88:
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l89
					}
					goto l88
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
				if !_rules[ruleDirectiveName]() {
					goto l86
				}
				if !_rules[ruleWS]() {
					goto l86
				}
			l90:
				{
					position91, tokenIndex91 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l91
					}
					goto l90
				l91:
					position, tokenIndex = position91, tokenIndex91
				}
				{
					position92, tokenIndex92 := position, tokenIndex
					if !_rules[ruleIntString]() {
						goto l93
					}
					goto l92
				l93:
					position, tokenIndex = position92, tokenIndex92
					if !_rules[ruleUpperCaseString]() {
						goto l94
					}
					goto l92
				l94:
					position, tokenIndex = position92, tokenIndex92
					if !_rules[rulePathString]() {
						goto l86
					}
				}
			l92:
				if !_rules[ruleWS]() {
					goto l86
				}
			l95:
				{
					position96, tokenIndex96 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l96
					}
					goto l95
				l96:
					position, tokenIndex = position96, tokenIndex96
				}
				if buffer[position] != rune('#') {
					goto l86
				}
				position++
				if buffer[position] != rune('-') {
					goto l86
				}
				position++
				if buffer[position] != rune('}') {
					goto l86
				}
				position++
				add(ruleDirective, position87)
			}
			return true
		l86:
			position, tokenIndex = position86, tokenIndex86
			return false
		},
		/* 13 Declaration <- <((Variable / StrictVariable / Func) _ ';'?)> */
		func() bool {
			position97, tokenIndex97 := position, tokenIndex
			{
				position98 := position
				{
					position99, tokenIndex99 := position, tokenIndex
					if !_rules[ruleVariable]() {
						goto l100
					}
					goto l99
				l100:
					position, tokenIndex = position99, tokenIndex99
					if !_rules[ruleStrictVariable]() {
						goto l101
					}
					goto l99
				l101:
					position, tokenIndex = position99, tokenIndex99
					if !_rules[ruleFunc]() {
						goto l97
					}
				}
			l99:
				if !_rules[rule_]() {
					goto l97
				}
				{
					position102, tokenIndex102 := position, tokenIndex
					if buffer[position] != rune(';') {
						goto l102
					}
					position++
					goto l103
				l102:
					position, tokenIndex = position102, tokenIndex102
				}
			l103:
				add(ruleDeclaration, position98)
			}
			return true
		l97:
			position, tokenIndex = position97, tokenIndex97
			return false
		},
		/* 14 Variable <- <(('l' / 'L') ('e' / 'E') ('t' / 'T') _ Identifier _ '=' _ Expr)> */
		func() bool {
			position104, tokenIndex104 := position, tokenIndex
			{
				position105 := position
				{
					position106, tokenIndex106 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l107
					}
					position++
					goto l106
				l107:
					position, tokenIndex = position106, tokenIndex106
					if buffer[position] != rune('L') {
						goto l104
					}
					position++
				}
			l106:
				{
					position108, tokenIndex108 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l109
					}
					position++
					goto l108
				l109:
					position, tokenIndex = position108, tokenIndex108
					if buffer[position] != rune('E') {
						goto l104
					}
					position++
				}
			l108:
				{
					position110, tokenIndex110 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l111
					}
					position++
					goto l110
				l111:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('T') {
						goto l104
					}
					position++
				}
			l110:
				if !_rules[rule_]() {
					goto l104
				}
				if !_rules[ruleIdentifier]() {
					goto l104
				}
				if !_rules[rule_]() {
					goto l104
				}
				if buffer[position] != rune('=') {
					goto l104
				}
				position++
				if !_rules[rule_]() {
					goto l104
				}
				if !_rules[ruleExpr]() {
					goto l104
				}
				add(ruleVariable, position105)
			}
			return true
		l104:
			position, tokenIndex = position104, tokenIndex104
			return false
		},
		/* 15 StrictVariable <- <(('s' / 'S') ('t' / 'T') ('r' / 'R') ('i' / 'I') ('c' / 'C') ('t' / 'T') _ Identifier _ '=' _ Expr)> */
		func() bool {
			position112, tokenIndex112 := position, tokenIndex
			{
				position113 := position
				{
					position114, tokenIndex114 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l115
					}
					position++
					goto l114
				l115:
					position, tokenIndex = position114, tokenIndex114
					if buffer[position] != rune('S') {
						goto l112
					}
					position++
				}
			l114:
				{
					position116, tokenIndex116 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l117
					}
					position++
					goto l116
				l117:
					position, tokenIndex = position116, tokenIndex116
					if buffer[position] != rune('T') {
						goto l112
					}
					position++
				}
			l116:
				{
					position118, tokenIndex118 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l119
					}
					position++
					goto l118
				l119:
					position, tokenIndex = position118, tokenIndex118
					if buffer[position] != rune('R') {
						goto l112
					}
					position++
				}
			l118:
				{
					position120, tokenIndex120 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l121
					}
					position++
					goto l120
				l121:
					position, tokenIndex = position120, tokenIndex120
					if buffer[position] != rune('I') {
						goto l112
					}
					position++
				}
			l120:
				{
					position122, tokenIndex122 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l123
					}
					position++
					goto l122
				l123:
					position, tokenIndex = position122, tokenIndex122
					if buffer[position] != rune('C') {
						goto l112
					}
					position++
				}
			l122:
				{
					position124, tokenIndex124 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l125
					}
					position++
					goto l124
				l125:
					position, tokenIndex = position124, tokenIndex124
					if buffer[position] != rune('T') {
						goto l112
					}
					position++
				}
			l124:
				if !_rules[rule_]() {
					goto l112
				}
				if !_rules[ruleIdentifier]() {
					goto l112
				}
				if !_rules[rule_]() {
					goto l112
				}
				if buffer[position] != rune('=') {
					goto l112
				}
				position++
				if !_rules[rule_]() {
					goto l112
				}
				if !_rules[ruleExpr]() {
					goto l112
				}
				add(ruleStrictVariable, position113)
			}
			return true
		l112:
			position, tokenIndex = position112, tokenIndex112
			return false
		},
		/* 16 Func <- <(('f' / 'F') ('u' / 'U') ('n' / 'N') ('c' / 'C') _ Identifier _ '(' _ FuncArgSeq? _ ')' _ '=' _ Expr)> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				{
					position128, tokenIndex128 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l129
					}
					position++
					goto l128
				l129:
					position, tokenIndex = position128, tokenIndex128
					if buffer[position] != rune('F') {
						goto l126
					}
					position++
				}
			l128:
				{
					position130, tokenIndex130 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l131
					}
					position++
					goto l130
				l131:
					position, tokenIndex = position130, tokenIndex130
					if buffer[position] != rune('U') {
						goto l126
					}
					position++
				}
			l130:
				{
					position132, tokenIndex132 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l133
					}
					position++
					goto l132
				l133:
					position, tokenIndex = position132, tokenIndex132
					if buffer[position] != rune('N') {
						goto l126
					}
					position++
				}
			l132:
				{
					position134, tokenIndex134 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l135
					}
					position++
					goto l134
				l135:
					position, tokenIndex = position134, tokenIndex134
					if buffer[position] != rune('C') {
						goto l126
					}
					position++
				}
			l134:
				if !_rules[rule_]() {
					goto l126
				}
				if !_rules[ruleIdentifier]() {
					goto l126
				}
				if !_rules[rule_]() {
					goto l126
				}
				if buffer[position] != rune('(') {
					goto l126
				}
				position++
				if !_rules[rule_]() {
					goto l126
				}
				{
					position136, tokenIndex136 := position, tokenIndex
					if !_rules[ruleFuncArgSeq]() {
						goto l136
					}
					goto l137
				l136:
					position, tokenIndex = position136, tokenIndex136
				}
			l137:
				if !_rules[rule_]() {
					goto l126
				}
				if buffer[position] != rune(')') {
					goto l126
				}
				position++
				if !_rules[rule_]() {
					goto l126
				}
				if buffer[position] != rune('=') {
					goto l126
				}
				position++
				if !_rules[rule_]() {
					goto l126
				}
				if !_rules[ruleExpr]() {
					goto l126
				}
				add(ruleFunc, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 17 FuncArg <- <(Identifier _ ':' _ GenericTypesAtom)> */
		func() bool {
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
				if !_rules[ruleIdentifier]() {
					goto l138
				}
				if !_rules[rule_]() {
					goto l138
				}
				if buffer[position] != rune(':') {
					goto l138
				}
				position++
				if !_rules[rule_]() {
					goto l138
				}
				if !_rules[ruleGenericTypesAtom]() {
					goto l138
				}
				add(ruleFuncArg, position139)
			}
			return true
		l138:
			position, tokenIndex = position138, tokenIndex138
			return false
		},
		/* 18 FuncArgSeq <- <(FuncArg (_ ',' _ FuncArgSeq)?)> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				if !_rules[ruleFuncArg]() {
					goto l140
				}
				{
					position142, tokenIndex142 := position, tokenIndex
					if !_rules[rule_]() {
						goto l142
					}
					if buffer[position] != rune(',') {
						goto l142
					}
					position++
					if !_rules[rule_]() {
						goto l142
					}
					if !_rules[ruleFuncArgSeq]() {
						goto l142
					}
					goto l143
				l142:
					position, tokenIndex = position142, tokenIndex142
				}
			l143:
				add(ruleFuncArgSeq, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 19 AnnotatedFunc <- <(AnnotationSeq _ Func)> */
		func() bool {
			position144, tokenIndex144 := position, tokenIndex
			{
				position145 := position
				if !_rules[ruleAnnotationSeq]() {
					goto l144
				}
				if !_rules[rule_]() {
					goto l144
				}
				if !_rules[ruleFunc]() {
					goto l144
				}
				add(ruleAnnotatedFunc, position145)
			}
			return true
		l144:
			position, tokenIndex = position144, tokenIndex144
			return false
		},
		/* 20 Annotation <- <('@' Identifier _ '(' _ IdentifierSeq _ ')')> */
		func() bool {
			position146, tokenIndex146 := position, tokenIndex
			{
				position147 := position
				if buffer[position] != rune('@') {
					goto l146
				}
				position++
				if !_rules[ruleIdentifier]() {
					goto l146
				}
				if !_rules[rule_]() {
					goto l146
				}
				if buffer[position] != rune('(') {
					goto l146
				}
				position++
				if !_rules[rule_]() {
					goto l146
				}
				if !_rules[ruleIdentifierSeq]() {
					goto l146
				}
				if !_rules[rule_]() {
					goto l146
				}
				if buffer[position] != rune(')') {
					goto l146
				}
				position++
				add(ruleAnnotation, position147)
			}
			return true
		l146:
			position, tokenIndex = position146, tokenIndex146
			return false
		},
		/* 21 IdentifierSeq <- <(Identifier (_ ',' _ IdentifierSeq)?)> */
		func() bool {
			position148, tokenIndex148 := position, tokenIndex
			{
				position149 := position
				if !_rules[ruleIdentifier]() {
					goto l148
				}
				{
					position150, tokenIndex150 := position, tokenIndex
					if !_rules[rule_]() {
						goto l150
					}
					if buffer[position] != rune(',') {
						goto l150
					}
					position++
					if !_rules[rule_]() {
						goto l150
					}
					if !_rules[ruleIdentifierSeq]() {
						goto l150
					}
					goto l151
				l150:
					position, tokenIndex = position150, tokenIndex150
				}
			l151:
				add(ruleIdentifierSeq, position149)
			}
			return true
		l148:
			position, tokenIndex = position148, tokenIndex148
			return false
		},
		/* 22 AnnotationSeq <- <(Annotation (_ AnnotationSeq)?)> */
		func() bool {
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				if !_rules[ruleAnnotation]() {
					goto l152
				}
				{
					position154, tokenIndex154 := position, tokenIndex
					if !_rules[rule_]() {
						goto l154
					}
					if !_rules[ruleAnnotationSeq]() {
						goto l154
					}
					goto l155
				l154:
					position, tokenIndex = position154, tokenIndex154
				}
			l155:
				add(ruleAnnotationSeq, position153)
			}
			return true
		l152:
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 23 OrOp <- <('|' '|')> */
		func() bool {
			position156, tokenIndex156 := position, tokenIndex
			{
				position157 := position
				if buffer[position] != rune('|') {
					goto l156
				}
				position++
				if buffer[position] != rune('|') {
					goto l156
				}
				position++
				add(ruleOrOp, position157)
			}
			return true
		l156:
			position, tokenIndex = position156, tokenIndex156
			return false
		},
		/* 24 AndOp <- <('&' '&')> */
		func() bool {
			position158, tokenIndex158 := position, tokenIndex
			{
				position159 := position
				if buffer[position] != rune('&') {
					goto l158
				}
				position++
				if buffer[position] != rune('&') {
					goto l158
				}
				position++
				add(ruleAndOp, position159)
			}
			return true
		l158:
			position, tokenIndex = position158, tokenIndex158
			return false
		},
		/* 25 EqGroupOp <- <(EqOp / NeOp)> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				{
					position162, tokenIndex162 := position, tokenIndex
					if !_rules[ruleEqOp]() {
						goto l163
					}
					goto l162
				l163:
					position, tokenIndex = position162, tokenIndex162
					if !_rules[ruleNeOp]() {
						goto l160
					}
				}
			l162:
				add(ruleEqGroupOp, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 26 EqOp <- <('=' '=')> */
		func() bool {
			position164, tokenIndex164 := position, tokenIndex
			{
				position165 := position
				if buffer[position] != rune('=') {
					goto l164
				}
				position++
				if buffer[position] != rune('=') {
					goto l164
				}
				position++
				add(ruleEqOp, position165)
			}
			return true
		l164:
			position, tokenIndex = position164, tokenIndex164
			return false
		},
		/* 27 NeOp <- <('!' '=')> */
		func() bool {
			position166, tokenIndex166 := position, tokenIndex
			{
				position167 := position
				if buffer[position] != rune('!') {
					goto l166
				}
				position++
				if buffer[position] != rune('=') {
					goto l166
				}
				position++
				add(ruleNeOp, position167)
			}
			return true
		l166:
			position, tokenIndex = position166, tokenIndex166
			return false
		},
		/* 28 CompareGroupOp <- <(GtOp / GeOp / LtOp / LeOp)> */
		func() bool {
			position168, tokenIndex168 := position, tokenIndex
			{
				position169 := position
				{
					position170, tokenIndex170 := position, tokenIndex
					if !_rules[ruleGtOp]() {
						goto l171
					}
					goto l170
				l171:
					position, tokenIndex = position170, tokenIndex170
					if !_rules[ruleGeOp]() {
						goto l172
					}
					goto l170
				l172:
					position, tokenIndex = position170, tokenIndex170
					if !_rules[ruleLtOp]() {
						goto l173
					}
					goto l170
				l173:
					position, tokenIndex = position170, tokenIndex170
					if !_rules[ruleLeOp]() {
						goto l168
					}
				}
			l170:
				add(ruleCompareGroupOp, position169)
			}
			return true
		l168:
			position, tokenIndex = position168, tokenIndex168
			return false
		},
		/* 29 GtOp <- <('>' !'=')> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				if buffer[position] != rune('>') {
					goto l174
				}
				position++
				{
					position176, tokenIndex176 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l176
					}
					position++
					goto l174
				l176:
					position, tokenIndex = position176, tokenIndex176
				}
				add(ruleGtOp, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 30 GeOp <- <('>' '=')> */
		func() bool {
			position177, tokenIndex177 := position, tokenIndex
			{
				position178 := position
				if buffer[position] != rune('>') {
					goto l177
				}
				position++
				if buffer[position] != rune('=') {
					goto l177
				}
				position++
				add(ruleGeOp, position178)
			}
			return true
		l177:
			position, tokenIndex = position177, tokenIndex177
			return false
		},
		/* 31 LtOp <- <('<' !'=')> */
		func() bool {
			position179, tokenIndex179 := position, tokenIndex
			{
				position180 := position
				if buffer[position] != rune('<') {
					goto l179
				}
				position++
				{
					position181, tokenIndex181 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l181
					}
					position++
					goto l179
				l181:
					position, tokenIndex = position181, tokenIndex181
				}
				add(ruleLtOp, position180)
			}
			return true
		l179:
			position, tokenIndex = position179, tokenIndex179
			return false
		},
		/* 32 LeOp <- <('<' '=')> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				if buffer[position] != rune('<') {
					goto l182
				}
				position++
				if buffer[position] != rune('=') {
					goto l182
				}
				position++
				add(ruleLeOp, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 33 ConsOp <- <(':' ':')> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				if buffer[position] != rune(':') {
					goto l184
				}
				position++
				if buffer[position] != rune(':') {
					goto l184
				}
				position++
				add(ruleConsOp, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 34 SumGroupOp <- <(SumOp / SubOp)> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				{
					position188, tokenIndex188 := position, tokenIndex
					if !_rules[ruleSumOp]() {
						goto l189
					}
					goto l188
				l189:
					position, tokenIndex = position188, tokenIndex188
					if !_rules[ruleSubOp]() {
						goto l186
					}
				}
			l188:
				add(ruleSumGroupOp, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 35 SumOp <- <'+'> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if buffer[position] != rune('+') {
					goto l190
				}
				position++
				add(ruleSumOp, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 36 SubOp <- <'-'> */
		func() bool {
			position192, tokenIndex192 := position, tokenIndex
			{
				position193 := position
				if buffer[position] != rune('-') {
					goto l192
				}
				position++
				add(ruleSubOp, position193)
			}
			return true
		l192:
			position, tokenIndex = position192, tokenIndex192
			return false
		},
		/* 37 MultGroupOp <- <(MulOp / DivOp / ModOp)> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
				{
					position196, tokenIndex196 := position, tokenIndex
					if !_rules[ruleMulOp]() {
						goto l197
					}
					goto l196
				l197:
					position, tokenIndex = position196, tokenIndex196
					if !_rules[ruleDivOp]() {
						goto l198
					}
					goto l196
				l198:
					position, tokenIndex = position196, tokenIndex196
					if !_rules[ruleModOp]() {
						goto l194
					}
				}
			l196:
				add(ruleMultGroupOp, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 38 MulOp <- <'*'> */
		func() bool {
			position199, tokenIndex199 := position, tokenIndex
			{
				position200 := position
				if buffer[position] != rune('*') {
					goto l199
				}
				position++
				add(ruleMulOp, position200)
			}
			return true
		l199:
			position, tokenIndex = position199, tokenIndex199
			return false
		},
		/* 39 DivOp <- <'/'> */
		func() bool {
			position201, tokenIndex201 := position, tokenIndex
			{
				position202 := position
				if buffer[position] != rune('/') {
					goto l201
				}
				position++
				add(ruleDivOp, position202)
			}
			return true
		l201:
			position, tokenIndex = position201, tokenIndex201
			return false
		},
		/* 40 ModOp <- <'%'> */
		func() bool {
			position203, tokenIndex203 := position, tokenIndex
			{
				position204 := position
				if buffer[position] != rune('%') {
					goto l203
				}
				position++
				add(ruleModOp, position204)
			}
			return true
		l203:
			position, tokenIndex = position203, tokenIndex203
			return false
		},
		/* 41 UnaryOp <- <(PositiveOp / NegativeOp / NotOp)> */
		func() bool {
			position205, tokenIndex205 := position, tokenIndex
			{
				position206 := position
				{
					position207, tokenIndex207 := position, tokenIndex
					if !_rules[rulePositiveOp]() {
						goto l208
					}
					goto l207
				l208:
					position, tokenIndex = position207, tokenIndex207
					if !_rules[ruleNegativeOp]() {
						goto l209
					}
					goto l207
				l209:
					position, tokenIndex = position207, tokenIndex207
					if !_rules[ruleNotOp]() {
						goto l205
					}
				}
			l207:
				add(ruleUnaryOp, position206)
			}
			return true
		l205:
			position, tokenIndex = position205, tokenIndex205
			return false
		},
		/* 42 PositiveOp <- <'+'> */
		func() bool {
			position210, tokenIndex210 := position, tokenIndex
			{
				position211 := position
				if buffer[position] != rune('+') {
					goto l210
				}
				position++
				add(rulePositiveOp, position211)
			}
			return true
		l210:
			position, tokenIndex = position210, tokenIndex210
			return false
		},
		/* 43 NegativeOp <- <('-' !'#')> */
		func() bool {
			position212, tokenIndex212 := position, tokenIndex
			{
				position213 := position
				if buffer[position] != rune('-') {
					goto l212
				}
				position++
				{
					position214, tokenIndex214 := position, tokenIndex
					if buffer[position] != rune('#') {
						goto l214
					}
					position++
					goto l212
				l214:
					position, tokenIndex = position214, tokenIndex214
				}
				add(ruleNegativeOp, position213)
			}
			return true
		l212:
			position, tokenIndex = position212, tokenIndex212
			return false
		},
		/* 44 NotOp <- <'!'> */
		func() bool {
			position215, tokenIndex215 := position, tokenIndex
			{
				position216 := position
				if buffer[position] != rune('!') {
					goto l215
				}
				position++
				add(ruleNotOp, position216)
			}
			return true
		l215:
			position, tokenIndex = position215, tokenIndex215
			return false
		},
		/* 45 ReservedWords <- <((('l' / 'L') ('e' / 'E') ('t' / 'T')) / (('s' / 'S') ('t' / 'T') ('r' / 'R') ('i' / 'I') ('c' / 'C') ('t' / 'T')) / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '1' '6') / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '5' '8') / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '6' '4') / (('t' / 'T') ('r' / 'R') ('u' / 'U') ('e' / 'E')) / (('f' / 'F') ('a' / 'A') ('l' / 'L') ('s' / 'S') ('e' / 'E')) / (('i' / 'I') ('f' / 'F')) / (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) / (('e' / 'E') ('l' / 'L') ('s' / 'S') ('e' / 'E')) / (('m' / 'M') ('a' / 'A') ('t' / 'T') ('c' / 'C') ('h' / 'H')) / (('c' / 'C') ('a' / 'A') ('s' / 'S') ('e' / 'E')) / (('f' / 'F') ('u' / 'U') ('n' / 'N') ('c' / 'C')) / (('f' / 'F') ('o' / 'O') ('l' / 'L') ('d' / 'D')))> */
		func() bool {
			position217, tokenIndex217 := position, tokenIndex
			{
				position218 := position
				{
					position219, tokenIndex219 := position, tokenIndex
					{
						position221, tokenIndex221 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l222
						}
						position++
						goto l221
					l222:
						position, tokenIndex = position221, tokenIndex221
						if buffer[position] != rune('L') {
							goto l220
						}
						position++
					}
				l221:
					{
						position223, tokenIndex223 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l224
						}
						position++
						goto l223
					l224:
						position, tokenIndex = position223, tokenIndex223
						if buffer[position] != rune('E') {
							goto l220
						}
						position++
					}
				l223:
					{
						position225, tokenIndex225 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l226
						}
						position++
						goto l225
					l226:
						position, tokenIndex = position225, tokenIndex225
						if buffer[position] != rune('T') {
							goto l220
						}
						position++
					}
				l225:
					goto l219
				l220:
					position, tokenIndex = position219, tokenIndex219
					{
						position228, tokenIndex228 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l229
						}
						position++
						goto l228
					l229:
						position, tokenIndex = position228, tokenIndex228
						if buffer[position] != rune('S') {
							goto l227
						}
						position++
					}
				l228:
					{
						position230, tokenIndex230 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l231
						}
						position++
						goto l230
					l231:
						position, tokenIndex = position230, tokenIndex230
						if buffer[position] != rune('T') {
							goto l227
						}
						position++
					}
				l230:
					{
						position232, tokenIndex232 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l233
						}
						position++
						goto l232
					l233:
						position, tokenIndex = position232, tokenIndex232
						if buffer[position] != rune('R') {
							goto l227
						}
						position++
					}
				l232:
					{
						position234, tokenIndex234 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l235
						}
						position++
						goto l234
					l235:
						position, tokenIndex = position234, tokenIndex234
						if buffer[position] != rune('I') {
							goto l227
						}
						position++
					}
				l234:
					{
						position236, tokenIndex236 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l237
						}
						position++
						goto l236
					l237:
						position, tokenIndex = position236, tokenIndex236
						if buffer[position] != rune('C') {
							goto l227
						}
						position++
					}
				l236:
					{
						position238, tokenIndex238 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l239
						}
						position++
						goto l238
					l239:
						position, tokenIndex = position238, tokenIndex238
						if buffer[position] != rune('T') {
							goto l227
						}
						position++
					}
				l238:
					goto l219
				l227:
					position, tokenIndex = position219, tokenIndex219
					{
						position241, tokenIndex241 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l242
						}
						position++
						goto l241
					l242:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('B') {
							goto l240
						}
						position++
					}
				l241:
					{
						position243, tokenIndex243 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l244
						}
						position++
						goto l243
					l244:
						position, tokenIndex = position243, tokenIndex243
						if buffer[position] != rune('A') {
							goto l240
						}
						position++
					}
				l243:
					{
						position245, tokenIndex245 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l246
						}
						position++
						goto l245
					l246:
						position, tokenIndex = position245, tokenIndex245
						if buffer[position] != rune('S') {
							goto l240
						}
						position++
					}
				l245:
					{
						position247, tokenIndex247 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l248
						}
						position++
						goto l247
					l248:
						position, tokenIndex = position247, tokenIndex247
						if buffer[position] != rune('E') {
							goto l240
						}
						position++
					}
				l247:
					if buffer[position] != rune('1') {
						goto l240
					}
					position++
					if buffer[position] != rune('6') {
						goto l240
					}
					position++
					goto l219
				l240:
					position, tokenIndex = position219, tokenIndex219
					{
						position250, tokenIndex250 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l251
						}
						position++
						goto l250
					l251:
						position, tokenIndex = position250, tokenIndex250
						if buffer[position] != rune('B') {
							goto l249
						}
						position++
					}
				l250:
					{
						position252, tokenIndex252 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l253
						}
						position++
						goto l252
					l253:
						position, tokenIndex = position252, tokenIndex252
						if buffer[position] != rune('A') {
							goto l249
						}
						position++
					}
				l252:
					{
						position254, tokenIndex254 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l255
						}
						position++
						goto l254
					l255:
						position, tokenIndex = position254, tokenIndex254
						if buffer[position] != rune('S') {
							goto l249
						}
						position++
					}
				l254:
					{
						position256, tokenIndex256 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l257
						}
						position++
						goto l256
					l257:
						position, tokenIndex = position256, tokenIndex256
						if buffer[position] != rune('E') {
							goto l249
						}
						position++
					}
				l256:
					if buffer[position] != rune('5') {
						goto l249
					}
					position++
					if buffer[position] != rune('8') {
						goto l249
					}
					position++
					goto l219
				l249:
					position, tokenIndex = position219, tokenIndex219
					{
						position259, tokenIndex259 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l260
						}
						position++
						goto l259
					l260:
						position, tokenIndex = position259, tokenIndex259
						if buffer[position] != rune('B') {
							goto l258
						}
						position++
					}
				l259:
					{
						position261, tokenIndex261 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l262
						}
						position++
						goto l261
					l262:
						position, tokenIndex = position261, tokenIndex261
						if buffer[position] != rune('A') {
							goto l258
						}
						position++
					}
				l261:
					{
						position263, tokenIndex263 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l264
						}
						position++
						goto l263
					l264:
						position, tokenIndex = position263, tokenIndex263
						if buffer[position] != rune('S') {
							goto l258
						}
						position++
					}
				l263:
					{
						position265, tokenIndex265 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l266
						}
						position++
						goto l265
					l266:
						position, tokenIndex = position265, tokenIndex265
						if buffer[position] != rune('E') {
							goto l258
						}
						position++
					}
				l265:
					if buffer[position] != rune('6') {
						goto l258
					}
					position++
					if buffer[position] != rune('4') {
						goto l258
					}
					position++
					goto l219
				l258:
					position, tokenIndex = position219, tokenIndex219
					{
						position268, tokenIndex268 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l269
						}
						position++
						goto l268
					l269:
						position, tokenIndex = position268, tokenIndex268
						if buffer[position] != rune('T') {
							goto l267
						}
						position++
					}
				l268:
					{
						position270, tokenIndex270 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l271
						}
						position++
						goto l270
					l271:
						position, tokenIndex = position270, tokenIndex270
						if buffer[position] != rune('R') {
							goto l267
						}
						position++
					}
				l270:
					{
						position272, tokenIndex272 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l273
						}
						position++
						goto l272
					l273:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('U') {
							goto l267
						}
						position++
					}
				l272:
					{
						position274, tokenIndex274 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l275
						}
						position++
						goto l274
					l275:
						position, tokenIndex = position274, tokenIndex274
						if buffer[position] != rune('E') {
							goto l267
						}
						position++
					}
				l274:
					goto l219
				l267:
					position, tokenIndex = position219, tokenIndex219
					{
						position277, tokenIndex277 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l278
						}
						position++
						goto l277
					l278:
						position, tokenIndex = position277, tokenIndex277
						if buffer[position] != rune('F') {
							goto l276
						}
						position++
					}
				l277:
					{
						position279, tokenIndex279 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l280
						}
						position++
						goto l279
					l280:
						position, tokenIndex = position279, tokenIndex279
						if buffer[position] != rune('A') {
							goto l276
						}
						position++
					}
				l279:
					{
						position281, tokenIndex281 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l282
						}
						position++
						goto l281
					l282:
						position, tokenIndex = position281, tokenIndex281
						if buffer[position] != rune('L') {
							goto l276
						}
						position++
					}
				l281:
					{
						position283, tokenIndex283 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l284
						}
						position++
						goto l283
					l284:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('S') {
							goto l276
						}
						position++
					}
				l283:
					{
						position285, tokenIndex285 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l286
						}
						position++
						goto l285
					l286:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('E') {
							goto l276
						}
						position++
					}
				l285:
					goto l219
				l276:
					position, tokenIndex = position219, tokenIndex219
					{
						position288, tokenIndex288 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l289
						}
						position++
						goto l288
					l289:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('I') {
							goto l287
						}
						position++
					}
				l288:
					{
						position290, tokenIndex290 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l291
						}
						position++
						goto l290
					l291:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('F') {
							goto l287
						}
						position++
					}
				l290:
					goto l219
				l287:
					position, tokenIndex = position219, tokenIndex219
					{
						position293, tokenIndex293 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l294
						}
						position++
						goto l293
					l294:
						position, tokenIndex = position293, tokenIndex293
						if buffer[position] != rune('T') {
							goto l292
						}
						position++
					}
				l293:
					{
						position295, tokenIndex295 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l296
						}
						position++
						goto l295
					l296:
						position, tokenIndex = position295, tokenIndex295
						if buffer[position] != rune('H') {
							goto l292
						}
						position++
					}
				l295:
					{
						position297, tokenIndex297 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l298
						}
						position++
						goto l297
					l298:
						position, tokenIndex = position297, tokenIndex297
						if buffer[position] != rune('E') {
							goto l292
						}
						position++
					}
				l297:
					{
						position299, tokenIndex299 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l300
						}
						position++
						goto l299
					l300:
						position, tokenIndex = position299, tokenIndex299
						if buffer[position] != rune('N') {
							goto l292
						}
						position++
					}
				l299:
					goto l219
				l292:
					position, tokenIndex = position219, tokenIndex219
					{
						position302, tokenIndex302 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l303
						}
						position++
						goto l302
					l303:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('E') {
							goto l301
						}
						position++
					}
				l302:
					{
						position304, tokenIndex304 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l305
						}
						position++
						goto l304
					l305:
						position, tokenIndex = position304, tokenIndex304
						if buffer[position] != rune('L') {
							goto l301
						}
						position++
					}
				l304:
					{
						position306, tokenIndex306 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l307
						}
						position++
						goto l306
					l307:
						position, tokenIndex = position306, tokenIndex306
						if buffer[position] != rune('S') {
							goto l301
						}
						position++
					}
				l306:
					{
						position308, tokenIndex308 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l309
						}
						position++
						goto l308
					l309:
						position, tokenIndex = position308, tokenIndex308
						if buffer[position] != rune('E') {
							goto l301
						}
						position++
					}
				l308:
					goto l219
				l301:
					position, tokenIndex = position219, tokenIndex219
					{
						position311, tokenIndex311 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l312
						}
						position++
						goto l311
					l312:
						position, tokenIndex = position311, tokenIndex311
						if buffer[position] != rune('M') {
							goto l310
						}
						position++
					}
				l311:
					{
						position313, tokenIndex313 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l314
						}
						position++
						goto l313
					l314:
						position, tokenIndex = position313, tokenIndex313
						if buffer[position] != rune('A') {
							goto l310
						}
						position++
					}
				l313:
					{
						position315, tokenIndex315 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l316
						}
						position++
						goto l315
					l316:
						position, tokenIndex = position315, tokenIndex315
						if buffer[position] != rune('T') {
							goto l310
						}
						position++
					}
				l315:
					{
						position317, tokenIndex317 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l318
						}
						position++
						goto l317
					l318:
						position, tokenIndex = position317, tokenIndex317
						if buffer[position] != rune('C') {
							goto l310
						}
						position++
					}
				l317:
					{
						position319, tokenIndex319 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l320
						}
						position++
						goto l319
					l320:
						position, tokenIndex = position319, tokenIndex319
						if buffer[position] != rune('H') {
							goto l310
						}
						position++
					}
				l319:
					goto l219
				l310:
					position, tokenIndex = position219, tokenIndex219
					{
						position322, tokenIndex322 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l323
						}
						position++
						goto l322
					l323:
						position, tokenIndex = position322, tokenIndex322
						if buffer[position] != rune('C') {
							goto l321
						}
						position++
					}
				l322:
					{
						position324, tokenIndex324 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l325
						}
						position++
						goto l324
					l325:
						position, tokenIndex = position324, tokenIndex324
						if buffer[position] != rune('A') {
							goto l321
						}
						position++
					}
				l324:
					{
						position326, tokenIndex326 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l327
						}
						position++
						goto l326
					l327:
						position, tokenIndex = position326, tokenIndex326
						if buffer[position] != rune('S') {
							goto l321
						}
						position++
					}
				l326:
					{
						position328, tokenIndex328 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l329
						}
						position++
						goto l328
					l329:
						position, tokenIndex = position328, tokenIndex328
						if buffer[position] != rune('E') {
							goto l321
						}
						position++
					}
				l328:
					goto l219
				l321:
					position, tokenIndex = position219, tokenIndex219
					{
						position331, tokenIndex331 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l332
						}
						position++
						goto l331
					l332:
						position, tokenIndex = position331, tokenIndex331
						if buffer[position] != rune('F') {
							goto l330
						}
						position++
					}
				l331:
					{
						position333, tokenIndex333 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l334
						}
						position++
						goto l333
					l334:
						position, tokenIndex = position333, tokenIndex333
						if buffer[position] != rune('U') {
							goto l330
						}
						position++
					}
				l333:
					{
						position335, tokenIndex335 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l336
						}
						position++
						goto l335
					l336:
						position, tokenIndex = position335, tokenIndex335
						if buffer[position] != rune('N') {
							goto l330
						}
						position++
					}
				l335:
					{
						position337, tokenIndex337 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l338
						}
						position++
						goto l337
					l338:
						position, tokenIndex = position337, tokenIndex337
						if buffer[position] != rune('C') {
							goto l330
						}
						position++
					}
				l337:
					goto l219
				l330:
					position, tokenIndex = position219, tokenIndex219
					{
						position339, tokenIndex339 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l340
						}
						position++
						goto l339
					l340:
						position, tokenIndex = position339, tokenIndex339
						if buffer[position] != rune('F') {
							goto l217
						}
						position++
					}
				l339:
					{
						position341, tokenIndex341 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l342
						}
						position++
						goto l341
					l342:
						position, tokenIndex = position341, tokenIndex341
						if buffer[position] != rune('O') {
							goto l217
						}
						position++
					}
				l341:
					{
						position343, tokenIndex343 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l344
						}
						position++
						goto l343
					l344:
						position, tokenIndex = position343, tokenIndex343
						if buffer[position] != rune('L') {
							goto l217
						}
						position++
					}
				l343:
					{
						position345, tokenIndex345 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l346
						}
						position++
						goto l345
					l346:
						position, tokenIndex = position345, tokenIndex345
						if buffer[position] != rune('D') {
							goto l217
						}
						position++
					}
				l345:
				}
			l219:
				add(ruleReservedWords, position218)
			}
			return true
		l217:
			position, tokenIndex = position217, tokenIndex217
			return false
		},
		/* 46 Const <- <(Integer / String / ByteVector / Boolean / List)> */
		func() bool {
			position347, tokenIndex347 := position, tokenIndex
			{
				position348 := position
				{
					position349, tokenIndex349 := position, tokenIndex
					if !_rules[ruleInteger]() {
						goto l350
					}
					goto l349
				l350:
					position, tokenIndex = position349, tokenIndex349
					if !_rules[ruleString]() {
						goto l351
					}
					goto l349
				l351:
					position, tokenIndex = position349, tokenIndex349
					if !_rules[ruleByteVector]() {
						goto l352
					}
					goto l349
				l352:
					position, tokenIndex = position349, tokenIndex349
					if !_rules[ruleBoolean]() {
						goto l353
					}
					goto l349
				l353:
					position, tokenIndex = position349, tokenIndex349
					if !_rules[ruleList]() {
						goto l347
					}
				}
			l349:
				add(ruleConst, position348)
			}
			return true
		l347:
			position, tokenIndex = position347, tokenIndex347
			return false
		},
		/* 47 Identifier <- <((!ReservedWords ([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])*) / (ReservedWords ([A-Z] / [a-z] / [0-9])+))> */
		func() bool {
			position354, tokenIndex354 := position, tokenIndex
			{
				position355 := position
				{
					position356, tokenIndex356 := position, tokenIndex
					{
						position358, tokenIndex358 := position, tokenIndex
						if !_rules[ruleReservedWords]() {
							goto l358
						}
						goto l357
					l358:
						position, tokenIndex = position358, tokenIndex358
					}
					{
						position359, tokenIndex359 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l360
						}
						position++
						goto l359
					l360:
						position, tokenIndex = position359, tokenIndex359
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l357
						}
						position++
					}
				l359:
				l361:
					{
						position362, tokenIndex362 := position, tokenIndex
						{
							position363, tokenIndex363 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l364
							}
							position++
							goto l363
						l364:
							position, tokenIndex = position363, tokenIndex363
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l365
							}
							position++
							goto l363
						l365:
							position, tokenIndex = position363, tokenIndex363
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l362
							}
							position++
						}
					l363:
						goto l361
					l362:
						position, tokenIndex = position362, tokenIndex362
					}
					goto l356
				l357:
					position, tokenIndex = position356, tokenIndex356
					if !_rules[ruleReservedWords]() {
						goto l354
					}
					{
						position368, tokenIndex368 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l369
						}
						position++
						goto l368
					l369:
						position, tokenIndex = position368, tokenIndex368
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l370
						}
						position++
						goto l368
					l370:
						position, tokenIndex = position368, tokenIndex368
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l354
						}
						position++
					}
				l368:
				l366:
					{
						position367, tokenIndex367 := position, tokenIndex
						{
							position371, tokenIndex371 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l372
							}
							position++
							goto l371
						l372:
							position, tokenIndex = position371, tokenIndex371
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l373
							}
							position++
							goto l371
						l373:
							position, tokenIndex = position371, tokenIndex371
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l367
							}
							position++
						}
					l371:
						goto l366
					l367:
						position, tokenIndex = position367, tokenIndex367
					}
				}
			l356:
				add(ruleIdentifier, position355)
			}
			return true
		l354:
			position, tokenIndex = position354, tokenIndex354
			return false
		},
		/* 48 GenericTypesAtom <- <(OneGenericTypeAtom ((_ '|' _ GenericTypesAtom) / OneGenericTypeAtom)?)> */
		func() bool {
			position374, tokenIndex374 := position, tokenIndex
			{
				position375 := position
				if !_rules[ruleOneGenericTypeAtom]() {
					goto l374
				}
				{
					position376, tokenIndex376 := position, tokenIndex
					{
						position378, tokenIndex378 := position, tokenIndex
						if !_rules[rule_]() {
							goto l379
						}
						if buffer[position] != rune('|') {
							goto l379
						}
						position++
						if !_rules[rule_]() {
							goto l379
						}
						if !_rules[ruleGenericTypesAtom]() {
							goto l379
						}
						goto l378
					l379:
						position, tokenIndex = position378, tokenIndex378
						if !_rules[ruleOneGenericTypeAtom]() {
							goto l376
						}
					}
				l378:
					goto l377
				l376:
					position, tokenIndex = position376, tokenIndex376
				}
			l377:
				add(ruleGenericTypesAtom, position375)
			}
			return true
		l374:
			position, tokenIndex = position374, tokenIndex374
			return false
		},
		/* 49 OneGenericTypeAtom <- <(([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])* (_ '[' _ OneTypeAtom _ ']' _)?)> */
		func() bool {
			position380, tokenIndex380 := position, tokenIndex
			{
				position381 := position
				{
					position382, tokenIndex382 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l383
					}
					position++
					goto l382
				l383:
					position, tokenIndex = position382, tokenIndex382
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l380
					}
					position++
				}
			l382:
			l384:
				{
					position385, tokenIndex385 := position, tokenIndex
					{
						position386, tokenIndex386 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l387
						}
						position++
						goto l386
					l387:
						position, tokenIndex = position386, tokenIndex386
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l388
						}
						position++
						goto l386
					l388:
						position, tokenIndex = position386, tokenIndex386
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l385
						}
						position++
					}
				l386:
					goto l384
				l385:
					position, tokenIndex = position385, tokenIndex385
				}
				{
					position389, tokenIndex389 := position, tokenIndex
					if !_rules[rule_]() {
						goto l389
					}
					if buffer[position] != rune('[') {
						goto l389
					}
					position++
					if !_rules[rule_]() {
						goto l389
					}
					if !_rules[ruleOneTypeAtom]() {
						goto l389
					}
					if !_rules[rule_]() {
						goto l389
					}
					if buffer[position] != rune(']') {
						goto l389
					}
					position++
					if !_rules[rule_]() {
						goto l389
					}
					goto l390
				l389:
					position, tokenIndex = position389, tokenIndex389
				}
			l390:
				add(ruleOneGenericTypeAtom, position381)
			}
			return true
		l380:
			position, tokenIndex = position380, tokenIndex380
			return false
		},
		/* 50 TypesAtom <- <(OneTypeAtom ((_ '|' _ TypesAtom) / OneTypeAtom)?)> */
		func() bool {
			position391, tokenIndex391 := position, tokenIndex
			{
				position392 := position
				if !_rules[ruleOneTypeAtom]() {
					goto l391
				}
				{
					position393, tokenIndex393 := position, tokenIndex
					{
						position395, tokenIndex395 := position, tokenIndex
						if !_rules[rule_]() {
							goto l396
						}
						if buffer[position] != rune('|') {
							goto l396
						}
						position++
						if !_rules[rule_]() {
							goto l396
						}
						if !_rules[ruleTypesAtom]() {
							goto l396
						}
						goto l395
					l396:
						position, tokenIndex = position395, tokenIndex395
						if !_rules[ruleOneTypeAtom]() {
							goto l393
						}
					}
				l395:
					goto l394
				l393:
					position, tokenIndex = position393, tokenIndex393
				}
			l394:
				add(ruleTypesAtom, position392)
			}
			return true
		l391:
			position, tokenIndex = position391, tokenIndex391
			return false
		},
		/* 51 OneTypeAtom <- <(([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])*)> */
		func() bool {
			position397, tokenIndex397 := position, tokenIndex
			{
				position398 := position
				{
					position399, tokenIndex399 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l400
					}
					position++
					goto l399
				l400:
					position, tokenIndex = position399, tokenIndex399
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l397
					}
					position++
				}
			l399:
			l401:
				{
					position402, tokenIndex402 := position, tokenIndex
					{
						position403, tokenIndex403 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l404
						}
						position++
						goto l403
					l404:
						position, tokenIndex = position403, tokenIndex403
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l405
						}
						position++
						goto l403
					l405:
						position, tokenIndex = position403, tokenIndex403
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l402
						}
						position++
					}
				l403:
					goto l401
				l402:
					position, tokenIndex = position402, tokenIndex402
				}
				add(ruleOneTypeAtom, position398)
			}
			return true
		l397:
			position, tokenIndex = position397, tokenIndex397
			return false
		},
		/* 52 Base16 <- <(('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '1' '6' '\'' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')* '\'')> */
		func() bool {
			position406, tokenIndex406 := position, tokenIndex
			{
				position407 := position
				{
					position408, tokenIndex408 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l409
					}
					position++
					goto l408
				l409:
					position, tokenIndex = position408, tokenIndex408
					if buffer[position] != rune('B') {
						goto l406
					}
					position++
				}
			l408:
				{
					position410, tokenIndex410 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l411
					}
					position++
					goto l410
				l411:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('A') {
						goto l406
					}
					position++
				}
			l410:
				{
					position412, tokenIndex412 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l413
					}
					position++
					goto l412
				l413:
					position, tokenIndex = position412, tokenIndex412
					if buffer[position] != rune('S') {
						goto l406
					}
					position++
				}
			l412:
				{
					position414, tokenIndex414 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l415
					}
					position++
					goto l414
				l415:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('E') {
						goto l406
					}
					position++
				}
			l414:
				if buffer[position] != rune('1') {
					goto l406
				}
				position++
				if buffer[position] != rune('6') {
					goto l406
				}
				position++
				if buffer[position] != rune('\'') {
					goto l406
				}
				position++
			l416:
				{
					position417, tokenIndex417 := position, tokenIndex
					{
						position418, tokenIndex418 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l419
						}
						position++
						goto l418
					l419:
						position, tokenIndex = position418, tokenIndex418
						if buffer[position] != rune('A') {
							goto l420
						}
						position++
						goto l418
					l420:
						position, tokenIndex = position418, tokenIndex418
						if buffer[position] != rune('B') {
							goto l421
						}
						position++
						goto l418
					l421:
						position, tokenIndex = position418, tokenIndex418
						if buffer[position] != rune('C') {
							goto l422
						}
						position++
						goto l418
					l422:
						position, tokenIndex = position418, tokenIndex418
						if buffer[position] != rune('D') {
							goto l423
						}
						position++
						goto l418
					l423:
						position, tokenIndex = position418, tokenIndex418
						if buffer[position] != rune('E') {
							goto l424
						}
						position++
						goto l418
					l424:
						position, tokenIndex = position418, tokenIndex418
						if buffer[position] != rune('F') {
							goto l425
						}
						position++
						goto l418
					l425:
						position, tokenIndex = position418, tokenIndex418
						if buffer[position] != rune('a') {
							goto l426
						}
						position++
						goto l418
					l426:
						position, tokenIndex = position418, tokenIndex418
						if buffer[position] != rune('b') {
							goto l427
						}
						position++
						goto l418
					l427:
						position, tokenIndex = position418, tokenIndex418
						if buffer[position] != rune('c') {
							goto l428
						}
						position++
						goto l418
					l428:
						position, tokenIndex = position418, tokenIndex418
						if buffer[position] != rune('d') {
							goto l429
						}
						position++
						goto l418
					l429:
						position, tokenIndex = position418, tokenIndex418
						if buffer[position] != rune('e') {
							goto l430
						}
						position++
						goto l418
					l430:
						position, tokenIndex = position418, tokenIndex418
						if buffer[position] != rune('f') {
							goto l417
						}
						position++
					}
				l418:
					goto l416
				l417:
					position, tokenIndex = position417, tokenIndex417
				}
				if buffer[position] != rune('\'') {
					goto l406
				}
				position++
				add(ruleBase16, position407)
			}
			return true
		l406:
			position, tokenIndex = position406, tokenIndex406
			return false
		},
		/* 53 Base58 <- <(('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '5' '8' '\'' ('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'J' / 'K' / 'L' / 'M' / 'N' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z')* '\'')> */
		func() bool {
			position431, tokenIndex431 := position, tokenIndex
			{
				position432 := position
				{
					position433, tokenIndex433 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l434
					}
					position++
					goto l433
				l434:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('B') {
						goto l431
					}
					position++
				}
			l433:
				{
					position435, tokenIndex435 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l436
					}
					position++
					goto l435
				l436:
					position, tokenIndex = position435, tokenIndex435
					if buffer[position] != rune('A') {
						goto l431
					}
					position++
				}
			l435:
				{
					position437, tokenIndex437 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l438
					}
					position++
					goto l437
				l438:
					position, tokenIndex = position437, tokenIndex437
					if buffer[position] != rune('S') {
						goto l431
					}
					position++
				}
			l437:
				{
					position439, tokenIndex439 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l440
					}
					position++
					goto l439
				l440:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('E') {
						goto l431
					}
					position++
				}
			l439:
				if buffer[position] != rune('5') {
					goto l431
				}
				position++
				if buffer[position] != rune('8') {
					goto l431
				}
				position++
				if buffer[position] != rune('\'') {
					goto l431
				}
				position++
			l441:
				{
					position442, tokenIndex442 := position, tokenIndex
					{
						position443, tokenIndex443 := position, tokenIndex
						if buffer[position] != rune('1') {
							goto l444
						}
						position++
						goto l443
					l444:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('2') {
							goto l445
						}
						position++
						goto l443
					l445:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('3') {
							goto l446
						}
						position++
						goto l443
					l446:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('4') {
							goto l447
						}
						position++
						goto l443
					l447:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('5') {
							goto l448
						}
						position++
						goto l443
					l448:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('6') {
							goto l449
						}
						position++
						goto l443
					l449:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('7') {
							goto l450
						}
						position++
						goto l443
					l450:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('8') {
							goto l451
						}
						position++
						goto l443
					l451:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('9') {
							goto l452
						}
						position++
						goto l443
					l452:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('A') {
							goto l453
						}
						position++
						goto l443
					l453:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('B') {
							goto l454
						}
						position++
						goto l443
					l454:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('C') {
							goto l455
						}
						position++
						goto l443
					l455:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('D') {
							goto l456
						}
						position++
						goto l443
					l456:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('E') {
							goto l457
						}
						position++
						goto l443
					l457:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('F') {
							goto l458
						}
						position++
						goto l443
					l458:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('G') {
							goto l459
						}
						position++
						goto l443
					l459:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('H') {
							goto l460
						}
						position++
						goto l443
					l460:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('J') {
							goto l461
						}
						position++
						goto l443
					l461:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('K') {
							goto l462
						}
						position++
						goto l443
					l462:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('L') {
							goto l463
						}
						position++
						goto l443
					l463:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('M') {
							goto l464
						}
						position++
						goto l443
					l464:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('N') {
							goto l465
						}
						position++
						goto l443
					l465:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('P') {
							goto l466
						}
						position++
						goto l443
					l466:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('Q') {
							goto l467
						}
						position++
						goto l443
					l467:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('R') {
							goto l468
						}
						position++
						goto l443
					l468:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('S') {
							goto l469
						}
						position++
						goto l443
					l469:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('T') {
							goto l470
						}
						position++
						goto l443
					l470:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('U') {
							goto l471
						}
						position++
						goto l443
					l471:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('V') {
							goto l472
						}
						position++
						goto l443
					l472:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('W') {
							goto l473
						}
						position++
						goto l443
					l473:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('X') {
							goto l474
						}
						position++
						goto l443
					l474:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('Y') {
							goto l475
						}
						position++
						goto l443
					l475:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('Z') {
							goto l476
						}
						position++
						goto l443
					l476:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('a') {
							goto l477
						}
						position++
						goto l443
					l477:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('b') {
							goto l478
						}
						position++
						goto l443
					l478:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('c') {
							goto l479
						}
						position++
						goto l443
					l479:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('d') {
							goto l480
						}
						position++
						goto l443
					l480:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('e') {
							goto l481
						}
						position++
						goto l443
					l481:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('f') {
							goto l482
						}
						position++
						goto l443
					l482:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('g') {
							goto l483
						}
						position++
						goto l443
					l483:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('h') {
							goto l484
						}
						position++
						goto l443
					l484:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('i') {
							goto l485
						}
						position++
						goto l443
					l485:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('j') {
							goto l486
						}
						position++
						goto l443
					l486:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('k') {
							goto l487
						}
						position++
						goto l443
					l487:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('m') {
							goto l488
						}
						position++
						goto l443
					l488:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('n') {
							goto l489
						}
						position++
						goto l443
					l489:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('o') {
							goto l490
						}
						position++
						goto l443
					l490:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('p') {
							goto l491
						}
						position++
						goto l443
					l491:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('q') {
							goto l492
						}
						position++
						goto l443
					l492:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('r') {
							goto l493
						}
						position++
						goto l443
					l493:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('s') {
							goto l494
						}
						position++
						goto l443
					l494:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('t') {
							goto l495
						}
						position++
						goto l443
					l495:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('u') {
							goto l496
						}
						position++
						goto l443
					l496:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('v') {
							goto l497
						}
						position++
						goto l443
					l497:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('w') {
							goto l498
						}
						position++
						goto l443
					l498:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('x') {
							goto l499
						}
						position++
						goto l443
					l499:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('y') {
							goto l500
						}
						position++
						goto l443
					l500:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('z') {
							goto l442
						}
						position++
					}
				l443:
					goto l441
				l442:
					position, tokenIndex = position442, tokenIndex442
				}
				if buffer[position] != rune('\'') {
					goto l431
				}
				position++
				add(ruleBase58, position432)
			}
			return true
		l431:
			position, tokenIndex = position431, tokenIndex431
			return false
		},
		/* 54 Base64 <- <(('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '6' '4' '\'' ('A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'I' / 'J' / 'K' / 'L' / 'M' / 'N' / 'O' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '0' / '1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / '+' / '/' / '=')* '\'')> */
		func() bool {
			position501, tokenIndex501 := position, tokenIndex
			{
				position502 := position
				{
					position503, tokenIndex503 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l504
					}
					position++
					goto l503
				l504:
					position, tokenIndex = position503, tokenIndex503
					if buffer[position] != rune('B') {
						goto l501
					}
					position++
				}
			l503:
				{
					position505, tokenIndex505 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l506
					}
					position++
					goto l505
				l506:
					position, tokenIndex = position505, tokenIndex505
					if buffer[position] != rune('A') {
						goto l501
					}
					position++
				}
			l505:
				{
					position507, tokenIndex507 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l508
					}
					position++
					goto l507
				l508:
					position, tokenIndex = position507, tokenIndex507
					if buffer[position] != rune('S') {
						goto l501
					}
					position++
				}
			l507:
				{
					position509, tokenIndex509 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l510
					}
					position++
					goto l509
				l510:
					position, tokenIndex = position509, tokenIndex509
					if buffer[position] != rune('E') {
						goto l501
					}
					position++
				}
			l509:
				if buffer[position] != rune('6') {
					goto l501
				}
				position++
				if buffer[position] != rune('4') {
					goto l501
				}
				position++
				if buffer[position] != rune('\'') {
					goto l501
				}
				position++
			l511:
				{
					position512, tokenIndex512 := position, tokenIndex
					{
						position513, tokenIndex513 := position, tokenIndex
						if buffer[position] != rune('A') {
							goto l514
						}
						position++
						goto l513
					l514:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('B') {
							goto l515
						}
						position++
						goto l513
					l515:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('C') {
							goto l516
						}
						position++
						goto l513
					l516:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('D') {
							goto l517
						}
						position++
						goto l513
					l517:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('E') {
							goto l518
						}
						position++
						goto l513
					l518:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('F') {
							goto l519
						}
						position++
						goto l513
					l519:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('G') {
							goto l520
						}
						position++
						goto l513
					l520:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('H') {
							goto l521
						}
						position++
						goto l513
					l521:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('I') {
							goto l522
						}
						position++
						goto l513
					l522:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('J') {
							goto l523
						}
						position++
						goto l513
					l523:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('K') {
							goto l524
						}
						position++
						goto l513
					l524:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('L') {
							goto l525
						}
						position++
						goto l513
					l525:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('M') {
							goto l526
						}
						position++
						goto l513
					l526:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('N') {
							goto l527
						}
						position++
						goto l513
					l527:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('O') {
							goto l528
						}
						position++
						goto l513
					l528:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('P') {
							goto l529
						}
						position++
						goto l513
					l529:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('Q') {
							goto l530
						}
						position++
						goto l513
					l530:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('R') {
							goto l531
						}
						position++
						goto l513
					l531:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('S') {
							goto l532
						}
						position++
						goto l513
					l532:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('T') {
							goto l533
						}
						position++
						goto l513
					l533:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('U') {
							goto l534
						}
						position++
						goto l513
					l534:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('V') {
							goto l535
						}
						position++
						goto l513
					l535:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('W') {
							goto l536
						}
						position++
						goto l513
					l536:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('X') {
							goto l537
						}
						position++
						goto l513
					l537:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('Y') {
							goto l538
						}
						position++
						goto l513
					l538:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('Z') {
							goto l539
						}
						position++
						goto l513
					l539:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('a') {
							goto l540
						}
						position++
						goto l513
					l540:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('b') {
							goto l541
						}
						position++
						goto l513
					l541:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('c') {
							goto l542
						}
						position++
						goto l513
					l542:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('d') {
							goto l543
						}
						position++
						goto l513
					l543:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('e') {
							goto l544
						}
						position++
						goto l513
					l544:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('f') {
							goto l545
						}
						position++
						goto l513
					l545:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('g') {
							goto l546
						}
						position++
						goto l513
					l546:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('h') {
							goto l547
						}
						position++
						goto l513
					l547:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('i') {
							goto l548
						}
						position++
						goto l513
					l548:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('j') {
							goto l549
						}
						position++
						goto l513
					l549:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('k') {
							goto l550
						}
						position++
						goto l513
					l550:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('l') {
							goto l551
						}
						position++
						goto l513
					l551:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('m') {
							goto l552
						}
						position++
						goto l513
					l552:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('n') {
							goto l553
						}
						position++
						goto l513
					l553:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('o') {
							goto l554
						}
						position++
						goto l513
					l554:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('p') {
							goto l555
						}
						position++
						goto l513
					l555:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('q') {
							goto l556
						}
						position++
						goto l513
					l556:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('r') {
							goto l557
						}
						position++
						goto l513
					l557:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('s') {
							goto l558
						}
						position++
						goto l513
					l558:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('t') {
							goto l559
						}
						position++
						goto l513
					l559:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('u') {
							goto l560
						}
						position++
						goto l513
					l560:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('v') {
							goto l561
						}
						position++
						goto l513
					l561:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('w') {
							goto l562
						}
						position++
						goto l513
					l562:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('x') {
							goto l563
						}
						position++
						goto l513
					l563:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('y') {
							goto l564
						}
						position++
						goto l513
					l564:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('z') {
							goto l565
						}
						position++
						goto l513
					l565:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('0') {
							goto l566
						}
						position++
						goto l513
					l566:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('1') {
							goto l567
						}
						position++
						goto l513
					l567:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('2') {
							goto l568
						}
						position++
						goto l513
					l568:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('3') {
							goto l569
						}
						position++
						goto l513
					l569:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('4') {
							goto l570
						}
						position++
						goto l513
					l570:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('5') {
							goto l571
						}
						position++
						goto l513
					l571:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('6') {
							goto l572
						}
						position++
						goto l513
					l572:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('7') {
							goto l573
						}
						position++
						goto l513
					l573:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('8') {
							goto l574
						}
						position++
						goto l513
					l574:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('9') {
							goto l575
						}
						position++
						goto l513
					l575:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('+') {
							goto l576
						}
						position++
						goto l513
					l576:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('/') {
							goto l577
						}
						position++
						goto l513
					l577:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('=') {
							goto l512
						}
						position++
					}
				l513:
					goto l511
				l512:
					position, tokenIndex = position512, tokenIndex512
				}
				if buffer[position] != rune('\'') {
					goto l501
				}
				position++
				add(ruleBase64, position502)
			}
			return true
		l501:
			position, tokenIndex = position501, tokenIndex501
			return false
		},
		/* 55 ByteVector <- <(Base16 / Base58 / Base64)> */
		func() bool {
			position578, tokenIndex578 := position, tokenIndex
			{
				position579 := position
				{
					position580, tokenIndex580 := position, tokenIndex
					if !_rules[ruleBase16]() {
						goto l581
					}
					goto l580
				l581:
					position, tokenIndex = position580, tokenIndex580
					if !_rules[ruleBase58]() {
						goto l582
					}
					goto l580
				l582:
					position, tokenIndex = position580, tokenIndex580
					if !_rules[ruleBase64]() {
						goto l578
					}
				}
			l580:
				add(ruleByteVector, position579)
			}
			return true
		l578:
			position, tokenIndex = position578, tokenIndex578
			return false
		},
		/* 56 Boolean <- <((('t' / 'T') ('r' / 'R') ('u' / 'U') ('e' / 'E')) / (('f' / 'F') ('a' / 'A') ('l' / 'L') ('s' / 'S') ('e' / 'E')))> */
		func() bool {
			position583, tokenIndex583 := position, tokenIndex
			{
				position584 := position
				{
					position585, tokenIndex585 := position, tokenIndex
					{
						position587, tokenIndex587 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l588
						}
						position++
						goto l587
					l588:
						position, tokenIndex = position587, tokenIndex587
						if buffer[position] != rune('T') {
							goto l586
						}
						position++
					}
				l587:
					{
						position589, tokenIndex589 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l590
						}
						position++
						goto l589
					l590:
						position, tokenIndex = position589, tokenIndex589
						if buffer[position] != rune('R') {
							goto l586
						}
						position++
					}
				l589:
					{
						position591, tokenIndex591 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l592
						}
						position++
						goto l591
					l592:
						position, tokenIndex = position591, tokenIndex591
						if buffer[position] != rune('U') {
							goto l586
						}
						position++
					}
				l591:
					{
						position593, tokenIndex593 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l594
						}
						position++
						goto l593
					l594:
						position, tokenIndex = position593, tokenIndex593
						if buffer[position] != rune('E') {
							goto l586
						}
						position++
					}
				l593:
					goto l585
				l586:
					position, tokenIndex = position585, tokenIndex585
					{
						position595, tokenIndex595 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l596
						}
						position++
						goto l595
					l596:
						position, tokenIndex = position595, tokenIndex595
						if buffer[position] != rune('F') {
							goto l583
						}
						position++
					}
				l595:
					{
						position597, tokenIndex597 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l598
						}
						position++
						goto l597
					l598:
						position, tokenIndex = position597, tokenIndex597
						if buffer[position] != rune('A') {
							goto l583
						}
						position++
					}
				l597:
					{
						position599, tokenIndex599 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l600
						}
						position++
						goto l599
					l600:
						position, tokenIndex = position599, tokenIndex599
						if buffer[position] != rune('L') {
							goto l583
						}
						position++
					}
				l599:
					{
						position601, tokenIndex601 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l602
						}
						position++
						goto l601
					l602:
						position, tokenIndex = position601, tokenIndex601
						if buffer[position] != rune('S') {
							goto l583
						}
						position++
					}
				l601:
					{
						position603, tokenIndex603 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l604
						}
						position++
						goto l603
					l604:
						position, tokenIndex = position603, tokenIndex603
						if buffer[position] != rune('E') {
							goto l583
						}
						position++
					}
				l603:
				}
			l585:
				add(ruleBoolean, position584)
			}
			return true
		l583:
			position, tokenIndex = position583, tokenIndex583
			return false
		},
		/* 57 String <- <('"' (UnicodeChar / EscapedChar / Char)* '"')> */
		func() bool {
			position605, tokenIndex605 := position, tokenIndex
			{
				position606 := position
				if buffer[position] != rune('"') {
					goto l605
				}
				position++
			l607:
				{
					position608, tokenIndex608 := position, tokenIndex
					{
						position609, tokenIndex609 := position, tokenIndex
						if !_rules[ruleUnicodeChar]() {
							goto l610
						}
						goto l609
					l610:
						position, tokenIndex = position609, tokenIndex609
						if !_rules[ruleEscapedChar]() {
							goto l611
						}
						goto l609
					l611:
						position, tokenIndex = position609, tokenIndex609
						if !_rules[ruleChar]() {
							goto l608
						}
					}
				l609:
					goto l607
				l608:
					position, tokenIndex = position608, tokenIndex608
				}
				if buffer[position] != rune('"') {
					goto l605
				}
				position++
				add(ruleString, position606)
			}
			return true
		l605:
			position, tokenIndex = position605, tokenIndex605
			return false
		},
		/* 58 UnicodeChar <- <('\\' ('u' / 'U') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')? ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')? ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')?)> */
		func() bool {
			position612, tokenIndex612 := position, tokenIndex
			{
				position613 := position
				if buffer[position] != rune('\\') {
					goto l612
				}
				position++
				{
					position614, tokenIndex614 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l615
					}
					position++
					goto l614
				l615:
					position, tokenIndex = position614, tokenIndex614
					if buffer[position] != rune('U') {
						goto l612
					}
					position++
				}
			l614:
				{
					position616, tokenIndex616 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l617
					}
					position++
					goto l616
				l617:
					position, tokenIndex = position616, tokenIndex616
					if buffer[position] != rune('A') {
						goto l618
					}
					position++
					goto l616
				l618:
					position, tokenIndex = position616, tokenIndex616
					if buffer[position] != rune('B') {
						goto l619
					}
					position++
					goto l616
				l619:
					position, tokenIndex = position616, tokenIndex616
					if buffer[position] != rune('C') {
						goto l620
					}
					position++
					goto l616
				l620:
					position, tokenIndex = position616, tokenIndex616
					if buffer[position] != rune('D') {
						goto l621
					}
					position++
					goto l616
				l621:
					position, tokenIndex = position616, tokenIndex616
					if buffer[position] != rune('E') {
						goto l622
					}
					position++
					goto l616
				l622:
					position, tokenIndex = position616, tokenIndex616
					if buffer[position] != rune('F') {
						goto l623
					}
					position++
					goto l616
				l623:
					position, tokenIndex = position616, tokenIndex616
					if buffer[position] != rune('a') {
						goto l624
					}
					position++
					goto l616
				l624:
					position, tokenIndex = position616, tokenIndex616
					if buffer[position] != rune('b') {
						goto l625
					}
					position++
					goto l616
				l625:
					position, tokenIndex = position616, tokenIndex616
					if buffer[position] != rune('c') {
						goto l626
					}
					position++
					goto l616
				l626:
					position, tokenIndex = position616, tokenIndex616
					if buffer[position] != rune('d') {
						goto l627
					}
					position++
					goto l616
				l627:
					position, tokenIndex = position616, tokenIndex616
					if buffer[position] != rune('e') {
						goto l628
					}
					position++
					goto l616
				l628:
					position, tokenIndex = position616, tokenIndex616
					if buffer[position] != rune('f') {
						goto l612
					}
					position++
				}
			l616:
				{
					position629, tokenIndex629 := position, tokenIndex
					{
						position631, tokenIndex631 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l632
						}
						position++
						goto l631
					l632:
						position, tokenIndex = position631, tokenIndex631
						if buffer[position] != rune('A') {
							goto l633
						}
						position++
						goto l631
					l633:
						position, tokenIndex = position631, tokenIndex631
						if buffer[position] != rune('B') {
							goto l634
						}
						position++
						goto l631
					l634:
						position, tokenIndex = position631, tokenIndex631
						if buffer[position] != rune('C') {
							goto l635
						}
						position++
						goto l631
					l635:
						position, tokenIndex = position631, tokenIndex631
						if buffer[position] != rune('D') {
							goto l636
						}
						position++
						goto l631
					l636:
						position, tokenIndex = position631, tokenIndex631
						if buffer[position] != rune('E') {
							goto l637
						}
						position++
						goto l631
					l637:
						position, tokenIndex = position631, tokenIndex631
						if buffer[position] != rune('F') {
							goto l638
						}
						position++
						goto l631
					l638:
						position, tokenIndex = position631, tokenIndex631
						if buffer[position] != rune('a') {
							goto l639
						}
						position++
						goto l631
					l639:
						position, tokenIndex = position631, tokenIndex631
						if buffer[position] != rune('b') {
							goto l640
						}
						position++
						goto l631
					l640:
						position, tokenIndex = position631, tokenIndex631
						if buffer[position] != rune('c') {
							goto l641
						}
						position++
						goto l631
					l641:
						position, tokenIndex = position631, tokenIndex631
						if buffer[position] != rune('d') {
							goto l642
						}
						position++
						goto l631
					l642:
						position, tokenIndex = position631, tokenIndex631
						if buffer[position] != rune('e') {
							goto l643
						}
						position++
						goto l631
					l643:
						position, tokenIndex = position631, tokenIndex631
						if buffer[position] != rune('f') {
							goto l629
						}
						position++
					}
				l631:
					goto l630
				l629:
					position, tokenIndex = position629, tokenIndex629
				}
			l630:
				{
					position644, tokenIndex644 := position, tokenIndex
					{
						position646, tokenIndex646 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l647
						}
						position++
						goto l646
					l647:
						position, tokenIndex = position646, tokenIndex646
						if buffer[position] != rune('A') {
							goto l648
						}
						position++
						goto l646
					l648:
						position, tokenIndex = position646, tokenIndex646
						if buffer[position] != rune('B') {
							goto l649
						}
						position++
						goto l646
					l649:
						position, tokenIndex = position646, tokenIndex646
						if buffer[position] != rune('C') {
							goto l650
						}
						position++
						goto l646
					l650:
						position, tokenIndex = position646, tokenIndex646
						if buffer[position] != rune('D') {
							goto l651
						}
						position++
						goto l646
					l651:
						position, tokenIndex = position646, tokenIndex646
						if buffer[position] != rune('E') {
							goto l652
						}
						position++
						goto l646
					l652:
						position, tokenIndex = position646, tokenIndex646
						if buffer[position] != rune('F') {
							goto l653
						}
						position++
						goto l646
					l653:
						position, tokenIndex = position646, tokenIndex646
						if buffer[position] != rune('a') {
							goto l654
						}
						position++
						goto l646
					l654:
						position, tokenIndex = position646, tokenIndex646
						if buffer[position] != rune('b') {
							goto l655
						}
						position++
						goto l646
					l655:
						position, tokenIndex = position646, tokenIndex646
						if buffer[position] != rune('c') {
							goto l656
						}
						position++
						goto l646
					l656:
						position, tokenIndex = position646, tokenIndex646
						if buffer[position] != rune('d') {
							goto l657
						}
						position++
						goto l646
					l657:
						position, tokenIndex = position646, tokenIndex646
						if buffer[position] != rune('e') {
							goto l658
						}
						position++
						goto l646
					l658:
						position, tokenIndex = position646, tokenIndex646
						if buffer[position] != rune('f') {
							goto l644
						}
						position++
					}
				l646:
					goto l645
				l644:
					position, tokenIndex = position644, tokenIndex644
				}
			l645:
				{
					position659, tokenIndex659 := position, tokenIndex
					{
						position661, tokenIndex661 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l662
						}
						position++
						goto l661
					l662:
						position, tokenIndex = position661, tokenIndex661
						if buffer[position] != rune('A') {
							goto l663
						}
						position++
						goto l661
					l663:
						position, tokenIndex = position661, tokenIndex661
						if buffer[position] != rune('B') {
							goto l664
						}
						position++
						goto l661
					l664:
						position, tokenIndex = position661, tokenIndex661
						if buffer[position] != rune('C') {
							goto l665
						}
						position++
						goto l661
					l665:
						position, tokenIndex = position661, tokenIndex661
						if buffer[position] != rune('D') {
							goto l666
						}
						position++
						goto l661
					l666:
						position, tokenIndex = position661, tokenIndex661
						if buffer[position] != rune('E') {
							goto l667
						}
						position++
						goto l661
					l667:
						position, tokenIndex = position661, tokenIndex661
						if buffer[position] != rune('F') {
							goto l668
						}
						position++
						goto l661
					l668:
						position, tokenIndex = position661, tokenIndex661
						if buffer[position] != rune('a') {
							goto l669
						}
						position++
						goto l661
					l669:
						position, tokenIndex = position661, tokenIndex661
						if buffer[position] != rune('b') {
							goto l670
						}
						position++
						goto l661
					l670:
						position, tokenIndex = position661, tokenIndex661
						if buffer[position] != rune('c') {
							goto l671
						}
						position++
						goto l661
					l671:
						position, tokenIndex = position661, tokenIndex661
						if buffer[position] != rune('d') {
							goto l672
						}
						position++
						goto l661
					l672:
						position, tokenIndex = position661, tokenIndex661
						if buffer[position] != rune('e') {
							goto l673
						}
						position++
						goto l661
					l673:
						position, tokenIndex = position661, tokenIndex661
						if buffer[position] != rune('f') {
							goto l659
						}
						position++
					}
				l661:
					goto l660
				l659:
					position, tokenIndex = position659, tokenIndex659
				}
			l660:
				add(ruleUnicodeChar, position613)
			}
			return true
		l612:
			position, tokenIndex = position612, tokenIndex612
			return false
		},
		/* 59 EscapedChar <- <('\\' .)> */
		func() bool {
			position674, tokenIndex674 := position, tokenIndex
			{
				position675 := position
				if buffer[position] != rune('\\') {
					goto l674
				}
				position++
				if !matchDot() {
					goto l674
				}
				add(ruleEscapedChar, position675)
			}
			return true
		l674:
			position, tokenIndex = position674, tokenIndex674
			return false
		},
		/* 60 Char <- <(!'"' .)> */
		func() bool {
			position676, tokenIndex676 := position, tokenIndex
			{
				position677 := position
				{
					position678, tokenIndex678 := position, tokenIndex
					if buffer[position] != rune('"') {
						goto l678
					}
					position++
					goto l676
				l678:
					position, tokenIndex = position678, tokenIndex678
				}
				if !matchDot() {
					goto l676
				}
				add(ruleChar, position677)
			}
			return true
		l676:
			position, tokenIndex = position676, tokenIndex676
			return false
		},
		/* 61 Integer <- <[0-9]+> */
		func() bool {
			position679, tokenIndex679 := position, tokenIndex
			{
				position680 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l679
				}
				position++
			l681:
				{
					position682, tokenIndex682 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l682
					}
					position++
					goto l681
				l682:
					position, tokenIndex = position682, tokenIndex682
				}
				add(ruleInteger, position680)
			}
			return true
		l679:
			position, tokenIndex = position679, tokenIndex679
			return false
		},
		/* 62 List <- <('[' _ ExprSeq? _ ']')> */
		func() bool {
			position683, tokenIndex683 := position, tokenIndex
			{
				position684 := position
				if buffer[position] != rune('[') {
					goto l683
				}
				position++
				if !_rules[rule_]() {
					goto l683
				}
				{
					position685, tokenIndex685 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l685
					}
					goto l686
				l685:
					position, tokenIndex = position685, tokenIndex685
				}
			l686:
				if !_rules[rule_]() {
					goto l683
				}
				if buffer[position] != rune(']') {
					goto l683
				}
				position++
				add(ruleList, position684)
			}
			return true
		l683:
			position, tokenIndex = position683, tokenIndex683
			return false
		},
		/* 63 ExprSeq <- <(Expr (_ ',' _ ExprSeq)?)> */
		func() bool {
			position687, tokenIndex687 := position, tokenIndex
			{
				position688 := position
				if !_rules[ruleExpr]() {
					goto l687
				}
				{
					position689, tokenIndex689 := position, tokenIndex
					if !_rules[rule_]() {
						goto l689
					}
					if buffer[position] != rune(',') {
						goto l689
					}
					position++
					if !_rules[rule_]() {
						goto l689
					}
					if !_rules[ruleExprSeq]() {
						goto l689
					}
					goto l690
				l689:
					position, tokenIndex = position689, tokenIndex689
				}
			l690:
				add(ruleExprSeq, position688)
			}
			return true
		l687:
			position, tokenIndex = position687, tokenIndex687
			return false
		},
		/* 64 AtomExpr <- <(UnaryOp? _ (FoldMacro / GettableExpr / IfWithError / Match / Const))> */
		func() bool {
			position691, tokenIndex691 := position, tokenIndex
			{
				position692 := position
				{
					position693, tokenIndex693 := position, tokenIndex
					if !_rules[ruleUnaryOp]() {
						goto l693
					}
					goto l694
				l693:
					position, tokenIndex = position693, tokenIndex693
				}
			l694:
				if !_rules[rule_]() {
					goto l691
				}
				{
					position695, tokenIndex695 := position, tokenIndex
					if !_rules[ruleFoldMacro]() {
						goto l696
					}
					goto l695
				l696:
					position, tokenIndex = position695, tokenIndex695
					if !_rules[ruleGettableExpr]() {
						goto l697
					}
					goto l695
				l697:
					position, tokenIndex = position695, tokenIndex695
					if !_rules[ruleIfWithError]() {
						goto l698
					}
					goto l695
				l698:
					position, tokenIndex = position695, tokenIndex695
					if !_rules[ruleMatch]() {
						goto l699
					}
					goto l695
				l699:
					position, tokenIndex = position695, tokenIndex695
					if !_rules[ruleConst]() {
						goto l691
					}
				}
			l695:
				add(ruleAtomExpr, position692)
			}
			return true
		l691:
			position, tokenIndex = position691, tokenIndex691
			return false
		},
		/* 65 MultGroupOpAtom <- <(AtomExpr (_ MultGroupOp _ AtomExpr)*)> */
		func() bool {
			position700, tokenIndex700 := position, tokenIndex
			{
				position701 := position
				if !_rules[ruleAtomExpr]() {
					goto l700
				}
			l702:
				{
					position703, tokenIndex703 := position, tokenIndex
					if !_rules[rule_]() {
						goto l703
					}
					if !_rules[ruleMultGroupOp]() {
						goto l703
					}
					if !_rules[rule_]() {
						goto l703
					}
					if !_rules[ruleAtomExpr]() {
						goto l703
					}
					goto l702
				l703:
					position, tokenIndex = position703, tokenIndex703
				}
				add(ruleMultGroupOpAtom, position701)
			}
			return true
		l700:
			position, tokenIndex = position700, tokenIndex700
			return false
		},
		/* 66 SumGroupOpAtom <- <(MultGroupOpAtom (_ SumGroupOp _ MultGroupOpAtom)*)> */
		func() bool {
			position704, tokenIndex704 := position, tokenIndex
			{
				position705 := position
				if !_rules[ruleMultGroupOpAtom]() {
					goto l704
				}
			l706:
				{
					position707, tokenIndex707 := position, tokenIndex
					if !_rules[rule_]() {
						goto l707
					}
					if !_rules[ruleSumGroupOp]() {
						goto l707
					}
					if !_rules[rule_]() {
						goto l707
					}
					if !_rules[ruleMultGroupOpAtom]() {
						goto l707
					}
					goto l706
				l707:
					position, tokenIndex = position707, tokenIndex707
				}
				add(ruleSumGroupOpAtom, position705)
			}
			return true
		l704:
			position, tokenIndex = position704, tokenIndex704
			return false
		},
		/* 67 ConsOpAtom <- <(SumGroupOpAtom (_ ConsOp _ SumGroupOpAtom)*)> */
		func() bool {
			position708, tokenIndex708 := position, tokenIndex
			{
				position709 := position
				if !_rules[ruleSumGroupOpAtom]() {
					goto l708
				}
			l710:
				{
					position711, tokenIndex711 := position, tokenIndex
					if !_rules[rule_]() {
						goto l711
					}
					if !_rules[ruleConsOp]() {
						goto l711
					}
					if !_rules[rule_]() {
						goto l711
					}
					if !_rules[ruleSumGroupOpAtom]() {
						goto l711
					}
					goto l710
				l711:
					position, tokenIndex = position711, tokenIndex711
				}
				add(ruleConsOpAtom, position709)
			}
			return true
		l708:
			position, tokenIndex = position708, tokenIndex708
			return false
		},
		/* 68 CompareGroupOpAtom <- <(ConsOpAtom (_ CompareGroupOp _ ConsOpAtom)*)> */
		func() bool {
			position712, tokenIndex712 := position, tokenIndex
			{
				position713 := position
				if !_rules[ruleConsOpAtom]() {
					goto l712
				}
			l714:
				{
					position715, tokenIndex715 := position, tokenIndex
					if !_rules[rule_]() {
						goto l715
					}
					if !_rules[ruleCompareGroupOp]() {
						goto l715
					}
					if !_rules[rule_]() {
						goto l715
					}
					if !_rules[ruleConsOpAtom]() {
						goto l715
					}
					goto l714
				l715:
					position, tokenIndex = position715, tokenIndex715
				}
				add(ruleCompareGroupOpAtom, position713)
			}
			return true
		l712:
			position, tokenIndex = position712, tokenIndex712
			return false
		},
		/* 69 EqualityGroupOpAtom <- <(CompareGroupOpAtom (_ EqGroupOp _ CompareGroupOpAtom)*)> */
		func() bool {
			position716, tokenIndex716 := position, tokenIndex
			{
				position717 := position
				if !_rules[ruleCompareGroupOpAtom]() {
					goto l716
				}
			l718:
				{
					position719, tokenIndex719 := position, tokenIndex
					if !_rules[rule_]() {
						goto l719
					}
					if !_rules[ruleEqGroupOp]() {
						goto l719
					}
					if !_rules[rule_]() {
						goto l719
					}
					if !_rules[ruleCompareGroupOpAtom]() {
						goto l719
					}
					goto l718
				l719:
					position, tokenIndex = position719, tokenIndex719
				}
				add(ruleEqualityGroupOpAtom, position717)
			}
			return true
		l716:
			position, tokenIndex = position716, tokenIndex716
			return false
		},
		/* 70 AndOpAtom <- <(EqualityGroupOpAtom (_ AndOp _ EqualityGroupOpAtom)*)> */
		func() bool {
			position720, tokenIndex720 := position, tokenIndex
			{
				position721 := position
				if !_rules[ruleEqualityGroupOpAtom]() {
					goto l720
				}
			l722:
				{
					position723, tokenIndex723 := position, tokenIndex
					if !_rules[rule_]() {
						goto l723
					}
					if !_rules[ruleAndOp]() {
						goto l723
					}
					if !_rules[rule_]() {
						goto l723
					}
					if !_rules[ruleEqualityGroupOpAtom]() {
						goto l723
					}
					goto l722
				l723:
					position, tokenIndex = position723, tokenIndex723
				}
				add(ruleAndOpAtom, position721)
			}
			return true
		l720:
			position, tokenIndex = position720, tokenIndex720
			return false
		},
		/* 71 OrOpAtom <- <(AndOpAtom (_ OrOp _ AndOpAtom)*)> */
		func() bool {
			position724, tokenIndex724 := position, tokenIndex
			{
				position725 := position
				if !_rules[ruleAndOpAtom]() {
					goto l724
				}
			l726:
				{
					position727, tokenIndex727 := position, tokenIndex
					if !_rules[rule_]() {
						goto l727
					}
					if !_rules[ruleOrOp]() {
						goto l727
					}
					if !_rules[rule_]() {
						goto l727
					}
					if !_rules[ruleAndOpAtom]() {
						goto l727
					}
					goto l726
				l727:
					position, tokenIndex = position727, tokenIndex727
				}
				add(ruleOrOpAtom, position725)
			}
			return true
		l724:
			position, tokenIndex = position724, tokenIndex724
			return false
		},
		/* 72 Expr <- <OrOpAtom> */
		func() bool {
			position728, tokenIndex728 := position, tokenIndex
			{
				position729 := position
				if !_rules[ruleOrOpAtom]() {
					goto l728
				}
				add(ruleExpr, position729)
			}
			return true
		l728:
			position, tokenIndex = position728, tokenIndex728
			return false
		},
		/* 73 ParExpr <- <('(' _ Expr _ ')')> */
		func() bool {
			position730, tokenIndex730 := position, tokenIndex
			{
				position731 := position
				if buffer[position] != rune('(') {
					goto l730
				}
				position++
				if !_rules[rule_]() {
					goto l730
				}
				if !_rules[ruleExpr]() {
					goto l730
				}
				if !_rules[rule_]() {
					goto l730
				}
				if buffer[position] != rune(')') {
					goto l730
				}
				position++
				add(ruleParExpr, position731)
			}
			return true
		l730:
			position, tokenIndex = position730, tokenIndex730
			return false
		},
		/* 74 GettableExpr <- <((ParExpr / Block / FunctionCall / Identifier) (_ (ListAccess / ('.' _ (FunctionCallAccess / IdentifierAccess))))*)> */
		func() bool {
			position732, tokenIndex732 := position, tokenIndex
			{
				position733 := position
				{
					position734, tokenIndex734 := position, tokenIndex
					if !_rules[ruleParExpr]() {
						goto l735
					}
					goto l734
				l735:
					position, tokenIndex = position734, tokenIndex734
					if !_rules[ruleBlock]() {
						goto l736
					}
					goto l734
				l736:
					position, tokenIndex = position734, tokenIndex734
					if !_rules[ruleFunctionCall]() {
						goto l737
					}
					goto l734
				l737:
					position, tokenIndex = position734, tokenIndex734
					if !_rules[ruleIdentifier]() {
						goto l732
					}
				}
			l734:
			l738:
				{
					position739, tokenIndex739 := position, tokenIndex
					if !_rules[rule_]() {
						goto l739
					}
					{
						position740, tokenIndex740 := position, tokenIndex
						if !_rules[ruleListAccess]() {
							goto l741
						}
						goto l740
					l741:
						position, tokenIndex = position740, tokenIndex740
						if buffer[position] != rune('.') {
							goto l739
						}
						position++
						if !_rules[rule_]() {
							goto l739
						}
						{
							position742, tokenIndex742 := position, tokenIndex
							if !_rules[ruleFunctionCallAccess]() {
								goto l743
							}
							goto l742
						l743:
							position, tokenIndex = position742, tokenIndex742
							if !_rules[ruleIdentifierAccess]() {
								goto l739
							}
						}
					l742:
					}
				l740:
					goto l738
				l739:
					position, tokenIndex = position739, tokenIndex739
				}
				add(ruleGettableExpr, position733)
			}
			return true
		l732:
			position, tokenIndex = position732, tokenIndex732
			return false
		},
		/* 75 FunctionCallAccess <- <FunctionCall> */
		func() bool {
			position744, tokenIndex744 := position, tokenIndex
			{
				position745 := position
				if !_rules[ruleFunctionCall]() {
					goto l744
				}
				add(ruleFunctionCallAccess, position745)
			}
			return true
		l744:
			position, tokenIndex = position744, tokenIndex744
			return false
		},
		/* 76 IdentifierAccess <- <Identifier> */
		func() bool {
			position746, tokenIndex746 := position, tokenIndex
			{
				position747 := position
				if !_rules[ruleIdentifier]() {
					goto l746
				}
				add(ruleIdentifierAccess, position747)
			}
			return true
		l746:
			position, tokenIndex = position746, tokenIndex746
			return false
		},
		/* 77 ListAccess <- <('[' _ (Expr / Identifier) _ ']')> */
		func() bool {
			position748, tokenIndex748 := position, tokenIndex
			{
				position749 := position
				if buffer[position] != rune('[') {
					goto l748
				}
				position++
				if !_rules[rule_]() {
					goto l748
				}
				{
					position750, tokenIndex750 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l751
					}
					goto l750
				l751:
					position, tokenIndex = position750, tokenIndex750
					if !_rules[ruleIdentifier]() {
						goto l748
					}
				}
			l750:
				if !_rules[rule_]() {
					goto l748
				}
				if buffer[position] != rune(']') {
					goto l748
				}
				position++
				add(ruleListAccess, position749)
			}
			return true
		l748:
			position, tokenIndex = position748, tokenIndex748
			return false
		},
		/* 78 Block <- <('{' (_ Declaration)* _ Expr _ '}')> */
		func() bool {
			position752, tokenIndex752 := position, tokenIndex
			{
				position753 := position
				if buffer[position] != rune('{') {
					goto l752
				}
				position++
			l754:
				{
					position755, tokenIndex755 := position, tokenIndex
					if !_rules[rule_]() {
						goto l755
					}
					if !_rules[ruleDeclaration]() {
						goto l755
					}
					goto l754
				l755:
					position, tokenIndex = position755, tokenIndex755
				}
				if !_rules[rule_]() {
					goto l752
				}
				if !_rules[ruleExpr]() {
					goto l752
				}
				if !_rules[rule_]() {
					goto l752
				}
				if buffer[position] != rune('}') {
					goto l752
				}
				position++
				add(ruleBlock, position753)
			}
			return true
		l752:
			position, tokenIndex = position752, tokenIndex752
			return false
		},
		/* 79 BlockWithoutPar <- <((_ Declaration)* _ Expr)> */
		func() bool {
			position756, tokenIndex756 := position, tokenIndex
			{
				position757 := position
			l758:
				{
					position759, tokenIndex759 := position, tokenIndex
					if !_rules[rule_]() {
						goto l759
					}
					if !_rules[ruleDeclaration]() {
						goto l759
					}
					goto l758
				l759:
					position, tokenIndex = position759, tokenIndex759
				}
				if !_rules[rule_]() {
					goto l756
				}
				if !_rules[ruleExpr]() {
					goto l756
				}
				add(ruleBlockWithoutPar, position757)
			}
			return true
		l756:
			position, tokenIndex = position756, tokenIndex756
			return false
		},
		/* 80 FunctionCall <- <(Identifier _ '(' _ ExprSeq? _ ')')> */
		func() bool {
			position760, tokenIndex760 := position, tokenIndex
			{
				position761 := position
				if !_rules[ruleIdentifier]() {
					goto l760
				}
				if !_rules[rule_]() {
					goto l760
				}
				if buffer[position] != rune('(') {
					goto l760
				}
				position++
				if !_rules[rule_]() {
					goto l760
				}
				{
					position762, tokenIndex762 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l762
					}
					goto l763
				l762:
					position, tokenIndex = position762, tokenIndex762
				}
			l763:
				if !_rules[rule_]() {
					goto l760
				}
				if buffer[position] != rune(')') {
					goto l760
				}
				position++
				add(ruleFunctionCall, position761)
			}
			return true
		l760:
			position, tokenIndex = position760, tokenIndex760
			return false
		},
		/* 81 FoldMacro <- <(('f' / 'F') ('o' / 'O') ('l' / 'L') ('d' / 'D') _ '<' _ Integer _ '>' _ '(' _ Expr _ ',' _ Expr _ ',' _ Identifier _ ')')> */
		func() bool {
			position764, tokenIndex764 := position, tokenIndex
			{
				position765 := position
				{
					position766, tokenIndex766 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l767
					}
					position++
					goto l766
				l767:
					position, tokenIndex = position766, tokenIndex766
					if buffer[position] != rune('F') {
						goto l764
					}
					position++
				}
			l766:
				{
					position768, tokenIndex768 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l769
					}
					position++
					goto l768
				l769:
					position, tokenIndex = position768, tokenIndex768
					if buffer[position] != rune('O') {
						goto l764
					}
					position++
				}
			l768:
				{
					position770, tokenIndex770 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l771
					}
					position++
					goto l770
				l771:
					position, tokenIndex = position770, tokenIndex770
					if buffer[position] != rune('L') {
						goto l764
					}
					position++
				}
			l770:
				{
					position772, tokenIndex772 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l773
					}
					position++
					goto l772
				l773:
					position, tokenIndex = position772, tokenIndex772
					if buffer[position] != rune('D') {
						goto l764
					}
					position++
				}
			l772:
				if !_rules[rule_]() {
					goto l764
				}
				if buffer[position] != rune('<') {
					goto l764
				}
				position++
				if !_rules[rule_]() {
					goto l764
				}
				if !_rules[ruleInteger]() {
					goto l764
				}
				if !_rules[rule_]() {
					goto l764
				}
				if buffer[position] != rune('>') {
					goto l764
				}
				position++
				if !_rules[rule_]() {
					goto l764
				}
				if buffer[position] != rune('(') {
					goto l764
				}
				position++
				if !_rules[rule_]() {
					goto l764
				}
				if !_rules[ruleExpr]() {
					goto l764
				}
				if !_rules[rule_]() {
					goto l764
				}
				if buffer[position] != rune(',') {
					goto l764
				}
				position++
				if !_rules[rule_]() {
					goto l764
				}
				if !_rules[ruleExpr]() {
					goto l764
				}
				if !_rules[rule_]() {
					goto l764
				}
				if buffer[position] != rune(',') {
					goto l764
				}
				position++
				if !_rules[rule_]() {
					goto l764
				}
				if !_rules[ruleIdentifier]() {
					goto l764
				}
				if !_rules[rule_]() {
					goto l764
				}
				if buffer[position] != rune(')') {
					goto l764
				}
				position++
				add(ruleFoldMacro, position765)
			}
			return true
		l764:
			position, tokenIndex = position764, tokenIndex764
			return false
		},
		/* 82 IfWithError <- <(If / FailedIfWithoutElse)> */
		func() bool {
			position774, tokenIndex774 := position, tokenIndex
			{
				position775 := position
				{
					position776, tokenIndex776 := position, tokenIndex
					if !_rules[ruleIf]() {
						goto l777
					}
					goto l776
				l777:
					position, tokenIndex = position776, tokenIndex776
					if !_rules[ruleFailedIfWithoutElse]() {
						goto l774
					}
				}
			l776:
				add(ruleIfWithError, position775)
			}
			return true
		l774:
			position, tokenIndex = position774, tokenIndex774
			return false
		},
		/* 83 If <- <(('i' / 'I') ('f' / 'F') _ Expr _ (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) _ Expr _ (('e' / 'E') ('l' / 'L') ('s' / 'S') ('e' / 'E')) _ Expr)> */
		func() bool {
			position778, tokenIndex778 := position, tokenIndex
			{
				position779 := position
				{
					position780, tokenIndex780 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l781
					}
					position++
					goto l780
				l781:
					position, tokenIndex = position780, tokenIndex780
					if buffer[position] != rune('I') {
						goto l778
					}
					position++
				}
			l780:
				{
					position782, tokenIndex782 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l783
					}
					position++
					goto l782
				l783:
					position, tokenIndex = position782, tokenIndex782
					if buffer[position] != rune('F') {
						goto l778
					}
					position++
				}
			l782:
				if !_rules[rule_]() {
					goto l778
				}
				if !_rules[ruleExpr]() {
					goto l778
				}
				if !_rules[rule_]() {
					goto l778
				}
				{
					position784, tokenIndex784 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l785
					}
					position++
					goto l784
				l785:
					position, tokenIndex = position784, tokenIndex784
					if buffer[position] != rune('T') {
						goto l778
					}
					position++
				}
			l784:
				{
					position786, tokenIndex786 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l787
					}
					position++
					goto l786
				l787:
					position, tokenIndex = position786, tokenIndex786
					if buffer[position] != rune('H') {
						goto l778
					}
					position++
				}
			l786:
				{
					position788, tokenIndex788 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l789
					}
					position++
					goto l788
				l789:
					position, tokenIndex = position788, tokenIndex788
					if buffer[position] != rune('E') {
						goto l778
					}
					position++
				}
			l788:
				{
					position790, tokenIndex790 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l791
					}
					position++
					goto l790
				l791:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('N') {
						goto l778
					}
					position++
				}
			l790:
				if !_rules[rule_]() {
					goto l778
				}
				if !_rules[ruleExpr]() {
					goto l778
				}
				if !_rules[rule_]() {
					goto l778
				}
				{
					position792, tokenIndex792 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l793
					}
					position++
					goto l792
				l793:
					position, tokenIndex = position792, tokenIndex792
					if buffer[position] != rune('E') {
						goto l778
					}
					position++
				}
			l792:
				{
					position794, tokenIndex794 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l795
					}
					position++
					goto l794
				l795:
					position, tokenIndex = position794, tokenIndex794
					if buffer[position] != rune('L') {
						goto l778
					}
					position++
				}
			l794:
				{
					position796, tokenIndex796 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l797
					}
					position++
					goto l796
				l797:
					position, tokenIndex = position796, tokenIndex796
					if buffer[position] != rune('S') {
						goto l778
					}
					position++
				}
			l796:
				{
					position798, tokenIndex798 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l799
					}
					position++
					goto l798
				l799:
					position, tokenIndex = position798, tokenIndex798
					if buffer[position] != rune('E') {
						goto l778
					}
					position++
				}
			l798:
				if !_rules[rule_]() {
					goto l778
				}
				if !_rules[ruleExpr]() {
					goto l778
				}
				add(ruleIf, position779)
			}
			return true
		l778:
			position, tokenIndex = position778, tokenIndex778
			return false
		},
		/* 84 FailedIfWithoutElse <- <(('i' / 'I') ('f' / 'F') _ Expr _ (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) _ Expr)> */
		func() bool {
			position800, tokenIndex800 := position, tokenIndex
			{
				position801 := position
				{
					position802, tokenIndex802 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l803
					}
					position++
					goto l802
				l803:
					position, tokenIndex = position802, tokenIndex802
					if buffer[position] != rune('I') {
						goto l800
					}
					position++
				}
			l802:
				{
					position804, tokenIndex804 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l805
					}
					position++
					goto l804
				l805:
					position, tokenIndex = position804, tokenIndex804
					if buffer[position] != rune('F') {
						goto l800
					}
					position++
				}
			l804:
				if !_rules[rule_]() {
					goto l800
				}
				if !_rules[ruleExpr]() {
					goto l800
				}
				if !_rules[rule_]() {
					goto l800
				}
				{
					position806, tokenIndex806 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l807
					}
					position++
					goto l806
				l807:
					position, tokenIndex = position806, tokenIndex806
					if buffer[position] != rune('T') {
						goto l800
					}
					position++
				}
			l806:
				{
					position808, tokenIndex808 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l809
					}
					position++
					goto l808
				l809:
					position, tokenIndex = position808, tokenIndex808
					if buffer[position] != rune('H') {
						goto l800
					}
					position++
				}
			l808:
				{
					position810, tokenIndex810 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l811
					}
					position++
					goto l810
				l811:
					position, tokenIndex = position810, tokenIndex810
					if buffer[position] != rune('E') {
						goto l800
					}
					position++
				}
			l810:
				{
					position812, tokenIndex812 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l813
					}
					position++
					goto l812
				l813:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('N') {
						goto l800
					}
					position++
				}
			l812:
				if !_rules[rule_]() {
					goto l800
				}
				if !_rules[ruleExpr]() {
					goto l800
				}
				add(ruleFailedIfWithoutElse, position801)
			}
			return true
		l800:
			position, tokenIndex = position800, tokenIndex800
			return false
		},
		/* 85 Match <- <(('m' / 'M') ('a' / 'A') ('t' / 'T') ('c' / 'C') ('h' / 'H') _ Expr _ '{' (_ MatchCase)+ _ '}')> */
		func() bool {
			position814, tokenIndex814 := position, tokenIndex
			{
				position815 := position
				{
					position816, tokenIndex816 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l817
					}
					position++
					goto l816
				l817:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('M') {
						goto l814
					}
					position++
				}
			l816:
				{
					position818, tokenIndex818 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l819
					}
					position++
					goto l818
				l819:
					position, tokenIndex = position818, tokenIndex818
					if buffer[position] != rune('A') {
						goto l814
					}
					position++
				}
			l818:
				{
					position820, tokenIndex820 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l821
					}
					position++
					goto l820
				l821:
					position, tokenIndex = position820, tokenIndex820
					if buffer[position] != rune('T') {
						goto l814
					}
					position++
				}
			l820:
				{
					position822, tokenIndex822 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l823
					}
					position++
					goto l822
				l823:
					position, tokenIndex = position822, tokenIndex822
					if buffer[position] != rune('C') {
						goto l814
					}
					position++
				}
			l822:
				{
					position824, tokenIndex824 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l825
					}
					position++
					goto l824
				l825:
					position, tokenIndex = position824, tokenIndex824
					if buffer[position] != rune('H') {
						goto l814
					}
					position++
				}
			l824:
				if !_rules[rule_]() {
					goto l814
				}
				if !_rules[ruleExpr]() {
					goto l814
				}
				if !_rules[rule_]() {
					goto l814
				}
				if buffer[position] != rune('{') {
					goto l814
				}
				position++
				if !_rules[rule_]() {
					goto l814
				}
				if !_rules[ruleMatchCase]() {
					goto l814
				}
			l826:
				{
					position827, tokenIndex827 := position, tokenIndex
					if !_rules[rule_]() {
						goto l827
					}
					if !_rules[ruleMatchCase]() {
						goto l827
					}
					goto l826
				l827:
					position, tokenIndex = position827, tokenIndex827
				}
				if !_rules[rule_]() {
					goto l814
				}
				if buffer[position] != rune('}') {
					goto l814
				}
				position++
				add(ruleMatch, position815)
			}
			return true
		l814:
			position, tokenIndex = position814, tokenIndex814
			return false
		},
		/* 86 MatchCase <- <(('c' / 'C') ('a' / 'A') ('s' / 'S') ('e' / 'E') _ ((Identifier _ (':' _ TypesAtom)?) / DefaultMatchCasePart) _ ('=' '>') _ BlockWithoutPar)> */
		func() bool {
			position828, tokenIndex828 := position, tokenIndex
			{
				position829 := position
				{
					position830, tokenIndex830 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l831
					}
					position++
					goto l830
				l831:
					position, tokenIndex = position830, tokenIndex830
					if buffer[position] != rune('C') {
						goto l828
					}
					position++
				}
			l830:
				{
					position832, tokenIndex832 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l833
					}
					position++
					goto l832
				l833:
					position, tokenIndex = position832, tokenIndex832
					if buffer[position] != rune('A') {
						goto l828
					}
					position++
				}
			l832:
				{
					position834, tokenIndex834 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l835
					}
					position++
					goto l834
				l835:
					position, tokenIndex = position834, tokenIndex834
					if buffer[position] != rune('S') {
						goto l828
					}
					position++
				}
			l834:
				{
					position836, tokenIndex836 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l837
					}
					position++
					goto l836
				l837:
					position, tokenIndex = position836, tokenIndex836
					if buffer[position] != rune('E') {
						goto l828
					}
					position++
				}
			l836:
				if !_rules[rule_]() {
					goto l828
				}
				{
					position838, tokenIndex838 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l839
					}
					if !_rules[rule_]() {
						goto l839
					}
					{
						position840, tokenIndex840 := position, tokenIndex
						if buffer[position] != rune(':') {
							goto l840
						}
						position++
						if !_rules[rule_]() {
							goto l840
						}
						if !_rules[ruleTypesAtom]() {
							goto l840
						}
						goto l841
					l840:
						position, tokenIndex = position840, tokenIndex840
					}
				l841:
					goto l838
				l839:
					position, tokenIndex = position838, tokenIndex838
					if !_rules[ruleDefaultMatchCasePart]() {
						goto l828
					}
				}
			l838:
				if !_rules[rule_]() {
					goto l828
				}
				if buffer[position] != rune('=') {
					goto l828
				}
				position++
				if buffer[position] != rune('>') {
					goto l828
				}
				position++
				if !_rules[rule_]() {
					goto l828
				}
				if !_rules[ruleBlockWithoutPar]() {
					goto l828
				}
				add(ruleMatchCase, position829)
			}
			return true
		l828:
			position, tokenIndex = position828, tokenIndex828
			return false
		},
		/* 87 DefaultMatchCasePart <- <('{' _ (':' _ TypesAtom)?)> */
		func() bool {
			position842, tokenIndex842 := position, tokenIndex
			{
				position843 := position
				if buffer[position] != rune('{') {
					goto l842
				}
				position++
				if !_rules[rule_]() {
					goto l842
				}
				{
					position844, tokenIndex844 := position, tokenIndex
					if buffer[position] != rune(':') {
						goto l844
					}
					position++
					if !_rules[rule_]() {
						goto l844
					}
					if !_rules[ruleTypesAtom]() {
						goto l844
					}
					goto l845
				l844:
					position, tokenIndex = position844, tokenIndex844
				}
			l845:
				add(ruleDefaultMatchCasePart, position843)
			}
			return true
		l842:
			position, tokenIndex = position842, tokenIndex842
			return false
		},
	}
	p.rules = _rules
	return nil
}

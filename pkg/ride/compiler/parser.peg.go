package compiler

// Code generated by peg -output=parser.peg.go ride.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleCode
	ruleDAppRoot
	ruleScriptRoot
	ruleWS
	ruleEOL
	ruleComment
	rule_
	ruleEOF
	ruleDirectiveName
	ruleUpperCaseString
	ruleIntString
	rulePathString
	rulePaths
	ruleDirective
	ruleDeclaration
	ruleVariable
	ruleStrictVariable
	ruleFunc
	ruleFuncArgSeq
	ruleFuncArg
	ruleAnnotatedFunc
	ruleAnnotation
	ruleIdentifierSeq
	ruleAnnotationSeq
	ruleOrOp
	ruleAndOp
	ruleEqGroupOp
	ruleEqOp
	ruleNeOp
	ruleCompareGroupOp
	ruleGtOp
	ruleGeOp
	ruleLtOp
	ruleLeOp
	ruleListGroupOp
	ruleConsOp
	ruleConcatOp
	ruleAppendOp
	ruleSumGroupOp
	ruleSumOp
	ruleSubOp
	ruleMultGroupOp
	ruleMulOp
	ruleDivOp
	ruleModOp
	ruleUnaryOp
	rulePositiveOp
	ruleNegativeOp
	ruleNotOp
	ruleReservedWords
	ruleConst
	ruleIdentifier
	ruleType
	ruleGenericType
	ruleTupleType
	ruleTypes
	ruleBase16
	ruleBase58
	ruleBase64
	ruleByteVector
	ruleBoolean
	ruleString
	ruleUnicodeChar
	ruleEscapedChar
	ruleChar
	ruleInteger
	ruleList
	ruleExprSeq
	ruleAtomExpr
	ruleMultGroupOpAtom
	ruleSumGroupOpAtom
	ruleListGroupOpAtom
	ruleCompareGroupOpAtom
	ruleEqualityGroupOpAtom
	ruleAndOpAtom
	ruleOrOpAtom
	ruleExpr
	ruleParExpr
	ruleGettableExpr
	ruleFunctionCallAccess
	ruleIdentifierAccess
	ruleListAccess
	ruleAsType
	ruleAsString
	ruleExactAsString
	ruleBlock
	ruleBlockWithoutPar
	ruleFunctionCall
	ruleFoldMacro
	ruleIfWithError
	ruleIf
	ruleFailedIfWithoutElse
	ruleMatch
	ruleCase
	rulePlaceholder
	ruleValuePattern
	ruleTupleValuesPattern
	ruleTuplePattern
	ruleObjectFieldsPattern
	ruleObjectPattern
	ruleTuple
	ruleTupleRef
	ruleTupleAccess
)

var rul3s = [...]string{
	"Unknown",
	"Code",
	"DAppRoot",
	"ScriptRoot",
	"WS",
	"EOL",
	"Comment",
	"_",
	"EOF",
	"DirectiveName",
	"UpperCaseString",
	"IntString",
	"PathString",
	"Paths",
	"Directive",
	"Declaration",
	"Variable",
	"StrictVariable",
	"Func",
	"FuncArgSeq",
	"FuncArg",
	"AnnotatedFunc",
	"Annotation",
	"IdentifierSeq",
	"AnnotationSeq",
	"OrOp",
	"AndOp",
	"EqGroupOp",
	"EqOp",
	"NeOp",
	"CompareGroupOp",
	"GtOp",
	"GeOp",
	"LtOp",
	"LeOp",
	"ListGroupOp",
	"ConsOp",
	"ConcatOp",
	"AppendOp",
	"SumGroupOp",
	"SumOp",
	"SubOp",
	"MultGroupOp",
	"MulOp",
	"DivOp",
	"ModOp",
	"UnaryOp",
	"PositiveOp",
	"NegativeOp",
	"NotOp",
	"ReservedWords",
	"Const",
	"Identifier",
	"Type",
	"GenericType",
	"TupleType",
	"Types",
	"Base16",
	"Base58",
	"Base64",
	"ByteVector",
	"Boolean",
	"String",
	"UnicodeChar",
	"EscapedChar",
	"Char",
	"Integer",
	"List",
	"ExprSeq",
	"AtomExpr",
	"MultGroupOpAtom",
	"SumGroupOpAtom",
	"ListGroupOpAtom",
	"CompareGroupOpAtom",
	"EqualityGroupOpAtom",
	"AndOpAtom",
	"OrOpAtom",
	"Expr",
	"ParExpr",
	"GettableExpr",
	"FunctionCallAccess",
	"IdentifierAccess",
	"ListAccess",
	"AsType",
	"AsString",
	"ExactAsString",
	"Block",
	"BlockWithoutPar",
	"FunctionCall",
	"FoldMacro",
	"IfWithError",
	"If",
	"FailedIfWithoutElse",
	"Match",
	"Case",
	"Placeholder",
	"ValuePattern",
	"TupleValuesPattern",
	"TuplePattern",
	"ObjectFieldsPattern",
	"ObjectPattern",
	"Tuple",
	"TupleRef",
	"TupleAccess",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Buffer string
	buffer []rune
	rules  [104]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Code <- <(DAppRoot / ScriptRoot)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[ruleDAppRoot]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[ruleScriptRoot]() {
						goto l0
					}
				}
			l2:
				add(ruleCode, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 DAppRoot <- <(_ (Directive _)* (_ Declaration)* (_ AnnotatedFunc)* _ EOF)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
				if !_rules[rule_]() {
					goto l4
				}
			l6:
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l7
					}
					if !_rules[rule_]() {
						goto l7
					}
					goto l6
				l7:
					position, tokenIndex = position7, tokenIndex7
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[rule_]() {
						goto l9
					}
					if !_rules[ruleDeclaration]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
			l10:
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[rule_]() {
						goto l11
					}
					if !_rules[ruleAnnotatedFunc]() {
						goto l11
					}
					goto l10
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				if !_rules[rule_]() {
					goto l4
				}
				if !_rules[ruleEOF]() {
					goto l4
				}
				add(ruleDAppRoot, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 ScriptRoot <- <(_ (Directive _)* (_ Declaration)* _ Expr _ EOF)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[rule_]() {
					goto l12
				}
			l14:
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l15
					}
					if !_rules[rule_]() {
						goto l15
					}
					goto l14
				l15:
					position, tokenIndex = position15, tokenIndex15
				}
			l16:
				{
					position17, tokenIndex17 := position, tokenIndex
					if !_rules[rule_]() {
						goto l17
					}
					if !_rules[ruleDeclaration]() {
						goto l17
					}
					goto l16
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleExpr]() {
					goto l12
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleEOF]() {
					goto l12
				}
				add(ruleScriptRoot, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 WS <- <(' ' / '\t')> */
		func() bool {
			position18, tokenIndex18 := position, tokenIndex
			{
				position19 := position
				{
					position20, tokenIndex20 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l21
					}
					position++
					goto l20
				l21:
					position, tokenIndex = position20, tokenIndex20
					if buffer[position] != rune('\t') {
						goto l18
					}
					position++
				}
			l20:
				add(ruleWS, position19)
			}
			return true
		l18:
			position, tokenIndex = position18, tokenIndex18
			return false
		},
		/* 4 EOL <- <('\n' / '\r' / '\f')> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24, tokenIndex24 := position, tokenIndex
					if buffer[position] != rune('\n') {
						goto l25
					}
					position++
					goto l24
				l25:
					position, tokenIndex = position24, tokenIndex24
					if buffer[position] != rune('\r') {
						goto l26
					}
					position++
					goto l24
				l26:
					position, tokenIndex = position24, tokenIndex24
					if buffer[position] != rune('\f') {
						goto l22
					}
					position++
				}
			l24:
				add(ruleEOL, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 5 Comment <- <('#' (!('\r' / '\n') .)*)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				if buffer[position] != rune('#') {
					goto l27
				}
				position++
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					{
						position31, tokenIndex31 := position, tokenIndex
						{
							position32, tokenIndex32 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l33
							}
							position++
							goto l32
						l33:
							position, tokenIndex = position32, tokenIndex32
							if buffer[position] != rune('\n') {
								goto l31
							}
							position++
						}
					l32:
						goto l30
					l31:
						position, tokenIndex = position31, tokenIndex31
					}
					if !matchDot() {
						goto l30
					}
					goto l29
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
				add(ruleComment, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 6 _ <- <(Comment / (WS / EOL)+)*> */
		func() bool {
			{
				position35 := position
			l36:
				{
					position37, tokenIndex37 := position, tokenIndex
					{
						position38, tokenIndex38 := position, tokenIndex
						if !_rules[ruleComment]() {
							goto l39
						}
						goto l38
					l39:
						position, tokenIndex = position38, tokenIndex38
						{
							position42, tokenIndex42 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l43
							}
							goto l42
						l43:
							position, tokenIndex = position42, tokenIndex42
							if !_rules[ruleEOL]() {
								goto l37
							}
						}
					l42:
					l40:
						{
							position41, tokenIndex41 := position, tokenIndex
							{
								position44, tokenIndex44 := position, tokenIndex
								if !_rules[ruleWS]() {
									goto l45
								}
								goto l44
							l45:
								position, tokenIndex = position44, tokenIndex44
								if !_rules[ruleEOL]() {
									goto l41
								}
							}
						l44:
							goto l40
						l41:
							position, tokenIndex = position41, tokenIndex41
						}
					}
				l38:
					goto l36
				l37:
					position, tokenIndex = position37, tokenIndex37
				}
				add(rule_, position35)
			}
			return true
		},
		/* 7 EOF <- <!.> */
		func() bool {
			position46, tokenIndex46 := position, tokenIndex
			{
				position47 := position
				{
					position48, tokenIndex48 := position, tokenIndex
					if !matchDot() {
						goto l48
					}
					goto l46
				l48:
					position, tokenIndex = position48, tokenIndex48
				}
				add(ruleEOF, position47)
			}
			return true
		l46:
			position, tokenIndex = position46, tokenIndex46
			return false
		},
		/* 8 DirectiveName <- <([A-Z]+ ('_' / [A-Z])*)> */
		func() bool {
			position49, tokenIndex49 := position, tokenIndex
			{
				position50 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l49
				}
				position++
			l51:
				{
					position52, tokenIndex52 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l52
					}
					position++
					goto l51
				l52:
					position, tokenIndex = position52, tokenIndex52
				}
			l53:
				{
					position54, tokenIndex54 := position, tokenIndex
					{
						position55, tokenIndex55 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l56
						}
						position++
						goto l55
					l56:
						position, tokenIndex = position55, tokenIndex55
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l54
						}
						position++
					}
				l55:
					goto l53
				l54:
					position, tokenIndex = position54, tokenIndex54
				}
				add(ruleDirectiveName, position50)
			}
			return true
		l49:
			position, tokenIndex = position49, tokenIndex49
			return false
		},
		/* 9 UpperCaseString <- <[A-Z]+> */
		func() bool {
			position57, tokenIndex57 := position, tokenIndex
			{
				position58 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l57
				}
				position++
			l59:
				{
					position60, tokenIndex60 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l60
					}
					position++
					goto l59
				l60:
					position, tokenIndex = position60, tokenIndex60
				}
				add(ruleUpperCaseString, position58)
			}
			return true
		l57:
			position, tokenIndex = position57, tokenIndex57
			return false
		},
		/* 10 IntString <- <[0-9]+> */
		func() bool {
			position61, tokenIndex61 := position, tokenIndex
			{
				position62 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l61
				}
				position++
			l63:
				{
					position64, tokenIndex64 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l64
					}
					position++
					goto l63
				l64:
					position, tokenIndex = position64, tokenIndex64
				}
				add(ruleIntString, position62)
			}
			return true
		l61:
			position, tokenIndex = position61, tokenIndex61
			return false
		},
		/* 11 PathString <- <('_' / [a-z] / [A-Z] / [0-9] / '-' / '/' / '.')+> */
		func() bool {
			position65, tokenIndex65 := position, tokenIndex
			{
				position66 := position
				{
					position69, tokenIndex69 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l70
					}
					position++
					goto l69
				l70:
					position, tokenIndex = position69, tokenIndex69
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l71
					}
					position++
					goto l69
				l71:
					position, tokenIndex = position69, tokenIndex69
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l72
					}
					position++
					goto l69
				l72:
					position, tokenIndex = position69, tokenIndex69
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l73
					}
					position++
					goto l69
				l73:
					position, tokenIndex = position69, tokenIndex69
					if buffer[position] != rune('-') {
						goto l74
					}
					position++
					goto l69
				l74:
					position, tokenIndex = position69, tokenIndex69
					if buffer[position] != rune('/') {
						goto l75
					}
					position++
					goto l69
				l75:
					position, tokenIndex = position69, tokenIndex69
					if buffer[position] != rune('.') {
						goto l65
					}
					position++
				}
			l69:
			l67:
				{
					position68, tokenIndex68 := position, tokenIndex
					{
						position76, tokenIndex76 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l77
						}
						position++
						goto l76
					l77:
						position, tokenIndex = position76, tokenIndex76
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l78
						}
						position++
						goto l76
					l78:
						position, tokenIndex = position76, tokenIndex76
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l79
						}
						position++
						goto l76
					l79:
						position, tokenIndex = position76, tokenIndex76
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l80
						}
						position++
						goto l76
					l80:
						position, tokenIndex = position76, tokenIndex76
						if buffer[position] != rune('-') {
							goto l81
						}
						position++
						goto l76
					l81:
						position, tokenIndex = position76, tokenIndex76
						if buffer[position] != rune('/') {
							goto l82
						}
						position++
						goto l76
					l82:
						position, tokenIndex = position76, tokenIndex76
						if buffer[position] != rune('.') {
							goto l68
						}
						position++
					}
				l76:
					goto l67
				l68:
					position, tokenIndex = position68, tokenIndex68
				}
				add(rulePathString, position66)
			}
			return true
		l65:
			position, tokenIndex = position65, tokenIndex65
			return false
		},
		/* 12 Paths <- <(PathString (',' WS* PathString)*)> */
		func() bool {
			position83, tokenIndex83 := position, tokenIndex
			{
				position84 := position
				if !_rules[rulePathString]() {
					goto l83
				}
			l85:
				{
					position86, tokenIndex86 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l86
					}
					position++
				l87:
					{
						position88, tokenIndex88 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l88
						}
						goto l87
					l88:
						position, tokenIndex = position88, tokenIndex88
					}
					if !_rules[rulePathString]() {
						goto l86
					}
					goto l85
				l86:
					position, tokenIndex = position86, tokenIndex86
				}
				add(rulePaths, position84)
			}
			return true
		l83:
			position, tokenIndex = position83, tokenIndex83
			return false
		},
		/* 13 Directive <- <('{' '-' '#' WS+ DirectiveName WS+ (IntString / UpperCaseString / Paths) WS+ ('#' '-' '}'))> */
		func() bool {
			position89, tokenIndex89 := position, tokenIndex
			{
				position90 := position
				if buffer[position] != rune('{') {
					goto l89
				}
				position++
				if buffer[position] != rune('-') {
					goto l89
				}
				position++
				if buffer[position] != rune('#') {
					goto l89
				}
				position++
				if !_rules[ruleWS]() {
					goto l89
				}
			l91:
				{
					position92, tokenIndex92 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l92
					}
					goto l91
				l92:
					position, tokenIndex = position92, tokenIndex92
				}
				if !_rules[ruleDirectiveName]() {
					goto l89
				}
				if !_rules[ruleWS]() {
					goto l89
				}
			l93:
				{
					position94, tokenIndex94 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l94
					}
					goto l93
				l94:
					position, tokenIndex = position94, tokenIndex94
				}
				{
					position95, tokenIndex95 := position, tokenIndex
					if !_rules[ruleIntString]() {
						goto l96
					}
					goto l95
				l96:
					position, tokenIndex = position95, tokenIndex95
					if !_rules[ruleUpperCaseString]() {
						goto l97
					}
					goto l95
				l97:
					position, tokenIndex = position95, tokenIndex95
					if !_rules[rulePaths]() {
						goto l89
					}
				}
			l95:
				if !_rules[ruleWS]() {
					goto l89
				}
			l98:
				{
					position99, tokenIndex99 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l99
					}
					goto l98
				l99:
					position, tokenIndex = position99, tokenIndex99
				}
				if buffer[position] != rune('#') {
					goto l89
				}
				position++
				if buffer[position] != rune('-') {
					goto l89
				}
				position++
				if buffer[position] != rune('}') {
					goto l89
				}
				position++
				add(ruleDirective, position90)
			}
			return true
		l89:
			position, tokenIndex = position89, tokenIndex89
			return false
		},
		/* 14 Declaration <- <((Variable / StrictVariable / Func) _ ';'?)> */
		func() bool {
			position100, tokenIndex100 := position, tokenIndex
			{
				position101 := position
				{
					position102, tokenIndex102 := position, tokenIndex
					if !_rules[ruleVariable]() {
						goto l103
					}
					goto l102
				l103:
					position, tokenIndex = position102, tokenIndex102
					if !_rules[ruleStrictVariable]() {
						goto l104
					}
					goto l102
				l104:
					position, tokenIndex = position102, tokenIndex102
					if !_rules[ruleFunc]() {
						goto l100
					}
				}
			l102:
				if !_rules[rule_]() {
					goto l100
				}
				{
					position105, tokenIndex105 := position, tokenIndex
					if buffer[position] != rune(';') {
						goto l105
					}
					position++
					goto l106
				l105:
					position, tokenIndex = position105, tokenIndex105
				}
			l106:
				add(ruleDeclaration, position101)
			}
			return true
		l100:
			position, tokenIndex = position100, tokenIndex100
			return false
		},
		/* 15 Variable <- <('l' 'e' 't' _ (Identifier / TupleRef) _ '=' _ Expr)> */
		func() bool {
			position107, tokenIndex107 := position, tokenIndex
			{
				position108 := position
				if buffer[position] != rune('l') {
					goto l107
				}
				position++
				if buffer[position] != rune('e') {
					goto l107
				}
				position++
				if buffer[position] != rune('t') {
					goto l107
				}
				position++
				if !_rules[rule_]() {
					goto l107
				}
				{
					position109, tokenIndex109 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l110
					}
					goto l109
				l110:
					position, tokenIndex = position109, tokenIndex109
					if !_rules[ruleTupleRef]() {
						goto l107
					}
				}
			l109:
				if !_rules[rule_]() {
					goto l107
				}
				if buffer[position] != rune('=') {
					goto l107
				}
				position++
				if !_rules[rule_]() {
					goto l107
				}
				if !_rules[ruleExpr]() {
					goto l107
				}
				add(ruleVariable, position108)
			}
			return true
		l107:
			position, tokenIndex = position107, tokenIndex107
			return false
		},
		/* 16 StrictVariable <- <('s' 't' 'r' 'i' 'c' 't' _ (Identifier / TupleRef) _ '=' _ Expr)> */
		func() bool {
			position111, tokenIndex111 := position, tokenIndex
			{
				position112 := position
				if buffer[position] != rune('s') {
					goto l111
				}
				position++
				if buffer[position] != rune('t') {
					goto l111
				}
				position++
				if buffer[position] != rune('r') {
					goto l111
				}
				position++
				if buffer[position] != rune('i') {
					goto l111
				}
				position++
				if buffer[position] != rune('c') {
					goto l111
				}
				position++
				if buffer[position] != rune('t') {
					goto l111
				}
				position++
				if !_rules[rule_]() {
					goto l111
				}
				{
					position113, tokenIndex113 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l114
					}
					goto l113
				l114:
					position, tokenIndex = position113, tokenIndex113
					if !_rules[ruleTupleRef]() {
						goto l111
					}
				}
			l113:
				if !_rules[rule_]() {
					goto l111
				}
				if buffer[position] != rune('=') {
					goto l111
				}
				position++
				if !_rules[rule_]() {
					goto l111
				}
				if !_rules[ruleExpr]() {
					goto l111
				}
				add(ruleStrictVariable, position112)
			}
			return true
		l111:
			position, tokenIndex = position111, tokenIndex111
			return false
		},
		/* 17 Func <- <('f' 'u' 'n' 'c' _ Identifier _ '(' _ FuncArgSeq? _ ')' _ '=' _ Expr)> */
		func() bool {
			position115, tokenIndex115 := position, tokenIndex
			{
				position116 := position
				if buffer[position] != rune('f') {
					goto l115
				}
				position++
				if buffer[position] != rune('u') {
					goto l115
				}
				position++
				if buffer[position] != rune('n') {
					goto l115
				}
				position++
				if buffer[position] != rune('c') {
					goto l115
				}
				position++
				if !_rules[rule_]() {
					goto l115
				}
				if !_rules[ruleIdentifier]() {
					goto l115
				}
				if !_rules[rule_]() {
					goto l115
				}
				if buffer[position] != rune('(') {
					goto l115
				}
				position++
				if !_rules[rule_]() {
					goto l115
				}
				{
					position117, tokenIndex117 := position, tokenIndex
					if !_rules[ruleFuncArgSeq]() {
						goto l117
					}
					goto l118
				l117:
					position, tokenIndex = position117, tokenIndex117
				}
			l118:
				if !_rules[rule_]() {
					goto l115
				}
				if buffer[position] != rune(')') {
					goto l115
				}
				position++
				if !_rules[rule_]() {
					goto l115
				}
				if buffer[position] != rune('=') {
					goto l115
				}
				position++
				if !_rules[rule_]() {
					goto l115
				}
				if !_rules[ruleExpr]() {
					goto l115
				}
				add(ruleFunc, position116)
			}
			return true
		l115:
			position, tokenIndex = position115, tokenIndex115
			return false
		},
		/* 18 FuncArgSeq <- <(FuncArg (_ ',' _ FuncArgSeq)?)> */
		func() bool {
			position119, tokenIndex119 := position, tokenIndex
			{
				position120 := position
				if !_rules[ruleFuncArg]() {
					goto l119
				}
				{
					position121, tokenIndex121 := position, tokenIndex
					if !_rules[rule_]() {
						goto l121
					}
					if buffer[position] != rune(',') {
						goto l121
					}
					position++
					if !_rules[rule_]() {
						goto l121
					}
					if !_rules[ruleFuncArgSeq]() {
						goto l121
					}
					goto l122
				l121:
					position, tokenIndex = position121, tokenIndex121
				}
			l122:
				add(ruleFuncArgSeq, position120)
			}
			return true
		l119:
			position, tokenIndex = position119, tokenIndex119
			return false
		},
		/* 19 FuncArg <- <(Identifier _ ':' _ Types)> */
		func() bool {
			position123, tokenIndex123 := position, tokenIndex
			{
				position124 := position
				if !_rules[ruleIdentifier]() {
					goto l123
				}
				if !_rules[rule_]() {
					goto l123
				}
				if buffer[position] != rune(':') {
					goto l123
				}
				position++
				if !_rules[rule_]() {
					goto l123
				}
				if !_rules[ruleTypes]() {
					goto l123
				}
				add(ruleFuncArg, position124)
			}
			return true
		l123:
			position, tokenIndex = position123, tokenIndex123
			return false
		},
		/* 20 AnnotatedFunc <- <(AnnotationSeq _ Func)> */
		func() bool {
			position125, tokenIndex125 := position, tokenIndex
			{
				position126 := position
				if !_rules[ruleAnnotationSeq]() {
					goto l125
				}
				if !_rules[rule_]() {
					goto l125
				}
				if !_rules[ruleFunc]() {
					goto l125
				}
				add(ruleAnnotatedFunc, position126)
			}
			return true
		l125:
			position, tokenIndex = position125, tokenIndex125
			return false
		},
		/* 21 Annotation <- <('@' Identifier _ '(' _ IdentifierSeq _ ')')> */
		func() bool {
			position127, tokenIndex127 := position, tokenIndex
			{
				position128 := position
				if buffer[position] != rune('@') {
					goto l127
				}
				position++
				if !_rules[ruleIdentifier]() {
					goto l127
				}
				if !_rules[rule_]() {
					goto l127
				}
				if buffer[position] != rune('(') {
					goto l127
				}
				position++
				if !_rules[rule_]() {
					goto l127
				}
				if !_rules[ruleIdentifierSeq]() {
					goto l127
				}
				if !_rules[rule_]() {
					goto l127
				}
				if buffer[position] != rune(')') {
					goto l127
				}
				position++
				add(ruleAnnotation, position128)
			}
			return true
		l127:
			position, tokenIndex = position127, tokenIndex127
			return false
		},
		/* 22 IdentifierSeq <- <(Identifier (_ ',' _ IdentifierSeq)?)> */
		func() bool {
			position129, tokenIndex129 := position, tokenIndex
			{
				position130 := position
				if !_rules[ruleIdentifier]() {
					goto l129
				}
				{
					position131, tokenIndex131 := position, tokenIndex
					if !_rules[rule_]() {
						goto l131
					}
					if buffer[position] != rune(',') {
						goto l131
					}
					position++
					if !_rules[rule_]() {
						goto l131
					}
					if !_rules[ruleIdentifierSeq]() {
						goto l131
					}
					goto l132
				l131:
					position, tokenIndex = position131, tokenIndex131
				}
			l132:
				add(ruleIdentifierSeq, position130)
			}
			return true
		l129:
			position, tokenIndex = position129, tokenIndex129
			return false
		},
		/* 23 AnnotationSeq <- <(Annotation (_ AnnotationSeq)?)> */
		func() bool {
			position133, tokenIndex133 := position, tokenIndex
			{
				position134 := position
				if !_rules[ruleAnnotation]() {
					goto l133
				}
				{
					position135, tokenIndex135 := position, tokenIndex
					if !_rules[rule_]() {
						goto l135
					}
					if !_rules[ruleAnnotationSeq]() {
						goto l135
					}
					goto l136
				l135:
					position, tokenIndex = position135, tokenIndex135
				}
			l136:
				add(ruleAnnotationSeq, position134)
			}
			return true
		l133:
			position, tokenIndex = position133, tokenIndex133
			return false
		},
		/* 24 OrOp <- <('|' '|')> */
		func() bool {
			position137, tokenIndex137 := position, tokenIndex
			{
				position138 := position
				if buffer[position] != rune('|') {
					goto l137
				}
				position++
				if buffer[position] != rune('|') {
					goto l137
				}
				position++
				add(ruleOrOp, position138)
			}
			return true
		l137:
			position, tokenIndex = position137, tokenIndex137
			return false
		},
		/* 25 AndOp <- <('&' '&')> */
		func() bool {
			position139, tokenIndex139 := position, tokenIndex
			{
				position140 := position
				if buffer[position] != rune('&') {
					goto l139
				}
				position++
				if buffer[position] != rune('&') {
					goto l139
				}
				position++
				add(ruleAndOp, position140)
			}
			return true
		l139:
			position, tokenIndex = position139, tokenIndex139
			return false
		},
		/* 26 EqGroupOp <- <(EqOp / NeOp)> */
		func() bool {
			position141, tokenIndex141 := position, tokenIndex
			{
				position142 := position
				{
					position143, tokenIndex143 := position, tokenIndex
					if !_rules[ruleEqOp]() {
						goto l144
					}
					goto l143
				l144:
					position, tokenIndex = position143, tokenIndex143
					if !_rules[ruleNeOp]() {
						goto l141
					}
				}
			l143:
				add(ruleEqGroupOp, position142)
			}
			return true
		l141:
			position, tokenIndex = position141, tokenIndex141
			return false
		},
		/* 27 EqOp <- <('=' '=')> */
		func() bool {
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				if buffer[position] != rune('=') {
					goto l145
				}
				position++
				if buffer[position] != rune('=') {
					goto l145
				}
				position++
				add(ruleEqOp, position146)
			}
			return true
		l145:
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 28 NeOp <- <('!' '=')> */
		func() bool {
			position147, tokenIndex147 := position, tokenIndex
			{
				position148 := position
				if buffer[position] != rune('!') {
					goto l147
				}
				position++
				if buffer[position] != rune('=') {
					goto l147
				}
				position++
				add(ruleNeOp, position148)
			}
			return true
		l147:
			position, tokenIndex = position147, tokenIndex147
			return false
		},
		/* 29 CompareGroupOp <- <(GtOp / GeOp / LtOp / LeOp)> */
		func() bool {
			position149, tokenIndex149 := position, tokenIndex
			{
				position150 := position
				{
					position151, tokenIndex151 := position, tokenIndex
					if !_rules[ruleGtOp]() {
						goto l152
					}
					goto l151
				l152:
					position, tokenIndex = position151, tokenIndex151
					if !_rules[ruleGeOp]() {
						goto l153
					}
					goto l151
				l153:
					position, tokenIndex = position151, tokenIndex151
					if !_rules[ruleLtOp]() {
						goto l154
					}
					goto l151
				l154:
					position, tokenIndex = position151, tokenIndex151
					if !_rules[ruleLeOp]() {
						goto l149
					}
				}
			l151:
				add(ruleCompareGroupOp, position150)
			}
			return true
		l149:
			position, tokenIndex = position149, tokenIndex149
			return false
		},
		/* 30 GtOp <- <('>' !'=')> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				if buffer[position] != rune('>') {
					goto l155
				}
				position++
				{
					position157, tokenIndex157 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l157
					}
					position++
					goto l155
				l157:
					position, tokenIndex = position157, tokenIndex157
				}
				add(ruleGtOp, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 31 GeOp <- <('>' '=')> */
		func() bool {
			position158, tokenIndex158 := position, tokenIndex
			{
				position159 := position
				if buffer[position] != rune('>') {
					goto l158
				}
				position++
				if buffer[position] != rune('=') {
					goto l158
				}
				position++
				add(ruleGeOp, position159)
			}
			return true
		l158:
			position, tokenIndex = position158, tokenIndex158
			return false
		},
		/* 32 LtOp <- <('<' !'=')> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				if buffer[position] != rune('<') {
					goto l160
				}
				position++
				{
					position162, tokenIndex162 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l162
					}
					position++
					goto l160
				l162:
					position, tokenIndex = position162, tokenIndex162
				}
				add(ruleLtOp, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 33 LeOp <- <('<' '=')> */
		func() bool {
			position163, tokenIndex163 := position, tokenIndex
			{
				position164 := position
				if buffer[position] != rune('<') {
					goto l163
				}
				position++
				if buffer[position] != rune('=') {
					goto l163
				}
				position++
				add(ruleLeOp, position164)
			}
			return true
		l163:
			position, tokenIndex = position163, tokenIndex163
			return false
		},
		/* 34 ListGroupOp <- <(ConsOp / ConcatOp / AppendOp)> */
		func() bool {
			position165, tokenIndex165 := position, tokenIndex
			{
				position166 := position
				{
					position167, tokenIndex167 := position, tokenIndex
					if !_rules[ruleConsOp]() {
						goto l168
					}
					goto l167
				l168:
					position, tokenIndex = position167, tokenIndex167
					if !_rules[ruleConcatOp]() {
						goto l169
					}
					goto l167
				l169:
					position, tokenIndex = position167, tokenIndex167
					if !_rules[ruleAppendOp]() {
						goto l165
					}
				}
			l167:
				add(ruleListGroupOp, position166)
			}
			return true
		l165:
			position, tokenIndex = position165, tokenIndex165
			return false
		},
		/* 35 ConsOp <- <(':' ':')> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				if buffer[position] != rune(':') {
					goto l170
				}
				position++
				if buffer[position] != rune(':') {
					goto l170
				}
				position++
				add(ruleConsOp, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 36 ConcatOp <- <('+' '+')> */
		func() bool {
			position172, tokenIndex172 := position, tokenIndex
			{
				position173 := position
				if buffer[position] != rune('+') {
					goto l172
				}
				position++
				if buffer[position] != rune('+') {
					goto l172
				}
				position++
				add(ruleConcatOp, position173)
			}
			return true
		l172:
			position, tokenIndex = position172, tokenIndex172
			return false
		},
		/* 37 AppendOp <- <(':' '+')> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				if buffer[position] != rune(':') {
					goto l174
				}
				position++
				if buffer[position] != rune('+') {
					goto l174
				}
				position++
				add(ruleAppendOp, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 38 SumGroupOp <- <(SumOp / SubOp)> */
		func() bool {
			position176, tokenIndex176 := position, tokenIndex
			{
				position177 := position
				{
					position178, tokenIndex178 := position, tokenIndex
					if !_rules[ruleSumOp]() {
						goto l179
					}
					goto l178
				l179:
					position, tokenIndex = position178, tokenIndex178
					if !_rules[ruleSubOp]() {
						goto l176
					}
				}
			l178:
				add(ruleSumGroupOp, position177)
			}
			return true
		l176:
			position, tokenIndex = position176, tokenIndex176
			return false
		},
		/* 39 SumOp <- <('+' !'+')> */
		func() bool {
			position180, tokenIndex180 := position, tokenIndex
			{
				position181 := position
				if buffer[position] != rune('+') {
					goto l180
				}
				position++
				{
					position182, tokenIndex182 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l182
					}
					position++
					goto l180
				l182:
					position, tokenIndex = position182, tokenIndex182
				}
				add(ruleSumOp, position181)
			}
			return true
		l180:
			position, tokenIndex = position180, tokenIndex180
			return false
		},
		/* 40 SubOp <- <'-'> */
		func() bool {
			position183, tokenIndex183 := position, tokenIndex
			{
				position184 := position
				if buffer[position] != rune('-') {
					goto l183
				}
				position++
				add(ruleSubOp, position184)
			}
			return true
		l183:
			position, tokenIndex = position183, tokenIndex183
			return false
		},
		/* 41 MultGroupOp <- <(MulOp / DivOp / ModOp)> */
		func() bool {
			position185, tokenIndex185 := position, tokenIndex
			{
				position186 := position
				{
					position187, tokenIndex187 := position, tokenIndex
					if !_rules[ruleMulOp]() {
						goto l188
					}
					goto l187
				l188:
					position, tokenIndex = position187, tokenIndex187
					if !_rules[ruleDivOp]() {
						goto l189
					}
					goto l187
				l189:
					position, tokenIndex = position187, tokenIndex187
					if !_rules[ruleModOp]() {
						goto l185
					}
				}
			l187:
				add(ruleMultGroupOp, position186)
			}
			return true
		l185:
			position, tokenIndex = position185, tokenIndex185
			return false
		},
		/* 42 MulOp <- <'*'> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if buffer[position] != rune('*') {
					goto l190
				}
				position++
				add(ruleMulOp, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 43 DivOp <- <'/'> */
		func() bool {
			position192, tokenIndex192 := position, tokenIndex
			{
				position193 := position
				if buffer[position] != rune('/') {
					goto l192
				}
				position++
				add(ruleDivOp, position193)
			}
			return true
		l192:
			position, tokenIndex = position192, tokenIndex192
			return false
		},
		/* 44 ModOp <- <'%'> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
				if buffer[position] != rune('%') {
					goto l194
				}
				position++
				add(ruleModOp, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 45 UnaryOp <- <(PositiveOp / NegativeOp / NotOp)> */
		func() bool {
			position196, tokenIndex196 := position, tokenIndex
			{
				position197 := position
				{
					position198, tokenIndex198 := position, tokenIndex
					if !_rules[rulePositiveOp]() {
						goto l199
					}
					goto l198
				l199:
					position, tokenIndex = position198, tokenIndex198
					if !_rules[ruleNegativeOp]() {
						goto l200
					}
					goto l198
				l200:
					position, tokenIndex = position198, tokenIndex198
					if !_rules[ruleNotOp]() {
						goto l196
					}
				}
			l198:
				add(ruleUnaryOp, position197)
			}
			return true
		l196:
			position, tokenIndex = position196, tokenIndex196
			return false
		},
		/* 46 PositiveOp <- <'+'> */
		func() bool {
			position201, tokenIndex201 := position, tokenIndex
			{
				position202 := position
				if buffer[position] != rune('+') {
					goto l201
				}
				position++
				add(rulePositiveOp, position202)
			}
			return true
		l201:
			position, tokenIndex = position201, tokenIndex201
			return false
		},
		/* 47 NegativeOp <- <('-' !'#')> */
		func() bool {
			position203, tokenIndex203 := position, tokenIndex
			{
				position204 := position
				if buffer[position] != rune('-') {
					goto l203
				}
				position++
				{
					position205, tokenIndex205 := position, tokenIndex
					if buffer[position] != rune('#') {
						goto l205
					}
					position++
					goto l203
				l205:
					position, tokenIndex = position205, tokenIndex205
				}
				add(ruleNegativeOp, position204)
			}
			return true
		l203:
			position, tokenIndex = position203, tokenIndex203
			return false
		},
		/* 48 NotOp <- <'!'> */
		func() bool {
			position206, tokenIndex206 := position, tokenIndex
			{
				position207 := position
				if buffer[position] != rune('!') {
					goto l206
				}
				position++
				add(ruleNotOp, position207)
			}
			return true
		l206:
			position, tokenIndex = position206, tokenIndex206
			return false
		},
		/* 49 ReservedWords <- <(('l' 'e' 't') / ('s' 't' 'r' 'i' 'c' 't') / ('b' 'a' 's' 'e' '1' '6') / ('b' 'a' 's' 'e' '5' '8') / ('b' 'a' 's' 'e' '6' '4') / ('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e') / ('i' 'f') / ('t' 'h' 'e' 'n') / ('e' 'l' 's' 'e') / ('m' 'a' 't' 'c' 'h') / ('c' 'a' 's' 'e') / ('f' 'u' 'n' 'c') / ('F' 'O' 'L' 'D'))> */
		func() bool {
			position208, tokenIndex208 := position, tokenIndex
			{
				position209 := position
				{
					position210, tokenIndex210 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l211
					}
					position++
					if buffer[position] != rune('e') {
						goto l211
					}
					position++
					if buffer[position] != rune('t') {
						goto l211
					}
					position++
					goto l210
				l211:
					position, tokenIndex = position210, tokenIndex210
					if buffer[position] != rune('s') {
						goto l212
					}
					position++
					if buffer[position] != rune('t') {
						goto l212
					}
					position++
					if buffer[position] != rune('r') {
						goto l212
					}
					position++
					if buffer[position] != rune('i') {
						goto l212
					}
					position++
					if buffer[position] != rune('c') {
						goto l212
					}
					position++
					if buffer[position] != rune('t') {
						goto l212
					}
					position++
					goto l210
				l212:
					position, tokenIndex = position210, tokenIndex210
					if buffer[position] != rune('b') {
						goto l213
					}
					position++
					if buffer[position] != rune('a') {
						goto l213
					}
					position++
					if buffer[position] != rune('s') {
						goto l213
					}
					position++
					if buffer[position] != rune('e') {
						goto l213
					}
					position++
					if buffer[position] != rune('1') {
						goto l213
					}
					position++
					if buffer[position] != rune('6') {
						goto l213
					}
					position++
					goto l210
				l213:
					position, tokenIndex = position210, tokenIndex210
					if buffer[position] != rune('b') {
						goto l214
					}
					position++
					if buffer[position] != rune('a') {
						goto l214
					}
					position++
					if buffer[position] != rune('s') {
						goto l214
					}
					position++
					if buffer[position] != rune('e') {
						goto l214
					}
					position++
					if buffer[position] != rune('5') {
						goto l214
					}
					position++
					if buffer[position] != rune('8') {
						goto l214
					}
					position++
					goto l210
				l214:
					position, tokenIndex = position210, tokenIndex210
					if buffer[position] != rune('b') {
						goto l215
					}
					position++
					if buffer[position] != rune('a') {
						goto l215
					}
					position++
					if buffer[position] != rune('s') {
						goto l215
					}
					position++
					if buffer[position] != rune('e') {
						goto l215
					}
					position++
					if buffer[position] != rune('6') {
						goto l215
					}
					position++
					if buffer[position] != rune('4') {
						goto l215
					}
					position++
					goto l210
				l215:
					position, tokenIndex = position210, tokenIndex210
					if buffer[position] != rune('t') {
						goto l216
					}
					position++
					if buffer[position] != rune('r') {
						goto l216
					}
					position++
					if buffer[position] != rune('u') {
						goto l216
					}
					position++
					if buffer[position] != rune('e') {
						goto l216
					}
					position++
					goto l210
				l216:
					position, tokenIndex = position210, tokenIndex210
					if buffer[position] != rune('f') {
						goto l217
					}
					position++
					if buffer[position] != rune('a') {
						goto l217
					}
					position++
					if buffer[position] != rune('l') {
						goto l217
					}
					position++
					if buffer[position] != rune('s') {
						goto l217
					}
					position++
					if buffer[position] != rune('e') {
						goto l217
					}
					position++
					goto l210
				l217:
					position, tokenIndex = position210, tokenIndex210
					if buffer[position] != rune('i') {
						goto l218
					}
					position++
					if buffer[position] != rune('f') {
						goto l218
					}
					position++
					goto l210
				l218:
					position, tokenIndex = position210, tokenIndex210
					if buffer[position] != rune('t') {
						goto l219
					}
					position++
					if buffer[position] != rune('h') {
						goto l219
					}
					position++
					if buffer[position] != rune('e') {
						goto l219
					}
					position++
					if buffer[position] != rune('n') {
						goto l219
					}
					position++
					goto l210
				l219:
					position, tokenIndex = position210, tokenIndex210
					if buffer[position] != rune('e') {
						goto l220
					}
					position++
					if buffer[position] != rune('l') {
						goto l220
					}
					position++
					if buffer[position] != rune('s') {
						goto l220
					}
					position++
					if buffer[position] != rune('e') {
						goto l220
					}
					position++
					goto l210
				l220:
					position, tokenIndex = position210, tokenIndex210
					if buffer[position] != rune('m') {
						goto l221
					}
					position++
					if buffer[position] != rune('a') {
						goto l221
					}
					position++
					if buffer[position] != rune('t') {
						goto l221
					}
					position++
					if buffer[position] != rune('c') {
						goto l221
					}
					position++
					if buffer[position] != rune('h') {
						goto l221
					}
					position++
					goto l210
				l221:
					position, tokenIndex = position210, tokenIndex210
					if buffer[position] != rune('c') {
						goto l222
					}
					position++
					if buffer[position] != rune('a') {
						goto l222
					}
					position++
					if buffer[position] != rune('s') {
						goto l222
					}
					position++
					if buffer[position] != rune('e') {
						goto l222
					}
					position++
					goto l210
				l222:
					position, tokenIndex = position210, tokenIndex210
					if buffer[position] != rune('f') {
						goto l223
					}
					position++
					if buffer[position] != rune('u') {
						goto l223
					}
					position++
					if buffer[position] != rune('n') {
						goto l223
					}
					position++
					if buffer[position] != rune('c') {
						goto l223
					}
					position++
					goto l210
				l223:
					position, tokenIndex = position210, tokenIndex210
					if buffer[position] != rune('F') {
						goto l208
					}
					position++
					if buffer[position] != rune('O') {
						goto l208
					}
					position++
					if buffer[position] != rune('L') {
						goto l208
					}
					position++
					if buffer[position] != rune('D') {
						goto l208
					}
					position++
				}
			l210:
				add(ruleReservedWords, position209)
			}
			return true
		l208:
			position, tokenIndex = position208, tokenIndex208
			return false
		},
		/* 50 Const <- <(Integer / String / ByteVector / Boolean / List / Tuple)> */
		func() bool {
			position224, tokenIndex224 := position, tokenIndex
			{
				position225 := position
				{
					position226, tokenIndex226 := position, tokenIndex
					if !_rules[ruleInteger]() {
						goto l227
					}
					goto l226
				l227:
					position, tokenIndex = position226, tokenIndex226
					if !_rules[ruleString]() {
						goto l228
					}
					goto l226
				l228:
					position, tokenIndex = position226, tokenIndex226
					if !_rules[ruleByteVector]() {
						goto l229
					}
					goto l226
				l229:
					position, tokenIndex = position226, tokenIndex226
					if !_rules[ruleBoolean]() {
						goto l230
					}
					goto l226
				l230:
					position, tokenIndex = position226, tokenIndex226
					if !_rules[ruleList]() {
						goto l231
					}
					goto l226
				l231:
					position, tokenIndex = position226, tokenIndex226
					if !_rules[ruleTuple]() {
						goto l224
					}
				}
			l226:
				add(ruleConst, position225)
			}
			return true
		l224:
			position, tokenIndex = position224, tokenIndex224
			return false
		},
		/* 51 Identifier <- <((!ReservedWords ([A-Z] / [a-z] / ('_' &([A-Z] / [a-z]))) ([A-Z] / [a-z] / [0-9] / ('_' !'_'))*) / (ReservedWords ([A-Z] / [a-z] / [0-9] / ('_' !'_'))+))> */
		func() bool {
			position232, tokenIndex232 := position, tokenIndex
			{
				position233 := position
				{
					position234, tokenIndex234 := position, tokenIndex
					{
						position236, tokenIndex236 := position, tokenIndex
						if !_rules[ruleReservedWords]() {
							goto l236
						}
						goto l235
					l236:
						position, tokenIndex = position236, tokenIndex236
					}
					{
						position237, tokenIndex237 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l238
						}
						position++
						goto l237
					l238:
						position, tokenIndex = position237, tokenIndex237
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l239
						}
						position++
						goto l237
					l239:
						position, tokenIndex = position237, tokenIndex237
						if buffer[position] != rune('_') {
							goto l235
						}
						position++
						{
							position240, tokenIndex240 := position, tokenIndex
							{
								position241, tokenIndex241 := position, tokenIndex
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l242
								}
								position++
								goto l241
							l242:
								position, tokenIndex = position241, tokenIndex241
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l235
								}
								position++
							}
						l241:
							position, tokenIndex = position240, tokenIndex240
						}
					}
				l237:
				l243:
					{
						position244, tokenIndex244 := position, tokenIndex
						{
							position245, tokenIndex245 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l246
							}
							position++
							goto l245
						l246:
							position, tokenIndex = position245, tokenIndex245
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l247
							}
							position++
							goto l245
						l247:
							position, tokenIndex = position245, tokenIndex245
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l248
							}
							position++
							goto l245
						l248:
							position, tokenIndex = position245, tokenIndex245
							if buffer[position] != rune('_') {
								goto l244
							}
							position++
							{
								position249, tokenIndex249 := position, tokenIndex
								if buffer[position] != rune('_') {
									goto l249
								}
								position++
								goto l244
							l249:
								position, tokenIndex = position249, tokenIndex249
							}
						}
					l245:
						goto l243
					l244:
						position, tokenIndex = position244, tokenIndex244
					}
					goto l234
				l235:
					position, tokenIndex = position234, tokenIndex234
					if !_rules[ruleReservedWords]() {
						goto l232
					}
					{
						position252, tokenIndex252 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l253
						}
						position++
						goto l252
					l253:
						position, tokenIndex = position252, tokenIndex252
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l254
						}
						position++
						goto l252
					l254:
						position, tokenIndex = position252, tokenIndex252
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l255
						}
						position++
						goto l252
					l255:
						position, tokenIndex = position252, tokenIndex252
						if buffer[position] != rune('_') {
							goto l232
						}
						position++
						{
							position256, tokenIndex256 := position, tokenIndex
							if buffer[position] != rune('_') {
								goto l256
							}
							position++
							goto l232
						l256:
							position, tokenIndex = position256, tokenIndex256
						}
					}
				l252:
				l250:
					{
						position251, tokenIndex251 := position, tokenIndex
						{
							position257, tokenIndex257 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l258
							}
							position++
							goto l257
						l258:
							position, tokenIndex = position257, tokenIndex257
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l259
							}
							position++
							goto l257
						l259:
							position, tokenIndex = position257, tokenIndex257
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l260
							}
							position++
							goto l257
						l260:
							position, tokenIndex = position257, tokenIndex257
							if buffer[position] != rune('_') {
								goto l251
							}
							position++
							{
								position261, tokenIndex261 := position, tokenIndex
								if buffer[position] != rune('_') {
									goto l261
								}
								position++
								goto l251
							l261:
								position, tokenIndex = position261, tokenIndex261
							}
						}
					l257:
						goto l250
					l251:
						position, tokenIndex = position251, tokenIndex251
					}
				}
			l234:
				add(ruleIdentifier, position233)
			}
			return true
		l232:
			position, tokenIndex = position232, tokenIndex232
			return false
		},
		/* 52 Type <- <(([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])*)> */
		func() bool {
			position262, tokenIndex262 := position, tokenIndex
			{
				position263 := position
				{
					position264, tokenIndex264 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l265
					}
					position++
					goto l264
				l265:
					position, tokenIndex = position264, tokenIndex264
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l262
					}
					position++
				}
			l264:
			l266:
				{
					position267, tokenIndex267 := position, tokenIndex
					{
						position268, tokenIndex268 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l269
						}
						position++
						goto l268
					l269:
						position, tokenIndex = position268, tokenIndex268
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l270
						}
						position++
						goto l268
					l270:
						position, tokenIndex = position268, tokenIndex268
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l267
						}
						position++
					}
				l268:
					goto l266
				l267:
					position, tokenIndex = position267, tokenIndex267
				}
				add(ruleType, position263)
			}
			return true
		l262:
			position, tokenIndex = position262, tokenIndex262
			return false
		},
		/* 53 GenericType <- <(Type _ '[' _ Types _ ']')> */
		func() bool {
			position271, tokenIndex271 := position, tokenIndex
			{
				position272 := position
				if !_rules[ruleType]() {
					goto l271
				}
				if !_rules[rule_]() {
					goto l271
				}
				if buffer[position] != rune('[') {
					goto l271
				}
				position++
				if !_rules[rule_]() {
					goto l271
				}
				if !_rules[ruleTypes]() {
					goto l271
				}
				if !_rules[rule_]() {
					goto l271
				}
				if buffer[position] != rune(']') {
					goto l271
				}
				position++
				add(ruleGenericType, position272)
			}
			return true
		l271:
			position, tokenIndex = position271, tokenIndex271
			return false
		},
		/* 54 TupleType <- <('(' _ Types _ (',' _ Types)+ _ ')')> */
		func() bool {
			position273, tokenIndex273 := position, tokenIndex
			{
				position274 := position
				if buffer[position] != rune('(') {
					goto l273
				}
				position++
				if !_rules[rule_]() {
					goto l273
				}
				if !_rules[ruleTypes]() {
					goto l273
				}
				if !_rules[rule_]() {
					goto l273
				}
				if buffer[position] != rune(',') {
					goto l273
				}
				position++
				if !_rules[rule_]() {
					goto l273
				}
				if !_rules[ruleTypes]() {
					goto l273
				}
			l275:
				{
					position276, tokenIndex276 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l276
					}
					position++
					if !_rules[rule_]() {
						goto l276
					}
					if !_rules[ruleTypes]() {
						goto l276
					}
					goto l275
				l276:
					position, tokenIndex = position276, tokenIndex276
				}
				if !_rules[rule_]() {
					goto l273
				}
				if buffer[position] != rune(')') {
					goto l273
				}
				position++
				add(ruleTupleType, position274)
			}
			return true
		l273:
			position, tokenIndex = position273, tokenIndex273
			return false
		},
		/* 55 Types <- <((GenericType / TupleType / Type) (_ '|' _ Types)?)> */
		func() bool {
			position277, tokenIndex277 := position, tokenIndex
			{
				position278 := position
				{
					position279, tokenIndex279 := position, tokenIndex
					if !_rules[ruleGenericType]() {
						goto l280
					}
					goto l279
				l280:
					position, tokenIndex = position279, tokenIndex279
					if !_rules[ruleTupleType]() {
						goto l281
					}
					goto l279
				l281:
					position, tokenIndex = position279, tokenIndex279
					if !_rules[ruleType]() {
						goto l277
					}
				}
			l279:
				{
					position282, tokenIndex282 := position, tokenIndex
					if !_rules[rule_]() {
						goto l282
					}
					if buffer[position] != rune('|') {
						goto l282
					}
					position++
					if !_rules[rule_]() {
						goto l282
					}
					if !_rules[ruleTypes]() {
						goto l282
					}
					goto l283
				l282:
					position, tokenIndex = position282, tokenIndex282
				}
			l283:
				add(ruleTypes, position278)
			}
			return true
		l277:
			position, tokenIndex = position277, tokenIndex277
			return false
		},
		/* 56 Base16 <- <('b' 'a' 's' 'e' '1' '6' '\'' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')* '\'')> */
		func() bool {
			position284, tokenIndex284 := position, tokenIndex
			{
				position285 := position
				if buffer[position] != rune('b') {
					goto l284
				}
				position++
				if buffer[position] != rune('a') {
					goto l284
				}
				position++
				if buffer[position] != rune('s') {
					goto l284
				}
				position++
				if buffer[position] != rune('e') {
					goto l284
				}
				position++
				if buffer[position] != rune('1') {
					goto l284
				}
				position++
				if buffer[position] != rune('6') {
					goto l284
				}
				position++
				if buffer[position] != rune('\'') {
					goto l284
				}
				position++
			l286:
				{
					position287, tokenIndex287 := position, tokenIndex
					{
						position288, tokenIndex288 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l289
						}
						position++
						goto l288
					l289:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('A') {
							goto l290
						}
						position++
						goto l288
					l290:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('B') {
							goto l291
						}
						position++
						goto l288
					l291:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('C') {
							goto l292
						}
						position++
						goto l288
					l292:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('D') {
							goto l293
						}
						position++
						goto l288
					l293:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('E') {
							goto l294
						}
						position++
						goto l288
					l294:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('F') {
							goto l295
						}
						position++
						goto l288
					l295:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('a') {
							goto l296
						}
						position++
						goto l288
					l296:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('b') {
							goto l297
						}
						position++
						goto l288
					l297:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('c') {
							goto l298
						}
						position++
						goto l288
					l298:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('d') {
							goto l299
						}
						position++
						goto l288
					l299:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('e') {
							goto l300
						}
						position++
						goto l288
					l300:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('f') {
							goto l287
						}
						position++
					}
				l288:
					goto l286
				l287:
					position, tokenIndex = position287, tokenIndex287
				}
				if buffer[position] != rune('\'') {
					goto l284
				}
				position++
				add(ruleBase16, position285)
			}
			return true
		l284:
			position, tokenIndex = position284, tokenIndex284
			return false
		},
		/* 57 Base58 <- <('b' 'a' 's' 'e' '5' '8' '\'' ('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'J' / 'K' / 'L' / 'M' / 'N' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z')* '\'')> */
		func() bool {
			position301, tokenIndex301 := position, tokenIndex
			{
				position302 := position
				if buffer[position] != rune('b') {
					goto l301
				}
				position++
				if buffer[position] != rune('a') {
					goto l301
				}
				position++
				if buffer[position] != rune('s') {
					goto l301
				}
				position++
				if buffer[position] != rune('e') {
					goto l301
				}
				position++
				if buffer[position] != rune('5') {
					goto l301
				}
				position++
				if buffer[position] != rune('8') {
					goto l301
				}
				position++
				if buffer[position] != rune('\'') {
					goto l301
				}
				position++
			l303:
				{
					position304, tokenIndex304 := position, tokenIndex
					{
						position305, tokenIndex305 := position, tokenIndex
						if buffer[position] != rune('1') {
							goto l306
						}
						position++
						goto l305
					l306:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('2') {
							goto l307
						}
						position++
						goto l305
					l307:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('3') {
							goto l308
						}
						position++
						goto l305
					l308:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('4') {
							goto l309
						}
						position++
						goto l305
					l309:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('5') {
							goto l310
						}
						position++
						goto l305
					l310:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('6') {
							goto l311
						}
						position++
						goto l305
					l311:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('7') {
							goto l312
						}
						position++
						goto l305
					l312:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('8') {
							goto l313
						}
						position++
						goto l305
					l313:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('9') {
							goto l314
						}
						position++
						goto l305
					l314:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('A') {
							goto l315
						}
						position++
						goto l305
					l315:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('B') {
							goto l316
						}
						position++
						goto l305
					l316:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('C') {
							goto l317
						}
						position++
						goto l305
					l317:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('D') {
							goto l318
						}
						position++
						goto l305
					l318:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('E') {
							goto l319
						}
						position++
						goto l305
					l319:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('F') {
							goto l320
						}
						position++
						goto l305
					l320:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('G') {
							goto l321
						}
						position++
						goto l305
					l321:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('H') {
							goto l322
						}
						position++
						goto l305
					l322:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('J') {
							goto l323
						}
						position++
						goto l305
					l323:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('K') {
							goto l324
						}
						position++
						goto l305
					l324:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('L') {
							goto l325
						}
						position++
						goto l305
					l325:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('M') {
							goto l326
						}
						position++
						goto l305
					l326:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('N') {
							goto l327
						}
						position++
						goto l305
					l327:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('P') {
							goto l328
						}
						position++
						goto l305
					l328:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('Q') {
							goto l329
						}
						position++
						goto l305
					l329:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('R') {
							goto l330
						}
						position++
						goto l305
					l330:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('S') {
							goto l331
						}
						position++
						goto l305
					l331:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('T') {
							goto l332
						}
						position++
						goto l305
					l332:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('U') {
							goto l333
						}
						position++
						goto l305
					l333:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('V') {
							goto l334
						}
						position++
						goto l305
					l334:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('W') {
							goto l335
						}
						position++
						goto l305
					l335:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('X') {
							goto l336
						}
						position++
						goto l305
					l336:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('Y') {
							goto l337
						}
						position++
						goto l305
					l337:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('Z') {
							goto l338
						}
						position++
						goto l305
					l338:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('a') {
							goto l339
						}
						position++
						goto l305
					l339:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('b') {
							goto l340
						}
						position++
						goto l305
					l340:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('c') {
							goto l341
						}
						position++
						goto l305
					l341:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('d') {
							goto l342
						}
						position++
						goto l305
					l342:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('e') {
							goto l343
						}
						position++
						goto l305
					l343:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('f') {
							goto l344
						}
						position++
						goto l305
					l344:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('g') {
							goto l345
						}
						position++
						goto l305
					l345:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('h') {
							goto l346
						}
						position++
						goto l305
					l346:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('i') {
							goto l347
						}
						position++
						goto l305
					l347:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('j') {
							goto l348
						}
						position++
						goto l305
					l348:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('k') {
							goto l349
						}
						position++
						goto l305
					l349:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('m') {
							goto l350
						}
						position++
						goto l305
					l350:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('n') {
							goto l351
						}
						position++
						goto l305
					l351:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('o') {
							goto l352
						}
						position++
						goto l305
					l352:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('p') {
							goto l353
						}
						position++
						goto l305
					l353:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('q') {
							goto l354
						}
						position++
						goto l305
					l354:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('r') {
							goto l355
						}
						position++
						goto l305
					l355:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('s') {
							goto l356
						}
						position++
						goto l305
					l356:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('t') {
							goto l357
						}
						position++
						goto l305
					l357:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('u') {
							goto l358
						}
						position++
						goto l305
					l358:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('v') {
							goto l359
						}
						position++
						goto l305
					l359:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('w') {
							goto l360
						}
						position++
						goto l305
					l360:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('x') {
							goto l361
						}
						position++
						goto l305
					l361:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('y') {
							goto l362
						}
						position++
						goto l305
					l362:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('z') {
							goto l304
						}
						position++
					}
				l305:
					goto l303
				l304:
					position, tokenIndex = position304, tokenIndex304
				}
				if buffer[position] != rune('\'') {
					goto l301
				}
				position++
				add(ruleBase58, position302)
			}
			return true
		l301:
			position, tokenIndex = position301, tokenIndex301
			return false
		},
		/* 58 Base64 <- <('b' 'a' 's' 'e' '6' '4' '\'' ('A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'I' / 'J' / 'K' / 'L' / 'M' / 'N' / 'O' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '0' / '1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / '+' / '/' / '=')* '\'')> */
		func() bool {
			position363, tokenIndex363 := position, tokenIndex
			{
				position364 := position
				if buffer[position] != rune('b') {
					goto l363
				}
				position++
				if buffer[position] != rune('a') {
					goto l363
				}
				position++
				if buffer[position] != rune('s') {
					goto l363
				}
				position++
				if buffer[position] != rune('e') {
					goto l363
				}
				position++
				if buffer[position] != rune('6') {
					goto l363
				}
				position++
				if buffer[position] != rune('4') {
					goto l363
				}
				position++
				if buffer[position] != rune('\'') {
					goto l363
				}
				position++
			l365:
				{
					position366, tokenIndex366 := position, tokenIndex
					{
						position367, tokenIndex367 := position, tokenIndex
						if buffer[position] != rune('A') {
							goto l368
						}
						position++
						goto l367
					l368:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('B') {
							goto l369
						}
						position++
						goto l367
					l369:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('C') {
							goto l370
						}
						position++
						goto l367
					l370:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('D') {
							goto l371
						}
						position++
						goto l367
					l371:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('E') {
							goto l372
						}
						position++
						goto l367
					l372:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('F') {
							goto l373
						}
						position++
						goto l367
					l373:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('G') {
							goto l374
						}
						position++
						goto l367
					l374:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('H') {
							goto l375
						}
						position++
						goto l367
					l375:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('I') {
							goto l376
						}
						position++
						goto l367
					l376:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('J') {
							goto l377
						}
						position++
						goto l367
					l377:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('K') {
							goto l378
						}
						position++
						goto l367
					l378:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('L') {
							goto l379
						}
						position++
						goto l367
					l379:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('M') {
							goto l380
						}
						position++
						goto l367
					l380:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('N') {
							goto l381
						}
						position++
						goto l367
					l381:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('O') {
							goto l382
						}
						position++
						goto l367
					l382:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('P') {
							goto l383
						}
						position++
						goto l367
					l383:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('Q') {
							goto l384
						}
						position++
						goto l367
					l384:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('R') {
							goto l385
						}
						position++
						goto l367
					l385:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('S') {
							goto l386
						}
						position++
						goto l367
					l386:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('T') {
							goto l387
						}
						position++
						goto l367
					l387:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('U') {
							goto l388
						}
						position++
						goto l367
					l388:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('V') {
							goto l389
						}
						position++
						goto l367
					l389:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('W') {
							goto l390
						}
						position++
						goto l367
					l390:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('X') {
							goto l391
						}
						position++
						goto l367
					l391:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('Y') {
							goto l392
						}
						position++
						goto l367
					l392:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('Z') {
							goto l393
						}
						position++
						goto l367
					l393:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('a') {
							goto l394
						}
						position++
						goto l367
					l394:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('b') {
							goto l395
						}
						position++
						goto l367
					l395:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('c') {
							goto l396
						}
						position++
						goto l367
					l396:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('d') {
							goto l397
						}
						position++
						goto l367
					l397:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('e') {
							goto l398
						}
						position++
						goto l367
					l398:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('f') {
							goto l399
						}
						position++
						goto l367
					l399:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('g') {
							goto l400
						}
						position++
						goto l367
					l400:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('h') {
							goto l401
						}
						position++
						goto l367
					l401:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('i') {
							goto l402
						}
						position++
						goto l367
					l402:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('j') {
							goto l403
						}
						position++
						goto l367
					l403:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('k') {
							goto l404
						}
						position++
						goto l367
					l404:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('l') {
							goto l405
						}
						position++
						goto l367
					l405:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('m') {
							goto l406
						}
						position++
						goto l367
					l406:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('n') {
							goto l407
						}
						position++
						goto l367
					l407:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('o') {
							goto l408
						}
						position++
						goto l367
					l408:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('p') {
							goto l409
						}
						position++
						goto l367
					l409:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('q') {
							goto l410
						}
						position++
						goto l367
					l410:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('r') {
							goto l411
						}
						position++
						goto l367
					l411:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('s') {
							goto l412
						}
						position++
						goto l367
					l412:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('t') {
							goto l413
						}
						position++
						goto l367
					l413:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('u') {
							goto l414
						}
						position++
						goto l367
					l414:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('v') {
							goto l415
						}
						position++
						goto l367
					l415:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('w') {
							goto l416
						}
						position++
						goto l367
					l416:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('x') {
							goto l417
						}
						position++
						goto l367
					l417:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('y') {
							goto l418
						}
						position++
						goto l367
					l418:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('z') {
							goto l419
						}
						position++
						goto l367
					l419:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('0') {
							goto l420
						}
						position++
						goto l367
					l420:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('1') {
							goto l421
						}
						position++
						goto l367
					l421:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('2') {
							goto l422
						}
						position++
						goto l367
					l422:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('3') {
							goto l423
						}
						position++
						goto l367
					l423:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('4') {
							goto l424
						}
						position++
						goto l367
					l424:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('5') {
							goto l425
						}
						position++
						goto l367
					l425:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('6') {
							goto l426
						}
						position++
						goto l367
					l426:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('7') {
							goto l427
						}
						position++
						goto l367
					l427:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('8') {
							goto l428
						}
						position++
						goto l367
					l428:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('9') {
							goto l429
						}
						position++
						goto l367
					l429:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('+') {
							goto l430
						}
						position++
						goto l367
					l430:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('/') {
							goto l431
						}
						position++
						goto l367
					l431:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('=') {
							goto l366
						}
						position++
					}
				l367:
					goto l365
				l366:
					position, tokenIndex = position366, tokenIndex366
				}
				if buffer[position] != rune('\'') {
					goto l363
				}
				position++
				add(ruleBase64, position364)
			}
			return true
		l363:
			position, tokenIndex = position363, tokenIndex363
			return false
		},
		/* 59 ByteVector <- <(Base16 / Base58 / Base64)> */
		func() bool {
			position432, tokenIndex432 := position, tokenIndex
			{
				position433 := position
				{
					position434, tokenIndex434 := position, tokenIndex
					if !_rules[ruleBase16]() {
						goto l435
					}
					goto l434
				l435:
					position, tokenIndex = position434, tokenIndex434
					if !_rules[ruleBase58]() {
						goto l436
					}
					goto l434
				l436:
					position, tokenIndex = position434, tokenIndex434
					if !_rules[ruleBase64]() {
						goto l432
					}
				}
			l434:
				add(ruleByteVector, position433)
			}
			return true
		l432:
			position, tokenIndex = position432, tokenIndex432
			return false
		},
		/* 60 Boolean <- <(('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e'))> */
		func() bool {
			position437, tokenIndex437 := position, tokenIndex
			{
				position438 := position
				{
					position439, tokenIndex439 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l440
					}
					position++
					if buffer[position] != rune('r') {
						goto l440
					}
					position++
					if buffer[position] != rune('u') {
						goto l440
					}
					position++
					if buffer[position] != rune('e') {
						goto l440
					}
					position++
					goto l439
				l440:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('f') {
						goto l437
					}
					position++
					if buffer[position] != rune('a') {
						goto l437
					}
					position++
					if buffer[position] != rune('l') {
						goto l437
					}
					position++
					if buffer[position] != rune('s') {
						goto l437
					}
					position++
					if buffer[position] != rune('e') {
						goto l437
					}
					position++
				}
			l439:
				add(ruleBoolean, position438)
			}
			return true
		l437:
			position, tokenIndex = position437, tokenIndex437
			return false
		},
		/* 61 String <- <('"' (UnicodeChar / EscapedChar / Char)* '"')> */
		func() bool {
			position441, tokenIndex441 := position, tokenIndex
			{
				position442 := position
				if buffer[position] != rune('"') {
					goto l441
				}
				position++
			l443:
				{
					position444, tokenIndex444 := position, tokenIndex
					{
						position445, tokenIndex445 := position, tokenIndex
						if !_rules[ruleUnicodeChar]() {
							goto l446
						}
						goto l445
					l446:
						position, tokenIndex = position445, tokenIndex445
						if !_rules[ruleEscapedChar]() {
							goto l447
						}
						goto l445
					l447:
						position, tokenIndex = position445, tokenIndex445
						if !_rules[ruleChar]() {
							goto l444
						}
					}
				l445:
					goto l443
				l444:
					position, tokenIndex = position444, tokenIndex444
				}
				if buffer[position] != rune('"') {
					goto l441
				}
				position++
				add(ruleString, position442)
			}
			return true
		l441:
			position, tokenIndex = position441, tokenIndex441
			return false
		},
		/* 62 UnicodeChar <- <('\\' 'u' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f'))> */
		func() bool {
			position448, tokenIndex448 := position, tokenIndex
			{
				position449 := position
				if buffer[position] != rune('\\') {
					goto l448
				}
				position++
				if buffer[position] != rune('u') {
					goto l448
				}
				position++
				{
					position450, tokenIndex450 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l451
					}
					position++
					goto l450
				l451:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('A') {
						goto l452
					}
					position++
					goto l450
				l452:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('B') {
						goto l453
					}
					position++
					goto l450
				l453:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('C') {
						goto l454
					}
					position++
					goto l450
				l454:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('D') {
						goto l455
					}
					position++
					goto l450
				l455:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('E') {
						goto l456
					}
					position++
					goto l450
				l456:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('F') {
						goto l457
					}
					position++
					goto l450
				l457:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('a') {
						goto l458
					}
					position++
					goto l450
				l458:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('b') {
						goto l459
					}
					position++
					goto l450
				l459:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('c') {
						goto l460
					}
					position++
					goto l450
				l460:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('d') {
						goto l461
					}
					position++
					goto l450
				l461:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('e') {
						goto l462
					}
					position++
					goto l450
				l462:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('f') {
						goto l448
					}
					position++
				}
			l450:
				{
					position463, tokenIndex463 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l464
					}
					position++
					goto l463
				l464:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('A') {
						goto l465
					}
					position++
					goto l463
				l465:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('B') {
						goto l466
					}
					position++
					goto l463
				l466:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('C') {
						goto l467
					}
					position++
					goto l463
				l467:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('D') {
						goto l468
					}
					position++
					goto l463
				l468:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('E') {
						goto l469
					}
					position++
					goto l463
				l469:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('F') {
						goto l470
					}
					position++
					goto l463
				l470:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('a') {
						goto l471
					}
					position++
					goto l463
				l471:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('b') {
						goto l472
					}
					position++
					goto l463
				l472:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('c') {
						goto l473
					}
					position++
					goto l463
				l473:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('d') {
						goto l474
					}
					position++
					goto l463
				l474:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('e') {
						goto l475
					}
					position++
					goto l463
				l475:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('f') {
						goto l448
					}
					position++
				}
			l463:
				{
					position476, tokenIndex476 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l477
					}
					position++
					goto l476
				l477:
					position, tokenIndex = position476, tokenIndex476
					if buffer[position] != rune('A') {
						goto l478
					}
					position++
					goto l476
				l478:
					position, tokenIndex = position476, tokenIndex476
					if buffer[position] != rune('B') {
						goto l479
					}
					position++
					goto l476
				l479:
					position, tokenIndex = position476, tokenIndex476
					if buffer[position] != rune('C') {
						goto l480
					}
					position++
					goto l476
				l480:
					position, tokenIndex = position476, tokenIndex476
					if buffer[position] != rune('D') {
						goto l481
					}
					position++
					goto l476
				l481:
					position, tokenIndex = position476, tokenIndex476
					if buffer[position] != rune('E') {
						goto l482
					}
					position++
					goto l476
				l482:
					position, tokenIndex = position476, tokenIndex476
					if buffer[position] != rune('F') {
						goto l483
					}
					position++
					goto l476
				l483:
					position, tokenIndex = position476, tokenIndex476
					if buffer[position] != rune('a') {
						goto l484
					}
					position++
					goto l476
				l484:
					position, tokenIndex = position476, tokenIndex476
					if buffer[position] != rune('b') {
						goto l485
					}
					position++
					goto l476
				l485:
					position, tokenIndex = position476, tokenIndex476
					if buffer[position] != rune('c') {
						goto l486
					}
					position++
					goto l476
				l486:
					position, tokenIndex = position476, tokenIndex476
					if buffer[position] != rune('d') {
						goto l487
					}
					position++
					goto l476
				l487:
					position, tokenIndex = position476, tokenIndex476
					if buffer[position] != rune('e') {
						goto l488
					}
					position++
					goto l476
				l488:
					position, tokenIndex = position476, tokenIndex476
					if buffer[position] != rune('f') {
						goto l448
					}
					position++
				}
			l476:
				{
					position489, tokenIndex489 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l490
					}
					position++
					goto l489
				l490:
					position, tokenIndex = position489, tokenIndex489
					if buffer[position] != rune('A') {
						goto l491
					}
					position++
					goto l489
				l491:
					position, tokenIndex = position489, tokenIndex489
					if buffer[position] != rune('B') {
						goto l492
					}
					position++
					goto l489
				l492:
					position, tokenIndex = position489, tokenIndex489
					if buffer[position] != rune('C') {
						goto l493
					}
					position++
					goto l489
				l493:
					position, tokenIndex = position489, tokenIndex489
					if buffer[position] != rune('D') {
						goto l494
					}
					position++
					goto l489
				l494:
					position, tokenIndex = position489, tokenIndex489
					if buffer[position] != rune('E') {
						goto l495
					}
					position++
					goto l489
				l495:
					position, tokenIndex = position489, tokenIndex489
					if buffer[position] != rune('F') {
						goto l496
					}
					position++
					goto l489
				l496:
					position, tokenIndex = position489, tokenIndex489
					if buffer[position] != rune('a') {
						goto l497
					}
					position++
					goto l489
				l497:
					position, tokenIndex = position489, tokenIndex489
					if buffer[position] != rune('b') {
						goto l498
					}
					position++
					goto l489
				l498:
					position, tokenIndex = position489, tokenIndex489
					if buffer[position] != rune('c') {
						goto l499
					}
					position++
					goto l489
				l499:
					position, tokenIndex = position489, tokenIndex489
					if buffer[position] != rune('d') {
						goto l500
					}
					position++
					goto l489
				l500:
					position, tokenIndex = position489, tokenIndex489
					if buffer[position] != rune('e') {
						goto l501
					}
					position++
					goto l489
				l501:
					position, tokenIndex = position489, tokenIndex489
					if buffer[position] != rune('f') {
						goto l448
					}
					position++
				}
			l489:
				add(ruleUnicodeChar, position449)
			}
			return true
		l448:
			position, tokenIndex = position448, tokenIndex448
			return false
		},
		/* 63 EscapedChar <- <('\\' .)> */
		func() bool {
			position502, tokenIndex502 := position, tokenIndex
			{
				position503 := position
				if buffer[position] != rune('\\') {
					goto l502
				}
				position++
				if !matchDot() {
					goto l502
				}
				add(ruleEscapedChar, position503)
			}
			return true
		l502:
			position, tokenIndex = position502, tokenIndex502
			return false
		},
		/* 64 Char <- <(!'"' .)> */
		func() bool {
			position504, tokenIndex504 := position, tokenIndex
			{
				position505 := position
				{
					position506, tokenIndex506 := position, tokenIndex
					if buffer[position] != rune('"') {
						goto l506
					}
					position++
					goto l504
				l506:
					position, tokenIndex = position506, tokenIndex506
				}
				if !matchDot() {
					goto l504
				}
				add(ruleChar, position505)
			}
			return true
		l504:
			position, tokenIndex = position504, tokenIndex504
			return false
		},
		/* 65 Integer <- <([0-9] ('_' &[0-9])?)+> */
		func() bool {
			position507, tokenIndex507 := position, tokenIndex
			{
				position508 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l507
				}
				position++
				{
					position511, tokenIndex511 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l511
					}
					position++
					{
						position513, tokenIndex513 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l511
						}
						position++
						position, tokenIndex = position513, tokenIndex513
					}
					goto l512
				l511:
					position, tokenIndex = position511, tokenIndex511
				}
			l512:
			l509:
				{
					position510, tokenIndex510 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l510
					}
					position++
					{
						position514, tokenIndex514 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l514
						}
						position++
						{
							position516, tokenIndex516 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l514
							}
							position++
							position, tokenIndex = position516, tokenIndex516
						}
						goto l515
					l514:
						position, tokenIndex = position514, tokenIndex514
					}
				l515:
					goto l509
				l510:
					position, tokenIndex = position510, tokenIndex510
				}
				add(ruleInteger, position508)
			}
			return true
		l507:
			position, tokenIndex = position507, tokenIndex507
			return false
		},
		/* 66 List <- <('[' _ ExprSeq? _ ']')> */
		func() bool {
			position517, tokenIndex517 := position, tokenIndex
			{
				position518 := position
				if buffer[position] != rune('[') {
					goto l517
				}
				position++
				if !_rules[rule_]() {
					goto l517
				}
				{
					position519, tokenIndex519 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l519
					}
					goto l520
				l519:
					position, tokenIndex = position519, tokenIndex519
				}
			l520:
				if !_rules[rule_]() {
					goto l517
				}
				if buffer[position] != rune(']') {
					goto l517
				}
				position++
				add(ruleList, position518)
			}
			return true
		l517:
			position, tokenIndex = position517, tokenIndex517
			return false
		},
		/* 67 ExprSeq <- <(Expr (_ ',' _ ExprSeq)?)> */
		func() bool {
			position521, tokenIndex521 := position, tokenIndex
			{
				position522 := position
				if !_rules[ruleExpr]() {
					goto l521
				}
				{
					position523, tokenIndex523 := position, tokenIndex
					if !_rules[rule_]() {
						goto l523
					}
					if buffer[position] != rune(',') {
						goto l523
					}
					position++
					if !_rules[rule_]() {
						goto l523
					}
					if !_rules[ruleExprSeq]() {
						goto l523
					}
					goto l524
				l523:
					position, tokenIndex = position523, tokenIndex523
				}
			l524:
				add(ruleExprSeq, position522)
			}
			return true
		l521:
			position, tokenIndex = position521, tokenIndex521
			return false
		},
		/* 68 AtomExpr <- <(UnaryOp? _ (FoldMacro / GettableExpr / IfWithError / Match))> */
		func() bool {
			position525, tokenIndex525 := position, tokenIndex
			{
				position526 := position
				{
					position527, tokenIndex527 := position, tokenIndex
					if !_rules[ruleUnaryOp]() {
						goto l527
					}
					goto l528
				l527:
					position, tokenIndex = position527, tokenIndex527
				}
			l528:
				if !_rules[rule_]() {
					goto l525
				}
				{
					position529, tokenIndex529 := position, tokenIndex
					if !_rules[ruleFoldMacro]() {
						goto l530
					}
					goto l529
				l530:
					position, tokenIndex = position529, tokenIndex529
					if !_rules[ruleGettableExpr]() {
						goto l531
					}
					goto l529
				l531:
					position, tokenIndex = position529, tokenIndex529
					if !_rules[ruleIfWithError]() {
						goto l532
					}
					goto l529
				l532:
					position, tokenIndex = position529, tokenIndex529
					if !_rules[ruleMatch]() {
						goto l525
					}
				}
			l529:
				add(ruleAtomExpr, position526)
			}
			return true
		l525:
			position, tokenIndex = position525, tokenIndex525
			return false
		},
		/* 69 MultGroupOpAtom <- <(AtomExpr (_ MultGroupOp _ AtomExpr)*)> */
		func() bool {
			position533, tokenIndex533 := position, tokenIndex
			{
				position534 := position
				if !_rules[ruleAtomExpr]() {
					goto l533
				}
			l535:
				{
					position536, tokenIndex536 := position, tokenIndex
					if !_rules[rule_]() {
						goto l536
					}
					if !_rules[ruleMultGroupOp]() {
						goto l536
					}
					if !_rules[rule_]() {
						goto l536
					}
					if !_rules[ruleAtomExpr]() {
						goto l536
					}
					goto l535
				l536:
					position, tokenIndex = position536, tokenIndex536
				}
				add(ruleMultGroupOpAtom, position534)
			}
			return true
		l533:
			position, tokenIndex = position533, tokenIndex533
			return false
		},
		/* 70 SumGroupOpAtom <- <(MultGroupOpAtom (_ SumGroupOp _ MultGroupOpAtom)*)> */
		func() bool {
			position537, tokenIndex537 := position, tokenIndex
			{
				position538 := position
				if !_rules[ruleMultGroupOpAtom]() {
					goto l537
				}
			l539:
				{
					position540, tokenIndex540 := position, tokenIndex
					if !_rules[rule_]() {
						goto l540
					}
					if !_rules[ruleSumGroupOp]() {
						goto l540
					}
					if !_rules[rule_]() {
						goto l540
					}
					if !_rules[ruleMultGroupOpAtom]() {
						goto l540
					}
					goto l539
				l540:
					position, tokenIndex = position540, tokenIndex540
				}
				add(ruleSumGroupOpAtom, position538)
			}
			return true
		l537:
			position, tokenIndex = position537, tokenIndex537
			return false
		},
		/* 71 ListGroupOpAtom <- <(SumGroupOpAtom (_ ListGroupOp _ SumGroupOpAtom)*)> */
		func() bool {
			position541, tokenIndex541 := position, tokenIndex
			{
				position542 := position
				if !_rules[ruleSumGroupOpAtom]() {
					goto l541
				}
			l543:
				{
					position544, tokenIndex544 := position, tokenIndex
					if !_rules[rule_]() {
						goto l544
					}
					if !_rules[ruleListGroupOp]() {
						goto l544
					}
					if !_rules[rule_]() {
						goto l544
					}
					if !_rules[ruleSumGroupOpAtom]() {
						goto l544
					}
					goto l543
				l544:
					position, tokenIndex = position544, tokenIndex544
				}
				add(ruleListGroupOpAtom, position542)
			}
			return true
		l541:
			position, tokenIndex = position541, tokenIndex541
			return false
		},
		/* 72 CompareGroupOpAtom <- <(ListGroupOpAtom (_ CompareGroupOp _ ListGroupOpAtom)*)> */
		func() bool {
			position545, tokenIndex545 := position, tokenIndex
			{
				position546 := position
				if !_rules[ruleListGroupOpAtom]() {
					goto l545
				}
			l547:
				{
					position548, tokenIndex548 := position, tokenIndex
					if !_rules[rule_]() {
						goto l548
					}
					if !_rules[ruleCompareGroupOp]() {
						goto l548
					}
					if !_rules[rule_]() {
						goto l548
					}
					if !_rules[ruleListGroupOpAtom]() {
						goto l548
					}
					goto l547
				l548:
					position, tokenIndex = position548, tokenIndex548
				}
				add(ruleCompareGroupOpAtom, position546)
			}
			return true
		l545:
			position, tokenIndex = position545, tokenIndex545
			return false
		},
		/* 73 EqualityGroupOpAtom <- <(CompareGroupOpAtom (_ EqGroupOp _ CompareGroupOpAtom)*)> */
		func() bool {
			position549, tokenIndex549 := position, tokenIndex
			{
				position550 := position
				if !_rules[ruleCompareGroupOpAtom]() {
					goto l549
				}
			l551:
				{
					position552, tokenIndex552 := position, tokenIndex
					if !_rules[rule_]() {
						goto l552
					}
					if !_rules[ruleEqGroupOp]() {
						goto l552
					}
					if !_rules[rule_]() {
						goto l552
					}
					if !_rules[ruleCompareGroupOpAtom]() {
						goto l552
					}
					goto l551
				l552:
					position, tokenIndex = position552, tokenIndex552
				}
				add(ruleEqualityGroupOpAtom, position550)
			}
			return true
		l549:
			position, tokenIndex = position549, tokenIndex549
			return false
		},
		/* 74 AndOpAtom <- <(EqualityGroupOpAtom (_ AndOp _ EqualityGroupOpAtom)*)> */
		func() bool {
			position553, tokenIndex553 := position, tokenIndex
			{
				position554 := position
				if !_rules[ruleEqualityGroupOpAtom]() {
					goto l553
				}
			l555:
				{
					position556, tokenIndex556 := position, tokenIndex
					if !_rules[rule_]() {
						goto l556
					}
					if !_rules[ruleAndOp]() {
						goto l556
					}
					if !_rules[rule_]() {
						goto l556
					}
					if !_rules[ruleEqualityGroupOpAtom]() {
						goto l556
					}
					goto l555
				l556:
					position, tokenIndex = position556, tokenIndex556
				}
				add(ruleAndOpAtom, position554)
			}
			return true
		l553:
			position, tokenIndex = position553, tokenIndex553
			return false
		},
		/* 75 OrOpAtom <- <(AndOpAtom (_ OrOp _ AndOpAtom)*)> */
		func() bool {
			position557, tokenIndex557 := position, tokenIndex
			{
				position558 := position
				if !_rules[ruleAndOpAtom]() {
					goto l557
				}
			l559:
				{
					position560, tokenIndex560 := position, tokenIndex
					if !_rules[rule_]() {
						goto l560
					}
					if !_rules[ruleOrOp]() {
						goto l560
					}
					if !_rules[rule_]() {
						goto l560
					}
					if !_rules[ruleAndOpAtom]() {
						goto l560
					}
					goto l559
				l560:
					position, tokenIndex = position560, tokenIndex560
				}
				add(ruleOrOpAtom, position558)
			}
			return true
		l557:
			position, tokenIndex = position557, tokenIndex557
			return false
		},
		/* 76 Expr <- <OrOpAtom> */
		func() bool {
			position561, tokenIndex561 := position, tokenIndex
			{
				position562 := position
				if !_rules[ruleOrOpAtom]() {
					goto l561
				}
				add(ruleExpr, position562)
			}
			return true
		l561:
			position, tokenIndex = position561, tokenIndex561
			return false
		},
		/* 77 ParExpr <- <('(' _ Expr _ ')')> */
		func() bool {
			position563, tokenIndex563 := position, tokenIndex
			{
				position564 := position
				if buffer[position] != rune('(') {
					goto l563
				}
				position++
				if !_rules[rule_]() {
					goto l563
				}
				if !_rules[ruleExpr]() {
					goto l563
				}
				if !_rules[rule_]() {
					goto l563
				}
				if buffer[position] != rune(')') {
					goto l563
				}
				position++
				add(ruleParExpr, position564)
			}
			return true
		l563:
			position, tokenIndex = position563, tokenIndex563
			return false
		},
		/* 78 GettableExpr <- <((ParExpr / Block / FunctionCall / Identifier / Const) (AsType / ListAccess / (_ '.' _ (FunctionCallAccess / IdentifierAccess / TupleAccess)))*)> */
		func() bool {
			position565, tokenIndex565 := position, tokenIndex
			{
				position566 := position
				{
					position567, tokenIndex567 := position, tokenIndex
					if !_rules[ruleParExpr]() {
						goto l568
					}
					goto l567
				l568:
					position, tokenIndex = position567, tokenIndex567
					if !_rules[ruleBlock]() {
						goto l569
					}
					goto l567
				l569:
					position, tokenIndex = position567, tokenIndex567
					if !_rules[ruleFunctionCall]() {
						goto l570
					}
					goto l567
				l570:
					position, tokenIndex = position567, tokenIndex567
					if !_rules[ruleIdentifier]() {
						goto l571
					}
					goto l567
				l571:
					position, tokenIndex = position567, tokenIndex567
					if !_rules[ruleConst]() {
						goto l565
					}
				}
			l567:
			l572:
				{
					position573, tokenIndex573 := position, tokenIndex
					{
						position574, tokenIndex574 := position, tokenIndex
						if !_rules[ruleAsType]() {
							goto l575
						}
						goto l574
					l575:
						position, tokenIndex = position574, tokenIndex574
						if !_rules[ruleListAccess]() {
							goto l576
						}
						goto l574
					l576:
						position, tokenIndex = position574, tokenIndex574
						if !_rules[rule_]() {
							goto l573
						}
						if buffer[position] != rune('.') {
							goto l573
						}
						position++
						if !_rules[rule_]() {
							goto l573
						}
						{
							position577, tokenIndex577 := position, tokenIndex
							if !_rules[ruleFunctionCallAccess]() {
								goto l578
							}
							goto l577
						l578:
							position, tokenIndex = position577, tokenIndex577
							if !_rules[ruleIdentifierAccess]() {
								goto l579
							}
							goto l577
						l579:
							position, tokenIndex = position577, tokenIndex577
							if !_rules[ruleTupleAccess]() {
								goto l573
							}
						}
					l577:
					}
				l574:
					goto l572
				l573:
					position, tokenIndex = position573, tokenIndex573
				}
				add(ruleGettableExpr, position566)
			}
			return true
		l565:
			position, tokenIndex = position565, tokenIndex565
			return false
		},
		/* 79 FunctionCallAccess <- <FunctionCall> */
		func() bool {
			position580, tokenIndex580 := position, tokenIndex
			{
				position581 := position
				if !_rules[ruleFunctionCall]() {
					goto l580
				}
				add(ruleFunctionCallAccess, position581)
			}
			return true
		l580:
			position, tokenIndex = position580, tokenIndex580
			return false
		},
		/* 80 IdentifierAccess <- <Identifier> */
		func() bool {
			position582, tokenIndex582 := position, tokenIndex
			{
				position583 := position
				if !_rules[ruleIdentifier]() {
					goto l582
				}
				add(ruleIdentifierAccess, position583)
			}
			return true
		l582:
			position, tokenIndex = position582, tokenIndex582
			return false
		},
		/* 81 ListAccess <- <('[' _ (Expr / Identifier) _ ']')> */
		func() bool {
			position584, tokenIndex584 := position, tokenIndex
			{
				position585 := position
				if buffer[position] != rune('[') {
					goto l584
				}
				position++
				if !_rules[rule_]() {
					goto l584
				}
				{
					position586, tokenIndex586 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l587
					}
					goto l586
				l587:
					position, tokenIndex = position586, tokenIndex586
					if !_rules[ruleIdentifier]() {
						goto l584
					}
				}
			l586:
				if !_rules[rule_]() {
					goto l584
				}
				if buffer[position] != rune(']') {
					goto l584
				}
				position++
				add(ruleListAccess, position585)
			}
			return true
		l584:
			position, tokenIndex = position584, tokenIndex584
			return false
		},
		/* 82 AsType <- <(_ '.' _ (AsString / ExactAsString) '[' _ Types _ ']')> */
		func() bool {
			position588, tokenIndex588 := position, tokenIndex
			{
				position589 := position
				if !_rules[rule_]() {
					goto l588
				}
				if buffer[position] != rune('.') {
					goto l588
				}
				position++
				if !_rules[rule_]() {
					goto l588
				}
				{
					position590, tokenIndex590 := position, tokenIndex
					if !_rules[ruleAsString]() {
						goto l591
					}
					goto l590
				l591:
					position, tokenIndex = position590, tokenIndex590
					if !_rules[ruleExactAsString]() {
						goto l588
					}
				}
			l590:
				if buffer[position] != rune('[') {
					goto l588
				}
				position++
				if !_rules[rule_]() {
					goto l588
				}
				if !_rules[ruleTypes]() {
					goto l588
				}
				if !_rules[rule_]() {
					goto l588
				}
				if buffer[position] != rune(']') {
					goto l588
				}
				position++
				add(ruleAsType, position589)
			}
			return true
		l588:
			position, tokenIndex = position588, tokenIndex588
			return false
		},
		/* 83 AsString <- <('a' 's')> */
		func() bool {
			position592, tokenIndex592 := position, tokenIndex
			{
				position593 := position
				if buffer[position] != rune('a') {
					goto l592
				}
				position++
				if buffer[position] != rune('s') {
					goto l592
				}
				position++
				add(ruleAsString, position593)
			}
			return true
		l592:
			position, tokenIndex = position592, tokenIndex592
			return false
		},
		/* 84 ExactAsString <- <('e' 'x' 'a' 'c' 't' 'A' 's')> */
		func() bool {
			position594, tokenIndex594 := position, tokenIndex
			{
				position595 := position
				if buffer[position] != rune('e') {
					goto l594
				}
				position++
				if buffer[position] != rune('x') {
					goto l594
				}
				position++
				if buffer[position] != rune('a') {
					goto l594
				}
				position++
				if buffer[position] != rune('c') {
					goto l594
				}
				position++
				if buffer[position] != rune('t') {
					goto l594
				}
				position++
				if buffer[position] != rune('A') {
					goto l594
				}
				position++
				if buffer[position] != rune('s') {
					goto l594
				}
				position++
				add(ruleExactAsString, position595)
			}
			return true
		l594:
			position, tokenIndex = position594, tokenIndex594
			return false
		},
		/* 85 Block <- <('{' (_ Declaration)* _ Expr _ '}')> */
		func() bool {
			position596, tokenIndex596 := position, tokenIndex
			{
				position597 := position
				if buffer[position] != rune('{') {
					goto l596
				}
				position++
			l598:
				{
					position599, tokenIndex599 := position, tokenIndex
					if !_rules[rule_]() {
						goto l599
					}
					if !_rules[ruleDeclaration]() {
						goto l599
					}
					goto l598
				l599:
					position, tokenIndex = position599, tokenIndex599
				}
				if !_rules[rule_]() {
					goto l596
				}
				if !_rules[ruleExpr]() {
					goto l596
				}
				if !_rules[rule_]() {
					goto l596
				}
				if buffer[position] != rune('}') {
					goto l596
				}
				position++
				add(ruleBlock, position597)
			}
			return true
		l596:
			position, tokenIndex = position596, tokenIndex596
			return false
		},
		/* 86 BlockWithoutPar <- <((_ Declaration)* _ Expr)> */
		func() bool {
			position600, tokenIndex600 := position, tokenIndex
			{
				position601 := position
			l602:
				{
					position603, tokenIndex603 := position, tokenIndex
					if !_rules[rule_]() {
						goto l603
					}
					if !_rules[ruleDeclaration]() {
						goto l603
					}
					goto l602
				l603:
					position, tokenIndex = position603, tokenIndex603
				}
				if !_rules[rule_]() {
					goto l600
				}
				if !_rules[ruleExpr]() {
					goto l600
				}
				add(ruleBlockWithoutPar, position601)
			}
			return true
		l600:
			position, tokenIndex = position600, tokenIndex600
			return false
		},
		/* 87 FunctionCall <- <(Identifier '(' _ ExprSeq? _ ')')> */
		func() bool {
			position604, tokenIndex604 := position, tokenIndex
			{
				position605 := position
				if !_rules[ruleIdentifier]() {
					goto l604
				}
				if buffer[position] != rune('(') {
					goto l604
				}
				position++
				if !_rules[rule_]() {
					goto l604
				}
				{
					position606, tokenIndex606 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l606
					}
					goto l607
				l606:
					position, tokenIndex = position606, tokenIndex606
				}
			l607:
				if !_rules[rule_]() {
					goto l604
				}
				if buffer[position] != rune(')') {
					goto l604
				}
				position++
				add(ruleFunctionCall, position605)
			}
			return true
		l604:
			position, tokenIndex = position604, tokenIndex604
			return false
		},
		/* 88 FoldMacro <- <('F' 'O' 'L' 'D' _ '<' _ Integer _ '>' _ '(' _ Expr _ ',' _ Expr _ ',' _ Identifier _ ')')> */
		func() bool {
			position608, tokenIndex608 := position, tokenIndex
			{
				position609 := position
				if buffer[position] != rune('F') {
					goto l608
				}
				position++
				if buffer[position] != rune('O') {
					goto l608
				}
				position++
				if buffer[position] != rune('L') {
					goto l608
				}
				position++
				if buffer[position] != rune('D') {
					goto l608
				}
				position++
				if !_rules[rule_]() {
					goto l608
				}
				if buffer[position] != rune('<') {
					goto l608
				}
				position++
				if !_rules[rule_]() {
					goto l608
				}
				if !_rules[ruleInteger]() {
					goto l608
				}
				if !_rules[rule_]() {
					goto l608
				}
				if buffer[position] != rune('>') {
					goto l608
				}
				position++
				if !_rules[rule_]() {
					goto l608
				}
				if buffer[position] != rune('(') {
					goto l608
				}
				position++
				if !_rules[rule_]() {
					goto l608
				}
				if !_rules[ruleExpr]() {
					goto l608
				}
				if !_rules[rule_]() {
					goto l608
				}
				if buffer[position] != rune(',') {
					goto l608
				}
				position++
				if !_rules[rule_]() {
					goto l608
				}
				if !_rules[ruleExpr]() {
					goto l608
				}
				if !_rules[rule_]() {
					goto l608
				}
				if buffer[position] != rune(',') {
					goto l608
				}
				position++
				if !_rules[rule_]() {
					goto l608
				}
				if !_rules[ruleIdentifier]() {
					goto l608
				}
				if !_rules[rule_]() {
					goto l608
				}
				if buffer[position] != rune(')') {
					goto l608
				}
				position++
				add(ruleFoldMacro, position609)
			}
			return true
		l608:
			position, tokenIndex = position608, tokenIndex608
			return false
		},
		/* 89 IfWithError <- <(If / FailedIfWithoutElse)> */
		func() bool {
			position610, tokenIndex610 := position, tokenIndex
			{
				position611 := position
				{
					position612, tokenIndex612 := position, tokenIndex
					if !_rules[ruleIf]() {
						goto l613
					}
					goto l612
				l613:
					position, tokenIndex = position612, tokenIndex612
					if !_rules[ruleFailedIfWithoutElse]() {
						goto l610
					}
				}
			l612:
				add(ruleIfWithError, position611)
			}
			return true
		l610:
			position, tokenIndex = position610, tokenIndex610
			return false
		},
		/* 90 If <- <('i' 'f' _ Expr _ ('t' 'h' 'e' 'n') _ (Expr / BlockWithoutPar) _ ('e' 'l' 's' 'e') _ (Expr / BlockWithoutPar))> */
		func() bool {
			position614, tokenIndex614 := position, tokenIndex
			{
				position615 := position
				if buffer[position] != rune('i') {
					goto l614
				}
				position++
				if buffer[position] != rune('f') {
					goto l614
				}
				position++
				if !_rules[rule_]() {
					goto l614
				}
				if !_rules[ruleExpr]() {
					goto l614
				}
				if !_rules[rule_]() {
					goto l614
				}
				if buffer[position] != rune('t') {
					goto l614
				}
				position++
				if buffer[position] != rune('h') {
					goto l614
				}
				position++
				if buffer[position] != rune('e') {
					goto l614
				}
				position++
				if buffer[position] != rune('n') {
					goto l614
				}
				position++
				if !_rules[rule_]() {
					goto l614
				}
				{
					position616, tokenIndex616 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l617
					}
					goto l616
				l617:
					position, tokenIndex = position616, tokenIndex616
					if !_rules[ruleBlockWithoutPar]() {
						goto l614
					}
				}
			l616:
				if !_rules[rule_]() {
					goto l614
				}
				if buffer[position] != rune('e') {
					goto l614
				}
				position++
				if buffer[position] != rune('l') {
					goto l614
				}
				position++
				if buffer[position] != rune('s') {
					goto l614
				}
				position++
				if buffer[position] != rune('e') {
					goto l614
				}
				position++
				if !_rules[rule_]() {
					goto l614
				}
				{
					position618, tokenIndex618 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l619
					}
					goto l618
				l619:
					position, tokenIndex = position618, tokenIndex618
					if !_rules[ruleBlockWithoutPar]() {
						goto l614
					}
				}
			l618:
				add(ruleIf, position615)
			}
			return true
		l614:
			position, tokenIndex = position614, tokenIndex614
			return false
		},
		/* 91 FailedIfWithoutElse <- <('i' 'f' _ Expr _ ('t' 'h' 'e' 'n') _ (Expr / BlockWithoutPar))> */
		func() bool {
			position620, tokenIndex620 := position, tokenIndex
			{
				position621 := position
				if buffer[position] != rune('i') {
					goto l620
				}
				position++
				if buffer[position] != rune('f') {
					goto l620
				}
				position++
				if !_rules[rule_]() {
					goto l620
				}
				if !_rules[ruleExpr]() {
					goto l620
				}
				if !_rules[rule_]() {
					goto l620
				}
				if buffer[position] != rune('t') {
					goto l620
				}
				position++
				if buffer[position] != rune('h') {
					goto l620
				}
				position++
				if buffer[position] != rune('e') {
					goto l620
				}
				position++
				if buffer[position] != rune('n') {
					goto l620
				}
				position++
				if !_rules[rule_]() {
					goto l620
				}
				{
					position622, tokenIndex622 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l623
					}
					goto l622
				l623:
					position, tokenIndex = position622, tokenIndex622
					if !_rules[ruleBlockWithoutPar]() {
						goto l620
					}
				}
			l622:
				add(ruleFailedIfWithoutElse, position621)
			}
			return true
		l620:
			position, tokenIndex = position620, tokenIndex620
			return false
		},
		/* 92 Match <- <('m' 'a' 't' 'c' 'h' _ Expr _ '{' (_ Case)+ _ '}')> */
		func() bool {
			position624, tokenIndex624 := position, tokenIndex
			{
				position625 := position
				if buffer[position] != rune('m') {
					goto l624
				}
				position++
				if buffer[position] != rune('a') {
					goto l624
				}
				position++
				if buffer[position] != rune('t') {
					goto l624
				}
				position++
				if buffer[position] != rune('c') {
					goto l624
				}
				position++
				if buffer[position] != rune('h') {
					goto l624
				}
				position++
				if !_rules[rule_]() {
					goto l624
				}
				if !_rules[ruleExpr]() {
					goto l624
				}
				if !_rules[rule_]() {
					goto l624
				}
				if buffer[position] != rune('{') {
					goto l624
				}
				position++
				if !_rules[rule_]() {
					goto l624
				}
				if !_rules[ruleCase]() {
					goto l624
				}
			l626:
				{
					position627, tokenIndex627 := position, tokenIndex
					if !_rules[rule_]() {
						goto l627
					}
					if !_rules[ruleCase]() {
						goto l627
					}
					goto l626
				l627:
					position, tokenIndex = position627, tokenIndex627
				}
				if !_rules[rule_]() {
					goto l624
				}
				if buffer[position] != rune('}') {
					goto l624
				}
				position++
				add(ruleMatch, position625)
			}
			return true
		l624:
			position, tokenIndex = position624, tokenIndex624
			return false
		},
		/* 93 Case <- <('c' 'a' 's' 'e' _ (ValuePattern / TuplePattern / ObjectPattern / Placeholder / Expr) _ ('=' '>') _ (Block / BlockWithoutPar))> */
		func() bool {
			position628, tokenIndex628 := position, tokenIndex
			{
				position629 := position
				if buffer[position] != rune('c') {
					goto l628
				}
				position++
				if buffer[position] != rune('a') {
					goto l628
				}
				position++
				if buffer[position] != rune('s') {
					goto l628
				}
				position++
				if buffer[position] != rune('e') {
					goto l628
				}
				position++
				if !_rules[rule_]() {
					goto l628
				}
				{
					position630, tokenIndex630 := position, tokenIndex
					if !_rules[ruleValuePattern]() {
						goto l631
					}
					goto l630
				l631:
					position, tokenIndex = position630, tokenIndex630
					if !_rules[ruleTuplePattern]() {
						goto l632
					}
					goto l630
				l632:
					position, tokenIndex = position630, tokenIndex630
					if !_rules[ruleObjectPattern]() {
						goto l633
					}
					goto l630
				l633:
					position, tokenIndex = position630, tokenIndex630
					if !_rules[rulePlaceholder]() {
						goto l634
					}
					goto l630
				l634:
					position, tokenIndex = position630, tokenIndex630
					if !_rules[ruleExpr]() {
						goto l628
					}
				}
			l630:
				if !_rules[rule_]() {
					goto l628
				}
				if buffer[position] != rune('=') {
					goto l628
				}
				position++
				if buffer[position] != rune('>') {
					goto l628
				}
				position++
				if !_rules[rule_]() {
					goto l628
				}
				{
					position635, tokenIndex635 := position, tokenIndex
					if !_rules[ruleBlock]() {
						goto l636
					}
					goto l635
				l636:
					position, tokenIndex = position635, tokenIndex635
					if !_rules[ruleBlockWithoutPar]() {
						goto l628
					}
				}
			l635:
				add(ruleCase, position629)
			}
			return true
		l628:
			position, tokenIndex = position628, tokenIndex628
			return false
		},
		/* 94 Placeholder <- <'_'> */
		func() bool {
			position637, tokenIndex637 := position, tokenIndex
			{
				position638 := position
				if buffer[position] != rune('_') {
					goto l637
				}
				position++
				add(rulePlaceholder, position638)
			}
			return true
		l637:
			position, tokenIndex = position637, tokenIndex637
			return false
		},
		/* 95 ValuePattern <- <((Placeholder / Identifier) _ ':' _ Types)> */
		func() bool {
			position639, tokenIndex639 := position, tokenIndex
			{
				position640 := position
				{
					position641, tokenIndex641 := position, tokenIndex
					if !_rules[rulePlaceholder]() {
						goto l642
					}
					goto l641
				l642:
					position, tokenIndex = position641, tokenIndex641
					if !_rules[ruleIdentifier]() {
						goto l639
					}
				}
			l641:
				if !_rules[rule_]() {
					goto l639
				}
				if buffer[position] != rune(':') {
					goto l639
				}
				position++
				if !_rules[rule_]() {
					goto l639
				}
				if !_rules[ruleTypes]() {
					goto l639
				}
				add(ruleValuePattern, position640)
			}
			return true
		l639:
			position, tokenIndex = position639, tokenIndex639
			return false
		},
		/* 96 TupleValuesPattern <- <((ValuePattern / Placeholder / Identifier / Expr / GettableExpr) (_ ',' _ TupleValuesPattern)?)> */
		func() bool {
			position643, tokenIndex643 := position, tokenIndex
			{
				position644 := position
				{
					position645, tokenIndex645 := position, tokenIndex
					if !_rules[ruleValuePattern]() {
						goto l646
					}
					goto l645
				l646:
					position, tokenIndex = position645, tokenIndex645
					if !_rules[rulePlaceholder]() {
						goto l647
					}
					goto l645
				l647:
					position, tokenIndex = position645, tokenIndex645
					if !_rules[ruleIdentifier]() {
						goto l648
					}
					goto l645
				l648:
					position, tokenIndex = position645, tokenIndex645
					if !_rules[ruleExpr]() {
						goto l649
					}
					goto l645
				l649:
					position, tokenIndex = position645, tokenIndex645
					if !_rules[ruleGettableExpr]() {
						goto l643
					}
				}
			l645:
				{
					position650, tokenIndex650 := position, tokenIndex
					if !_rules[rule_]() {
						goto l650
					}
					if buffer[position] != rune(',') {
						goto l650
					}
					position++
					if !_rules[rule_]() {
						goto l650
					}
					if !_rules[ruleTupleValuesPattern]() {
						goto l650
					}
					goto l651
				l650:
					position, tokenIndex = position650, tokenIndex650
				}
			l651:
				add(ruleTupleValuesPattern, position644)
			}
			return true
		l643:
			position, tokenIndex = position643, tokenIndex643
			return false
		},
		/* 97 TuplePattern <- <('(' _ TupleValuesPattern _ ')')> */
		func() bool {
			position652, tokenIndex652 := position, tokenIndex
			{
				position653 := position
				if buffer[position] != rune('(') {
					goto l652
				}
				position++
				if !_rules[rule_]() {
					goto l652
				}
				if !_rules[ruleTupleValuesPattern]() {
					goto l652
				}
				if !_rules[rule_]() {
					goto l652
				}
				if buffer[position] != rune(')') {
					goto l652
				}
				position++
				add(ruleTuplePattern, position653)
			}
			return true
		l652:
			position, tokenIndex = position652, tokenIndex652
			return false
		},
		/* 98 ObjectFieldsPattern <- <(Identifier _ '=' _ (Identifier / Expr) (_ ',' _ ObjectFieldsPattern)?)> */
		func() bool {
			position654, tokenIndex654 := position, tokenIndex
			{
				position655 := position
				if !_rules[ruleIdentifier]() {
					goto l654
				}
				if !_rules[rule_]() {
					goto l654
				}
				if buffer[position] != rune('=') {
					goto l654
				}
				position++
				if !_rules[rule_]() {
					goto l654
				}
				{
					position656, tokenIndex656 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l657
					}
					goto l656
				l657:
					position, tokenIndex = position656, tokenIndex656
					if !_rules[ruleExpr]() {
						goto l654
					}
				}
			l656:
				{
					position658, tokenIndex658 := position, tokenIndex
					if !_rules[rule_]() {
						goto l658
					}
					if buffer[position] != rune(',') {
						goto l658
					}
					position++
					if !_rules[rule_]() {
						goto l658
					}
					if !_rules[ruleObjectFieldsPattern]() {
						goto l658
					}
					goto l659
				l658:
					position, tokenIndex = position658, tokenIndex658
				}
			l659:
				add(ruleObjectFieldsPattern, position655)
			}
			return true
		l654:
			position, tokenIndex = position654, tokenIndex654
			return false
		},
		/* 99 ObjectPattern <- <(Identifier _ '(' _ ObjectFieldsPattern? _ ')')> */
		func() bool {
			position660, tokenIndex660 := position, tokenIndex
			{
				position661 := position
				if !_rules[ruleIdentifier]() {
					goto l660
				}
				if !_rules[rule_]() {
					goto l660
				}
				if buffer[position] != rune('(') {
					goto l660
				}
				position++
				if !_rules[rule_]() {
					goto l660
				}
				{
					position662, tokenIndex662 := position, tokenIndex
					if !_rules[ruleObjectFieldsPattern]() {
						goto l662
					}
					goto l663
				l662:
					position, tokenIndex = position662, tokenIndex662
				}
			l663:
				if !_rules[rule_]() {
					goto l660
				}
				if buffer[position] != rune(')') {
					goto l660
				}
				position++
				add(ruleObjectPattern, position661)
			}
			return true
		l660:
			position, tokenIndex = position660, tokenIndex660
			return false
		},
		/* 100 Tuple <- <('(' _ Expr (_ ',' _ Expr)+ _ ')')> */
		func() bool {
			position664, tokenIndex664 := position, tokenIndex
			{
				position665 := position
				if buffer[position] != rune('(') {
					goto l664
				}
				position++
				if !_rules[rule_]() {
					goto l664
				}
				if !_rules[ruleExpr]() {
					goto l664
				}
				if !_rules[rule_]() {
					goto l664
				}
				if buffer[position] != rune(',') {
					goto l664
				}
				position++
				if !_rules[rule_]() {
					goto l664
				}
				if !_rules[ruleExpr]() {
					goto l664
				}
			l666:
				{
					position667, tokenIndex667 := position, tokenIndex
					if !_rules[rule_]() {
						goto l667
					}
					if buffer[position] != rune(',') {
						goto l667
					}
					position++
					if !_rules[rule_]() {
						goto l667
					}
					if !_rules[ruleExpr]() {
						goto l667
					}
					goto l666
				l667:
					position, tokenIndex = position667, tokenIndex667
				}
				if !_rules[rule_]() {
					goto l664
				}
				if buffer[position] != rune(')') {
					goto l664
				}
				position++
				add(ruleTuple, position665)
			}
			return true
		l664:
			position, tokenIndex = position664, tokenIndex664
			return false
		},
		/* 101 TupleRef <- <('(' _ Identifier (_ ',' _ Identifier)+ _ ')')> */
		func() bool {
			position668, tokenIndex668 := position, tokenIndex
			{
				position669 := position
				if buffer[position] != rune('(') {
					goto l668
				}
				position++
				if !_rules[rule_]() {
					goto l668
				}
				if !_rules[ruleIdentifier]() {
					goto l668
				}
				if !_rules[rule_]() {
					goto l668
				}
				if buffer[position] != rune(',') {
					goto l668
				}
				position++
				if !_rules[rule_]() {
					goto l668
				}
				if !_rules[ruleIdentifier]() {
					goto l668
				}
			l670:
				{
					position671, tokenIndex671 := position, tokenIndex
					if !_rules[rule_]() {
						goto l671
					}
					if buffer[position] != rune(',') {
						goto l671
					}
					position++
					if !_rules[rule_]() {
						goto l671
					}
					if !_rules[ruleIdentifier]() {
						goto l671
					}
					goto l670
				l671:
					position, tokenIndex = position671, tokenIndex671
				}
				if !_rules[rule_]() {
					goto l668
				}
				if buffer[position] != rune(')') {
					goto l668
				}
				position++
				add(ruleTupleRef, position669)
			}
			return true
		l668:
			position, tokenIndex = position668, tokenIndex668
			return false
		},
		/* 102 TupleAccess <- <('_' [0-9]+)> */
		func() bool {
			position672, tokenIndex672 := position, tokenIndex
			{
				position673 := position
				if buffer[position] != rune('_') {
					goto l672
				}
				position++
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l672
				}
				position++
			l674:
				{
					position675, tokenIndex675 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l675
					}
					position++
					goto l674
				l675:
					position, tokenIndex = position675, tokenIndex675
				}
				add(ruleTupleAccess, position673)
			}
			return true
		l672:
			position, tokenIndex = position672, tokenIndex672
			return false
		},
	}
	p.rules = _rules
	return nil
}

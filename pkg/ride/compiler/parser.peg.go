package compiler

// Code generated by peg -output=parser.peg.go ride.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleCode
	ruleDAppRoot
	ruleScriptRoot
	ruleWS
	ruleEOL
	ruleComment
	rule_
	ruleEOF
	ruleDirectiveName
	ruleUpperCaseString
	ruleIntString
	rulePathString
	ruleDirective
	ruleDeclaration
	ruleVariable
	ruleStrictVariable
	ruleFunc
	ruleFuncArg
	ruleFuncArgSeq
	ruleAnnotatedFunc
	ruleAnnotation
	ruleIdentifierSeq
	ruleAnnotationSeq
	ruleOrOp
	ruleAndOp
	ruleEqGroupOp
	ruleEqOp
	ruleNeOp
	ruleCompareGroupOp
	ruleGtOp
	ruleGeOp
	ruleLtOp
	ruleLeOp
	ruleConsOp
	ruleSumGroupOp
	ruleSumOp
	ruleSubOp
	ruleMultGroupOp
	ruleMulOp
	ruleDivOp
	ruleModOp
	ruleUnaryOp
	rulePositiveOp
	ruleNegativeOp
	ruleNotOp
	ruleReservedWords
	ruleConst
	ruleIdentifier
	ruleGenericTypesAtom
	ruleOneGenericTypeAtom
	ruleTypesAtom
	ruleOneTypeAtom
	ruleBase16
	ruleBase58
	ruleBase64
	ruleByteVector
	ruleBoolean
	ruleString
	ruleUnicodeChar
	ruleEscapedChar
	ruleChar
	ruleInteger
	ruleList
	ruleExprSeq
	ruleAtomExpr
	ruleMultGroupOpAtom
	ruleSumGroupOpAtom
	ruleConsOpAtom
	ruleCompareGroupOpAtom
	ruleEqualityGroupOpAtom
	ruleAndOpAtom
	ruleOrOpAtom
	ruleExpr
	ruleParExpr
	ruleGettableExpr
	ruleFunctionCallAccess
	ruleIdentifierAccess
	ruleListAccess
	ruleBlock
	ruleBlockWithoutPar
	ruleFunctionCall
	ruleFoldMacro
	ruleIfWithError
	ruleIf
	ruleFailedIfWithoutElse
	ruleMatch
	ruleMatchCase
	ruleDefaultMatchCasePart
)

var rul3s = [...]string{
	"Unknown",
	"Code",
	"DAppRoot",
	"ScriptRoot",
	"WS",
	"EOL",
	"Comment",
	"_",
	"EOF",
	"DirectiveName",
	"UpperCaseString",
	"IntString",
	"PathString",
	"Directive",
	"Declaration",
	"Variable",
	"StrictVariable",
	"Func",
	"FuncArg",
	"FuncArgSeq",
	"AnnotatedFunc",
	"Annotation",
	"IdentifierSeq",
	"AnnotationSeq",
	"OrOp",
	"AndOp",
	"EqGroupOp",
	"EqOp",
	"NeOp",
	"CompareGroupOp",
	"GtOp",
	"GeOp",
	"LtOp",
	"LeOp",
	"ConsOp",
	"SumGroupOp",
	"SumOp",
	"SubOp",
	"MultGroupOp",
	"MulOp",
	"DivOp",
	"ModOp",
	"UnaryOp",
	"PositiveOp",
	"NegativeOp",
	"NotOp",
	"ReservedWords",
	"Const",
	"Identifier",
	"GenericTypesAtom",
	"OneGenericTypeAtom",
	"TypesAtom",
	"OneTypeAtom",
	"Base16",
	"Base58",
	"Base64",
	"ByteVector",
	"Boolean",
	"String",
	"UnicodeChar",
	"EscapedChar",
	"Char",
	"Integer",
	"List",
	"ExprSeq",
	"AtomExpr",
	"MultGroupOpAtom",
	"SumGroupOpAtom",
	"ConsOpAtom",
	"CompareGroupOpAtom",
	"EqualityGroupOpAtom",
	"AndOpAtom",
	"OrOpAtom",
	"Expr",
	"ParExpr",
	"GettableExpr",
	"FunctionCallAccess",
	"IdentifierAccess",
	"ListAccess",
	"Block",
	"BlockWithoutPar",
	"FunctionCall",
	"FoldMacro",
	"IfWithError",
	"If",
	"FailedIfWithoutElse",
	"Match",
	"MatchCase",
	"DefaultMatchCasePart",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Buffer string
	buffer []rune
	rules  [89]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Code <- <(DAppRoot / ScriptRoot)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[ruleDAppRoot]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[ruleScriptRoot]() {
						goto l0
					}
				}
			l2:
				add(ruleCode, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 DAppRoot <- <(_ (Directive _)* (_ Declaration)* (_ AnnotatedFunc)* _ EOF)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
				if !_rules[rule_]() {
					goto l4
				}
			l6:
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l7
					}
					if !_rules[rule_]() {
						goto l7
					}
					goto l6
				l7:
					position, tokenIndex = position7, tokenIndex7
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[rule_]() {
						goto l9
					}
					if !_rules[ruleDeclaration]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
			l10:
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[rule_]() {
						goto l11
					}
					if !_rules[ruleAnnotatedFunc]() {
						goto l11
					}
					goto l10
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				if !_rules[rule_]() {
					goto l4
				}
				if !_rules[ruleEOF]() {
					goto l4
				}
				add(ruleDAppRoot, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 ScriptRoot <- <(_ (Directive _)* (_ Declaration)* _ Expr _ EOF)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[rule_]() {
					goto l12
				}
			l14:
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l15
					}
					if !_rules[rule_]() {
						goto l15
					}
					goto l14
				l15:
					position, tokenIndex = position15, tokenIndex15
				}
			l16:
				{
					position17, tokenIndex17 := position, tokenIndex
					if !_rules[rule_]() {
						goto l17
					}
					if !_rules[ruleDeclaration]() {
						goto l17
					}
					goto l16
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleExpr]() {
					goto l12
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleEOF]() {
					goto l12
				}
				add(ruleScriptRoot, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 WS <- <(' ' / '\t')> */
		func() bool {
			position18, tokenIndex18 := position, tokenIndex
			{
				position19 := position
				{
					position20, tokenIndex20 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l21
					}
					position++
					goto l20
				l21:
					position, tokenIndex = position20, tokenIndex20
					if buffer[position] != rune('\t') {
						goto l18
					}
					position++
				}
			l20:
				add(ruleWS, position19)
			}
			return true
		l18:
			position, tokenIndex = position18, tokenIndex18
			return false
		},
		/* 4 EOL <- <('\n' / '\r' / '\f')> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24, tokenIndex24 := position, tokenIndex
					if buffer[position] != rune('\n') {
						goto l25
					}
					position++
					goto l24
				l25:
					position, tokenIndex = position24, tokenIndex24
					if buffer[position] != rune('\r') {
						goto l26
					}
					position++
					goto l24
				l26:
					position, tokenIndex = position24, tokenIndex24
					if buffer[position] != rune('\f') {
						goto l22
					}
					position++
				}
			l24:
				add(ruleEOL, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 5 Comment <- <('#' (!('\r' / '^' / '\n') .)*)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				if buffer[position] != rune('#') {
					goto l27
				}
				position++
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					{
						position31, tokenIndex31 := position, tokenIndex
						{
							position32, tokenIndex32 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l33
							}
							position++
							goto l32
						l33:
							position, tokenIndex = position32, tokenIndex32
							if buffer[position] != rune('^') {
								goto l34
							}
							position++
							goto l32
						l34:
							position, tokenIndex = position32, tokenIndex32
							if buffer[position] != rune('\n') {
								goto l31
							}
							position++
						}
					l32:
						goto l30
					l31:
						position, tokenIndex = position31, tokenIndex31
					}
					if !matchDot() {
						goto l30
					}
					goto l29
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
				add(ruleComment, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 6 _ <- <(Comment / (WS / EOL)+)*> */
		func() bool {
			{
				position36 := position
			l37:
				{
					position38, tokenIndex38 := position, tokenIndex
					{
						position39, tokenIndex39 := position, tokenIndex
						if !_rules[ruleComment]() {
							goto l40
						}
						goto l39
					l40:
						position, tokenIndex = position39, tokenIndex39
						{
							position43, tokenIndex43 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l44
							}
							goto l43
						l44:
							position, tokenIndex = position43, tokenIndex43
							if !_rules[ruleEOL]() {
								goto l38
							}
						}
					l43:
					l41:
						{
							position42, tokenIndex42 := position, tokenIndex
							{
								position45, tokenIndex45 := position, tokenIndex
								if !_rules[ruleWS]() {
									goto l46
								}
								goto l45
							l46:
								position, tokenIndex = position45, tokenIndex45
								if !_rules[ruleEOL]() {
									goto l42
								}
							}
						l45:
							goto l41
						l42:
							position, tokenIndex = position42, tokenIndex42
						}
					}
				l39:
					goto l37
				l38:
					position, tokenIndex = position38, tokenIndex38
				}
				add(rule_, position36)
			}
			return true
		},
		/* 7 EOF <- <!.> */
		func() bool {
			position47, tokenIndex47 := position, tokenIndex
			{
				position48 := position
				{
					position49, tokenIndex49 := position, tokenIndex
					if !matchDot() {
						goto l49
					}
					goto l47
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
				add(ruleEOF, position48)
			}
			return true
		l47:
			position, tokenIndex = position47, tokenIndex47
			return false
		},
		/* 8 DirectiveName <- <([A-Z]+ ('_' / [A-Z])*)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l50
				}
				position++
			l52:
				{
					position53, tokenIndex53 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l53
					}
					position++
					goto l52
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				{
					position55, tokenIndex55 := position, tokenIndex
					{
						position56, tokenIndex56 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l57
						}
						position++
						goto l56
					l57:
						position, tokenIndex = position56, tokenIndex56
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l55
						}
						position++
					}
				l56:
					goto l54
				l55:
					position, tokenIndex = position55, tokenIndex55
				}
				add(ruleDirectiveName, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 9 UpperCaseString <- <[A-Z]+> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l58
				}
				position++
			l60:
				{
					position61, tokenIndex61 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l61
					}
					position++
					goto l60
				l61:
					position, tokenIndex = position61, tokenIndex61
				}
				add(ruleUpperCaseString, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 10 IntString <- <[0-9]+> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l62
				}
				position++
			l64:
				{
					position65, tokenIndex65 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l65
					}
					position++
					goto l64
				l65:
					position, tokenIndex = position65, tokenIndex65
				}
				add(ruleIntString, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 11 PathString <- <('_' / [a-z] / [A-Z] / [0-9] / '-' / '/' / ',' / '.')+> */
		func() bool {
			position66, tokenIndex66 := position, tokenIndex
			{
				position67 := position
				{
					position70, tokenIndex70 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l71
					}
					position++
					goto l70
				l71:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l72
					}
					position++
					goto l70
				l72:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l73
					}
					position++
					goto l70
				l73:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l74
					}
					position++
					goto l70
				l74:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('-') {
						goto l75
					}
					position++
					goto l70
				l75:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('/') {
						goto l76
					}
					position++
					goto l70
				l76:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune(',') {
						goto l77
					}
					position++
					goto l70
				l77:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('.') {
						goto l66
					}
					position++
				}
			l70:
			l68:
				{
					position69, tokenIndex69 := position, tokenIndex
					{
						position78, tokenIndex78 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l79
						}
						position++
						goto l78
					l79:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l80
						}
						position++
						goto l78
					l80:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l81
						}
						position++
						goto l78
					l81:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l82
						}
						position++
						goto l78
					l82:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('-') {
							goto l83
						}
						position++
						goto l78
					l83:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('/') {
							goto l84
						}
						position++
						goto l78
					l84:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune(',') {
							goto l85
						}
						position++
						goto l78
					l85:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('.') {
							goto l69
						}
						position++
					}
				l78:
					goto l68
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
				add(rulePathString, position67)
			}
			return true
		l66:
			position, tokenIndex = position66, tokenIndex66
			return false
		},
		/* 12 Directive <- <('{' '-' '#' WS+ DirectiveName WS+ (IntString / UpperCaseString / PathString) WS+ ('#' '-' '}'))> */
		func() bool {
			position86, tokenIndex86 := position, tokenIndex
			{
				position87 := position
				if buffer[position] != rune('{') {
					goto l86
				}
				position++
				if buffer[position] != rune('-') {
					goto l86
				}
				position++
				if buffer[position] != rune('#') {
					goto l86
				}
				position++
				if !_rules[ruleWS]() {
					goto l86
				}
			l88:
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l89
					}
					goto l88
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
				if !_rules[ruleDirectiveName]() {
					goto l86
				}
				if !_rules[ruleWS]() {
					goto l86
				}
			l90:
				{
					position91, tokenIndex91 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l91
					}
					goto l90
				l91:
					position, tokenIndex = position91, tokenIndex91
				}
				{
					position92, tokenIndex92 := position, tokenIndex
					if !_rules[ruleIntString]() {
						goto l93
					}
					goto l92
				l93:
					position, tokenIndex = position92, tokenIndex92
					if !_rules[ruleUpperCaseString]() {
						goto l94
					}
					goto l92
				l94:
					position, tokenIndex = position92, tokenIndex92
					if !_rules[rulePathString]() {
						goto l86
					}
				}
			l92:
				if !_rules[ruleWS]() {
					goto l86
				}
			l95:
				{
					position96, tokenIndex96 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l96
					}
					goto l95
				l96:
					position, tokenIndex = position96, tokenIndex96
				}
				if buffer[position] != rune('#') {
					goto l86
				}
				position++
				if buffer[position] != rune('-') {
					goto l86
				}
				position++
				if buffer[position] != rune('}') {
					goto l86
				}
				position++
				add(ruleDirective, position87)
			}
			return true
		l86:
			position, tokenIndex = position86, tokenIndex86
			return false
		},
		/* 13 Declaration <- <((Variable / StrictVariable / Func) _ ';'?)> */
		func() bool {
			position97, tokenIndex97 := position, tokenIndex
			{
				position98 := position
				{
					position99, tokenIndex99 := position, tokenIndex
					if !_rules[ruleVariable]() {
						goto l100
					}
					goto l99
				l100:
					position, tokenIndex = position99, tokenIndex99
					if !_rules[ruleStrictVariable]() {
						goto l101
					}
					goto l99
				l101:
					position, tokenIndex = position99, tokenIndex99
					if !_rules[ruleFunc]() {
						goto l97
					}
				}
			l99:
				if !_rules[rule_]() {
					goto l97
				}
				{
					position102, tokenIndex102 := position, tokenIndex
					if buffer[position] != rune(';') {
						goto l102
					}
					position++
					goto l103
				l102:
					position, tokenIndex = position102, tokenIndex102
				}
			l103:
				add(ruleDeclaration, position98)
			}
			return true
		l97:
			position, tokenIndex = position97, tokenIndex97
			return false
		},
		/* 14 Variable <- <(('l' / 'L') ('e' / 'E') ('t' / 'T') _ Identifier _ '=' _ Expr)> */
		func() bool {
			position104, tokenIndex104 := position, tokenIndex
			{
				position105 := position
				{
					position106, tokenIndex106 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l107
					}
					position++
					goto l106
				l107:
					position, tokenIndex = position106, tokenIndex106
					if buffer[position] != rune('L') {
						goto l104
					}
					position++
				}
			l106:
				{
					position108, tokenIndex108 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l109
					}
					position++
					goto l108
				l109:
					position, tokenIndex = position108, tokenIndex108
					if buffer[position] != rune('E') {
						goto l104
					}
					position++
				}
			l108:
				{
					position110, tokenIndex110 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l111
					}
					position++
					goto l110
				l111:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('T') {
						goto l104
					}
					position++
				}
			l110:
				if !_rules[rule_]() {
					goto l104
				}
				if !_rules[ruleIdentifier]() {
					goto l104
				}
				if !_rules[rule_]() {
					goto l104
				}
				if buffer[position] != rune('=') {
					goto l104
				}
				position++
				if !_rules[rule_]() {
					goto l104
				}
				if !_rules[ruleExpr]() {
					goto l104
				}
				add(ruleVariable, position105)
			}
			return true
		l104:
			position, tokenIndex = position104, tokenIndex104
			return false
		},
		/* 15 StrictVariable <- <(('s' / 'S') ('t' / 'T') ('r' / 'R') ('i' / 'I') ('c' / 'C') ('t' / 'T') _ Identifier _ '=' _ Expr)> */
		func() bool {
			position112, tokenIndex112 := position, tokenIndex
			{
				position113 := position
				{
					position114, tokenIndex114 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l115
					}
					position++
					goto l114
				l115:
					position, tokenIndex = position114, tokenIndex114
					if buffer[position] != rune('S') {
						goto l112
					}
					position++
				}
			l114:
				{
					position116, tokenIndex116 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l117
					}
					position++
					goto l116
				l117:
					position, tokenIndex = position116, tokenIndex116
					if buffer[position] != rune('T') {
						goto l112
					}
					position++
				}
			l116:
				{
					position118, tokenIndex118 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l119
					}
					position++
					goto l118
				l119:
					position, tokenIndex = position118, tokenIndex118
					if buffer[position] != rune('R') {
						goto l112
					}
					position++
				}
			l118:
				{
					position120, tokenIndex120 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l121
					}
					position++
					goto l120
				l121:
					position, tokenIndex = position120, tokenIndex120
					if buffer[position] != rune('I') {
						goto l112
					}
					position++
				}
			l120:
				{
					position122, tokenIndex122 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l123
					}
					position++
					goto l122
				l123:
					position, tokenIndex = position122, tokenIndex122
					if buffer[position] != rune('C') {
						goto l112
					}
					position++
				}
			l122:
				{
					position124, tokenIndex124 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l125
					}
					position++
					goto l124
				l125:
					position, tokenIndex = position124, tokenIndex124
					if buffer[position] != rune('T') {
						goto l112
					}
					position++
				}
			l124:
				if !_rules[rule_]() {
					goto l112
				}
				if !_rules[ruleIdentifier]() {
					goto l112
				}
				if !_rules[rule_]() {
					goto l112
				}
				if buffer[position] != rune('=') {
					goto l112
				}
				position++
				if !_rules[rule_]() {
					goto l112
				}
				if !_rules[ruleExpr]() {
					goto l112
				}
				add(ruleStrictVariable, position113)
			}
			return true
		l112:
			position, tokenIndex = position112, tokenIndex112
			return false
		},
		/* 16 Func <- <(('f' / 'F') ('u' / 'U') ('n' / 'N') ('c' / 'C') _ Identifier _ '(' _ FuncArgSeq? _ ')' _ '=' _ Expr)> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				{
					position128, tokenIndex128 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l129
					}
					position++
					goto l128
				l129:
					position, tokenIndex = position128, tokenIndex128
					if buffer[position] != rune('F') {
						goto l126
					}
					position++
				}
			l128:
				{
					position130, tokenIndex130 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l131
					}
					position++
					goto l130
				l131:
					position, tokenIndex = position130, tokenIndex130
					if buffer[position] != rune('U') {
						goto l126
					}
					position++
				}
			l130:
				{
					position132, tokenIndex132 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l133
					}
					position++
					goto l132
				l133:
					position, tokenIndex = position132, tokenIndex132
					if buffer[position] != rune('N') {
						goto l126
					}
					position++
				}
			l132:
				{
					position134, tokenIndex134 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l135
					}
					position++
					goto l134
				l135:
					position, tokenIndex = position134, tokenIndex134
					if buffer[position] != rune('C') {
						goto l126
					}
					position++
				}
			l134:
				if !_rules[rule_]() {
					goto l126
				}
				if !_rules[ruleIdentifier]() {
					goto l126
				}
				if !_rules[rule_]() {
					goto l126
				}
				if buffer[position] != rune('(') {
					goto l126
				}
				position++
				if !_rules[rule_]() {
					goto l126
				}
				{
					position136, tokenIndex136 := position, tokenIndex
					if !_rules[ruleFuncArgSeq]() {
						goto l136
					}
					goto l137
				l136:
					position, tokenIndex = position136, tokenIndex136
				}
			l137:
				if !_rules[rule_]() {
					goto l126
				}
				if buffer[position] != rune(')') {
					goto l126
				}
				position++
				if !_rules[rule_]() {
					goto l126
				}
				if buffer[position] != rune('=') {
					goto l126
				}
				position++
				if !_rules[rule_]() {
					goto l126
				}
				if !_rules[ruleExpr]() {
					goto l126
				}
				add(ruleFunc, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 17 FuncArg <- <(Identifier _ ':' _ GenericTypesAtom)> */
		func() bool {
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
				if !_rules[ruleIdentifier]() {
					goto l138
				}
				if !_rules[rule_]() {
					goto l138
				}
				if buffer[position] != rune(':') {
					goto l138
				}
				position++
				if !_rules[rule_]() {
					goto l138
				}
				if !_rules[ruleGenericTypesAtom]() {
					goto l138
				}
				add(ruleFuncArg, position139)
			}
			return true
		l138:
			position, tokenIndex = position138, tokenIndex138
			return false
		},
		/* 18 FuncArgSeq <- <(FuncArg (_ ',' _ FuncArgSeq)?)> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				if !_rules[ruleFuncArg]() {
					goto l140
				}
				{
					position142, tokenIndex142 := position, tokenIndex
					if !_rules[rule_]() {
						goto l142
					}
					if buffer[position] != rune(',') {
						goto l142
					}
					position++
					if !_rules[rule_]() {
						goto l142
					}
					if !_rules[ruleFuncArgSeq]() {
						goto l142
					}
					goto l143
				l142:
					position, tokenIndex = position142, tokenIndex142
				}
			l143:
				add(ruleFuncArgSeq, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 19 AnnotatedFunc <- <(AnnotationSeq _ Func)> */
		func() bool {
			position144, tokenIndex144 := position, tokenIndex
			{
				position145 := position
				if !_rules[ruleAnnotationSeq]() {
					goto l144
				}
				if !_rules[rule_]() {
					goto l144
				}
				if !_rules[ruleFunc]() {
					goto l144
				}
				add(ruleAnnotatedFunc, position145)
			}
			return true
		l144:
			position, tokenIndex = position144, tokenIndex144
			return false
		},
		/* 20 Annotation <- <('@' Identifier _ '(' _ IdentifierSeq _ ')')> */
		func() bool {
			position146, tokenIndex146 := position, tokenIndex
			{
				position147 := position
				if buffer[position] != rune('@') {
					goto l146
				}
				position++
				if !_rules[ruleIdentifier]() {
					goto l146
				}
				if !_rules[rule_]() {
					goto l146
				}
				if buffer[position] != rune('(') {
					goto l146
				}
				position++
				if !_rules[rule_]() {
					goto l146
				}
				if !_rules[ruleIdentifierSeq]() {
					goto l146
				}
				if !_rules[rule_]() {
					goto l146
				}
				if buffer[position] != rune(')') {
					goto l146
				}
				position++
				add(ruleAnnotation, position147)
			}
			return true
		l146:
			position, tokenIndex = position146, tokenIndex146
			return false
		},
		/* 21 IdentifierSeq <- <(Identifier (_ ',' _ IdentifierSeq)?)> */
		func() bool {
			position148, tokenIndex148 := position, tokenIndex
			{
				position149 := position
				if !_rules[ruleIdentifier]() {
					goto l148
				}
				{
					position150, tokenIndex150 := position, tokenIndex
					if !_rules[rule_]() {
						goto l150
					}
					if buffer[position] != rune(',') {
						goto l150
					}
					position++
					if !_rules[rule_]() {
						goto l150
					}
					if !_rules[ruleIdentifierSeq]() {
						goto l150
					}
					goto l151
				l150:
					position, tokenIndex = position150, tokenIndex150
				}
			l151:
				add(ruleIdentifierSeq, position149)
			}
			return true
		l148:
			position, tokenIndex = position148, tokenIndex148
			return false
		},
		/* 22 AnnotationSeq <- <(Annotation (_ AnnotationSeq)?)> */
		func() bool {
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				if !_rules[ruleAnnotation]() {
					goto l152
				}
				{
					position154, tokenIndex154 := position, tokenIndex
					if !_rules[rule_]() {
						goto l154
					}
					if !_rules[ruleAnnotationSeq]() {
						goto l154
					}
					goto l155
				l154:
					position, tokenIndex = position154, tokenIndex154
				}
			l155:
				add(ruleAnnotationSeq, position153)
			}
			return true
		l152:
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 23 OrOp <- <('|' '|')> */
		func() bool {
			position156, tokenIndex156 := position, tokenIndex
			{
				position157 := position
				if buffer[position] != rune('|') {
					goto l156
				}
				position++
				if buffer[position] != rune('|') {
					goto l156
				}
				position++
				add(ruleOrOp, position157)
			}
			return true
		l156:
			position, tokenIndex = position156, tokenIndex156
			return false
		},
		/* 24 AndOp <- <('&' '&')> */
		func() bool {
			position158, tokenIndex158 := position, tokenIndex
			{
				position159 := position
				if buffer[position] != rune('&') {
					goto l158
				}
				position++
				if buffer[position] != rune('&') {
					goto l158
				}
				position++
				add(ruleAndOp, position159)
			}
			return true
		l158:
			position, tokenIndex = position158, tokenIndex158
			return false
		},
		/* 25 EqGroupOp <- <(EqOp / NeOp)> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				{
					position162, tokenIndex162 := position, tokenIndex
					if !_rules[ruleEqOp]() {
						goto l163
					}
					goto l162
				l163:
					position, tokenIndex = position162, tokenIndex162
					if !_rules[ruleNeOp]() {
						goto l160
					}
				}
			l162:
				add(ruleEqGroupOp, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 26 EqOp <- <('=' '=')> */
		func() bool {
			position164, tokenIndex164 := position, tokenIndex
			{
				position165 := position
				if buffer[position] != rune('=') {
					goto l164
				}
				position++
				if buffer[position] != rune('=') {
					goto l164
				}
				position++
				add(ruleEqOp, position165)
			}
			return true
		l164:
			position, tokenIndex = position164, tokenIndex164
			return false
		},
		/* 27 NeOp <- <('!' '=')> */
		func() bool {
			position166, tokenIndex166 := position, tokenIndex
			{
				position167 := position
				if buffer[position] != rune('!') {
					goto l166
				}
				position++
				if buffer[position] != rune('=') {
					goto l166
				}
				position++
				add(ruleNeOp, position167)
			}
			return true
		l166:
			position, tokenIndex = position166, tokenIndex166
			return false
		},
		/* 28 CompareGroupOp <- <(GtOp / GeOp / LtOp / LeOp)> */
		func() bool {
			position168, tokenIndex168 := position, tokenIndex
			{
				position169 := position
				{
					position170, tokenIndex170 := position, tokenIndex
					if !_rules[ruleGtOp]() {
						goto l171
					}
					goto l170
				l171:
					position, tokenIndex = position170, tokenIndex170
					if !_rules[ruleGeOp]() {
						goto l172
					}
					goto l170
				l172:
					position, tokenIndex = position170, tokenIndex170
					if !_rules[ruleLtOp]() {
						goto l173
					}
					goto l170
				l173:
					position, tokenIndex = position170, tokenIndex170
					if !_rules[ruleLeOp]() {
						goto l168
					}
				}
			l170:
				add(ruleCompareGroupOp, position169)
			}
			return true
		l168:
			position, tokenIndex = position168, tokenIndex168
			return false
		},
		/* 29 GtOp <- <('>' !'=')> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				if buffer[position] != rune('>') {
					goto l174
				}
				position++
				{
					position176, tokenIndex176 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l176
					}
					position++
					goto l174
				l176:
					position, tokenIndex = position176, tokenIndex176
				}
				add(ruleGtOp, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 30 GeOp <- <('>' '=')> */
		func() bool {
			position177, tokenIndex177 := position, tokenIndex
			{
				position178 := position
				if buffer[position] != rune('>') {
					goto l177
				}
				position++
				if buffer[position] != rune('=') {
					goto l177
				}
				position++
				add(ruleGeOp, position178)
			}
			return true
		l177:
			position, tokenIndex = position177, tokenIndex177
			return false
		},
		/* 31 LtOp <- <('<' !'=')> */
		func() bool {
			position179, tokenIndex179 := position, tokenIndex
			{
				position180 := position
				if buffer[position] != rune('<') {
					goto l179
				}
				position++
				{
					position181, tokenIndex181 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l181
					}
					position++
					goto l179
				l181:
					position, tokenIndex = position181, tokenIndex181
				}
				add(ruleLtOp, position180)
			}
			return true
		l179:
			position, tokenIndex = position179, tokenIndex179
			return false
		},
		/* 32 LeOp <- <('<' '=')> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				if buffer[position] != rune('<') {
					goto l182
				}
				position++
				if buffer[position] != rune('=') {
					goto l182
				}
				position++
				add(ruleLeOp, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 33 ConsOp <- <(':' ':')> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				if buffer[position] != rune(':') {
					goto l184
				}
				position++
				if buffer[position] != rune(':') {
					goto l184
				}
				position++
				add(ruleConsOp, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 34 SumGroupOp <- <(SumOp / SubOp)> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				{
					position188, tokenIndex188 := position, tokenIndex
					if !_rules[ruleSumOp]() {
						goto l189
					}
					goto l188
				l189:
					position, tokenIndex = position188, tokenIndex188
					if !_rules[ruleSubOp]() {
						goto l186
					}
				}
			l188:
				add(ruleSumGroupOp, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 35 SumOp <- <'+'> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if buffer[position] != rune('+') {
					goto l190
				}
				position++
				add(ruleSumOp, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 36 SubOp <- <'-'> */
		func() bool {
			position192, tokenIndex192 := position, tokenIndex
			{
				position193 := position
				if buffer[position] != rune('-') {
					goto l192
				}
				position++
				add(ruleSubOp, position193)
			}
			return true
		l192:
			position, tokenIndex = position192, tokenIndex192
			return false
		},
		/* 37 MultGroupOp <- <(MulOp / DivOp / ModOp)> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
				{
					position196, tokenIndex196 := position, tokenIndex
					if !_rules[ruleMulOp]() {
						goto l197
					}
					goto l196
				l197:
					position, tokenIndex = position196, tokenIndex196
					if !_rules[ruleDivOp]() {
						goto l198
					}
					goto l196
				l198:
					position, tokenIndex = position196, tokenIndex196
					if !_rules[ruleModOp]() {
						goto l194
					}
				}
			l196:
				add(ruleMultGroupOp, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 38 MulOp <- <'*'> */
		func() bool {
			position199, tokenIndex199 := position, tokenIndex
			{
				position200 := position
				if buffer[position] != rune('*') {
					goto l199
				}
				position++
				add(ruleMulOp, position200)
			}
			return true
		l199:
			position, tokenIndex = position199, tokenIndex199
			return false
		},
		/* 39 DivOp <- <'/'> */
		func() bool {
			position201, tokenIndex201 := position, tokenIndex
			{
				position202 := position
				if buffer[position] != rune('/') {
					goto l201
				}
				position++
				add(ruleDivOp, position202)
			}
			return true
		l201:
			position, tokenIndex = position201, tokenIndex201
			return false
		},
		/* 40 ModOp <- <'%'> */
		func() bool {
			position203, tokenIndex203 := position, tokenIndex
			{
				position204 := position
				if buffer[position] != rune('%') {
					goto l203
				}
				position++
				add(ruleModOp, position204)
			}
			return true
		l203:
			position, tokenIndex = position203, tokenIndex203
			return false
		},
		/* 41 UnaryOp <- <(PositiveOp / NegativeOp / NotOp)> */
		func() bool {
			position205, tokenIndex205 := position, tokenIndex
			{
				position206 := position
				{
					position207, tokenIndex207 := position, tokenIndex
					if !_rules[rulePositiveOp]() {
						goto l208
					}
					goto l207
				l208:
					position, tokenIndex = position207, tokenIndex207
					if !_rules[ruleNegativeOp]() {
						goto l209
					}
					goto l207
				l209:
					position, tokenIndex = position207, tokenIndex207
					if !_rules[ruleNotOp]() {
						goto l205
					}
				}
			l207:
				add(ruleUnaryOp, position206)
			}
			return true
		l205:
			position, tokenIndex = position205, tokenIndex205
			return false
		},
		/* 42 PositiveOp <- <'+'> */
		func() bool {
			position210, tokenIndex210 := position, tokenIndex
			{
				position211 := position
				if buffer[position] != rune('+') {
					goto l210
				}
				position++
				add(rulePositiveOp, position211)
			}
			return true
		l210:
			position, tokenIndex = position210, tokenIndex210
			return false
		},
		/* 43 NegativeOp <- <('-' !'#')> */
		func() bool {
			position212, tokenIndex212 := position, tokenIndex
			{
				position213 := position
				if buffer[position] != rune('-') {
					goto l212
				}
				position++
				{
					position214, tokenIndex214 := position, tokenIndex
					if buffer[position] != rune('#') {
						goto l214
					}
					position++
					goto l212
				l214:
					position, tokenIndex = position214, tokenIndex214
				}
				add(ruleNegativeOp, position213)
			}
			return true
		l212:
			position, tokenIndex = position212, tokenIndex212
			return false
		},
		/* 44 NotOp <- <'!'> */
		func() bool {
			position215, tokenIndex215 := position, tokenIndex
			{
				position216 := position
				if buffer[position] != rune('!') {
					goto l215
				}
				position++
				add(ruleNotOp, position216)
			}
			return true
		l215:
			position, tokenIndex = position215, tokenIndex215
			return false
		},
		/* 45 ReservedWords <- <((('l' / 'L') ('e' / 'E') ('t' / 'T')) / (('s' / 'S') ('t' / 'T') ('r' / 'R') ('i' / 'I') ('c' / 'C') ('t' / 'T')) / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '1' '6') / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '5' '8') / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '6' '4') / (('t' / 'T') ('r' / 'R') ('u' / 'U') ('e' / 'E')) / (('f' / 'F') ('a' / 'A') ('l' / 'L') ('s' / 'S') ('e' / 'E')) / (('i' / 'I') ('f' / 'F')) / (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) / (('e' / 'E') ('l' / 'L') ('s' / 'S') ('e' / 'E')) / (('m' / 'M') ('a' / 'A') ('t' / 'T') ('c' / 'C') ('h' / 'H')) / (('c' / 'C') ('a' / 'A') ('s' / 'S') ('e' / 'E')) / (('f' / 'F') ('u' / 'U') ('n' / 'N') ('c' / 'C')) / (('f' / 'F') ('o' / 'O') ('l' / 'L') ('d' / 'D')))> */
		func() bool {
			position217, tokenIndex217 := position, tokenIndex
			{
				position218 := position
				{
					position219, tokenIndex219 := position, tokenIndex
					{
						position221, tokenIndex221 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l222
						}
						position++
						goto l221
					l222:
						position, tokenIndex = position221, tokenIndex221
						if buffer[position] != rune('L') {
							goto l220
						}
						position++
					}
				l221:
					{
						position223, tokenIndex223 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l224
						}
						position++
						goto l223
					l224:
						position, tokenIndex = position223, tokenIndex223
						if buffer[position] != rune('E') {
							goto l220
						}
						position++
					}
				l223:
					{
						position225, tokenIndex225 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l226
						}
						position++
						goto l225
					l226:
						position, tokenIndex = position225, tokenIndex225
						if buffer[position] != rune('T') {
							goto l220
						}
						position++
					}
				l225:
					goto l219
				l220:
					position, tokenIndex = position219, tokenIndex219
					{
						position228, tokenIndex228 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l229
						}
						position++
						goto l228
					l229:
						position, tokenIndex = position228, tokenIndex228
						if buffer[position] != rune('S') {
							goto l227
						}
						position++
					}
				l228:
					{
						position230, tokenIndex230 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l231
						}
						position++
						goto l230
					l231:
						position, tokenIndex = position230, tokenIndex230
						if buffer[position] != rune('T') {
							goto l227
						}
						position++
					}
				l230:
					{
						position232, tokenIndex232 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l233
						}
						position++
						goto l232
					l233:
						position, tokenIndex = position232, tokenIndex232
						if buffer[position] != rune('R') {
							goto l227
						}
						position++
					}
				l232:
					{
						position234, tokenIndex234 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l235
						}
						position++
						goto l234
					l235:
						position, tokenIndex = position234, tokenIndex234
						if buffer[position] != rune('I') {
							goto l227
						}
						position++
					}
				l234:
					{
						position236, tokenIndex236 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l237
						}
						position++
						goto l236
					l237:
						position, tokenIndex = position236, tokenIndex236
						if buffer[position] != rune('C') {
							goto l227
						}
						position++
					}
				l236:
					{
						position238, tokenIndex238 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l239
						}
						position++
						goto l238
					l239:
						position, tokenIndex = position238, tokenIndex238
						if buffer[position] != rune('T') {
							goto l227
						}
						position++
					}
				l238:
					goto l219
				l227:
					position, tokenIndex = position219, tokenIndex219
					{
						position241, tokenIndex241 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l242
						}
						position++
						goto l241
					l242:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('B') {
							goto l240
						}
						position++
					}
				l241:
					{
						position243, tokenIndex243 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l244
						}
						position++
						goto l243
					l244:
						position, tokenIndex = position243, tokenIndex243
						if buffer[position] != rune('A') {
							goto l240
						}
						position++
					}
				l243:
					{
						position245, tokenIndex245 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l246
						}
						position++
						goto l245
					l246:
						position, tokenIndex = position245, tokenIndex245
						if buffer[position] != rune('S') {
							goto l240
						}
						position++
					}
				l245:
					{
						position247, tokenIndex247 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l248
						}
						position++
						goto l247
					l248:
						position, tokenIndex = position247, tokenIndex247
						if buffer[position] != rune('E') {
							goto l240
						}
						position++
					}
				l247:
					if buffer[position] != rune('1') {
						goto l240
					}
					position++
					if buffer[position] != rune('6') {
						goto l240
					}
					position++
					goto l219
				l240:
					position, tokenIndex = position219, tokenIndex219
					{
						position250, tokenIndex250 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l251
						}
						position++
						goto l250
					l251:
						position, tokenIndex = position250, tokenIndex250
						if buffer[position] != rune('B') {
							goto l249
						}
						position++
					}
				l250:
					{
						position252, tokenIndex252 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l253
						}
						position++
						goto l252
					l253:
						position, tokenIndex = position252, tokenIndex252
						if buffer[position] != rune('A') {
							goto l249
						}
						position++
					}
				l252:
					{
						position254, tokenIndex254 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l255
						}
						position++
						goto l254
					l255:
						position, tokenIndex = position254, tokenIndex254
						if buffer[position] != rune('S') {
							goto l249
						}
						position++
					}
				l254:
					{
						position256, tokenIndex256 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l257
						}
						position++
						goto l256
					l257:
						position, tokenIndex = position256, tokenIndex256
						if buffer[position] != rune('E') {
							goto l249
						}
						position++
					}
				l256:
					if buffer[position] != rune('5') {
						goto l249
					}
					position++
					if buffer[position] != rune('8') {
						goto l249
					}
					position++
					goto l219
				l249:
					position, tokenIndex = position219, tokenIndex219
					{
						position259, tokenIndex259 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l260
						}
						position++
						goto l259
					l260:
						position, tokenIndex = position259, tokenIndex259
						if buffer[position] != rune('B') {
							goto l258
						}
						position++
					}
				l259:
					{
						position261, tokenIndex261 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l262
						}
						position++
						goto l261
					l262:
						position, tokenIndex = position261, tokenIndex261
						if buffer[position] != rune('A') {
							goto l258
						}
						position++
					}
				l261:
					{
						position263, tokenIndex263 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l264
						}
						position++
						goto l263
					l264:
						position, tokenIndex = position263, tokenIndex263
						if buffer[position] != rune('S') {
							goto l258
						}
						position++
					}
				l263:
					{
						position265, tokenIndex265 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l266
						}
						position++
						goto l265
					l266:
						position, tokenIndex = position265, tokenIndex265
						if buffer[position] != rune('E') {
							goto l258
						}
						position++
					}
				l265:
					if buffer[position] != rune('6') {
						goto l258
					}
					position++
					if buffer[position] != rune('4') {
						goto l258
					}
					position++
					goto l219
				l258:
					position, tokenIndex = position219, tokenIndex219
					{
						position268, tokenIndex268 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l269
						}
						position++
						goto l268
					l269:
						position, tokenIndex = position268, tokenIndex268
						if buffer[position] != rune('T') {
							goto l267
						}
						position++
					}
				l268:
					{
						position270, tokenIndex270 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l271
						}
						position++
						goto l270
					l271:
						position, tokenIndex = position270, tokenIndex270
						if buffer[position] != rune('R') {
							goto l267
						}
						position++
					}
				l270:
					{
						position272, tokenIndex272 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l273
						}
						position++
						goto l272
					l273:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('U') {
							goto l267
						}
						position++
					}
				l272:
					{
						position274, tokenIndex274 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l275
						}
						position++
						goto l274
					l275:
						position, tokenIndex = position274, tokenIndex274
						if buffer[position] != rune('E') {
							goto l267
						}
						position++
					}
				l274:
					goto l219
				l267:
					position, tokenIndex = position219, tokenIndex219
					{
						position277, tokenIndex277 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l278
						}
						position++
						goto l277
					l278:
						position, tokenIndex = position277, tokenIndex277
						if buffer[position] != rune('F') {
							goto l276
						}
						position++
					}
				l277:
					{
						position279, tokenIndex279 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l280
						}
						position++
						goto l279
					l280:
						position, tokenIndex = position279, tokenIndex279
						if buffer[position] != rune('A') {
							goto l276
						}
						position++
					}
				l279:
					{
						position281, tokenIndex281 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l282
						}
						position++
						goto l281
					l282:
						position, tokenIndex = position281, tokenIndex281
						if buffer[position] != rune('L') {
							goto l276
						}
						position++
					}
				l281:
					{
						position283, tokenIndex283 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l284
						}
						position++
						goto l283
					l284:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('S') {
							goto l276
						}
						position++
					}
				l283:
					{
						position285, tokenIndex285 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l286
						}
						position++
						goto l285
					l286:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('E') {
							goto l276
						}
						position++
					}
				l285:
					goto l219
				l276:
					position, tokenIndex = position219, tokenIndex219
					{
						position288, tokenIndex288 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l289
						}
						position++
						goto l288
					l289:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('I') {
							goto l287
						}
						position++
					}
				l288:
					{
						position290, tokenIndex290 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l291
						}
						position++
						goto l290
					l291:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('F') {
							goto l287
						}
						position++
					}
				l290:
					goto l219
				l287:
					position, tokenIndex = position219, tokenIndex219
					{
						position293, tokenIndex293 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l294
						}
						position++
						goto l293
					l294:
						position, tokenIndex = position293, tokenIndex293
						if buffer[position] != rune('T') {
							goto l292
						}
						position++
					}
				l293:
					{
						position295, tokenIndex295 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l296
						}
						position++
						goto l295
					l296:
						position, tokenIndex = position295, tokenIndex295
						if buffer[position] != rune('H') {
							goto l292
						}
						position++
					}
				l295:
					{
						position297, tokenIndex297 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l298
						}
						position++
						goto l297
					l298:
						position, tokenIndex = position297, tokenIndex297
						if buffer[position] != rune('E') {
							goto l292
						}
						position++
					}
				l297:
					{
						position299, tokenIndex299 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l300
						}
						position++
						goto l299
					l300:
						position, tokenIndex = position299, tokenIndex299
						if buffer[position] != rune('N') {
							goto l292
						}
						position++
					}
				l299:
					goto l219
				l292:
					position, tokenIndex = position219, tokenIndex219
					{
						position302, tokenIndex302 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l303
						}
						position++
						goto l302
					l303:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('E') {
							goto l301
						}
						position++
					}
				l302:
					{
						position304, tokenIndex304 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l305
						}
						position++
						goto l304
					l305:
						position, tokenIndex = position304, tokenIndex304
						if buffer[position] != rune('L') {
							goto l301
						}
						position++
					}
				l304:
					{
						position306, tokenIndex306 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l307
						}
						position++
						goto l306
					l307:
						position, tokenIndex = position306, tokenIndex306
						if buffer[position] != rune('S') {
							goto l301
						}
						position++
					}
				l306:
					{
						position308, tokenIndex308 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l309
						}
						position++
						goto l308
					l309:
						position, tokenIndex = position308, tokenIndex308
						if buffer[position] != rune('E') {
							goto l301
						}
						position++
					}
				l308:
					goto l219
				l301:
					position, tokenIndex = position219, tokenIndex219
					{
						position311, tokenIndex311 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l312
						}
						position++
						goto l311
					l312:
						position, tokenIndex = position311, tokenIndex311
						if buffer[position] != rune('M') {
							goto l310
						}
						position++
					}
				l311:
					{
						position313, tokenIndex313 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l314
						}
						position++
						goto l313
					l314:
						position, tokenIndex = position313, tokenIndex313
						if buffer[position] != rune('A') {
							goto l310
						}
						position++
					}
				l313:
					{
						position315, tokenIndex315 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l316
						}
						position++
						goto l315
					l316:
						position, tokenIndex = position315, tokenIndex315
						if buffer[position] != rune('T') {
							goto l310
						}
						position++
					}
				l315:
					{
						position317, tokenIndex317 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l318
						}
						position++
						goto l317
					l318:
						position, tokenIndex = position317, tokenIndex317
						if buffer[position] != rune('C') {
							goto l310
						}
						position++
					}
				l317:
					{
						position319, tokenIndex319 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l320
						}
						position++
						goto l319
					l320:
						position, tokenIndex = position319, tokenIndex319
						if buffer[position] != rune('H') {
							goto l310
						}
						position++
					}
				l319:
					goto l219
				l310:
					position, tokenIndex = position219, tokenIndex219
					{
						position322, tokenIndex322 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l323
						}
						position++
						goto l322
					l323:
						position, tokenIndex = position322, tokenIndex322
						if buffer[position] != rune('C') {
							goto l321
						}
						position++
					}
				l322:
					{
						position324, tokenIndex324 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l325
						}
						position++
						goto l324
					l325:
						position, tokenIndex = position324, tokenIndex324
						if buffer[position] != rune('A') {
							goto l321
						}
						position++
					}
				l324:
					{
						position326, tokenIndex326 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l327
						}
						position++
						goto l326
					l327:
						position, tokenIndex = position326, tokenIndex326
						if buffer[position] != rune('S') {
							goto l321
						}
						position++
					}
				l326:
					{
						position328, tokenIndex328 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l329
						}
						position++
						goto l328
					l329:
						position, tokenIndex = position328, tokenIndex328
						if buffer[position] != rune('E') {
							goto l321
						}
						position++
					}
				l328:
					goto l219
				l321:
					position, tokenIndex = position219, tokenIndex219
					{
						position331, tokenIndex331 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l332
						}
						position++
						goto l331
					l332:
						position, tokenIndex = position331, tokenIndex331
						if buffer[position] != rune('F') {
							goto l330
						}
						position++
					}
				l331:
					{
						position333, tokenIndex333 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l334
						}
						position++
						goto l333
					l334:
						position, tokenIndex = position333, tokenIndex333
						if buffer[position] != rune('U') {
							goto l330
						}
						position++
					}
				l333:
					{
						position335, tokenIndex335 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l336
						}
						position++
						goto l335
					l336:
						position, tokenIndex = position335, tokenIndex335
						if buffer[position] != rune('N') {
							goto l330
						}
						position++
					}
				l335:
					{
						position337, tokenIndex337 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l338
						}
						position++
						goto l337
					l338:
						position, tokenIndex = position337, tokenIndex337
						if buffer[position] != rune('C') {
							goto l330
						}
						position++
					}
				l337:
					goto l219
				l330:
					position, tokenIndex = position219, tokenIndex219
					{
						position339, tokenIndex339 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l340
						}
						position++
						goto l339
					l340:
						position, tokenIndex = position339, tokenIndex339
						if buffer[position] != rune('F') {
							goto l217
						}
						position++
					}
				l339:
					{
						position341, tokenIndex341 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l342
						}
						position++
						goto l341
					l342:
						position, tokenIndex = position341, tokenIndex341
						if buffer[position] != rune('O') {
							goto l217
						}
						position++
					}
				l341:
					{
						position343, tokenIndex343 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l344
						}
						position++
						goto l343
					l344:
						position, tokenIndex = position343, tokenIndex343
						if buffer[position] != rune('L') {
							goto l217
						}
						position++
					}
				l343:
					{
						position345, tokenIndex345 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l346
						}
						position++
						goto l345
					l346:
						position, tokenIndex = position345, tokenIndex345
						if buffer[position] != rune('D') {
							goto l217
						}
						position++
					}
				l345:
				}
			l219:
				add(ruleReservedWords, position218)
			}
			return true
		l217:
			position, tokenIndex = position217, tokenIndex217
			return false
		},
		/* 46 Const <- <(Integer / String / ByteVector / Boolean / List)> */
		func() bool {
			position347, tokenIndex347 := position, tokenIndex
			{
				position348 := position
				{
					position349, tokenIndex349 := position, tokenIndex
					if !_rules[ruleInteger]() {
						goto l350
					}
					goto l349
				l350:
					position, tokenIndex = position349, tokenIndex349
					if !_rules[ruleString]() {
						goto l351
					}
					goto l349
				l351:
					position, tokenIndex = position349, tokenIndex349
					if !_rules[ruleByteVector]() {
						goto l352
					}
					goto l349
				l352:
					position, tokenIndex = position349, tokenIndex349
					if !_rules[ruleBoolean]() {
						goto l353
					}
					goto l349
				l353:
					position, tokenIndex = position349, tokenIndex349
					if !_rules[ruleList]() {
						goto l347
					}
				}
			l349:
				add(ruleConst, position348)
			}
			return true
		l347:
			position, tokenIndex = position347, tokenIndex347
			return false
		},
		/* 47 Identifier <- <((!ReservedWords ([A-Z] / [a-z] / ('_' &([A-Z] / [a-z]))) ([A-Z] / [a-z] / [0-9] / ('_' !'_'))*) / (ReservedWords ([A-Z] / [a-z] / [0-9] / ('_' !'_'))+))> */
		func() bool {
			position354, tokenIndex354 := position, tokenIndex
			{
				position355 := position
				{
					position356, tokenIndex356 := position, tokenIndex
					{
						position358, tokenIndex358 := position, tokenIndex
						if !_rules[ruleReservedWords]() {
							goto l358
						}
						goto l357
					l358:
						position, tokenIndex = position358, tokenIndex358
					}
					{
						position359, tokenIndex359 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l360
						}
						position++
						goto l359
					l360:
						position, tokenIndex = position359, tokenIndex359
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l361
						}
						position++
						goto l359
					l361:
						position, tokenIndex = position359, tokenIndex359
						if buffer[position] != rune('_') {
							goto l357
						}
						position++
						{
							position362, tokenIndex362 := position, tokenIndex
							{
								position363, tokenIndex363 := position, tokenIndex
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l364
								}
								position++
								goto l363
							l364:
								position, tokenIndex = position363, tokenIndex363
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l357
								}
								position++
							}
						l363:
							position, tokenIndex = position362, tokenIndex362
						}
					}
				l359:
				l365:
					{
						position366, tokenIndex366 := position, tokenIndex
						{
							position367, tokenIndex367 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l368
							}
							position++
							goto l367
						l368:
							position, tokenIndex = position367, tokenIndex367
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l369
							}
							position++
							goto l367
						l369:
							position, tokenIndex = position367, tokenIndex367
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l370
							}
							position++
							goto l367
						l370:
							position, tokenIndex = position367, tokenIndex367
							if buffer[position] != rune('_') {
								goto l366
							}
							position++
							{
								position371, tokenIndex371 := position, tokenIndex
								if buffer[position] != rune('_') {
									goto l371
								}
								position++
								goto l366
							l371:
								position, tokenIndex = position371, tokenIndex371
							}
						}
					l367:
						goto l365
					l366:
						position, tokenIndex = position366, tokenIndex366
					}
					goto l356
				l357:
					position, tokenIndex = position356, tokenIndex356
					if !_rules[ruleReservedWords]() {
						goto l354
					}
					{
						position374, tokenIndex374 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l375
						}
						position++
						goto l374
					l375:
						position, tokenIndex = position374, tokenIndex374
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l376
						}
						position++
						goto l374
					l376:
						position, tokenIndex = position374, tokenIndex374
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l377
						}
						position++
						goto l374
					l377:
						position, tokenIndex = position374, tokenIndex374
						if buffer[position] != rune('_') {
							goto l354
						}
						position++
						{
							position378, tokenIndex378 := position, tokenIndex
							if buffer[position] != rune('_') {
								goto l378
							}
							position++
							goto l354
						l378:
							position, tokenIndex = position378, tokenIndex378
						}
					}
				l374:
				l372:
					{
						position373, tokenIndex373 := position, tokenIndex
						{
							position379, tokenIndex379 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l380
							}
							position++
							goto l379
						l380:
							position, tokenIndex = position379, tokenIndex379
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l381
							}
							position++
							goto l379
						l381:
							position, tokenIndex = position379, tokenIndex379
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l382
							}
							position++
							goto l379
						l382:
							position, tokenIndex = position379, tokenIndex379
							if buffer[position] != rune('_') {
								goto l373
							}
							position++
							{
								position383, tokenIndex383 := position, tokenIndex
								if buffer[position] != rune('_') {
									goto l383
								}
								position++
								goto l373
							l383:
								position, tokenIndex = position383, tokenIndex383
							}
						}
					l379:
						goto l372
					l373:
						position, tokenIndex = position373, tokenIndex373
					}
				}
			l356:
				add(ruleIdentifier, position355)
			}
			return true
		l354:
			position, tokenIndex = position354, tokenIndex354
			return false
		},
		/* 48 GenericTypesAtom <- <(OneGenericTypeAtom ((_ '|' _ GenericTypesAtom) / OneGenericTypeAtom)?)> */
		func() bool {
			position384, tokenIndex384 := position, tokenIndex
			{
				position385 := position
				if !_rules[ruleOneGenericTypeAtom]() {
					goto l384
				}
				{
					position386, tokenIndex386 := position, tokenIndex
					{
						position388, tokenIndex388 := position, tokenIndex
						if !_rules[rule_]() {
							goto l389
						}
						if buffer[position] != rune('|') {
							goto l389
						}
						position++
						if !_rules[rule_]() {
							goto l389
						}
						if !_rules[ruleGenericTypesAtom]() {
							goto l389
						}
						goto l388
					l389:
						position, tokenIndex = position388, tokenIndex388
						if !_rules[ruleOneGenericTypeAtom]() {
							goto l386
						}
					}
				l388:
					goto l387
				l386:
					position, tokenIndex = position386, tokenIndex386
				}
			l387:
				add(ruleGenericTypesAtom, position385)
			}
			return true
		l384:
			position, tokenIndex = position384, tokenIndex384
			return false
		},
		/* 49 OneGenericTypeAtom <- <(([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])* (_ '[' _ OneTypeAtom _ ']' _)?)> */
		func() bool {
			position390, tokenIndex390 := position, tokenIndex
			{
				position391 := position
				{
					position392, tokenIndex392 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l393
					}
					position++
					goto l392
				l393:
					position, tokenIndex = position392, tokenIndex392
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l390
					}
					position++
				}
			l392:
			l394:
				{
					position395, tokenIndex395 := position, tokenIndex
					{
						position396, tokenIndex396 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l397
						}
						position++
						goto l396
					l397:
						position, tokenIndex = position396, tokenIndex396
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l398
						}
						position++
						goto l396
					l398:
						position, tokenIndex = position396, tokenIndex396
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l395
						}
						position++
					}
				l396:
					goto l394
				l395:
					position, tokenIndex = position395, tokenIndex395
				}
				{
					position399, tokenIndex399 := position, tokenIndex
					if !_rules[rule_]() {
						goto l399
					}
					if buffer[position] != rune('[') {
						goto l399
					}
					position++
					if !_rules[rule_]() {
						goto l399
					}
					if !_rules[ruleOneTypeAtom]() {
						goto l399
					}
					if !_rules[rule_]() {
						goto l399
					}
					if buffer[position] != rune(']') {
						goto l399
					}
					position++
					if !_rules[rule_]() {
						goto l399
					}
					goto l400
				l399:
					position, tokenIndex = position399, tokenIndex399
				}
			l400:
				add(ruleOneGenericTypeAtom, position391)
			}
			return true
		l390:
			position, tokenIndex = position390, tokenIndex390
			return false
		},
		/* 50 TypesAtom <- <(OneTypeAtom ((_ '|' _ TypesAtom) / OneTypeAtom)?)> */
		func() bool {
			position401, tokenIndex401 := position, tokenIndex
			{
				position402 := position
				if !_rules[ruleOneTypeAtom]() {
					goto l401
				}
				{
					position403, tokenIndex403 := position, tokenIndex
					{
						position405, tokenIndex405 := position, tokenIndex
						if !_rules[rule_]() {
							goto l406
						}
						if buffer[position] != rune('|') {
							goto l406
						}
						position++
						if !_rules[rule_]() {
							goto l406
						}
						if !_rules[ruleTypesAtom]() {
							goto l406
						}
						goto l405
					l406:
						position, tokenIndex = position405, tokenIndex405
						if !_rules[ruleOneTypeAtom]() {
							goto l403
						}
					}
				l405:
					goto l404
				l403:
					position, tokenIndex = position403, tokenIndex403
				}
			l404:
				add(ruleTypesAtom, position402)
			}
			return true
		l401:
			position, tokenIndex = position401, tokenIndex401
			return false
		},
		/* 51 OneTypeAtom <- <(([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])*)> */
		func() bool {
			position407, tokenIndex407 := position, tokenIndex
			{
				position408 := position
				{
					position409, tokenIndex409 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l410
					}
					position++
					goto l409
				l410:
					position, tokenIndex = position409, tokenIndex409
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l407
					}
					position++
				}
			l409:
			l411:
				{
					position412, tokenIndex412 := position, tokenIndex
					{
						position413, tokenIndex413 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l414
						}
						position++
						goto l413
					l414:
						position, tokenIndex = position413, tokenIndex413
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l415
						}
						position++
						goto l413
					l415:
						position, tokenIndex = position413, tokenIndex413
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l412
						}
						position++
					}
				l413:
					goto l411
				l412:
					position, tokenIndex = position412, tokenIndex412
				}
				add(ruleOneTypeAtom, position408)
			}
			return true
		l407:
			position, tokenIndex = position407, tokenIndex407
			return false
		},
		/* 52 Base16 <- <(('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '1' '6' '\'' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')* '\'')> */
		func() bool {
			position416, tokenIndex416 := position, tokenIndex
			{
				position417 := position
				{
					position418, tokenIndex418 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l419
					}
					position++
					goto l418
				l419:
					position, tokenIndex = position418, tokenIndex418
					if buffer[position] != rune('B') {
						goto l416
					}
					position++
				}
			l418:
				{
					position420, tokenIndex420 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l421
					}
					position++
					goto l420
				l421:
					position, tokenIndex = position420, tokenIndex420
					if buffer[position] != rune('A') {
						goto l416
					}
					position++
				}
			l420:
				{
					position422, tokenIndex422 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l423
					}
					position++
					goto l422
				l423:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('S') {
						goto l416
					}
					position++
				}
			l422:
				{
					position424, tokenIndex424 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l425
					}
					position++
					goto l424
				l425:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('E') {
						goto l416
					}
					position++
				}
			l424:
				if buffer[position] != rune('1') {
					goto l416
				}
				position++
				if buffer[position] != rune('6') {
					goto l416
				}
				position++
				if buffer[position] != rune('\'') {
					goto l416
				}
				position++
			l426:
				{
					position427, tokenIndex427 := position, tokenIndex
					{
						position428, tokenIndex428 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l429
						}
						position++
						goto l428
					l429:
						position, tokenIndex = position428, tokenIndex428
						if buffer[position] != rune('A') {
							goto l430
						}
						position++
						goto l428
					l430:
						position, tokenIndex = position428, tokenIndex428
						if buffer[position] != rune('B') {
							goto l431
						}
						position++
						goto l428
					l431:
						position, tokenIndex = position428, tokenIndex428
						if buffer[position] != rune('C') {
							goto l432
						}
						position++
						goto l428
					l432:
						position, tokenIndex = position428, tokenIndex428
						if buffer[position] != rune('D') {
							goto l433
						}
						position++
						goto l428
					l433:
						position, tokenIndex = position428, tokenIndex428
						if buffer[position] != rune('E') {
							goto l434
						}
						position++
						goto l428
					l434:
						position, tokenIndex = position428, tokenIndex428
						if buffer[position] != rune('F') {
							goto l435
						}
						position++
						goto l428
					l435:
						position, tokenIndex = position428, tokenIndex428
						if buffer[position] != rune('a') {
							goto l436
						}
						position++
						goto l428
					l436:
						position, tokenIndex = position428, tokenIndex428
						if buffer[position] != rune('b') {
							goto l437
						}
						position++
						goto l428
					l437:
						position, tokenIndex = position428, tokenIndex428
						if buffer[position] != rune('c') {
							goto l438
						}
						position++
						goto l428
					l438:
						position, tokenIndex = position428, tokenIndex428
						if buffer[position] != rune('d') {
							goto l439
						}
						position++
						goto l428
					l439:
						position, tokenIndex = position428, tokenIndex428
						if buffer[position] != rune('e') {
							goto l440
						}
						position++
						goto l428
					l440:
						position, tokenIndex = position428, tokenIndex428
						if buffer[position] != rune('f') {
							goto l427
						}
						position++
					}
				l428:
					goto l426
				l427:
					position, tokenIndex = position427, tokenIndex427
				}
				if buffer[position] != rune('\'') {
					goto l416
				}
				position++
				add(ruleBase16, position417)
			}
			return true
		l416:
			position, tokenIndex = position416, tokenIndex416
			return false
		},
		/* 53 Base58 <- <(('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '5' '8' '\'' ('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'J' / 'K' / 'L' / 'M' / 'N' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z')* '\'')> */
		func() bool {
			position441, tokenIndex441 := position, tokenIndex
			{
				position442 := position
				{
					position443, tokenIndex443 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l444
					}
					position++
					goto l443
				l444:
					position, tokenIndex = position443, tokenIndex443
					if buffer[position] != rune('B') {
						goto l441
					}
					position++
				}
			l443:
				{
					position445, tokenIndex445 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l446
					}
					position++
					goto l445
				l446:
					position, tokenIndex = position445, tokenIndex445
					if buffer[position] != rune('A') {
						goto l441
					}
					position++
				}
			l445:
				{
					position447, tokenIndex447 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l448
					}
					position++
					goto l447
				l448:
					position, tokenIndex = position447, tokenIndex447
					if buffer[position] != rune('S') {
						goto l441
					}
					position++
				}
			l447:
				{
					position449, tokenIndex449 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l450
					}
					position++
					goto l449
				l450:
					position, tokenIndex = position449, tokenIndex449
					if buffer[position] != rune('E') {
						goto l441
					}
					position++
				}
			l449:
				if buffer[position] != rune('5') {
					goto l441
				}
				position++
				if buffer[position] != rune('8') {
					goto l441
				}
				position++
				if buffer[position] != rune('\'') {
					goto l441
				}
				position++
			l451:
				{
					position452, tokenIndex452 := position, tokenIndex
					{
						position453, tokenIndex453 := position, tokenIndex
						if buffer[position] != rune('1') {
							goto l454
						}
						position++
						goto l453
					l454:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('2') {
							goto l455
						}
						position++
						goto l453
					l455:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('3') {
							goto l456
						}
						position++
						goto l453
					l456:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('4') {
							goto l457
						}
						position++
						goto l453
					l457:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('5') {
							goto l458
						}
						position++
						goto l453
					l458:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('6') {
							goto l459
						}
						position++
						goto l453
					l459:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('7') {
							goto l460
						}
						position++
						goto l453
					l460:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('8') {
							goto l461
						}
						position++
						goto l453
					l461:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('9') {
							goto l462
						}
						position++
						goto l453
					l462:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('A') {
							goto l463
						}
						position++
						goto l453
					l463:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('B') {
							goto l464
						}
						position++
						goto l453
					l464:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('C') {
							goto l465
						}
						position++
						goto l453
					l465:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('D') {
							goto l466
						}
						position++
						goto l453
					l466:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('E') {
							goto l467
						}
						position++
						goto l453
					l467:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('F') {
							goto l468
						}
						position++
						goto l453
					l468:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('G') {
							goto l469
						}
						position++
						goto l453
					l469:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('H') {
							goto l470
						}
						position++
						goto l453
					l470:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('J') {
							goto l471
						}
						position++
						goto l453
					l471:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('K') {
							goto l472
						}
						position++
						goto l453
					l472:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('L') {
							goto l473
						}
						position++
						goto l453
					l473:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('M') {
							goto l474
						}
						position++
						goto l453
					l474:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('N') {
							goto l475
						}
						position++
						goto l453
					l475:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('P') {
							goto l476
						}
						position++
						goto l453
					l476:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('Q') {
							goto l477
						}
						position++
						goto l453
					l477:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('R') {
							goto l478
						}
						position++
						goto l453
					l478:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('S') {
							goto l479
						}
						position++
						goto l453
					l479:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('T') {
							goto l480
						}
						position++
						goto l453
					l480:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('U') {
							goto l481
						}
						position++
						goto l453
					l481:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('V') {
							goto l482
						}
						position++
						goto l453
					l482:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('W') {
							goto l483
						}
						position++
						goto l453
					l483:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('X') {
							goto l484
						}
						position++
						goto l453
					l484:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('Y') {
							goto l485
						}
						position++
						goto l453
					l485:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('Z') {
							goto l486
						}
						position++
						goto l453
					l486:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('a') {
							goto l487
						}
						position++
						goto l453
					l487:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('b') {
							goto l488
						}
						position++
						goto l453
					l488:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('c') {
							goto l489
						}
						position++
						goto l453
					l489:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('d') {
							goto l490
						}
						position++
						goto l453
					l490:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('e') {
							goto l491
						}
						position++
						goto l453
					l491:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('f') {
							goto l492
						}
						position++
						goto l453
					l492:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('g') {
							goto l493
						}
						position++
						goto l453
					l493:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('h') {
							goto l494
						}
						position++
						goto l453
					l494:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('i') {
							goto l495
						}
						position++
						goto l453
					l495:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('j') {
							goto l496
						}
						position++
						goto l453
					l496:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('k') {
							goto l497
						}
						position++
						goto l453
					l497:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('m') {
							goto l498
						}
						position++
						goto l453
					l498:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('n') {
							goto l499
						}
						position++
						goto l453
					l499:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('o') {
							goto l500
						}
						position++
						goto l453
					l500:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('p') {
							goto l501
						}
						position++
						goto l453
					l501:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('q') {
							goto l502
						}
						position++
						goto l453
					l502:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('r') {
							goto l503
						}
						position++
						goto l453
					l503:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('s') {
							goto l504
						}
						position++
						goto l453
					l504:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('t') {
							goto l505
						}
						position++
						goto l453
					l505:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('u') {
							goto l506
						}
						position++
						goto l453
					l506:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('v') {
							goto l507
						}
						position++
						goto l453
					l507:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('w') {
							goto l508
						}
						position++
						goto l453
					l508:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('x') {
							goto l509
						}
						position++
						goto l453
					l509:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('y') {
							goto l510
						}
						position++
						goto l453
					l510:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('z') {
							goto l452
						}
						position++
					}
				l453:
					goto l451
				l452:
					position, tokenIndex = position452, tokenIndex452
				}
				if buffer[position] != rune('\'') {
					goto l441
				}
				position++
				add(ruleBase58, position442)
			}
			return true
		l441:
			position, tokenIndex = position441, tokenIndex441
			return false
		},
		/* 54 Base64 <- <(('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '6' '4' '\'' ('A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'I' / 'J' / 'K' / 'L' / 'M' / 'N' / 'O' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '0' / '1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / '+' / '/' / '=')* '\'')> */
		func() bool {
			position511, tokenIndex511 := position, tokenIndex
			{
				position512 := position
				{
					position513, tokenIndex513 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l514
					}
					position++
					goto l513
				l514:
					position, tokenIndex = position513, tokenIndex513
					if buffer[position] != rune('B') {
						goto l511
					}
					position++
				}
			l513:
				{
					position515, tokenIndex515 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l516
					}
					position++
					goto l515
				l516:
					position, tokenIndex = position515, tokenIndex515
					if buffer[position] != rune('A') {
						goto l511
					}
					position++
				}
			l515:
				{
					position517, tokenIndex517 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l518
					}
					position++
					goto l517
				l518:
					position, tokenIndex = position517, tokenIndex517
					if buffer[position] != rune('S') {
						goto l511
					}
					position++
				}
			l517:
				{
					position519, tokenIndex519 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l520
					}
					position++
					goto l519
				l520:
					position, tokenIndex = position519, tokenIndex519
					if buffer[position] != rune('E') {
						goto l511
					}
					position++
				}
			l519:
				if buffer[position] != rune('6') {
					goto l511
				}
				position++
				if buffer[position] != rune('4') {
					goto l511
				}
				position++
				if buffer[position] != rune('\'') {
					goto l511
				}
				position++
			l521:
				{
					position522, tokenIndex522 := position, tokenIndex
					{
						position523, tokenIndex523 := position, tokenIndex
						if buffer[position] != rune('A') {
							goto l524
						}
						position++
						goto l523
					l524:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('B') {
							goto l525
						}
						position++
						goto l523
					l525:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('C') {
							goto l526
						}
						position++
						goto l523
					l526:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('D') {
							goto l527
						}
						position++
						goto l523
					l527:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('E') {
							goto l528
						}
						position++
						goto l523
					l528:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('F') {
							goto l529
						}
						position++
						goto l523
					l529:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('G') {
							goto l530
						}
						position++
						goto l523
					l530:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('H') {
							goto l531
						}
						position++
						goto l523
					l531:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('I') {
							goto l532
						}
						position++
						goto l523
					l532:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('J') {
							goto l533
						}
						position++
						goto l523
					l533:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('K') {
							goto l534
						}
						position++
						goto l523
					l534:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('L') {
							goto l535
						}
						position++
						goto l523
					l535:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('M') {
							goto l536
						}
						position++
						goto l523
					l536:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('N') {
							goto l537
						}
						position++
						goto l523
					l537:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('O') {
							goto l538
						}
						position++
						goto l523
					l538:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('P') {
							goto l539
						}
						position++
						goto l523
					l539:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('Q') {
							goto l540
						}
						position++
						goto l523
					l540:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('R') {
							goto l541
						}
						position++
						goto l523
					l541:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('S') {
							goto l542
						}
						position++
						goto l523
					l542:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('T') {
							goto l543
						}
						position++
						goto l523
					l543:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('U') {
							goto l544
						}
						position++
						goto l523
					l544:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('V') {
							goto l545
						}
						position++
						goto l523
					l545:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('W') {
							goto l546
						}
						position++
						goto l523
					l546:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('X') {
							goto l547
						}
						position++
						goto l523
					l547:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('Y') {
							goto l548
						}
						position++
						goto l523
					l548:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('Z') {
							goto l549
						}
						position++
						goto l523
					l549:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('a') {
							goto l550
						}
						position++
						goto l523
					l550:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('b') {
							goto l551
						}
						position++
						goto l523
					l551:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('c') {
							goto l552
						}
						position++
						goto l523
					l552:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('d') {
							goto l553
						}
						position++
						goto l523
					l553:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('e') {
							goto l554
						}
						position++
						goto l523
					l554:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('f') {
							goto l555
						}
						position++
						goto l523
					l555:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('g') {
							goto l556
						}
						position++
						goto l523
					l556:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('h') {
							goto l557
						}
						position++
						goto l523
					l557:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('i') {
							goto l558
						}
						position++
						goto l523
					l558:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('j') {
							goto l559
						}
						position++
						goto l523
					l559:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('k') {
							goto l560
						}
						position++
						goto l523
					l560:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('l') {
							goto l561
						}
						position++
						goto l523
					l561:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('m') {
							goto l562
						}
						position++
						goto l523
					l562:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('n') {
							goto l563
						}
						position++
						goto l523
					l563:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('o') {
							goto l564
						}
						position++
						goto l523
					l564:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('p') {
							goto l565
						}
						position++
						goto l523
					l565:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('q') {
							goto l566
						}
						position++
						goto l523
					l566:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('r') {
							goto l567
						}
						position++
						goto l523
					l567:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('s') {
							goto l568
						}
						position++
						goto l523
					l568:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('t') {
							goto l569
						}
						position++
						goto l523
					l569:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('u') {
							goto l570
						}
						position++
						goto l523
					l570:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('v') {
							goto l571
						}
						position++
						goto l523
					l571:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('w') {
							goto l572
						}
						position++
						goto l523
					l572:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('x') {
							goto l573
						}
						position++
						goto l523
					l573:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('y') {
							goto l574
						}
						position++
						goto l523
					l574:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('z') {
							goto l575
						}
						position++
						goto l523
					l575:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('0') {
							goto l576
						}
						position++
						goto l523
					l576:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('1') {
							goto l577
						}
						position++
						goto l523
					l577:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('2') {
							goto l578
						}
						position++
						goto l523
					l578:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('3') {
							goto l579
						}
						position++
						goto l523
					l579:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('4') {
							goto l580
						}
						position++
						goto l523
					l580:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('5') {
							goto l581
						}
						position++
						goto l523
					l581:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('6') {
							goto l582
						}
						position++
						goto l523
					l582:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('7') {
							goto l583
						}
						position++
						goto l523
					l583:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('8') {
							goto l584
						}
						position++
						goto l523
					l584:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('9') {
							goto l585
						}
						position++
						goto l523
					l585:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('+') {
							goto l586
						}
						position++
						goto l523
					l586:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('/') {
							goto l587
						}
						position++
						goto l523
					l587:
						position, tokenIndex = position523, tokenIndex523
						if buffer[position] != rune('=') {
							goto l522
						}
						position++
					}
				l523:
					goto l521
				l522:
					position, tokenIndex = position522, tokenIndex522
				}
				if buffer[position] != rune('\'') {
					goto l511
				}
				position++
				add(ruleBase64, position512)
			}
			return true
		l511:
			position, tokenIndex = position511, tokenIndex511
			return false
		},
		/* 55 ByteVector <- <(Base16 / Base58 / Base64)> */
		func() bool {
			position588, tokenIndex588 := position, tokenIndex
			{
				position589 := position
				{
					position590, tokenIndex590 := position, tokenIndex
					if !_rules[ruleBase16]() {
						goto l591
					}
					goto l590
				l591:
					position, tokenIndex = position590, tokenIndex590
					if !_rules[ruleBase58]() {
						goto l592
					}
					goto l590
				l592:
					position, tokenIndex = position590, tokenIndex590
					if !_rules[ruleBase64]() {
						goto l588
					}
				}
			l590:
				add(ruleByteVector, position589)
			}
			return true
		l588:
			position, tokenIndex = position588, tokenIndex588
			return false
		},
		/* 56 Boolean <- <((('t' / 'T') ('r' / 'R') ('u' / 'U') ('e' / 'E')) / (('f' / 'F') ('a' / 'A') ('l' / 'L') ('s' / 'S') ('e' / 'E')))> */
		func() bool {
			position593, tokenIndex593 := position, tokenIndex
			{
				position594 := position
				{
					position595, tokenIndex595 := position, tokenIndex
					{
						position597, tokenIndex597 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l598
						}
						position++
						goto l597
					l598:
						position, tokenIndex = position597, tokenIndex597
						if buffer[position] != rune('T') {
							goto l596
						}
						position++
					}
				l597:
					{
						position599, tokenIndex599 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l600
						}
						position++
						goto l599
					l600:
						position, tokenIndex = position599, tokenIndex599
						if buffer[position] != rune('R') {
							goto l596
						}
						position++
					}
				l599:
					{
						position601, tokenIndex601 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l602
						}
						position++
						goto l601
					l602:
						position, tokenIndex = position601, tokenIndex601
						if buffer[position] != rune('U') {
							goto l596
						}
						position++
					}
				l601:
					{
						position603, tokenIndex603 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l604
						}
						position++
						goto l603
					l604:
						position, tokenIndex = position603, tokenIndex603
						if buffer[position] != rune('E') {
							goto l596
						}
						position++
					}
				l603:
					goto l595
				l596:
					position, tokenIndex = position595, tokenIndex595
					{
						position605, tokenIndex605 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l606
						}
						position++
						goto l605
					l606:
						position, tokenIndex = position605, tokenIndex605
						if buffer[position] != rune('F') {
							goto l593
						}
						position++
					}
				l605:
					{
						position607, tokenIndex607 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l608
						}
						position++
						goto l607
					l608:
						position, tokenIndex = position607, tokenIndex607
						if buffer[position] != rune('A') {
							goto l593
						}
						position++
					}
				l607:
					{
						position609, tokenIndex609 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l610
						}
						position++
						goto l609
					l610:
						position, tokenIndex = position609, tokenIndex609
						if buffer[position] != rune('L') {
							goto l593
						}
						position++
					}
				l609:
					{
						position611, tokenIndex611 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l612
						}
						position++
						goto l611
					l612:
						position, tokenIndex = position611, tokenIndex611
						if buffer[position] != rune('S') {
							goto l593
						}
						position++
					}
				l611:
					{
						position613, tokenIndex613 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l614
						}
						position++
						goto l613
					l614:
						position, tokenIndex = position613, tokenIndex613
						if buffer[position] != rune('E') {
							goto l593
						}
						position++
					}
				l613:
				}
			l595:
				add(ruleBoolean, position594)
			}
			return true
		l593:
			position, tokenIndex = position593, tokenIndex593
			return false
		},
		/* 57 String <- <('"' (UnicodeChar / EscapedChar / Char)* '"')> */
		func() bool {
			position615, tokenIndex615 := position, tokenIndex
			{
				position616 := position
				if buffer[position] != rune('"') {
					goto l615
				}
				position++
			l617:
				{
					position618, tokenIndex618 := position, tokenIndex
					{
						position619, tokenIndex619 := position, tokenIndex
						if !_rules[ruleUnicodeChar]() {
							goto l620
						}
						goto l619
					l620:
						position, tokenIndex = position619, tokenIndex619
						if !_rules[ruleEscapedChar]() {
							goto l621
						}
						goto l619
					l621:
						position, tokenIndex = position619, tokenIndex619
						if !_rules[ruleChar]() {
							goto l618
						}
					}
				l619:
					goto l617
				l618:
					position, tokenIndex = position618, tokenIndex618
				}
				if buffer[position] != rune('"') {
					goto l615
				}
				position++
				add(ruleString, position616)
			}
			return true
		l615:
			position, tokenIndex = position615, tokenIndex615
			return false
		},
		/* 58 UnicodeChar <- <('\\' ('u' / 'U') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')? ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')? ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')?)> */
		func() bool {
			position622, tokenIndex622 := position, tokenIndex
			{
				position623 := position
				if buffer[position] != rune('\\') {
					goto l622
				}
				position++
				{
					position624, tokenIndex624 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l625
					}
					position++
					goto l624
				l625:
					position, tokenIndex = position624, tokenIndex624
					if buffer[position] != rune('U') {
						goto l622
					}
					position++
				}
			l624:
				{
					position626, tokenIndex626 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l627
					}
					position++
					goto l626
				l627:
					position, tokenIndex = position626, tokenIndex626
					if buffer[position] != rune('A') {
						goto l628
					}
					position++
					goto l626
				l628:
					position, tokenIndex = position626, tokenIndex626
					if buffer[position] != rune('B') {
						goto l629
					}
					position++
					goto l626
				l629:
					position, tokenIndex = position626, tokenIndex626
					if buffer[position] != rune('C') {
						goto l630
					}
					position++
					goto l626
				l630:
					position, tokenIndex = position626, tokenIndex626
					if buffer[position] != rune('D') {
						goto l631
					}
					position++
					goto l626
				l631:
					position, tokenIndex = position626, tokenIndex626
					if buffer[position] != rune('E') {
						goto l632
					}
					position++
					goto l626
				l632:
					position, tokenIndex = position626, tokenIndex626
					if buffer[position] != rune('F') {
						goto l633
					}
					position++
					goto l626
				l633:
					position, tokenIndex = position626, tokenIndex626
					if buffer[position] != rune('a') {
						goto l634
					}
					position++
					goto l626
				l634:
					position, tokenIndex = position626, tokenIndex626
					if buffer[position] != rune('b') {
						goto l635
					}
					position++
					goto l626
				l635:
					position, tokenIndex = position626, tokenIndex626
					if buffer[position] != rune('c') {
						goto l636
					}
					position++
					goto l626
				l636:
					position, tokenIndex = position626, tokenIndex626
					if buffer[position] != rune('d') {
						goto l637
					}
					position++
					goto l626
				l637:
					position, tokenIndex = position626, tokenIndex626
					if buffer[position] != rune('e') {
						goto l638
					}
					position++
					goto l626
				l638:
					position, tokenIndex = position626, tokenIndex626
					if buffer[position] != rune('f') {
						goto l622
					}
					position++
				}
			l626:
				{
					position639, tokenIndex639 := position, tokenIndex
					{
						position641, tokenIndex641 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l642
						}
						position++
						goto l641
					l642:
						position, tokenIndex = position641, tokenIndex641
						if buffer[position] != rune('A') {
							goto l643
						}
						position++
						goto l641
					l643:
						position, tokenIndex = position641, tokenIndex641
						if buffer[position] != rune('B') {
							goto l644
						}
						position++
						goto l641
					l644:
						position, tokenIndex = position641, tokenIndex641
						if buffer[position] != rune('C') {
							goto l645
						}
						position++
						goto l641
					l645:
						position, tokenIndex = position641, tokenIndex641
						if buffer[position] != rune('D') {
							goto l646
						}
						position++
						goto l641
					l646:
						position, tokenIndex = position641, tokenIndex641
						if buffer[position] != rune('E') {
							goto l647
						}
						position++
						goto l641
					l647:
						position, tokenIndex = position641, tokenIndex641
						if buffer[position] != rune('F') {
							goto l648
						}
						position++
						goto l641
					l648:
						position, tokenIndex = position641, tokenIndex641
						if buffer[position] != rune('a') {
							goto l649
						}
						position++
						goto l641
					l649:
						position, tokenIndex = position641, tokenIndex641
						if buffer[position] != rune('b') {
							goto l650
						}
						position++
						goto l641
					l650:
						position, tokenIndex = position641, tokenIndex641
						if buffer[position] != rune('c') {
							goto l651
						}
						position++
						goto l641
					l651:
						position, tokenIndex = position641, tokenIndex641
						if buffer[position] != rune('d') {
							goto l652
						}
						position++
						goto l641
					l652:
						position, tokenIndex = position641, tokenIndex641
						if buffer[position] != rune('e') {
							goto l653
						}
						position++
						goto l641
					l653:
						position, tokenIndex = position641, tokenIndex641
						if buffer[position] != rune('f') {
							goto l639
						}
						position++
					}
				l641:
					goto l640
				l639:
					position, tokenIndex = position639, tokenIndex639
				}
			l640:
				{
					position654, tokenIndex654 := position, tokenIndex
					{
						position656, tokenIndex656 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l657
						}
						position++
						goto l656
					l657:
						position, tokenIndex = position656, tokenIndex656
						if buffer[position] != rune('A') {
							goto l658
						}
						position++
						goto l656
					l658:
						position, tokenIndex = position656, tokenIndex656
						if buffer[position] != rune('B') {
							goto l659
						}
						position++
						goto l656
					l659:
						position, tokenIndex = position656, tokenIndex656
						if buffer[position] != rune('C') {
							goto l660
						}
						position++
						goto l656
					l660:
						position, tokenIndex = position656, tokenIndex656
						if buffer[position] != rune('D') {
							goto l661
						}
						position++
						goto l656
					l661:
						position, tokenIndex = position656, tokenIndex656
						if buffer[position] != rune('E') {
							goto l662
						}
						position++
						goto l656
					l662:
						position, tokenIndex = position656, tokenIndex656
						if buffer[position] != rune('F') {
							goto l663
						}
						position++
						goto l656
					l663:
						position, tokenIndex = position656, tokenIndex656
						if buffer[position] != rune('a') {
							goto l664
						}
						position++
						goto l656
					l664:
						position, tokenIndex = position656, tokenIndex656
						if buffer[position] != rune('b') {
							goto l665
						}
						position++
						goto l656
					l665:
						position, tokenIndex = position656, tokenIndex656
						if buffer[position] != rune('c') {
							goto l666
						}
						position++
						goto l656
					l666:
						position, tokenIndex = position656, tokenIndex656
						if buffer[position] != rune('d') {
							goto l667
						}
						position++
						goto l656
					l667:
						position, tokenIndex = position656, tokenIndex656
						if buffer[position] != rune('e') {
							goto l668
						}
						position++
						goto l656
					l668:
						position, tokenIndex = position656, tokenIndex656
						if buffer[position] != rune('f') {
							goto l654
						}
						position++
					}
				l656:
					goto l655
				l654:
					position, tokenIndex = position654, tokenIndex654
				}
			l655:
				{
					position669, tokenIndex669 := position, tokenIndex
					{
						position671, tokenIndex671 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l672
						}
						position++
						goto l671
					l672:
						position, tokenIndex = position671, tokenIndex671
						if buffer[position] != rune('A') {
							goto l673
						}
						position++
						goto l671
					l673:
						position, tokenIndex = position671, tokenIndex671
						if buffer[position] != rune('B') {
							goto l674
						}
						position++
						goto l671
					l674:
						position, tokenIndex = position671, tokenIndex671
						if buffer[position] != rune('C') {
							goto l675
						}
						position++
						goto l671
					l675:
						position, tokenIndex = position671, tokenIndex671
						if buffer[position] != rune('D') {
							goto l676
						}
						position++
						goto l671
					l676:
						position, tokenIndex = position671, tokenIndex671
						if buffer[position] != rune('E') {
							goto l677
						}
						position++
						goto l671
					l677:
						position, tokenIndex = position671, tokenIndex671
						if buffer[position] != rune('F') {
							goto l678
						}
						position++
						goto l671
					l678:
						position, tokenIndex = position671, tokenIndex671
						if buffer[position] != rune('a') {
							goto l679
						}
						position++
						goto l671
					l679:
						position, tokenIndex = position671, tokenIndex671
						if buffer[position] != rune('b') {
							goto l680
						}
						position++
						goto l671
					l680:
						position, tokenIndex = position671, tokenIndex671
						if buffer[position] != rune('c') {
							goto l681
						}
						position++
						goto l671
					l681:
						position, tokenIndex = position671, tokenIndex671
						if buffer[position] != rune('d') {
							goto l682
						}
						position++
						goto l671
					l682:
						position, tokenIndex = position671, tokenIndex671
						if buffer[position] != rune('e') {
							goto l683
						}
						position++
						goto l671
					l683:
						position, tokenIndex = position671, tokenIndex671
						if buffer[position] != rune('f') {
							goto l669
						}
						position++
					}
				l671:
					goto l670
				l669:
					position, tokenIndex = position669, tokenIndex669
				}
			l670:
				add(ruleUnicodeChar, position623)
			}
			return true
		l622:
			position, tokenIndex = position622, tokenIndex622
			return false
		},
		/* 59 EscapedChar <- <('\\' .)> */
		func() bool {
			position684, tokenIndex684 := position, tokenIndex
			{
				position685 := position
				if buffer[position] != rune('\\') {
					goto l684
				}
				position++
				if !matchDot() {
					goto l684
				}
				add(ruleEscapedChar, position685)
			}
			return true
		l684:
			position, tokenIndex = position684, tokenIndex684
			return false
		},
		/* 60 Char <- <(!'"' .)> */
		func() bool {
			position686, tokenIndex686 := position, tokenIndex
			{
				position687 := position
				{
					position688, tokenIndex688 := position, tokenIndex
					if buffer[position] != rune('"') {
						goto l688
					}
					position++
					goto l686
				l688:
					position, tokenIndex = position688, tokenIndex688
				}
				if !matchDot() {
					goto l686
				}
				add(ruleChar, position687)
			}
			return true
		l686:
			position, tokenIndex = position686, tokenIndex686
			return false
		},
		/* 61 Integer <- <([0-9] ('_' &[0-9])?)+> */
		func() bool {
			position689, tokenIndex689 := position, tokenIndex
			{
				position690 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l689
				}
				position++
				{
					position693, tokenIndex693 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l693
					}
					position++
					{
						position695, tokenIndex695 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l693
						}
						position++
						position, tokenIndex = position695, tokenIndex695
					}
					goto l694
				l693:
					position, tokenIndex = position693, tokenIndex693
				}
			l694:
			l691:
				{
					position692, tokenIndex692 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l692
					}
					position++
					{
						position696, tokenIndex696 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l696
						}
						position++
						{
							position698, tokenIndex698 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l696
							}
							position++
							position, tokenIndex = position698, tokenIndex698
						}
						goto l697
					l696:
						position, tokenIndex = position696, tokenIndex696
					}
				l697:
					goto l691
				l692:
					position, tokenIndex = position692, tokenIndex692
				}
				add(ruleInteger, position690)
			}
			return true
		l689:
			position, tokenIndex = position689, tokenIndex689
			return false
		},
		/* 62 List <- <('[' _ ExprSeq? _ ']')> */
		func() bool {
			position699, tokenIndex699 := position, tokenIndex
			{
				position700 := position
				if buffer[position] != rune('[') {
					goto l699
				}
				position++
				if !_rules[rule_]() {
					goto l699
				}
				{
					position701, tokenIndex701 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l701
					}
					goto l702
				l701:
					position, tokenIndex = position701, tokenIndex701
				}
			l702:
				if !_rules[rule_]() {
					goto l699
				}
				if buffer[position] != rune(']') {
					goto l699
				}
				position++
				add(ruleList, position700)
			}
			return true
		l699:
			position, tokenIndex = position699, tokenIndex699
			return false
		},
		/* 63 ExprSeq <- <(Expr (_ ',' _ ExprSeq)?)> */
		func() bool {
			position703, tokenIndex703 := position, tokenIndex
			{
				position704 := position
				if !_rules[ruleExpr]() {
					goto l703
				}
				{
					position705, tokenIndex705 := position, tokenIndex
					if !_rules[rule_]() {
						goto l705
					}
					if buffer[position] != rune(',') {
						goto l705
					}
					position++
					if !_rules[rule_]() {
						goto l705
					}
					if !_rules[ruleExprSeq]() {
						goto l705
					}
					goto l706
				l705:
					position, tokenIndex = position705, tokenIndex705
				}
			l706:
				add(ruleExprSeq, position704)
			}
			return true
		l703:
			position, tokenIndex = position703, tokenIndex703
			return false
		},
		/* 64 AtomExpr <- <(UnaryOp? _ (FoldMacro / GettableExpr / IfWithError / Match / Const))> */
		func() bool {
			position707, tokenIndex707 := position, tokenIndex
			{
				position708 := position
				{
					position709, tokenIndex709 := position, tokenIndex
					if !_rules[ruleUnaryOp]() {
						goto l709
					}
					goto l710
				l709:
					position, tokenIndex = position709, tokenIndex709
				}
			l710:
				if !_rules[rule_]() {
					goto l707
				}
				{
					position711, tokenIndex711 := position, tokenIndex
					if !_rules[ruleFoldMacro]() {
						goto l712
					}
					goto l711
				l712:
					position, tokenIndex = position711, tokenIndex711
					if !_rules[ruleGettableExpr]() {
						goto l713
					}
					goto l711
				l713:
					position, tokenIndex = position711, tokenIndex711
					if !_rules[ruleIfWithError]() {
						goto l714
					}
					goto l711
				l714:
					position, tokenIndex = position711, tokenIndex711
					if !_rules[ruleMatch]() {
						goto l715
					}
					goto l711
				l715:
					position, tokenIndex = position711, tokenIndex711
					if !_rules[ruleConst]() {
						goto l707
					}
				}
			l711:
				add(ruleAtomExpr, position708)
			}
			return true
		l707:
			position, tokenIndex = position707, tokenIndex707
			return false
		},
		/* 65 MultGroupOpAtom <- <(AtomExpr (_ MultGroupOp _ AtomExpr)*)> */
		func() bool {
			position716, tokenIndex716 := position, tokenIndex
			{
				position717 := position
				if !_rules[ruleAtomExpr]() {
					goto l716
				}
			l718:
				{
					position719, tokenIndex719 := position, tokenIndex
					if !_rules[rule_]() {
						goto l719
					}
					if !_rules[ruleMultGroupOp]() {
						goto l719
					}
					if !_rules[rule_]() {
						goto l719
					}
					if !_rules[ruleAtomExpr]() {
						goto l719
					}
					goto l718
				l719:
					position, tokenIndex = position719, tokenIndex719
				}
				add(ruleMultGroupOpAtom, position717)
			}
			return true
		l716:
			position, tokenIndex = position716, tokenIndex716
			return false
		},
		/* 66 SumGroupOpAtom <- <(MultGroupOpAtom (_ SumGroupOp _ MultGroupOpAtom)*)> */
		func() bool {
			position720, tokenIndex720 := position, tokenIndex
			{
				position721 := position
				if !_rules[ruleMultGroupOpAtom]() {
					goto l720
				}
			l722:
				{
					position723, tokenIndex723 := position, tokenIndex
					if !_rules[rule_]() {
						goto l723
					}
					if !_rules[ruleSumGroupOp]() {
						goto l723
					}
					if !_rules[rule_]() {
						goto l723
					}
					if !_rules[ruleMultGroupOpAtom]() {
						goto l723
					}
					goto l722
				l723:
					position, tokenIndex = position723, tokenIndex723
				}
				add(ruleSumGroupOpAtom, position721)
			}
			return true
		l720:
			position, tokenIndex = position720, tokenIndex720
			return false
		},
		/* 67 ConsOpAtom <- <(SumGroupOpAtom (_ ConsOp _ SumGroupOpAtom)*)> */
		func() bool {
			position724, tokenIndex724 := position, tokenIndex
			{
				position725 := position
				if !_rules[ruleSumGroupOpAtom]() {
					goto l724
				}
			l726:
				{
					position727, tokenIndex727 := position, tokenIndex
					if !_rules[rule_]() {
						goto l727
					}
					if !_rules[ruleConsOp]() {
						goto l727
					}
					if !_rules[rule_]() {
						goto l727
					}
					if !_rules[ruleSumGroupOpAtom]() {
						goto l727
					}
					goto l726
				l727:
					position, tokenIndex = position727, tokenIndex727
				}
				add(ruleConsOpAtom, position725)
			}
			return true
		l724:
			position, tokenIndex = position724, tokenIndex724
			return false
		},
		/* 68 CompareGroupOpAtom <- <(ConsOpAtom (_ CompareGroupOp _ ConsOpAtom)*)> */
		func() bool {
			position728, tokenIndex728 := position, tokenIndex
			{
				position729 := position
				if !_rules[ruleConsOpAtom]() {
					goto l728
				}
			l730:
				{
					position731, tokenIndex731 := position, tokenIndex
					if !_rules[rule_]() {
						goto l731
					}
					if !_rules[ruleCompareGroupOp]() {
						goto l731
					}
					if !_rules[rule_]() {
						goto l731
					}
					if !_rules[ruleConsOpAtom]() {
						goto l731
					}
					goto l730
				l731:
					position, tokenIndex = position731, tokenIndex731
				}
				add(ruleCompareGroupOpAtom, position729)
			}
			return true
		l728:
			position, tokenIndex = position728, tokenIndex728
			return false
		},
		/* 69 EqualityGroupOpAtom <- <(CompareGroupOpAtom (_ EqGroupOp _ CompareGroupOpAtom)*)> */
		func() bool {
			position732, tokenIndex732 := position, tokenIndex
			{
				position733 := position
				if !_rules[ruleCompareGroupOpAtom]() {
					goto l732
				}
			l734:
				{
					position735, tokenIndex735 := position, tokenIndex
					if !_rules[rule_]() {
						goto l735
					}
					if !_rules[ruleEqGroupOp]() {
						goto l735
					}
					if !_rules[rule_]() {
						goto l735
					}
					if !_rules[ruleCompareGroupOpAtom]() {
						goto l735
					}
					goto l734
				l735:
					position, tokenIndex = position735, tokenIndex735
				}
				add(ruleEqualityGroupOpAtom, position733)
			}
			return true
		l732:
			position, tokenIndex = position732, tokenIndex732
			return false
		},
		/* 70 AndOpAtom <- <(EqualityGroupOpAtom (_ AndOp _ EqualityGroupOpAtom)*)> */
		func() bool {
			position736, tokenIndex736 := position, tokenIndex
			{
				position737 := position
				if !_rules[ruleEqualityGroupOpAtom]() {
					goto l736
				}
			l738:
				{
					position739, tokenIndex739 := position, tokenIndex
					if !_rules[rule_]() {
						goto l739
					}
					if !_rules[ruleAndOp]() {
						goto l739
					}
					if !_rules[rule_]() {
						goto l739
					}
					if !_rules[ruleEqualityGroupOpAtom]() {
						goto l739
					}
					goto l738
				l739:
					position, tokenIndex = position739, tokenIndex739
				}
				add(ruleAndOpAtom, position737)
			}
			return true
		l736:
			position, tokenIndex = position736, tokenIndex736
			return false
		},
		/* 71 OrOpAtom <- <(AndOpAtom (_ OrOp _ AndOpAtom)*)> */
		func() bool {
			position740, tokenIndex740 := position, tokenIndex
			{
				position741 := position
				if !_rules[ruleAndOpAtom]() {
					goto l740
				}
			l742:
				{
					position743, tokenIndex743 := position, tokenIndex
					if !_rules[rule_]() {
						goto l743
					}
					if !_rules[ruleOrOp]() {
						goto l743
					}
					if !_rules[rule_]() {
						goto l743
					}
					if !_rules[ruleAndOpAtom]() {
						goto l743
					}
					goto l742
				l743:
					position, tokenIndex = position743, tokenIndex743
				}
				add(ruleOrOpAtom, position741)
			}
			return true
		l740:
			position, tokenIndex = position740, tokenIndex740
			return false
		},
		/* 72 Expr <- <OrOpAtom> */
		func() bool {
			position744, tokenIndex744 := position, tokenIndex
			{
				position745 := position
				if !_rules[ruleOrOpAtom]() {
					goto l744
				}
				add(ruleExpr, position745)
			}
			return true
		l744:
			position, tokenIndex = position744, tokenIndex744
			return false
		},
		/* 73 ParExpr <- <('(' _ Expr _ ')')> */
		func() bool {
			position746, tokenIndex746 := position, tokenIndex
			{
				position747 := position
				if buffer[position] != rune('(') {
					goto l746
				}
				position++
				if !_rules[rule_]() {
					goto l746
				}
				if !_rules[ruleExpr]() {
					goto l746
				}
				if !_rules[rule_]() {
					goto l746
				}
				if buffer[position] != rune(')') {
					goto l746
				}
				position++
				add(ruleParExpr, position747)
			}
			return true
		l746:
			position, tokenIndex = position746, tokenIndex746
			return false
		},
		/* 74 GettableExpr <- <((ParExpr / Block / FunctionCall / Identifier) (_ (ListAccess / ('.' _ (FunctionCallAccess / IdentifierAccess))))*)> */
		func() bool {
			position748, tokenIndex748 := position, tokenIndex
			{
				position749 := position
				{
					position750, tokenIndex750 := position, tokenIndex
					if !_rules[ruleParExpr]() {
						goto l751
					}
					goto l750
				l751:
					position, tokenIndex = position750, tokenIndex750
					if !_rules[ruleBlock]() {
						goto l752
					}
					goto l750
				l752:
					position, tokenIndex = position750, tokenIndex750
					if !_rules[ruleFunctionCall]() {
						goto l753
					}
					goto l750
				l753:
					position, tokenIndex = position750, tokenIndex750
					if !_rules[ruleIdentifier]() {
						goto l748
					}
				}
			l750:
			l754:
				{
					position755, tokenIndex755 := position, tokenIndex
					if !_rules[rule_]() {
						goto l755
					}
					{
						position756, tokenIndex756 := position, tokenIndex
						if !_rules[ruleListAccess]() {
							goto l757
						}
						goto l756
					l757:
						position, tokenIndex = position756, tokenIndex756
						if buffer[position] != rune('.') {
							goto l755
						}
						position++
						if !_rules[rule_]() {
							goto l755
						}
						{
							position758, tokenIndex758 := position, tokenIndex
							if !_rules[ruleFunctionCallAccess]() {
								goto l759
							}
							goto l758
						l759:
							position, tokenIndex = position758, tokenIndex758
							if !_rules[ruleIdentifierAccess]() {
								goto l755
							}
						}
					l758:
					}
				l756:
					goto l754
				l755:
					position, tokenIndex = position755, tokenIndex755
				}
				add(ruleGettableExpr, position749)
			}
			return true
		l748:
			position, tokenIndex = position748, tokenIndex748
			return false
		},
		/* 75 FunctionCallAccess <- <FunctionCall> */
		func() bool {
			position760, tokenIndex760 := position, tokenIndex
			{
				position761 := position
				if !_rules[ruleFunctionCall]() {
					goto l760
				}
				add(ruleFunctionCallAccess, position761)
			}
			return true
		l760:
			position, tokenIndex = position760, tokenIndex760
			return false
		},
		/* 76 IdentifierAccess <- <Identifier> */
		func() bool {
			position762, tokenIndex762 := position, tokenIndex
			{
				position763 := position
				if !_rules[ruleIdentifier]() {
					goto l762
				}
				add(ruleIdentifierAccess, position763)
			}
			return true
		l762:
			position, tokenIndex = position762, tokenIndex762
			return false
		},
		/* 77 ListAccess <- <('[' _ (Expr / Identifier) _ ']')> */
		func() bool {
			position764, tokenIndex764 := position, tokenIndex
			{
				position765 := position
				if buffer[position] != rune('[') {
					goto l764
				}
				position++
				if !_rules[rule_]() {
					goto l764
				}
				{
					position766, tokenIndex766 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l767
					}
					goto l766
				l767:
					position, tokenIndex = position766, tokenIndex766
					if !_rules[ruleIdentifier]() {
						goto l764
					}
				}
			l766:
				if !_rules[rule_]() {
					goto l764
				}
				if buffer[position] != rune(']') {
					goto l764
				}
				position++
				add(ruleListAccess, position765)
			}
			return true
		l764:
			position, tokenIndex = position764, tokenIndex764
			return false
		},
		/* 78 Block <- <('{' (_ Declaration)* _ Expr _ '}')> */
		func() bool {
			position768, tokenIndex768 := position, tokenIndex
			{
				position769 := position
				if buffer[position] != rune('{') {
					goto l768
				}
				position++
			l770:
				{
					position771, tokenIndex771 := position, tokenIndex
					if !_rules[rule_]() {
						goto l771
					}
					if !_rules[ruleDeclaration]() {
						goto l771
					}
					goto l770
				l771:
					position, tokenIndex = position771, tokenIndex771
				}
				if !_rules[rule_]() {
					goto l768
				}
				if !_rules[ruleExpr]() {
					goto l768
				}
				if !_rules[rule_]() {
					goto l768
				}
				if buffer[position] != rune('}') {
					goto l768
				}
				position++
				add(ruleBlock, position769)
			}
			return true
		l768:
			position, tokenIndex = position768, tokenIndex768
			return false
		},
		/* 79 BlockWithoutPar <- <((_ Declaration)* _ Expr)> */
		func() bool {
			position772, tokenIndex772 := position, tokenIndex
			{
				position773 := position
			l774:
				{
					position775, tokenIndex775 := position, tokenIndex
					if !_rules[rule_]() {
						goto l775
					}
					if !_rules[ruleDeclaration]() {
						goto l775
					}
					goto l774
				l775:
					position, tokenIndex = position775, tokenIndex775
				}
				if !_rules[rule_]() {
					goto l772
				}
				if !_rules[ruleExpr]() {
					goto l772
				}
				add(ruleBlockWithoutPar, position773)
			}
			return true
		l772:
			position, tokenIndex = position772, tokenIndex772
			return false
		},
		/* 80 FunctionCall <- <(Identifier _ '(' _ ExprSeq? _ ')')> */
		func() bool {
			position776, tokenIndex776 := position, tokenIndex
			{
				position777 := position
				if !_rules[ruleIdentifier]() {
					goto l776
				}
				if !_rules[rule_]() {
					goto l776
				}
				if buffer[position] != rune('(') {
					goto l776
				}
				position++
				if !_rules[rule_]() {
					goto l776
				}
				{
					position778, tokenIndex778 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l778
					}
					goto l779
				l778:
					position, tokenIndex = position778, tokenIndex778
				}
			l779:
				if !_rules[rule_]() {
					goto l776
				}
				if buffer[position] != rune(')') {
					goto l776
				}
				position++
				add(ruleFunctionCall, position777)
			}
			return true
		l776:
			position, tokenIndex = position776, tokenIndex776
			return false
		},
		/* 81 FoldMacro <- <(('f' / 'F') ('o' / 'O') ('l' / 'L') ('d' / 'D') _ '<' _ Integer _ '>' _ '(' _ Expr _ ',' _ Expr _ ',' _ Identifier _ ')')> */
		func() bool {
			position780, tokenIndex780 := position, tokenIndex
			{
				position781 := position
				{
					position782, tokenIndex782 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l783
					}
					position++
					goto l782
				l783:
					position, tokenIndex = position782, tokenIndex782
					if buffer[position] != rune('F') {
						goto l780
					}
					position++
				}
			l782:
				{
					position784, tokenIndex784 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l785
					}
					position++
					goto l784
				l785:
					position, tokenIndex = position784, tokenIndex784
					if buffer[position] != rune('O') {
						goto l780
					}
					position++
				}
			l784:
				{
					position786, tokenIndex786 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l787
					}
					position++
					goto l786
				l787:
					position, tokenIndex = position786, tokenIndex786
					if buffer[position] != rune('L') {
						goto l780
					}
					position++
				}
			l786:
				{
					position788, tokenIndex788 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l789
					}
					position++
					goto l788
				l789:
					position, tokenIndex = position788, tokenIndex788
					if buffer[position] != rune('D') {
						goto l780
					}
					position++
				}
			l788:
				if !_rules[rule_]() {
					goto l780
				}
				if buffer[position] != rune('<') {
					goto l780
				}
				position++
				if !_rules[rule_]() {
					goto l780
				}
				if !_rules[ruleInteger]() {
					goto l780
				}
				if !_rules[rule_]() {
					goto l780
				}
				if buffer[position] != rune('>') {
					goto l780
				}
				position++
				if !_rules[rule_]() {
					goto l780
				}
				if buffer[position] != rune('(') {
					goto l780
				}
				position++
				if !_rules[rule_]() {
					goto l780
				}
				if !_rules[ruleExpr]() {
					goto l780
				}
				if !_rules[rule_]() {
					goto l780
				}
				if buffer[position] != rune(',') {
					goto l780
				}
				position++
				if !_rules[rule_]() {
					goto l780
				}
				if !_rules[ruleExpr]() {
					goto l780
				}
				if !_rules[rule_]() {
					goto l780
				}
				if buffer[position] != rune(',') {
					goto l780
				}
				position++
				if !_rules[rule_]() {
					goto l780
				}
				if !_rules[ruleIdentifier]() {
					goto l780
				}
				if !_rules[rule_]() {
					goto l780
				}
				if buffer[position] != rune(')') {
					goto l780
				}
				position++
				add(ruleFoldMacro, position781)
			}
			return true
		l780:
			position, tokenIndex = position780, tokenIndex780
			return false
		},
		/* 82 IfWithError <- <(If / FailedIfWithoutElse)> */
		func() bool {
			position790, tokenIndex790 := position, tokenIndex
			{
				position791 := position
				{
					position792, tokenIndex792 := position, tokenIndex
					if !_rules[ruleIf]() {
						goto l793
					}
					goto l792
				l793:
					position, tokenIndex = position792, tokenIndex792
					if !_rules[ruleFailedIfWithoutElse]() {
						goto l790
					}
				}
			l792:
				add(ruleIfWithError, position791)
			}
			return true
		l790:
			position, tokenIndex = position790, tokenIndex790
			return false
		},
		/* 83 If <- <(('i' / 'I') ('f' / 'F') _ Expr _ (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) _ Expr _ (('e' / 'E') ('l' / 'L') ('s' / 'S') ('e' / 'E')) _ Expr)> */
		func() bool {
			position794, tokenIndex794 := position, tokenIndex
			{
				position795 := position
				{
					position796, tokenIndex796 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l797
					}
					position++
					goto l796
				l797:
					position, tokenIndex = position796, tokenIndex796
					if buffer[position] != rune('I') {
						goto l794
					}
					position++
				}
			l796:
				{
					position798, tokenIndex798 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l799
					}
					position++
					goto l798
				l799:
					position, tokenIndex = position798, tokenIndex798
					if buffer[position] != rune('F') {
						goto l794
					}
					position++
				}
			l798:
				if !_rules[rule_]() {
					goto l794
				}
				if !_rules[ruleExpr]() {
					goto l794
				}
				if !_rules[rule_]() {
					goto l794
				}
				{
					position800, tokenIndex800 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l801
					}
					position++
					goto l800
				l801:
					position, tokenIndex = position800, tokenIndex800
					if buffer[position] != rune('T') {
						goto l794
					}
					position++
				}
			l800:
				{
					position802, tokenIndex802 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l803
					}
					position++
					goto l802
				l803:
					position, tokenIndex = position802, tokenIndex802
					if buffer[position] != rune('H') {
						goto l794
					}
					position++
				}
			l802:
				{
					position804, tokenIndex804 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l805
					}
					position++
					goto l804
				l805:
					position, tokenIndex = position804, tokenIndex804
					if buffer[position] != rune('E') {
						goto l794
					}
					position++
				}
			l804:
				{
					position806, tokenIndex806 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l807
					}
					position++
					goto l806
				l807:
					position, tokenIndex = position806, tokenIndex806
					if buffer[position] != rune('N') {
						goto l794
					}
					position++
				}
			l806:
				if !_rules[rule_]() {
					goto l794
				}
				if !_rules[ruleExpr]() {
					goto l794
				}
				if !_rules[rule_]() {
					goto l794
				}
				{
					position808, tokenIndex808 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l809
					}
					position++
					goto l808
				l809:
					position, tokenIndex = position808, tokenIndex808
					if buffer[position] != rune('E') {
						goto l794
					}
					position++
				}
			l808:
				{
					position810, tokenIndex810 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l811
					}
					position++
					goto l810
				l811:
					position, tokenIndex = position810, tokenIndex810
					if buffer[position] != rune('L') {
						goto l794
					}
					position++
				}
			l810:
				{
					position812, tokenIndex812 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l813
					}
					position++
					goto l812
				l813:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('S') {
						goto l794
					}
					position++
				}
			l812:
				{
					position814, tokenIndex814 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l815
					}
					position++
					goto l814
				l815:
					position, tokenIndex = position814, tokenIndex814
					if buffer[position] != rune('E') {
						goto l794
					}
					position++
				}
			l814:
				if !_rules[rule_]() {
					goto l794
				}
				if !_rules[ruleExpr]() {
					goto l794
				}
				add(ruleIf, position795)
			}
			return true
		l794:
			position, tokenIndex = position794, tokenIndex794
			return false
		},
		/* 84 FailedIfWithoutElse <- <(('i' / 'I') ('f' / 'F') _ Expr _ (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) _ Expr)> */
		func() bool {
			position816, tokenIndex816 := position, tokenIndex
			{
				position817 := position
				{
					position818, tokenIndex818 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l819
					}
					position++
					goto l818
				l819:
					position, tokenIndex = position818, tokenIndex818
					if buffer[position] != rune('I') {
						goto l816
					}
					position++
				}
			l818:
				{
					position820, tokenIndex820 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l821
					}
					position++
					goto l820
				l821:
					position, tokenIndex = position820, tokenIndex820
					if buffer[position] != rune('F') {
						goto l816
					}
					position++
				}
			l820:
				if !_rules[rule_]() {
					goto l816
				}
				if !_rules[ruleExpr]() {
					goto l816
				}
				if !_rules[rule_]() {
					goto l816
				}
				{
					position822, tokenIndex822 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l823
					}
					position++
					goto l822
				l823:
					position, tokenIndex = position822, tokenIndex822
					if buffer[position] != rune('T') {
						goto l816
					}
					position++
				}
			l822:
				{
					position824, tokenIndex824 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l825
					}
					position++
					goto l824
				l825:
					position, tokenIndex = position824, tokenIndex824
					if buffer[position] != rune('H') {
						goto l816
					}
					position++
				}
			l824:
				{
					position826, tokenIndex826 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l827
					}
					position++
					goto l826
				l827:
					position, tokenIndex = position826, tokenIndex826
					if buffer[position] != rune('E') {
						goto l816
					}
					position++
				}
			l826:
				{
					position828, tokenIndex828 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l829
					}
					position++
					goto l828
				l829:
					position, tokenIndex = position828, tokenIndex828
					if buffer[position] != rune('N') {
						goto l816
					}
					position++
				}
			l828:
				if !_rules[rule_]() {
					goto l816
				}
				if !_rules[ruleExpr]() {
					goto l816
				}
				add(ruleFailedIfWithoutElse, position817)
			}
			return true
		l816:
			position, tokenIndex = position816, tokenIndex816
			return false
		},
		/* 85 Match <- <(('m' / 'M') ('a' / 'A') ('t' / 'T') ('c' / 'C') ('h' / 'H') _ Expr _ '{' (_ MatchCase)+ _ '}')> */
		func() bool {
			position830, tokenIndex830 := position, tokenIndex
			{
				position831 := position
				{
					position832, tokenIndex832 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l833
					}
					position++
					goto l832
				l833:
					position, tokenIndex = position832, tokenIndex832
					if buffer[position] != rune('M') {
						goto l830
					}
					position++
				}
			l832:
				{
					position834, tokenIndex834 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l835
					}
					position++
					goto l834
				l835:
					position, tokenIndex = position834, tokenIndex834
					if buffer[position] != rune('A') {
						goto l830
					}
					position++
				}
			l834:
				{
					position836, tokenIndex836 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l837
					}
					position++
					goto l836
				l837:
					position, tokenIndex = position836, tokenIndex836
					if buffer[position] != rune('T') {
						goto l830
					}
					position++
				}
			l836:
				{
					position838, tokenIndex838 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l839
					}
					position++
					goto l838
				l839:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('C') {
						goto l830
					}
					position++
				}
			l838:
				{
					position840, tokenIndex840 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l841
					}
					position++
					goto l840
				l841:
					position, tokenIndex = position840, tokenIndex840
					if buffer[position] != rune('H') {
						goto l830
					}
					position++
				}
			l840:
				if !_rules[rule_]() {
					goto l830
				}
				if !_rules[ruleExpr]() {
					goto l830
				}
				if !_rules[rule_]() {
					goto l830
				}
				if buffer[position] != rune('{') {
					goto l830
				}
				position++
				if !_rules[rule_]() {
					goto l830
				}
				if !_rules[ruleMatchCase]() {
					goto l830
				}
			l842:
				{
					position843, tokenIndex843 := position, tokenIndex
					if !_rules[rule_]() {
						goto l843
					}
					if !_rules[ruleMatchCase]() {
						goto l843
					}
					goto l842
				l843:
					position, tokenIndex = position843, tokenIndex843
				}
				if !_rules[rule_]() {
					goto l830
				}
				if buffer[position] != rune('}') {
					goto l830
				}
				position++
				add(ruleMatch, position831)
			}
			return true
		l830:
			position, tokenIndex = position830, tokenIndex830
			return false
		},
		/* 86 MatchCase <- <(('c' / 'C') ('a' / 'A') ('s' / 'S') ('e' / 'E') _ ((Identifier _ (':' _ TypesAtom)?) / DefaultMatchCasePart) _ ('=' '>') _ BlockWithoutPar)> */
		func() bool {
			position844, tokenIndex844 := position, tokenIndex
			{
				position845 := position
				{
					position846, tokenIndex846 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l847
					}
					position++
					goto l846
				l847:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('C') {
						goto l844
					}
					position++
				}
			l846:
				{
					position848, tokenIndex848 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l849
					}
					position++
					goto l848
				l849:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('A') {
						goto l844
					}
					position++
				}
			l848:
				{
					position850, tokenIndex850 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l851
					}
					position++
					goto l850
				l851:
					position, tokenIndex = position850, tokenIndex850
					if buffer[position] != rune('S') {
						goto l844
					}
					position++
				}
			l850:
				{
					position852, tokenIndex852 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l853
					}
					position++
					goto l852
				l853:
					position, tokenIndex = position852, tokenIndex852
					if buffer[position] != rune('E') {
						goto l844
					}
					position++
				}
			l852:
				if !_rules[rule_]() {
					goto l844
				}
				{
					position854, tokenIndex854 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l855
					}
					if !_rules[rule_]() {
						goto l855
					}
					{
						position856, tokenIndex856 := position, tokenIndex
						if buffer[position] != rune(':') {
							goto l856
						}
						position++
						if !_rules[rule_]() {
							goto l856
						}
						if !_rules[ruleTypesAtom]() {
							goto l856
						}
						goto l857
					l856:
						position, tokenIndex = position856, tokenIndex856
					}
				l857:
					goto l854
				l855:
					position, tokenIndex = position854, tokenIndex854
					if !_rules[ruleDefaultMatchCasePart]() {
						goto l844
					}
				}
			l854:
				if !_rules[rule_]() {
					goto l844
				}
				if buffer[position] != rune('=') {
					goto l844
				}
				position++
				if buffer[position] != rune('>') {
					goto l844
				}
				position++
				if !_rules[rule_]() {
					goto l844
				}
				if !_rules[ruleBlockWithoutPar]() {
					goto l844
				}
				add(ruleMatchCase, position845)
			}
			return true
		l844:
			position, tokenIndex = position844, tokenIndex844
			return false
		},
		/* 87 DefaultMatchCasePart <- <('{' _ (':' _ TypesAtom)?)> */
		func() bool {
			position858, tokenIndex858 := position, tokenIndex
			{
				position859 := position
				if buffer[position] != rune('{') {
					goto l858
				}
				position++
				if !_rules[rule_]() {
					goto l858
				}
				{
					position860, tokenIndex860 := position, tokenIndex
					if buffer[position] != rune(':') {
						goto l860
					}
					position++
					if !_rules[rule_]() {
						goto l860
					}
					if !_rules[ruleTypesAtom]() {
						goto l860
					}
					goto l861
				l860:
					position, tokenIndex = position860, tokenIndex860
				}
			l861:
				add(ruleDefaultMatchCasePart, position859)
			}
			return true
		l858:
			position, tokenIndex = position858, tokenIndex858
			return false
		},
	}
	p.rules = _rules
	return nil
}

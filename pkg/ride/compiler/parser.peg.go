package compiler

// Code generated by peg -output=parser.peg.go ride.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleCode
	ruleDAppRoot
	ruleScriptRoot
	ruleWS
	ruleEOL
	ruleComment
	rule_
	ruleEOF
	ruleDirectiveName
	ruleUpperCaseString
	ruleIntString
	rulePathString
	ruleDirective
	ruleDeclaration
	ruleVariable
	ruleStrictVariable
	ruleFunc
	ruleFuncArgSeq
	ruleFuncArg
	ruleAnnotatedFunc
	ruleAnnotation
	ruleIdentifierSeq
	ruleAnnotationSeq
	ruleOrOp
	ruleAndOp
	ruleEqGroupOp
	ruleEqOp
	ruleNeOp
	ruleCompareGroupOp
	ruleGtOp
	ruleGeOp
	ruleLtOp
	ruleLeOp
	ruleConsOp
	ruleSumGroupOp
	ruleSumOp
	ruleSubOp
	ruleMultGroupOp
	ruleMulOp
	ruleDivOp
	ruleModOp
	ruleUnaryOp
	rulePositiveOp
	ruleNegativeOp
	ruleNotOp
	ruleReservedWords
	ruleConst
	ruleIdentifier
	ruleType
	ruleGenericType
	ruleTupleType
	ruleTypes
	ruleBase16
	ruleBase58
	ruleBase64
	ruleByteVector
	ruleBoolean
	ruleString
	ruleUnicodeChar
	ruleEscapedChar
	ruleChar
	ruleInteger
	ruleList
	ruleExprSeq
	ruleAtomExpr
	ruleMultGroupOpAtom
	ruleSumGroupOpAtom
	ruleConsOpAtom
	ruleCompareGroupOpAtom
	ruleEqualityGroupOpAtom
	ruleAndOpAtom
	ruleOrOpAtom
	ruleExpr
	ruleParExpr
	ruleGettableExpr
	ruleFunctionCallAccess
	ruleIdentifierAccess
	ruleListAccess
	ruleBlock
	ruleBlockWithoutPar
	ruleFunctionCall
	ruleFoldMacro
	ruleIfWithError
	ruleIf
	ruleFailedIfWithoutElse
	ruleMatch
	ruleMatchCase
	ruleDefaultMatchCasePart
	ruleTuple
	ruleTupleRef
	ruleTupleAccess
)

var rul3s = [...]string{
	"Unknown",
	"Code",
	"DAppRoot",
	"ScriptRoot",
	"WS",
	"EOL",
	"Comment",
	"_",
	"EOF",
	"DirectiveName",
	"UpperCaseString",
	"IntString",
	"PathString",
	"Directive",
	"Declaration",
	"Variable",
	"StrictVariable",
	"Func",
	"FuncArgSeq",
	"FuncArg",
	"AnnotatedFunc",
	"Annotation",
	"IdentifierSeq",
	"AnnotationSeq",
	"OrOp",
	"AndOp",
	"EqGroupOp",
	"EqOp",
	"NeOp",
	"CompareGroupOp",
	"GtOp",
	"GeOp",
	"LtOp",
	"LeOp",
	"ConsOp",
	"SumGroupOp",
	"SumOp",
	"SubOp",
	"MultGroupOp",
	"MulOp",
	"DivOp",
	"ModOp",
	"UnaryOp",
	"PositiveOp",
	"NegativeOp",
	"NotOp",
	"ReservedWords",
	"Const",
	"Identifier",
	"Type",
	"GenericType",
	"TupleType",
	"Types",
	"Base16",
	"Base58",
	"Base64",
	"ByteVector",
	"Boolean",
	"String",
	"UnicodeChar",
	"EscapedChar",
	"Char",
	"Integer",
	"List",
	"ExprSeq",
	"AtomExpr",
	"MultGroupOpAtom",
	"SumGroupOpAtom",
	"ConsOpAtom",
	"CompareGroupOpAtom",
	"EqualityGroupOpAtom",
	"AndOpAtom",
	"OrOpAtom",
	"Expr",
	"ParExpr",
	"GettableExpr",
	"FunctionCallAccess",
	"IdentifierAccess",
	"ListAccess",
	"Block",
	"BlockWithoutPar",
	"FunctionCall",
	"FoldMacro",
	"IfWithError",
	"If",
	"FailedIfWithoutElse",
	"Match",
	"MatchCase",
	"DefaultMatchCasePart",
	"Tuple",
	"TupleRef",
	"TupleAccess",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Buffer string
	buffer []rune
	rules  [92]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Code <- <(DAppRoot / ScriptRoot)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[ruleDAppRoot]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[ruleScriptRoot]() {
						goto l0
					}
				}
			l2:
				add(ruleCode, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 DAppRoot <- <(_ (Directive _)* (_ Declaration)* (_ AnnotatedFunc)* _ EOF)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
				if !_rules[rule_]() {
					goto l4
				}
			l6:
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l7
					}
					if !_rules[rule_]() {
						goto l7
					}
					goto l6
				l7:
					position, tokenIndex = position7, tokenIndex7
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[rule_]() {
						goto l9
					}
					if !_rules[ruleDeclaration]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
			l10:
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[rule_]() {
						goto l11
					}
					if !_rules[ruleAnnotatedFunc]() {
						goto l11
					}
					goto l10
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				if !_rules[rule_]() {
					goto l4
				}
				if !_rules[ruleEOF]() {
					goto l4
				}
				add(ruleDAppRoot, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 ScriptRoot <- <(_ (Directive _)* (_ Declaration)* _ Expr _ EOF)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[rule_]() {
					goto l12
				}
			l14:
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l15
					}
					if !_rules[rule_]() {
						goto l15
					}
					goto l14
				l15:
					position, tokenIndex = position15, tokenIndex15
				}
			l16:
				{
					position17, tokenIndex17 := position, tokenIndex
					if !_rules[rule_]() {
						goto l17
					}
					if !_rules[ruleDeclaration]() {
						goto l17
					}
					goto l16
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleExpr]() {
					goto l12
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleEOF]() {
					goto l12
				}
				add(ruleScriptRoot, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 WS <- <(' ' / '\t')> */
		func() bool {
			position18, tokenIndex18 := position, tokenIndex
			{
				position19 := position
				{
					position20, tokenIndex20 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l21
					}
					position++
					goto l20
				l21:
					position, tokenIndex = position20, tokenIndex20
					if buffer[position] != rune('\t') {
						goto l18
					}
					position++
				}
			l20:
				add(ruleWS, position19)
			}
			return true
		l18:
			position, tokenIndex = position18, tokenIndex18
			return false
		},
		/* 4 EOL <- <('\n' / '\r' / '\f')> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24, tokenIndex24 := position, tokenIndex
					if buffer[position] != rune('\n') {
						goto l25
					}
					position++
					goto l24
				l25:
					position, tokenIndex = position24, tokenIndex24
					if buffer[position] != rune('\r') {
						goto l26
					}
					position++
					goto l24
				l26:
					position, tokenIndex = position24, tokenIndex24
					if buffer[position] != rune('\f') {
						goto l22
					}
					position++
				}
			l24:
				add(ruleEOL, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 5 Comment <- <('#' (!('\r' / '^' / '\n') .)*)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				if buffer[position] != rune('#') {
					goto l27
				}
				position++
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					{
						position31, tokenIndex31 := position, tokenIndex
						{
							position32, tokenIndex32 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l33
							}
							position++
							goto l32
						l33:
							position, tokenIndex = position32, tokenIndex32
							if buffer[position] != rune('^') {
								goto l34
							}
							position++
							goto l32
						l34:
							position, tokenIndex = position32, tokenIndex32
							if buffer[position] != rune('\n') {
								goto l31
							}
							position++
						}
					l32:
						goto l30
					l31:
						position, tokenIndex = position31, tokenIndex31
					}
					if !matchDot() {
						goto l30
					}
					goto l29
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
				add(ruleComment, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 6 _ <- <(Comment / (WS / EOL)+)*> */
		func() bool {
			{
				position36 := position
			l37:
				{
					position38, tokenIndex38 := position, tokenIndex
					{
						position39, tokenIndex39 := position, tokenIndex
						if !_rules[ruleComment]() {
							goto l40
						}
						goto l39
					l40:
						position, tokenIndex = position39, tokenIndex39
						{
							position43, tokenIndex43 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l44
							}
							goto l43
						l44:
							position, tokenIndex = position43, tokenIndex43
							if !_rules[ruleEOL]() {
								goto l38
							}
						}
					l43:
					l41:
						{
							position42, tokenIndex42 := position, tokenIndex
							{
								position45, tokenIndex45 := position, tokenIndex
								if !_rules[ruleWS]() {
									goto l46
								}
								goto l45
							l46:
								position, tokenIndex = position45, tokenIndex45
								if !_rules[ruleEOL]() {
									goto l42
								}
							}
						l45:
							goto l41
						l42:
							position, tokenIndex = position42, tokenIndex42
						}
					}
				l39:
					goto l37
				l38:
					position, tokenIndex = position38, tokenIndex38
				}
				add(rule_, position36)
			}
			return true
		},
		/* 7 EOF <- <!.> */
		func() bool {
			position47, tokenIndex47 := position, tokenIndex
			{
				position48 := position
				{
					position49, tokenIndex49 := position, tokenIndex
					if !matchDot() {
						goto l49
					}
					goto l47
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
				add(ruleEOF, position48)
			}
			return true
		l47:
			position, tokenIndex = position47, tokenIndex47
			return false
		},
		/* 8 DirectiveName <- <([A-Z]+ ('_' / [A-Z])*)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l50
				}
				position++
			l52:
				{
					position53, tokenIndex53 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l53
					}
					position++
					goto l52
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				{
					position55, tokenIndex55 := position, tokenIndex
					{
						position56, tokenIndex56 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l57
						}
						position++
						goto l56
					l57:
						position, tokenIndex = position56, tokenIndex56
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l55
						}
						position++
					}
				l56:
					goto l54
				l55:
					position, tokenIndex = position55, tokenIndex55
				}
				add(ruleDirectiveName, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 9 UpperCaseString <- <[A-Z]+> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l58
				}
				position++
			l60:
				{
					position61, tokenIndex61 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l61
					}
					position++
					goto l60
				l61:
					position, tokenIndex = position61, tokenIndex61
				}
				add(ruleUpperCaseString, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 10 IntString <- <[0-9]+> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l62
				}
				position++
			l64:
				{
					position65, tokenIndex65 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l65
					}
					position++
					goto l64
				l65:
					position, tokenIndex = position65, tokenIndex65
				}
				add(ruleIntString, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 11 PathString <- <('_' / [a-z] / [A-Z] / [0-9] / '-' / '/' / ',' / '.')+> */
		func() bool {
			position66, tokenIndex66 := position, tokenIndex
			{
				position67 := position
				{
					position70, tokenIndex70 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l71
					}
					position++
					goto l70
				l71:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l72
					}
					position++
					goto l70
				l72:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l73
					}
					position++
					goto l70
				l73:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l74
					}
					position++
					goto l70
				l74:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('-') {
						goto l75
					}
					position++
					goto l70
				l75:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('/') {
						goto l76
					}
					position++
					goto l70
				l76:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune(',') {
						goto l77
					}
					position++
					goto l70
				l77:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('.') {
						goto l66
					}
					position++
				}
			l70:
			l68:
				{
					position69, tokenIndex69 := position, tokenIndex
					{
						position78, tokenIndex78 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l79
						}
						position++
						goto l78
					l79:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l80
						}
						position++
						goto l78
					l80:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l81
						}
						position++
						goto l78
					l81:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l82
						}
						position++
						goto l78
					l82:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('-') {
							goto l83
						}
						position++
						goto l78
					l83:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('/') {
							goto l84
						}
						position++
						goto l78
					l84:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune(',') {
							goto l85
						}
						position++
						goto l78
					l85:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('.') {
							goto l69
						}
						position++
					}
				l78:
					goto l68
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
				add(rulePathString, position67)
			}
			return true
		l66:
			position, tokenIndex = position66, tokenIndex66
			return false
		},
		/* 12 Directive <- <('{' '-' '#' WS+ DirectiveName WS+ (IntString / UpperCaseString / PathString) WS+ ('#' '-' '}'))> */
		func() bool {
			position86, tokenIndex86 := position, tokenIndex
			{
				position87 := position
				if buffer[position] != rune('{') {
					goto l86
				}
				position++
				if buffer[position] != rune('-') {
					goto l86
				}
				position++
				if buffer[position] != rune('#') {
					goto l86
				}
				position++
				if !_rules[ruleWS]() {
					goto l86
				}
			l88:
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l89
					}
					goto l88
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
				if !_rules[ruleDirectiveName]() {
					goto l86
				}
				if !_rules[ruleWS]() {
					goto l86
				}
			l90:
				{
					position91, tokenIndex91 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l91
					}
					goto l90
				l91:
					position, tokenIndex = position91, tokenIndex91
				}
				{
					position92, tokenIndex92 := position, tokenIndex
					if !_rules[ruleIntString]() {
						goto l93
					}
					goto l92
				l93:
					position, tokenIndex = position92, tokenIndex92
					if !_rules[ruleUpperCaseString]() {
						goto l94
					}
					goto l92
				l94:
					position, tokenIndex = position92, tokenIndex92
					if !_rules[rulePathString]() {
						goto l86
					}
				}
			l92:
				if !_rules[ruleWS]() {
					goto l86
				}
			l95:
				{
					position96, tokenIndex96 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l96
					}
					goto l95
				l96:
					position, tokenIndex = position96, tokenIndex96
				}
				if buffer[position] != rune('#') {
					goto l86
				}
				position++
				if buffer[position] != rune('-') {
					goto l86
				}
				position++
				if buffer[position] != rune('}') {
					goto l86
				}
				position++
				add(ruleDirective, position87)
			}
			return true
		l86:
			position, tokenIndex = position86, tokenIndex86
			return false
		},
		/* 13 Declaration <- <((Variable / StrictVariable / Func) _ ';'?)> */
		func() bool {
			position97, tokenIndex97 := position, tokenIndex
			{
				position98 := position
				{
					position99, tokenIndex99 := position, tokenIndex
					if !_rules[ruleVariable]() {
						goto l100
					}
					goto l99
				l100:
					position, tokenIndex = position99, tokenIndex99
					if !_rules[ruleStrictVariable]() {
						goto l101
					}
					goto l99
				l101:
					position, tokenIndex = position99, tokenIndex99
					if !_rules[ruleFunc]() {
						goto l97
					}
				}
			l99:
				if !_rules[rule_]() {
					goto l97
				}
				{
					position102, tokenIndex102 := position, tokenIndex
					if buffer[position] != rune(';') {
						goto l102
					}
					position++
					goto l103
				l102:
					position, tokenIndex = position102, tokenIndex102
				}
			l103:
				add(ruleDeclaration, position98)
			}
			return true
		l97:
			position, tokenIndex = position97, tokenIndex97
			return false
		},
		/* 14 Variable <- <('l' 'e' 't' _ (Identifier / TupleRef) _ '=' _ Expr)> */
		func() bool {
			position104, tokenIndex104 := position, tokenIndex
			{
				position105 := position
				if buffer[position] != rune('l') {
					goto l104
				}
				position++
				if buffer[position] != rune('e') {
					goto l104
				}
				position++
				if buffer[position] != rune('t') {
					goto l104
				}
				position++
				if !_rules[rule_]() {
					goto l104
				}
				{
					position106, tokenIndex106 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l107
					}
					goto l106
				l107:
					position, tokenIndex = position106, tokenIndex106
					if !_rules[ruleTupleRef]() {
						goto l104
					}
				}
			l106:
				if !_rules[rule_]() {
					goto l104
				}
				if buffer[position] != rune('=') {
					goto l104
				}
				position++
				if !_rules[rule_]() {
					goto l104
				}
				if !_rules[ruleExpr]() {
					goto l104
				}
				add(ruleVariable, position105)
			}
			return true
		l104:
			position, tokenIndex = position104, tokenIndex104
			return false
		},
		/* 15 StrictVariable <- <('s' 't' 'r' 'i' 'c' 't' _ Identifier _ '=' _ Expr)> */
		func() bool {
			position108, tokenIndex108 := position, tokenIndex
			{
				position109 := position
				if buffer[position] != rune('s') {
					goto l108
				}
				position++
				if buffer[position] != rune('t') {
					goto l108
				}
				position++
				if buffer[position] != rune('r') {
					goto l108
				}
				position++
				if buffer[position] != rune('i') {
					goto l108
				}
				position++
				if buffer[position] != rune('c') {
					goto l108
				}
				position++
				if buffer[position] != rune('t') {
					goto l108
				}
				position++
				if !_rules[rule_]() {
					goto l108
				}
				if !_rules[ruleIdentifier]() {
					goto l108
				}
				if !_rules[rule_]() {
					goto l108
				}
				if buffer[position] != rune('=') {
					goto l108
				}
				position++
				if !_rules[rule_]() {
					goto l108
				}
				if !_rules[ruleExpr]() {
					goto l108
				}
				add(ruleStrictVariable, position109)
			}
			return true
		l108:
			position, tokenIndex = position108, tokenIndex108
			return false
		},
		/* 16 Func <- <('f' 'u' 'n' 'c' _ Identifier _ '(' _ FuncArgSeq? _ ')' _ '=' _ Expr)> */
		func() bool {
			position110, tokenIndex110 := position, tokenIndex
			{
				position111 := position
				if buffer[position] != rune('f') {
					goto l110
				}
				position++
				if buffer[position] != rune('u') {
					goto l110
				}
				position++
				if buffer[position] != rune('n') {
					goto l110
				}
				position++
				if buffer[position] != rune('c') {
					goto l110
				}
				position++
				if !_rules[rule_]() {
					goto l110
				}
				if !_rules[ruleIdentifier]() {
					goto l110
				}
				if !_rules[rule_]() {
					goto l110
				}
				if buffer[position] != rune('(') {
					goto l110
				}
				position++
				if !_rules[rule_]() {
					goto l110
				}
				{
					position112, tokenIndex112 := position, tokenIndex
					if !_rules[ruleFuncArgSeq]() {
						goto l112
					}
					goto l113
				l112:
					position, tokenIndex = position112, tokenIndex112
				}
			l113:
				if !_rules[rule_]() {
					goto l110
				}
				if buffer[position] != rune(')') {
					goto l110
				}
				position++
				if !_rules[rule_]() {
					goto l110
				}
				if buffer[position] != rune('=') {
					goto l110
				}
				position++
				if !_rules[rule_]() {
					goto l110
				}
				if !_rules[ruleExpr]() {
					goto l110
				}
				add(ruleFunc, position111)
			}
			return true
		l110:
			position, tokenIndex = position110, tokenIndex110
			return false
		},
		/* 17 FuncArgSeq <- <(FuncArg (_ ',' _ FuncArgSeq)?)> */
		func() bool {
			position114, tokenIndex114 := position, tokenIndex
			{
				position115 := position
				if !_rules[ruleFuncArg]() {
					goto l114
				}
				{
					position116, tokenIndex116 := position, tokenIndex
					if !_rules[rule_]() {
						goto l116
					}
					if buffer[position] != rune(',') {
						goto l116
					}
					position++
					if !_rules[rule_]() {
						goto l116
					}
					if !_rules[ruleFuncArgSeq]() {
						goto l116
					}
					goto l117
				l116:
					position, tokenIndex = position116, tokenIndex116
				}
			l117:
				add(ruleFuncArgSeq, position115)
			}
			return true
		l114:
			position, tokenIndex = position114, tokenIndex114
			return false
		},
		/* 18 FuncArg <- <(Identifier _ ':' _ Types)> */
		func() bool {
			position118, tokenIndex118 := position, tokenIndex
			{
				position119 := position
				if !_rules[ruleIdentifier]() {
					goto l118
				}
				if !_rules[rule_]() {
					goto l118
				}
				if buffer[position] != rune(':') {
					goto l118
				}
				position++
				if !_rules[rule_]() {
					goto l118
				}
				if !_rules[ruleTypes]() {
					goto l118
				}
				add(ruleFuncArg, position119)
			}
			return true
		l118:
			position, tokenIndex = position118, tokenIndex118
			return false
		},
		/* 19 AnnotatedFunc <- <(AnnotationSeq _ Func)> */
		func() bool {
			position120, tokenIndex120 := position, tokenIndex
			{
				position121 := position
				if !_rules[ruleAnnotationSeq]() {
					goto l120
				}
				if !_rules[rule_]() {
					goto l120
				}
				if !_rules[ruleFunc]() {
					goto l120
				}
				add(ruleAnnotatedFunc, position121)
			}
			return true
		l120:
			position, tokenIndex = position120, tokenIndex120
			return false
		},
		/* 20 Annotation <- <('@' Identifier _ '(' _ IdentifierSeq _ ')')> */
		func() bool {
			position122, tokenIndex122 := position, tokenIndex
			{
				position123 := position
				if buffer[position] != rune('@') {
					goto l122
				}
				position++
				if !_rules[ruleIdentifier]() {
					goto l122
				}
				if !_rules[rule_]() {
					goto l122
				}
				if buffer[position] != rune('(') {
					goto l122
				}
				position++
				if !_rules[rule_]() {
					goto l122
				}
				if !_rules[ruleIdentifierSeq]() {
					goto l122
				}
				if !_rules[rule_]() {
					goto l122
				}
				if buffer[position] != rune(')') {
					goto l122
				}
				position++
				add(ruleAnnotation, position123)
			}
			return true
		l122:
			position, tokenIndex = position122, tokenIndex122
			return false
		},
		/* 21 IdentifierSeq <- <(Identifier (_ ',' _ IdentifierSeq)?)> */
		func() bool {
			position124, tokenIndex124 := position, tokenIndex
			{
				position125 := position
				if !_rules[ruleIdentifier]() {
					goto l124
				}
				{
					position126, tokenIndex126 := position, tokenIndex
					if !_rules[rule_]() {
						goto l126
					}
					if buffer[position] != rune(',') {
						goto l126
					}
					position++
					if !_rules[rule_]() {
						goto l126
					}
					if !_rules[ruleIdentifierSeq]() {
						goto l126
					}
					goto l127
				l126:
					position, tokenIndex = position126, tokenIndex126
				}
			l127:
				add(ruleIdentifierSeq, position125)
			}
			return true
		l124:
			position, tokenIndex = position124, tokenIndex124
			return false
		},
		/* 22 AnnotationSeq <- <(Annotation (_ AnnotationSeq)?)> */
		func() bool {
			position128, tokenIndex128 := position, tokenIndex
			{
				position129 := position
				if !_rules[ruleAnnotation]() {
					goto l128
				}
				{
					position130, tokenIndex130 := position, tokenIndex
					if !_rules[rule_]() {
						goto l130
					}
					if !_rules[ruleAnnotationSeq]() {
						goto l130
					}
					goto l131
				l130:
					position, tokenIndex = position130, tokenIndex130
				}
			l131:
				add(ruleAnnotationSeq, position129)
			}
			return true
		l128:
			position, tokenIndex = position128, tokenIndex128
			return false
		},
		/* 23 OrOp <- <('|' '|')> */
		func() bool {
			position132, tokenIndex132 := position, tokenIndex
			{
				position133 := position
				if buffer[position] != rune('|') {
					goto l132
				}
				position++
				if buffer[position] != rune('|') {
					goto l132
				}
				position++
				add(ruleOrOp, position133)
			}
			return true
		l132:
			position, tokenIndex = position132, tokenIndex132
			return false
		},
		/* 24 AndOp <- <('&' '&')> */
		func() bool {
			position134, tokenIndex134 := position, tokenIndex
			{
				position135 := position
				if buffer[position] != rune('&') {
					goto l134
				}
				position++
				if buffer[position] != rune('&') {
					goto l134
				}
				position++
				add(ruleAndOp, position135)
			}
			return true
		l134:
			position, tokenIndex = position134, tokenIndex134
			return false
		},
		/* 25 EqGroupOp <- <(EqOp / NeOp)> */
		func() bool {
			position136, tokenIndex136 := position, tokenIndex
			{
				position137 := position
				{
					position138, tokenIndex138 := position, tokenIndex
					if !_rules[ruleEqOp]() {
						goto l139
					}
					goto l138
				l139:
					position, tokenIndex = position138, tokenIndex138
					if !_rules[ruleNeOp]() {
						goto l136
					}
				}
			l138:
				add(ruleEqGroupOp, position137)
			}
			return true
		l136:
			position, tokenIndex = position136, tokenIndex136
			return false
		},
		/* 26 EqOp <- <('=' '=')> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				if buffer[position] != rune('=') {
					goto l140
				}
				position++
				if buffer[position] != rune('=') {
					goto l140
				}
				position++
				add(ruleEqOp, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 27 NeOp <- <('!' '=')> */
		func() bool {
			position142, tokenIndex142 := position, tokenIndex
			{
				position143 := position
				if buffer[position] != rune('!') {
					goto l142
				}
				position++
				if buffer[position] != rune('=') {
					goto l142
				}
				position++
				add(ruleNeOp, position143)
			}
			return true
		l142:
			position, tokenIndex = position142, tokenIndex142
			return false
		},
		/* 28 CompareGroupOp <- <(GtOp / GeOp / LtOp / LeOp)> */
		func() bool {
			position144, tokenIndex144 := position, tokenIndex
			{
				position145 := position
				{
					position146, tokenIndex146 := position, tokenIndex
					if !_rules[ruleGtOp]() {
						goto l147
					}
					goto l146
				l147:
					position, tokenIndex = position146, tokenIndex146
					if !_rules[ruleGeOp]() {
						goto l148
					}
					goto l146
				l148:
					position, tokenIndex = position146, tokenIndex146
					if !_rules[ruleLtOp]() {
						goto l149
					}
					goto l146
				l149:
					position, tokenIndex = position146, tokenIndex146
					if !_rules[ruleLeOp]() {
						goto l144
					}
				}
			l146:
				add(ruleCompareGroupOp, position145)
			}
			return true
		l144:
			position, tokenIndex = position144, tokenIndex144
			return false
		},
		/* 29 GtOp <- <('>' !'=')> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				if buffer[position] != rune('>') {
					goto l150
				}
				position++
				{
					position152, tokenIndex152 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l152
					}
					position++
					goto l150
				l152:
					position, tokenIndex = position152, tokenIndex152
				}
				add(ruleGtOp, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 30 GeOp <- <('>' '=')> */
		func() bool {
			position153, tokenIndex153 := position, tokenIndex
			{
				position154 := position
				if buffer[position] != rune('>') {
					goto l153
				}
				position++
				if buffer[position] != rune('=') {
					goto l153
				}
				position++
				add(ruleGeOp, position154)
			}
			return true
		l153:
			position, tokenIndex = position153, tokenIndex153
			return false
		},
		/* 31 LtOp <- <('<' !'=')> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				if buffer[position] != rune('<') {
					goto l155
				}
				position++
				{
					position157, tokenIndex157 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l157
					}
					position++
					goto l155
				l157:
					position, tokenIndex = position157, tokenIndex157
				}
				add(ruleLtOp, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 32 LeOp <- <('<' '=')> */
		func() bool {
			position158, tokenIndex158 := position, tokenIndex
			{
				position159 := position
				if buffer[position] != rune('<') {
					goto l158
				}
				position++
				if buffer[position] != rune('=') {
					goto l158
				}
				position++
				add(ruleLeOp, position159)
			}
			return true
		l158:
			position, tokenIndex = position158, tokenIndex158
			return false
		},
		/* 33 ConsOp <- <(':' ':')> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				if buffer[position] != rune(':') {
					goto l160
				}
				position++
				if buffer[position] != rune(':') {
					goto l160
				}
				position++
				add(ruleConsOp, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 34 SumGroupOp <- <(SumOp / SubOp)> */
		func() bool {
			position162, tokenIndex162 := position, tokenIndex
			{
				position163 := position
				{
					position164, tokenIndex164 := position, tokenIndex
					if !_rules[ruleSumOp]() {
						goto l165
					}
					goto l164
				l165:
					position, tokenIndex = position164, tokenIndex164
					if !_rules[ruleSubOp]() {
						goto l162
					}
				}
			l164:
				add(ruleSumGroupOp, position163)
			}
			return true
		l162:
			position, tokenIndex = position162, tokenIndex162
			return false
		},
		/* 35 SumOp <- <'+'> */
		func() bool {
			position166, tokenIndex166 := position, tokenIndex
			{
				position167 := position
				if buffer[position] != rune('+') {
					goto l166
				}
				position++
				add(ruleSumOp, position167)
			}
			return true
		l166:
			position, tokenIndex = position166, tokenIndex166
			return false
		},
		/* 36 SubOp <- <'-'> */
		func() bool {
			position168, tokenIndex168 := position, tokenIndex
			{
				position169 := position
				if buffer[position] != rune('-') {
					goto l168
				}
				position++
				add(ruleSubOp, position169)
			}
			return true
		l168:
			position, tokenIndex = position168, tokenIndex168
			return false
		},
		/* 37 MultGroupOp <- <(MulOp / DivOp / ModOp)> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				{
					position172, tokenIndex172 := position, tokenIndex
					if !_rules[ruleMulOp]() {
						goto l173
					}
					goto l172
				l173:
					position, tokenIndex = position172, tokenIndex172
					if !_rules[ruleDivOp]() {
						goto l174
					}
					goto l172
				l174:
					position, tokenIndex = position172, tokenIndex172
					if !_rules[ruleModOp]() {
						goto l170
					}
				}
			l172:
				add(ruleMultGroupOp, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 38 MulOp <- <'*'> */
		func() bool {
			position175, tokenIndex175 := position, tokenIndex
			{
				position176 := position
				if buffer[position] != rune('*') {
					goto l175
				}
				position++
				add(ruleMulOp, position176)
			}
			return true
		l175:
			position, tokenIndex = position175, tokenIndex175
			return false
		},
		/* 39 DivOp <- <'/'> */
		func() bool {
			position177, tokenIndex177 := position, tokenIndex
			{
				position178 := position
				if buffer[position] != rune('/') {
					goto l177
				}
				position++
				add(ruleDivOp, position178)
			}
			return true
		l177:
			position, tokenIndex = position177, tokenIndex177
			return false
		},
		/* 40 ModOp <- <'%'> */
		func() bool {
			position179, tokenIndex179 := position, tokenIndex
			{
				position180 := position
				if buffer[position] != rune('%') {
					goto l179
				}
				position++
				add(ruleModOp, position180)
			}
			return true
		l179:
			position, tokenIndex = position179, tokenIndex179
			return false
		},
		/* 41 UnaryOp <- <(PositiveOp / NegativeOp / NotOp)> */
		func() bool {
			position181, tokenIndex181 := position, tokenIndex
			{
				position182 := position
				{
					position183, tokenIndex183 := position, tokenIndex
					if !_rules[rulePositiveOp]() {
						goto l184
					}
					goto l183
				l184:
					position, tokenIndex = position183, tokenIndex183
					if !_rules[ruleNegativeOp]() {
						goto l185
					}
					goto l183
				l185:
					position, tokenIndex = position183, tokenIndex183
					if !_rules[ruleNotOp]() {
						goto l181
					}
				}
			l183:
				add(ruleUnaryOp, position182)
			}
			return true
		l181:
			position, tokenIndex = position181, tokenIndex181
			return false
		},
		/* 42 PositiveOp <- <'+'> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				if buffer[position] != rune('+') {
					goto l186
				}
				position++
				add(rulePositiveOp, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 43 NegativeOp <- <('-' !'#')> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				if buffer[position] != rune('-') {
					goto l188
				}
				position++
				{
					position190, tokenIndex190 := position, tokenIndex
					if buffer[position] != rune('#') {
						goto l190
					}
					position++
					goto l188
				l190:
					position, tokenIndex = position190, tokenIndex190
				}
				add(ruleNegativeOp, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 44 NotOp <- <'!'> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				if buffer[position] != rune('!') {
					goto l191
				}
				position++
				add(ruleNotOp, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 45 ReservedWords <- <(('l' 'e' 't') / ('s' 't' 'r' 'i' 'c' 't') / ('b' 'a' 's' 'e' '1' '6') / ('b' 'a' 's' 'e' '5' '8') / ('b' 'a' 's' 'e' '6' '4') / ('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e') / ('i' 'f') / ('t' 'h' 'e' 'n') / ('e' 'l' 's' 'e') / ('m' 'a' 't' 'c' 'h') / ('c' 'a' 's' 'e') / ('f' 'u' 'n' 'c') / ('F' 'O' 'L' 'D'))> */
		func() bool {
			position193, tokenIndex193 := position, tokenIndex
			{
				position194 := position
				{
					position195, tokenIndex195 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l196
					}
					position++
					if buffer[position] != rune('e') {
						goto l196
					}
					position++
					if buffer[position] != rune('t') {
						goto l196
					}
					position++
					goto l195
				l196:
					position, tokenIndex = position195, tokenIndex195
					if buffer[position] != rune('s') {
						goto l197
					}
					position++
					if buffer[position] != rune('t') {
						goto l197
					}
					position++
					if buffer[position] != rune('r') {
						goto l197
					}
					position++
					if buffer[position] != rune('i') {
						goto l197
					}
					position++
					if buffer[position] != rune('c') {
						goto l197
					}
					position++
					if buffer[position] != rune('t') {
						goto l197
					}
					position++
					goto l195
				l197:
					position, tokenIndex = position195, tokenIndex195
					if buffer[position] != rune('b') {
						goto l198
					}
					position++
					if buffer[position] != rune('a') {
						goto l198
					}
					position++
					if buffer[position] != rune('s') {
						goto l198
					}
					position++
					if buffer[position] != rune('e') {
						goto l198
					}
					position++
					if buffer[position] != rune('1') {
						goto l198
					}
					position++
					if buffer[position] != rune('6') {
						goto l198
					}
					position++
					goto l195
				l198:
					position, tokenIndex = position195, tokenIndex195
					if buffer[position] != rune('b') {
						goto l199
					}
					position++
					if buffer[position] != rune('a') {
						goto l199
					}
					position++
					if buffer[position] != rune('s') {
						goto l199
					}
					position++
					if buffer[position] != rune('e') {
						goto l199
					}
					position++
					if buffer[position] != rune('5') {
						goto l199
					}
					position++
					if buffer[position] != rune('8') {
						goto l199
					}
					position++
					goto l195
				l199:
					position, tokenIndex = position195, tokenIndex195
					if buffer[position] != rune('b') {
						goto l200
					}
					position++
					if buffer[position] != rune('a') {
						goto l200
					}
					position++
					if buffer[position] != rune('s') {
						goto l200
					}
					position++
					if buffer[position] != rune('e') {
						goto l200
					}
					position++
					if buffer[position] != rune('6') {
						goto l200
					}
					position++
					if buffer[position] != rune('4') {
						goto l200
					}
					position++
					goto l195
				l200:
					position, tokenIndex = position195, tokenIndex195
					if buffer[position] != rune('t') {
						goto l201
					}
					position++
					if buffer[position] != rune('r') {
						goto l201
					}
					position++
					if buffer[position] != rune('u') {
						goto l201
					}
					position++
					if buffer[position] != rune('e') {
						goto l201
					}
					position++
					goto l195
				l201:
					position, tokenIndex = position195, tokenIndex195
					if buffer[position] != rune('f') {
						goto l202
					}
					position++
					if buffer[position] != rune('a') {
						goto l202
					}
					position++
					if buffer[position] != rune('l') {
						goto l202
					}
					position++
					if buffer[position] != rune('s') {
						goto l202
					}
					position++
					if buffer[position] != rune('e') {
						goto l202
					}
					position++
					goto l195
				l202:
					position, tokenIndex = position195, tokenIndex195
					if buffer[position] != rune('i') {
						goto l203
					}
					position++
					if buffer[position] != rune('f') {
						goto l203
					}
					position++
					goto l195
				l203:
					position, tokenIndex = position195, tokenIndex195
					if buffer[position] != rune('t') {
						goto l204
					}
					position++
					if buffer[position] != rune('h') {
						goto l204
					}
					position++
					if buffer[position] != rune('e') {
						goto l204
					}
					position++
					if buffer[position] != rune('n') {
						goto l204
					}
					position++
					goto l195
				l204:
					position, tokenIndex = position195, tokenIndex195
					if buffer[position] != rune('e') {
						goto l205
					}
					position++
					if buffer[position] != rune('l') {
						goto l205
					}
					position++
					if buffer[position] != rune('s') {
						goto l205
					}
					position++
					if buffer[position] != rune('e') {
						goto l205
					}
					position++
					goto l195
				l205:
					position, tokenIndex = position195, tokenIndex195
					if buffer[position] != rune('m') {
						goto l206
					}
					position++
					if buffer[position] != rune('a') {
						goto l206
					}
					position++
					if buffer[position] != rune('t') {
						goto l206
					}
					position++
					if buffer[position] != rune('c') {
						goto l206
					}
					position++
					if buffer[position] != rune('h') {
						goto l206
					}
					position++
					goto l195
				l206:
					position, tokenIndex = position195, tokenIndex195
					if buffer[position] != rune('c') {
						goto l207
					}
					position++
					if buffer[position] != rune('a') {
						goto l207
					}
					position++
					if buffer[position] != rune('s') {
						goto l207
					}
					position++
					if buffer[position] != rune('e') {
						goto l207
					}
					position++
					goto l195
				l207:
					position, tokenIndex = position195, tokenIndex195
					if buffer[position] != rune('f') {
						goto l208
					}
					position++
					if buffer[position] != rune('u') {
						goto l208
					}
					position++
					if buffer[position] != rune('n') {
						goto l208
					}
					position++
					if buffer[position] != rune('c') {
						goto l208
					}
					position++
					goto l195
				l208:
					position, tokenIndex = position195, tokenIndex195
					if buffer[position] != rune('F') {
						goto l193
					}
					position++
					if buffer[position] != rune('O') {
						goto l193
					}
					position++
					if buffer[position] != rune('L') {
						goto l193
					}
					position++
					if buffer[position] != rune('D') {
						goto l193
					}
					position++
				}
			l195:
				add(ruleReservedWords, position194)
			}
			return true
		l193:
			position, tokenIndex = position193, tokenIndex193
			return false
		},
		/* 46 Const <- <(Integer / String / ByteVector / Boolean / List)> */
		func() bool {
			position209, tokenIndex209 := position, tokenIndex
			{
				position210 := position
				{
					position211, tokenIndex211 := position, tokenIndex
					if !_rules[ruleInteger]() {
						goto l212
					}
					goto l211
				l212:
					position, tokenIndex = position211, tokenIndex211
					if !_rules[ruleString]() {
						goto l213
					}
					goto l211
				l213:
					position, tokenIndex = position211, tokenIndex211
					if !_rules[ruleByteVector]() {
						goto l214
					}
					goto l211
				l214:
					position, tokenIndex = position211, tokenIndex211
					if !_rules[ruleBoolean]() {
						goto l215
					}
					goto l211
				l215:
					position, tokenIndex = position211, tokenIndex211
					if !_rules[ruleList]() {
						goto l209
					}
				}
			l211:
				add(ruleConst, position210)
			}
			return true
		l209:
			position, tokenIndex = position209, tokenIndex209
			return false
		},
		/* 47 Identifier <- <((!ReservedWords ([A-Z] / [a-z] / ('_' &([A-Z] / [a-z]))) ([A-Z] / [a-z] / [0-9] / ('_' !'_'))*) / (ReservedWords ([A-Z] / [a-z] / [0-9] / ('_' !'_'))+))> */
		func() bool {
			position216, tokenIndex216 := position, tokenIndex
			{
				position217 := position
				{
					position218, tokenIndex218 := position, tokenIndex
					{
						position220, tokenIndex220 := position, tokenIndex
						if !_rules[ruleReservedWords]() {
							goto l220
						}
						goto l219
					l220:
						position, tokenIndex = position220, tokenIndex220
					}
					{
						position221, tokenIndex221 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l222
						}
						position++
						goto l221
					l222:
						position, tokenIndex = position221, tokenIndex221
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l223
						}
						position++
						goto l221
					l223:
						position, tokenIndex = position221, tokenIndex221
						if buffer[position] != rune('_') {
							goto l219
						}
						position++
						{
							position224, tokenIndex224 := position, tokenIndex
							{
								position225, tokenIndex225 := position, tokenIndex
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l226
								}
								position++
								goto l225
							l226:
								position, tokenIndex = position225, tokenIndex225
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l219
								}
								position++
							}
						l225:
							position, tokenIndex = position224, tokenIndex224
						}
					}
				l221:
				l227:
					{
						position228, tokenIndex228 := position, tokenIndex
						{
							position229, tokenIndex229 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l230
							}
							position++
							goto l229
						l230:
							position, tokenIndex = position229, tokenIndex229
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l231
							}
							position++
							goto l229
						l231:
							position, tokenIndex = position229, tokenIndex229
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l232
							}
							position++
							goto l229
						l232:
							position, tokenIndex = position229, tokenIndex229
							if buffer[position] != rune('_') {
								goto l228
							}
							position++
							{
								position233, tokenIndex233 := position, tokenIndex
								if buffer[position] != rune('_') {
									goto l233
								}
								position++
								goto l228
							l233:
								position, tokenIndex = position233, tokenIndex233
							}
						}
					l229:
						goto l227
					l228:
						position, tokenIndex = position228, tokenIndex228
					}
					goto l218
				l219:
					position, tokenIndex = position218, tokenIndex218
					if !_rules[ruleReservedWords]() {
						goto l216
					}
					{
						position236, tokenIndex236 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l237
						}
						position++
						goto l236
					l237:
						position, tokenIndex = position236, tokenIndex236
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l238
						}
						position++
						goto l236
					l238:
						position, tokenIndex = position236, tokenIndex236
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l239
						}
						position++
						goto l236
					l239:
						position, tokenIndex = position236, tokenIndex236
						if buffer[position] != rune('_') {
							goto l216
						}
						position++
						{
							position240, tokenIndex240 := position, tokenIndex
							if buffer[position] != rune('_') {
								goto l240
							}
							position++
							goto l216
						l240:
							position, tokenIndex = position240, tokenIndex240
						}
					}
				l236:
				l234:
					{
						position235, tokenIndex235 := position, tokenIndex
						{
							position241, tokenIndex241 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l242
							}
							position++
							goto l241
						l242:
							position, tokenIndex = position241, tokenIndex241
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l243
							}
							position++
							goto l241
						l243:
							position, tokenIndex = position241, tokenIndex241
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l244
							}
							position++
							goto l241
						l244:
							position, tokenIndex = position241, tokenIndex241
							if buffer[position] != rune('_') {
								goto l235
							}
							position++
							{
								position245, tokenIndex245 := position, tokenIndex
								if buffer[position] != rune('_') {
									goto l245
								}
								position++
								goto l235
							l245:
								position, tokenIndex = position245, tokenIndex245
							}
						}
					l241:
						goto l234
					l235:
						position, tokenIndex = position235, tokenIndex235
					}
				}
			l218:
				add(ruleIdentifier, position217)
			}
			return true
		l216:
			position, tokenIndex = position216, tokenIndex216
			return false
		},
		/* 48 Type <- <(([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])*)> */
		func() bool {
			position246, tokenIndex246 := position, tokenIndex
			{
				position247 := position
				{
					position248, tokenIndex248 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l249
					}
					position++
					goto l248
				l249:
					position, tokenIndex = position248, tokenIndex248
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l246
					}
					position++
				}
			l248:
			l250:
				{
					position251, tokenIndex251 := position, tokenIndex
					{
						position252, tokenIndex252 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l253
						}
						position++
						goto l252
					l253:
						position, tokenIndex = position252, tokenIndex252
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l254
						}
						position++
						goto l252
					l254:
						position, tokenIndex = position252, tokenIndex252
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l251
						}
						position++
					}
				l252:
					goto l250
				l251:
					position, tokenIndex = position251, tokenIndex251
				}
				add(ruleType, position247)
			}
			return true
		l246:
			position, tokenIndex = position246, tokenIndex246
			return false
		},
		/* 49 GenericType <- <(Type _ '[' _ Types _ ']')> */
		func() bool {
			position255, tokenIndex255 := position, tokenIndex
			{
				position256 := position
				if !_rules[ruleType]() {
					goto l255
				}
				if !_rules[rule_]() {
					goto l255
				}
				if buffer[position] != rune('[') {
					goto l255
				}
				position++
				if !_rules[rule_]() {
					goto l255
				}
				if !_rules[ruleTypes]() {
					goto l255
				}
				if !_rules[rule_]() {
					goto l255
				}
				if buffer[position] != rune(']') {
					goto l255
				}
				position++
				add(ruleGenericType, position256)
			}
			return true
		l255:
			position, tokenIndex = position255, tokenIndex255
			return false
		},
		/* 50 TupleType <- <('(' _ Types _ (',' _ Types)+ _ ')')> */
		func() bool {
			position257, tokenIndex257 := position, tokenIndex
			{
				position258 := position
				if buffer[position] != rune('(') {
					goto l257
				}
				position++
				if !_rules[rule_]() {
					goto l257
				}
				if !_rules[ruleTypes]() {
					goto l257
				}
				if !_rules[rule_]() {
					goto l257
				}
				if buffer[position] != rune(',') {
					goto l257
				}
				position++
				if !_rules[rule_]() {
					goto l257
				}
				if !_rules[ruleTypes]() {
					goto l257
				}
			l259:
				{
					position260, tokenIndex260 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l260
					}
					position++
					if !_rules[rule_]() {
						goto l260
					}
					if !_rules[ruleTypes]() {
						goto l260
					}
					goto l259
				l260:
					position, tokenIndex = position260, tokenIndex260
				}
				if !_rules[rule_]() {
					goto l257
				}
				if buffer[position] != rune(')') {
					goto l257
				}
				position++
				add(ruleTupleType, position258)
			}
			return true
		l257:
			position, tokenIndex = position257, tokenIndex257
			return false
		},
		/* 51 Types <- <((GenericType / TupleType / Type) (_ '|' _ Types)?)> */
		func() bool {
			position261, tokenIndex261 := position, tokenIndex
			{
				position262 := position
				{
					position263, tokenIndex263 := position, tokenIndex
					if !_rules[ruleGenericType]() {
						goto l264
					}
					goto l263
				l264:
					position, tokenIndex = position263, tokenIndex263
					if !_rules[ruleTupleType]() {
						goto l265
					}
					goto l263
				l265:
					position, tokenIndex = position263, tokenIndex263
					if !_rules[ruleType]() {
						goto l261
					}
				}
			l263:
				{
					position266, tokenIndex266 := position, tokenIndex
					if !_rules[rule_]() {
						goto l266
					}
					if buffer[position] != rune('|') {
						goto l266
					}
					position++
					if !_rules[rule_]() {
						goto l266
					}
					if !_rules[ruleTypes]() {
						goto l266
					}
					goto l267
				l266:
					position, tokenIndex = position266, tokenIndex266
				}
			l267:
				add(ruleTypes, position262)
			}
			return true
		l261:
			position, tokenIndex = position261, tokenIndex261
			return false
		},
		/* 52 Base16 <- <('b' 'a' 's' 'e' '1' '6' '\'' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')* '\'')> */
		func() bool {
			position268, tokenIndex268 := position, tokenIndex
			{
				position269 := position
				if buffer[position] != rune('b') {
					goto l268
				}
				position++
				if buffer[position] != rune('a') {
					goto l268
				}
				position++
				if buffer[position] != rune('s') {
					goto l268
				}
				position++
				if buffer[position] != rune('e') {
					goto l268
				}
				position++
				if buffer[position] != rune('1') {
					goto l268
				}
				position++
				if buffer[position] != rune('6') {
					goto l268
				}
				position++
				if buffer[position] != rune('\'') {
					goto l268
				}
				position++
			l270:
				{
					position271, tokenIndex271 := position, tokenIndex
					{
						position272, tokenIndex272 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l273
						}
						position++
						goto l272
					l273:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('A') {
							goto l274
						}
						position++
						goto l272
					l274:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('B') {
							goto l275
						}
						position++
						goto l272
					l275:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('C') {
							goto l276
						}
						position++
						goto l272
					l276:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('D') {
							goto l277
						}
						position++
						goto l272
					l277:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('E') {
							goto l278
						}
						position++
						goto l272
					l278:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('F') {
							goto l279
						}
						position++
						goto l272
					l279:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('a') {
							goto l280
						}
						position++
						goto l272
					l280:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('b') {
							goto l281
						}
						position++
						goto l272
					l281:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('c') {
							goto l282
						}
						position++
						goto l272
					l282:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('d') {
							goto l283
						}
						position++
						goto l272
					l283:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('e') {
							goto l284
						}
						position++
						goto l272
					l284:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('f') {
							goto l271
						}
						position++
					}
				l272:
					goto l270
				l271:
					position, tokenIndex = position271, tokenIndex271
				}
				if buffer[position] != rune('\'') {
					goto l268
				}
				position++
				add(ruleBase16, position269)
			}
			return true
		l268:
			position, tokenIndex = position268, tokenIndex268
			return false
		},
		/* 53 Base58 <- <('b' 'a' 's' 'e' '5' '8' '\'' ('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'J' / 'K' / 'L' / 'M' / 'N' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z')* '\'')> */
		func() bool {
			position285, tokenIndex285 := position, tokenIndex
			{
				position286 := position
				if buffer[position] != rune('b') {
					goto l285
				}
				position++
				if buffer[position] != rune('a') {
					goto l285
				}
				position++
				if buffer[position] != rune('s') {
					goto l285
				}
				position++
				if buffer[position] != rune('e') {
					goto l285
				}
				position++
				if buffer[position] != rune('5') {
					goto l285
				}
				position++
				if buffer[position] != rune('8') {
					goto l285
				}
				position++
				if buffer[position] != rune('\'') {
					goto l285
				}
				position++
			l287:
				{
					position288, tokenIndex288 := position, tokenIndex
					{
						position289, tokenIndex289 := position, tokenIndex
						if buffer[position] != rune('1') {
							goto l290
						}
						position++
						goto l289
					l290:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('2') {
							goto l291
						}
						position++
						goto l289
					l291:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('3') {
							goto l292
						}
						position++
						goto l289
					l292:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('4') {
							goto l293
						}
						position++
						goto l289
					l293:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('5') {
							goto l294
						}
						position++
						goto l289
					l294:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('6') {
							goto l295
						}
						position++
						goto l289
					l295:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('7') {
							goto l296
						}
						position++
						goto l289
					l296:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('8') {
							goto l297
						}
						position++
						goto l289
					l297:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('9') {
							goto l298
						}
						position++
						goto l289
					l298:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('A') {
							goto l299
						}
						position++
						goto l289
					l299:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('B') {
							goto l300
						}
						position++
						goto l289
					l300:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('C') {
							goto l301
						}
						position++
						goto l289
					l301:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('D') {
							goto l302
						}
						position++
						goto l289
					l302:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('E') {
							goto l303
						}
						position++
						goto l289
					l303:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('F') {
							goto l304
						}
						position++
						goto l289
					l304:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('G') {
							goto l305
						}
						position++
						goto l289
					l305:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('H') {
							goto l306
						}
						position++
						goto l289
					l306:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('J') {
							goto l307
						}
						position++
						goto l289
					l307:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('K') {
							goto l308
						}
						position++
						goto l289
					l308:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('L') {
							goto l309
						}
						position++
						goto l289
					l309:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('M') {
							goto l310
						}
						position++
						goto l289
					l310:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('N') {
							goto l311
						}
						position++
						goto l289
					l311:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('P') {
							goto l312
						}
						position++
						goto l289
					l312:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('Q') {
							goto l313
						}
						position++
						goto l289
					l313:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('R') {
							goto l314
						}
						position++
						goto l289
					l314:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('S') {
							goto l315
						}
						position++
						goto l289
					l315:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('T') {
							goto l316
						}
						position++
						goto l289
					l316:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('U') {
							goto l317
						}
						position++
						goto l289
					l317:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('V') {
							goto l318
						}
						position++
						goto l289
					l318:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('W') {
							goto l319
						}
						position++
						goto l289
					l319:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('X') {
							goto l320
						}
						position++
						goto l289
					l320:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('Y') {
							goto l321
						}
						position++
						goto l289
					l321:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('Z') {
							goto l322
						}
						position++
						goto l289
					l322:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('a') {
							goto l323
						}
						position++
						goto l289
					l323:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('b') {
							goto l324
						}
						position++
						goto l289
					l324:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('c') {
							goto l325
						}
						position++
						goto l289
					l325:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('d') {
							goto l326
						}
						position++
						goto l289
					l326:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('e') {
							goto l327
						}
						position++
						goto l289
					l327:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('f') {
							goto l328
						}
						position++
						goto l289
					l328:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('g') {
							goto l329
						}
						position++
						goto l289
					l329:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('h') {
							goto l330
						}
						position++
						goto l289
					l330:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('i') {
							goto l331
						}
						position++
						goto l289
					l331:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('j') {
							goto l332
						}
						position++
						goto l289
					l332:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('k') {
							goto l333
						}
						position++
						goto l289
					l333:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('m') {
							goto l334
						}
						position++
						goto l289
					l334:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('n') {
							goto l335
						}
						position++
						goto l289
					l335:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('o') {
							goto l336
						}
						position++
						goto l289
					l336:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('p') {
							goto l337
						}
						position++
						goto l289
					l337:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('q') {
							goto l338
						}
						position++
						goto l289
					l338:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('r') {
							goto l339
						}
						position++
						goto l289
					l339:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('s') {
							goto l340
						}
						position++
						goto l289
					l340:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('t') {
							goto l341
						}
						position++
						goto l289
					l341:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('u') {
							goto l342
						}
						position++
						goto l289
					l342:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('v') {
							goto l343
						}
						position++
						goto l289
					l343:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('w') {
							goto l344
						}
						position++
						goto l289
					l344:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('x') {
							goto l345
						}
						position++
						goto l289
					l345:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('y') {
							goto l346
						}
						position++
						goto l289
					l346:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('z') {
							goto l288
						}
						position++
					}
				l289:
					goto l287
				l288:
					position, tokenIndex = position288, tokenIndex288
				}
				if buffer[position] != rune('\'') {
					goto l285
				}
				position++
				add(ruleBase58, position286)
			}
			return true
		l285:
			position, tokenIndex = position285, tokenIndex285
			return false
		},
		/* 54 Base64 <- <('b' 'a' 's' 'e' '6' '4' '\'' ('A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'I' / 'J' / 'K' / 'L' / 'M' / 'N' / 'O' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '0' / '1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / '+' / '/' / '=')* '\'')> */
		func() bool {
			position347, tokenIndex347 := position, tokenIndex
			{
				position348 := position
				if buffer[position] != rune('b') {
					goto l347
				}
				position++
				if buffer[position] != rune('a') {
					goto l347
				}
				position++
				if buffer[position] != rune('s') {
					goto l347
				}
				position++
				if buffer[position] != rune('e') {
					goto l347
				}
				position++
				if buffer[position] != rune('6') {
					goto l347
				}
				position++
				if buffer[position] != rune('4') {
					goto l347
				}
				position++
				if buffer[position] != rune('\'') {
					goto l347
				}
				position++
			l349:
				{
					position350, tokenIndex350 := position, tokenIndex
					{
						position351, tokenIndex351 := position, tokenIndex
						if buffer[position] != rune('A') {
							goto l352
						}
						position++
						goto l351
					l352:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('B') {
							goto l353
						}
						position++
						goto l351
					l353:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('C') {
							goto l354
						}
						position++
						goto l351
					l354:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('D') {
							goto l355
						}
						position++
						goto l351
					l355:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('E') {
							goto l356
						}
						position++
						goto l351
					l356:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('F') {
							goto l357
						}
						position++
						goto l351
					l357:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('G') {
							goto l358
						}
						position++
						goto l351
					l358:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('H') {
							goto l359
						}
						position++
						goto l351
					l359:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('I') {
							goto l360
						}
						position++
						goto l351
					l360:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('J') {
							goto l361
						}
						position++
						goto l351
					l361:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('K') {
							goto l362
						}
						position++
						goto l351
					l362:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('L') {
							goto l363
						}
						position++
						goto l351
					l363:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('M') {
							goto l364
						}
						position++
						goto l351
					l364:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('N') {
							goto l365
						}
						position++
						goto l351
					l365:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('O') {
							goto l366
						}
						position++
						goto l351
					l366:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('P') {
							goto l367
						}
						position++
						goto l351
					l367:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('Q') {
							goto l368
						}
						position++
						goto l351
					l368:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('R') {
							goto l369
						}
						position++
						goto l351
					l369:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('S') {
							goto l370
						}
						position++
						goto l351
					l370:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('T') {
							goto l371
						}
						position++
						goto l351
					l371:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('U') {
							goto l372
						}
						position++
						goto l351
					l372:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('V') {
							goto l373
						}
						position++
						goto l351
					l373:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('W') {
							goto l374
						}
						position++
						goto l351
					l374:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('X') {
							goto l375
						}
						position++
						goto l351
					l375:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('Y') {
							goto l376
						}
						position++
						goto l351
					l376:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('Z') {
							goto l377
						}
						position++
						goto l351
					l377:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('a') {
							goto l378
						}
						position++
						goto l351
					l378:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('b') {
							goto l379
						}
						position++
						goto l351
					l379:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('c') {
							goto l380
						}
						position++
						goto l351
					l380:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('d') {
							goto l381
						}
						position++
						goto l351
					l381:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('e') {
							goto l382
						}
						position++
						goto l351
					l382:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('f') {
							goto l383
						}
						position++
						goto l351
					l383:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('g') {
							goto l384
						}
						position++
						goto l351
					l384:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('h') {
							goto l385
						}
						position++
						goto l351
					l385:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('i') {
							goto l386
						}
						position++
						goto l351
					l386:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('j') {
							goto l387
						}
						position++
						goto l351
					l387:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('k') {
							goto l388
						}
						position++
						goto l351
					l388:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('l') {
							goto l389
						}
						position++
						goto l351
					l389:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('m') {
							goto l390
						}
						position++
						goto l351
					l390:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('n') {
							goto l391
						}
						position++
						goto l351
					l391:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('o') {
							goto l392
						}
						position++
						goto l351
					l392:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('p') {
							goto l393
						}
						position++
						goto l351
					l393:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('q') {
							goto l394
						}
						position++
						goto l351
					l394:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('r') {
							goto l395
						}
						position++
						goto l351
					l395:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('s') {
							goto l396
						}
						position++
						goto l351
					l396:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('t') {
							goto l397
						}
						position++
						goto l351
					l397:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('u') {
							goto l398
						}
						position++
						goto l351
					l398:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('v') {
							goto l399
						}
						position++
						goto l351
					l399:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('w') {
							goto l400
						}
						position++
						goto l351
					l400:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('x') {
							goto l401
						}
						position++
						goto l351
					l401:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('y') {
							goto l402
						}
						position++
						goto l351
					l402:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('z') {
							goto l403
						}
						position++
						goto l351
					l403:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('0') {
							goto l404
						}
						position++
						goto l351
					l404:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('1') {
							goto l405
						}
						position++
						goto l351
					l405:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('2') {
							goto l406
						}
						position++
						goto l351
					l406:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('3') {
							goto l407
						}
						position++
						goto l351
					l407:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('4') {
							goto l408
						}
						position++
						goto l351
					l408:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('5') {
							goto l409
						}
						position++
						goto l351
					l409:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('6') {
							goto l410
						}
						position++
						goto l351
					l410:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('7') {
							goto l411
						}
						position++
						goto l351
					l411:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('8') {
							goto l412
						}
						position++
						goto l351
					l412:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('9') {
							goto l413
						}
						position++
						goto l351
					l413:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('+') {
							goto l414
						}
						position++
						goto l351
					l414:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('/') {
							goto l415
						}
						position++
						goto l351
					l415:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('=') {
							goto l350
						}
						position++
					}
				l351:
					goto l349
				l350:
					position, tokenIndex = position350, tokenIndex350
				}
				if buffer[position] != rune('\'') {
					goto l347
				}
				position++
				add(ruleBase64, position348)
			}
			return true
		l347:
			position, tokenIndex = position347, tokenIndex347
			return false
		},
		/* 55 ByteVector <- <(Base16 / Base58 / Base64)> */
		func() bool {
			position416, tokenIndex416 := position, tokenIndex
			{
				position417 := position
				{
					position418, tokenIndex418 := position, tokenIndex
					if !_rules[ruleBase16]() {
						goto l419
					}
					goto l418
				l419:
					position, tokenIndex = position418, tokenIndex418
					if !_rules[ruleBase58]() {
						goto l420
					}
					goto l418
				l420:
					position, tokenIndex = position418, tokenIndex418
					if !_rules[ruleBase64]() {
						goto l416
					}
				}
			l418:
				add(ruleByteVector, position417)
			}
			return true
		l416:
			position, tokenIndex = position416, tokenIndex416
			return false
		},
		/* 56 Boolean <- <(('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e'))> */
		func() bool {
			position421, tokenIndex421 := position, tokenIndex
			{
				position422 := position
				{
					position423, tokenIndex423 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l424
					}
					position++
					if buffer[position] != rune('r') {
						goto l424
					}
					position++
					if buffer[position] != rune('u') {
						goto l424
					}
					position++
					if buffer[position] != rune('e') {
						goto l424
					}
					position++
					goto l423
				l424:
					position, tokenIndex = position423, tokenIndex423
					if buffer[position] != rune('f') {
						goto l421
					}
					position++
					if buffer[position] != rune('a') {
						goto l421
					}
					position++
					if buffer[position] != rune('l') {
						goto l421
					}
					position++
					if buffer[position] != rune('s') {
						goto l421
					}
					position++
					if buffer[position] != rune('e') {
						goto l421
					}
					position++
				}
			l423:
				add(ruleBoolean, position422)
			}
			return true
		l421:
			position, tokenIndex = position421, tokenIndex421
			return false
		},
		/* 57 String <- <('"' (UnicodeChar / EscapedChar / Char)* '"')> */
		func() bool {
			position425, tokenIndex425 := position, tokenIndex
			{
				position426 := position
				if buffer[position] != rune('"') {
					goto l425
				}
				position++
			l427:
				{
					position428, tokenIndex428 := position, tokenIndex
					{
						position429, tokenIndex429 := position, tokenIndex
						if !_rules[ruleUnicodeChar]() {
							goto l430
						}
						goto l429
					l430:
						position, tokenIndex = position429, tokenIndex429
						if !_rules[ruleEscapedChar]() {
							goto l431
						}
						goto l429
					l431:
						position, tokenIndex = position429, tokenIndex429
						if !_rules[ruleChar]() {
							goto l428
						}
					}
				l429:
					goto l427
				l428:
					position, tokenIndex = position428, tokenIndex428
				}
				if buffer[position] != rune('"') {
					goto l425
				}
				position++
				add(ruleString, position426)
			}
			return true
		l425:
			position, tokenIndex = position425, tokenIndex425
			return false
		},
		/* 58 UnicodeChar <- <('\\' 'u' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')? ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')? ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')?)> */
		func() bool {
			position432, tokenIndex432 := position, tokenIndex
			{
				position433 := position
				if buffer[position] != rune('\\') {
					goto l432
				}
				position++
				if buffer[position] != rune('u') {
					goto l432
				}
				position++
				{
					position434, tokenIndex434 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l435
					}
					position++
					goto l434
				l435:
					position, tokenIndex = position434, tokenIndex434
					if buffer[position] != rune('A') {
						goto l436
					}
					position++
					goto l434
				l436:
					position, tokenIndex = position434, tokenIndex434
					if buffer[position] != rune('B') {
						goto l437
					}
					position++
					goto l434
				l437:
					position, tokenIndex = position434, tokenIndex434
					if buffer[position] != rune('C') {
						goto l438
					}
					position++
					goto l434
				l438:
					position, tokenIndex = position434, tokenIndex434
					if buffer[position] != rune('D') {
						goto l439
					}
					position++
					goto l434
				l439:
					position, tokenIndex = position434, tokenIndex434
					if buffer[position] != rune('E') {
						goto l440
					}
					position++
					goto l434
				l440:
					position, tokenIndex = position434, tokenIndex434
					if buffer[position] != rune('F') {
						goto l441
					}
					position++
					goto l434
				l441:
					position, tokenIndex = position434, tokenIndex434
					if buffer[position] != rune('a') {
						goto l442
					}
					position++
					goto l434
				l442:
					position, tokenIndex = position434, tokenIndex434
					if buffer[position] != rune('b') {
						goto l443
					}
					position++
					goto l434
				l443:
					position, tokenIndex = position434, tokenIndex434
					if buffer[position] != rune('c') {
						goto l444
					}
					position++
					goto l434
				l444:
					position, tokenIndex = position434, tokenIndex434
					if buffer[position] != rune('d') {
						goto l445
					}
					position++
					goto l434
				l445:
					position, tokenIndex = position434, tokenIndex434
					if buffer[position] != rune('e') {
						goto l446
					}
					position++
					goto l434
				l446:
					position, tokenIndex = position434, tokenIndex434
					if buffer[position] != rune('f') {
						goto l432
					}
					position++
				}
			l434:
				{
					position447, tokenIndex447 := position, tokenIndex
					{
						position449, tokenIndex449 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l450
						}
						position++
						goto l449
					l450:
						position, tokenIndex = position449, tokenIndex449
						if buffer[position] != rune('A') {
							goto l451
						}
						position++
						goto l449
					l451:
						position, tokenIndex = position449, tokenIndex449
						if buffer[position] != rune('B') {
							goto l452
						}
						position++
						goto l449
					l452:
						position, tokenIndex = position449, tokenIndex449
						if buffer[position] != rune('C') {
							goto l453
						}
						position++
						goto l449
					l453:
						position, tokenIndex = position449, tokenIndex449
						if buffer[position] != rune('D') {
							goto l454
						}
						position++
						goto l449
					l454:
						position, tokenIndex = position449, tokenIndex449
						if buffer[position] != rune('E') {
							goto l455
						}
						position++
						goto l449
					l455:
						position, tokenIndex = position449, tokenIndex449
						if buffer[position] != rune('F') {
							goto l456
						}
						position++
						goto l449
					l456:
						position, tokenIndex = position449, tokenIndex449
						if buffer[position] != rune('a') {
							goto l457
						}
						position++
						goto l449
					l457:
						position, tokenIndex = position449, tokenIndex449
						if buffer[position] != rune('b') {
							goto l458
						}
						position++
						goto l449
					l458:
						position, tokenIndex = position449, tokenIndex449
						if buffer[position] != rune('c') {
							goto l459
						}
						position++
						goto l449
					l459:
						position, tokenIndex = position449, tokenIndex449
						if buffer[position] != rune('d') {
							goto l460
						}
						position++
						goto l449
					l460:
						position, tokenIndex = position449, tokenIndex449
						if buffer[position] != rune('e') {
							goto l461
						}
						position++
						goto l449
					l461:
						position, tokenIndex = position449, tokenIndex449
						if buffer[position] != rune('f') {
							goto l447
						}
						position++
					}
				l449:
					goto l448
				l447:
					position, tokenIndex = position447, tokenIndex447
				}
			l448:
				{
					position462, tokenIndex462 := position, tokenIndex
					{
						position464, tokenIndex464 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l465
						}
						position++
						goto l464
					l465:
						position, tokenIndex = position464, tokenIndex464
						if buffer[position] != rune('A') {
							goto l466
						}
						position++
						goto l464
					l466:
						position, tokenIndex = position464, tokenIndex464
						if buffer[position] != rune('B') {
							goto l467
						}
						position++
						goto l464
					l467:
						position, tokenIndex = position464, tokenIndex464
						if buffer[position] != rune('C') {
							goto l468
						}
						position++
						goto l464
					l468:
						position, tokenIndex = position464, tokenIndex464
						if buffer[position] != rune('D') {
							goto l469
						}
						position++
						goto l464
					l469:
						position, tokenIndex = position464, tokenIndex464
						if buffer[position] != rune('E') {
							goto l470
						}
						position++
						goto l464
					l470:
						position, tokenIndex = position464, tokenIndex464
						if buffer[position] != rune('F') {
							goto l471
						}
						position++
						goto l464
					l471:
						position, tokenIndex = position464, tokenIndex464
						if buffer[position] != rune('a') {
							goto l472
						}
						position++
						goto l464
					l472:
						position, tokenIndex = position464, tokenIndex464
						if buffer[position] != rune('b') {
							goto l473
						}
						position++
						goto l464
					l473:
						position, tokenIndex = position464, tokenIndex464
						if buffer[position] != rune('c') {
							goto l474
						}
						position++
						goto l464
					l474:
						position, tokenIndex = position464, tokenIndex464
						if buffer[position] != rune('d') {
							goto l475
						}
						position++
						goto l464
					l475:
						position, tokenIndex = position464, tokenIndex464
						if buffer[position] != rune('e') {
							goto l476
						}
						position++
						goto l464
					l476:
						position, tokenIndex = position464, tokenIndex464
						if buffer[position] != rune('f') {
							goto l462
						}
						position++
					}
				l464:
					goto l463
				l462:
					position, tokenIndex = position462, tokenIndex462
				}
			l463:
				{
					position477, tokenIndex477 := position, tokenIndex
					{
						position479, tokenIndex479 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l480
						}
						position++
						goto l479
					l480:
						position, tokenIndex = position479, tokenIndex479
						if buffer[position] != rune('A') {
							goto l481
						}
						position++
						goto l479
					l481:
						position, tokenIndex = position479, tokenIndex479
						if buffer[position] != rune('B') {
							goto l482
						}
						position++
						goto l479
					l482:
						position, tokenIndex = position479, tokenIndex479
						if buffer[position] != rune('C') {
							goto l483
						}
						position++
						goto l479
					l483:
						position, tokenIndex = position479, tokenIndex479
						if buffer[position] != rune('D') {
							goto l484
						}
						position++
						goto l479
					l484:
						position, tokenIndex = position479, tokenIndex479
						if buffer[position] != rune('E') {
							goto l485
						}
						position++
						goto l479
					l485:
						position, tokenIndex = position479, tokenIndex479
						if buffer[position] != rune('F') {
							goto l486
						}
						position++
						goto l479
					l486:
						position, tokenIndex = position479, tokenIndex479
						if buffer[position] != rune('a') {
							goto l487
						}
						position++
						goto l479
					l487:
						position, tokenIndex = position479, tokenIndex479
						if buffer[position] != rune('b') {
							goto l488
						}
						position++
						goto l479
					l488:
						position, tokenIndex = position479, tokenIndex479
						if buffer[position] != rune('c') {
							goto l489
						}
						position++
						goto l479
					l489:
						position, tokenIndex = position479, tokenIndex479
						if buffer[position] != rune('d') {
							goto l490
						}
						position++
						goto l479
					l490:
						position, tokenIndex = position479, tokenIndex479
						if buffer[position] != rune('e') {
							goto l491
						}
						position++
						goto l479
					l491:
						position, tokenIndex = position479, tokenIndex479
						if buffer[position] != rune('f') {
							goto l477
						}
						position++
					}
				l479:
					goto l478
				l477:
					position, tokenIndex = position477, tokenIndex477
				}
			l478:
				add(ruleUnicodeChar, position433)
			}
			return true
		l432:
			position, tokenIndex = position432, tokenIndex432
			return false
		},
		/* 59 EscapedChar <- <('\\' .)> */
		func() bool {
			position492, tokenIndex492 := position, tokenIndex
			{
				position493 := position
				if buffer[position] != rune('\\') {
					goto l492
				}
				position++
				if !matchDot() {
					goto l492
				}
				add(ruleEscapedChar, position493)
			}
			return true
		l492:
			position, tokenIndex = position492, tokenIndex492
			return false
		},
		/* 60 Char <- <(!'"' .)> */
		func() bool {
			position494, tokenIndex494 := position, tokenIndex
			{
				position495 := position
				{
					position496, tokenIndex496 := position, tokenIndex
					if buffer[position] != rune('"') {
						goto l496
					}
					position++
					goto l494
				l496:
					position, tokenIndex = position496, tokenIndex496
				}
				if !matchDot() {
					goto l494
				}
				add(ruleChar, position495)
			}
			return true
		l494:
			position, tokenIndex = position494, tokenIndex494
			return false
		},
		/* 61 Integer <- <([0-9] ('_' &[0-9])?)+> */
		func() bool {
			position497, tokenIndex497 := position, tokenIndex
			{
				position498 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l497
				}
				position++
				{
					position501, tokenIndex501 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l501
					}
					position++
					{
						position503, tokenIndex503 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l501
						}
						position++
						position, tokenIndex = position503, tokenIndex503
					}
					goto l502
				l501:
					position, tokenIndex = position501, tokenIndex501
				}
			l502:
			l499:
				{
					position500, tokenIndex500 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l500
					}
					position++
					{
						position504, tokenIndex504 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l504
						}
						position++
						{
							position506, tokenIndex506 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l504
							}
							position++
							position, tokenIndex = position506, tokenIndex506
						}
						goto l505
					l504:
						position, tokenIndex = position504, tokenIndex504
					}
				l505:
					goto l499
				l500:
					position, tokenIndex = position500, tokenIndex500
				}
				add(ruleInteger, position498)
			}
			return true
		l497:
			position, tokenIndex = position497, tokenIndex497
			return false
		},
		/* 62 List <- <('[' _ ExprSeq? _ ']')> */
		func() bool {
			position507, tokenIndex507 := position, tokenIndex
			{
				position508 := position
				if buffer[position] != rune('[') {
					goto l507
				}
				position++
				if !_rules[rule_]() {
					goto l507
				}
				{
					position509, tokenIndex509 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l509
					}
					goto l510
				l509:
					position, tokenIndex = position509, tokenIndex509
				}
			l510:
				if !_rules[rule_]() {
					goto l507
				}
				if buffer[position] != rune(']') {
					goto l507
				}
				position++
				add(ruleList, position508)
			}
			return true
		l507:
			position, tokenIndex = position507, tokenIndex507
			return false
		},
		/* 63 ExprSeq <- <(Expr (_ ',' _ ExprSeq)?)> */
		func() bool {
			position511, tokenIndex511 := position, tokenIndex
			{
				position512 := position
				if !_rules[ruleExpr]() {
					goto l511
				}
				{
					position513, tokenIndex513 := position, tokenIndex
					if !_rules[rule_]() {
						goto l513
					}
					if buffer[position] != rune(',') {
						goto l513
					}
					position++
					if !_rules[rule_]() {
						goto l513
					}
					if !_rules[ruleExprSeq]() {
						goto l513
					}
					goto l514
				l513:
					position, tokenIndex = position513, tokenIndex513
				}
			l514:
				add(ruleExprSeq, position512)
			}
			return true
		l511:
			position, tokenIndex = position511, tokenIndex511
			return false
		},
		/* 64 AtomExpr <- <(UnaryOp? _ (FoldMacro / GettableExpr / IfWithError / Match / Const / Tuple))> */
		func() bool {
			position515, tokenIndex515 := position, tokenIndex
			{
				position516 := position
				{
					position517, tokenIndex517 := position, tokenIndex
					if !_rules[ruleUnaryOp]() {
						goto l517
					}
					goto l518
				l517:
					position, tokenIndex = position517, tokenIndex517
				}
			l518:
				if !_rules[rule_]() {
					goto l515
				}
				{
					position519, tokenIndex519 := position, tokenIndex
					if !_rules[ruleFoldMacro]() {
						goto l520
					}
					goto l519
				l520:
					position, tokenIndex = position519, tokenIndex519
					if !_rules[ruleGettableExpr]() {
						goto l521
					}
					goto l519
				l521:
					position, tokenIndex = position519, tokenIndex519
					if !_rules[ruleIfWithError]() {
						goto l522
					}
					goto l519
				l522:
					position, tokenIndex = position519, tokenIndex519
					if !_rules[ruleMatch]() {
						goto l523
					}
					goto l519
				l523:
					position, tokenIndex = position519, tokenIndex519
					if !_rules[ruleConst]() {
						goto l524
					}
					goto l519
				l524:
					position, tokenIndex = position519, tokenIndex519
					if !_rules[ruleTuple]() {
						goto l515
					}
				}
			l519:
				add(ruleAtomExpr, position516)
			}
			return true
		l515:
			position, tokenIndex = position515, tokenIndex515
			return false
		},
		/* 65 MultGroupOpAtom <- <(AtomExpr (_ MultGroupOp _ AtomExpr)*)> */
		func() bool {
			position525, tokenIndex525 := position, tokenIndex
			{
				position526 := position
				if !_rules[ruleAtomExpr]() {
					goto l525
				}
			l527:
				{
					position528, tokenIndex528 := position, tokenIndex
					if !_rules[rule_]() {
						goto l528
					}
					if !_rules[ruleMultGroupOp]() {
						goto l528
					}
					if !_rules[rule_]() {
						goto l528
					}
					if !_rules[ruleAtomExpr]() {
						goto l528
					}
					goto l527
				l528:
					position, tokenIndex = position528, tokenIndex528
				}
				add(ruleMultGroupOpAtom, position526)
			}
			return true
		l525:
			position, tokenIndex = position525, tokenIndex525
			return false
		},
		/* 66 SumGroupOpAtom <- <(MultGroupOpAtom (_ SumGroupOp _ MultGroupOpAtom)*)> */
		func() bool {
			position529, tokenIndex529 := position, tokenIndex
			{
				position530 := position
				if !_rules[ruleMultGroupOpAtom]() {
					goto l529
				}
			l531:
				{
					position532, tokenIndex532 := position, tokenIndex
					if !_rules[rule_]() {
						goto l532
					}
					if !_rules[ruleSumGroupOp]() {
						goto l532
					}
					if !_rules[rule_]() {
						goto l532
					}
					if !_rules[ruleMultGroupOpAtom]() {
						goto l532
					}
					goto l531
				l532:
					position, tokenIndex = position532, tokenIndex532
				}
				add(ruleSumGroupOpAtom, position530)
			}
			return true
		l529:
			position, tokenIndex = position529, tokenIndex529
			return false
		},
		/* 67 ConsOpAtom <- <(SumGroupOpAtom (_ ConsOp _ SumGroupOpAtom)*)> */
		func() bool {
			position533, tokenIndex533 := position, tokenIndex
			{
				position534 := position
				if !_rules[ruleSumGroupOpAtom]() {
					goto l533
				}
			l535:
				{
					position536, tokenIndex536 := position, tokenIndex
					if !_rules[rule_]() {
						goto l536
					}
					if !_rules[ruleConsOp]() {
						goto l536
					}
					if !_rules[rule_]() {
						goto l536
					}
					if !_rules[ruleSumGroupOpAtom]() {
						goto l536
					}
					goto l535
				l536:
					position, tokenIndex = position536, tokenIndex536
				}
				add(ruleConsOpAtom, position534)
			}
			return true
		l533:
			position, tokenIndex = position533, tokenIndex533
			return false
		},
		/* 68 CompareGroupOpAtom <- <(ConsOpAtom (_ CompareGroupOp _ ConsOpAtom)*)> */
		func() bool {
			position537, tokenIndex537 := position, tokenIndex
			{
				position538 := position
				if !_rules[ruleConsOpAtom]() {
					goto l537
				}
			l539:
				{
					position540, tokenIndex540 := position, tokenIndex
					if !_rules[rule_]() {
						goto l540
					}
					if !_rules[ruleCompareGroupOp]() {
						goto l540
					}
					if !_rules[rule_]() {
						goto l540
					}
					if !_rules[ruleConsOpAtom]() {
						goto l540
					}
					goto l539
				l540:
					position, tokenIndex = position540, tokenIndex540
				}
				add(ruleCompareGroupOpAtom, position538)
			}
			return true
		l537:
			position, tokenIndex = position537, tokenIndex537
			return false
		},
		/* 69 EqualityGroupOpAtom <- <(CompareGroupOpAtom (_ EqGroupOp _ CompareGroupOpAtom)*)> */
		func() bool {
			position541, tokenIndex541 := position, tokenIndex
			{
				position542 := position
				if !_rules[ruleCompareGroupOpAtom]() {
					goto l541
				}
			l543:
				{
					position544, tokenIndex544 := position, tokenIndex
					if !_rules[rule_]() {
						goto l544
					}
					if !_rules[ruleEqGroupOp]() {
						goto l544
					}
					if !_rules[rule_]() {
						goto l544
					}
					if !_rules[ruleCompareGroupOpAtom]() {
						goto l544
					}
					goto l543
				l544:
					position, tokenIndex = position544, tokenIndex544
				}
				add(ruleEqualityGroupOpAtom, position542)
			}
			return true
		l541:
			position, tokenIndex = position541, tokenIndex541
			return false
		},
		/* 70 AndOpAtom <- <(EqualityGroupOpAtom (_ AndOp _ EqualityGroupOpAtom)*)> */
		func() bool {
			position545, tokenIndex545 := position, tokenIndex
			{
				position546 := position
				if !_rules[ruleEqualityGroupOpAtom]() {
					goto l545
				}
			l547:
				{
					position548, tokenIndex548 := position, tokenIndex
					if !_rules[rule_]() {
						goto l548
					}
					if !_rules[ruleAndOp]() {
						goto l548
					}
					if !_rules[rule_]() {
						goto l548
					}
					if !_rules[ruleEqualityGroupOpAtom]() {
						goto l548
					}
					goto l547
				l548:
					position, tokenIndex = position548, tokenIndex548
				}
				add(ruleAndOpAtom, position546)
			}
			return true
		l545:
			position, tokenIndex = position545, tokenIndex545
			return false
		},
		/* 71 OrOpAtom <- <(AndOpAtom (_ OrOp _ AndOpAtom)*)> */
		func() bool {
			position549, tokenIndex549 := position, tokenIndex
			{
				position550 := position
				if !_rules[ruleAndOpAtom]() {
					goto l549
				}
			l551:
				{
					position552, tokenIndex552 := position, tokenIndex
					if !_rules[rule_]() {
						goto l552
					}
					if !_rules[ruleOrOp]() {
						goto l552
					}
					if !_rules[rule_]() {
						goto l552
					}
					if !_rules[ruleAndOpAtom]() {
						goto l552
					}
					goto l551
				l552:
					position, tokenIndex = position552, tokenIndex552
				}
				add(ruleOrOpAtom, position550)
			}
			return true
		l549:
			position, tokenIndex = position549, tokenIndex549
			return false
		},
		/* 72 Expr <- <OrOpAtom> */
		func() bool {
			position553, tokenIndex553 := position, tokenIndex
			{
				position554 := position
				if !_rules[ruleOrOpAtom]() {
					goto l553
				}
				add(ruleExpr, position554)
			}
			return true
		l553:
			position, tokenIndex = position553, tokenIndex553
			return false
		},
		/* 73 ParExpr <- <('(' _ Expr _ ')')> */
		func() bool {
			position555, tokenIndex555 := position, tokenIndex
			{
				position556 := position
				if buffer[position] != rune('(') {
					goto l555
				}
				position++
				if !_rules[rule_]() {
					goto l555
				}
				if !_rules[ruleExpr]() {
					goto l555
				}
				if !_rules[rule_]() {
					goto l555
				}
				if buffer[position] != rune(')') {
					goto l555
				}
				position++
				add(ruleParExpr, position556)
			}
			return true
		l555:
			position, tokenIndex = position555, tokenIndex555
			return false
		},
		/* 74 GettableExpr <- <((ParExpr / Block / FunctionCall / Identifier) (_ (ListAccess / ('.' _ (FunctionCallAccess / IdentifierAccess / TupleAccess))))*)> */
		func() bool {
			position557, tokenIndex557 := position, tokenIndex
			{
				position558 := position
				{
					position559, tokenIndex559 := position, tokenIndex
					if !_rules[ruleParExpr]() {
						goto l560
					}
					goto l559
				l560:
					position, tokenIndex = position559, tokenIndex559
					if !_rules[ruleBlock]() {
						goto l561
					}
					goto l559
				l561:
					position, tokenIndex = position559, tokenIndex559
					if !_rules[ruleFunctionCall]() {
						goto l562
					}
					goto l559
				l562:
					position, tokenIndex = position559, tokenIndex559
					if !_rules[ruleIdentifier]() {
						goto l557
					}
				}
			l559:
			l563:
				{
					position564, tokenIndex564 := position, tokenIndex
					if !_rules[rule_]() {
						goto l564
					}
					{
						position565, tokenIndex565 := position, tokenIndex
						if !_rules[ruleListAccess]() {
							goto l566
						}
						goto l565
					l566:
						position, tokenIndex = position565, tokenIndex565
						if buffer[position] != rune('.') {
							goto l564
						}
						position++
						if !_rules[rule_]() {
							goto l564
						}
						{
							position567, tokenIndex567 := position, tokenIndex
							if !_rules[ruleFunctionCallAccess]() {
								goto l568
							}
							goto l567
						l568:
							position, tokenIndex = position567, tokenIndex567
							if !_rules[ruleIdentifierAccess]() {
								goto l569
							}
							goto l567
						l569:
							position, tokenIndex = position567, tokenIndex567
							if !_rules[ruleTupleAccess]() {
								goto l564
							}
						}
					l567:
					}
				l565:
					goto l563
				l564:
					position, tokenIndex = position564, tokenIndex564
				}
				add(ruleGettableExpr, position558)
			}
			return true
		l557:
			position, tokenIndex = position557, tokenIndex557
			return false
		},
		/* 75 FunctionCallAccess <- <FunctionCall> */
		func() bool {
			position570, tokenIndex570 := position, tokenIndex
			{
				position571 := position
				if !_rules[ruleFunctionCall]() {
					goto l570
				}
				add(ruleFunctionCallAccess, position571)
			}
			return true
		l570:
			position, tokenIndex = position570, tokenIndex570
			return false
		},
		/* 76 IdentifierAccess <- <Identifier> */
		func() bool {
			position572, tokenIndex572 := position, tokenIndex
			{
				position573 := position
				if !_rules[ruleIdentifier]() {
					goto l572
				}
				add(ruleIdentifierAccess, position573)
			}
			return true
		l572:
			position, tokenIndex = position572, tokenIndex572
			return false
		},
		/* 77 ListAccess <- <('[' _ (Expr / Identifier) _ ']')> */
		func() bool {
			position574, tokenIndex574 := position, tokenIndex
			{
				position575 := position
				if buffer[position] != rune('[') {
					goto l574
				}
				position++
				if !_rules[rule_]() {
					goto l574
				}
				{
					position576, tokenIndex576 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l577
					}
					goto l576
				l577:
					position, tokenIndex = position576, tokenIndex576
					if !_rules[ruleIdentifier]() {
						goto l574
					}
				}
			l576:
				if !_rules[rule_]() {
					goto l574
				}
				if buffer[position] != rune(']') {
					goto l574
				}
				position++
				add(ruleListAccess, position575)
			}
			return true
		l574:
			position, tokenIndex = position574, tokenIndex574
			return false
		},
		/* 78 Block <- <('{' (_ Declaration)* _ Expr _ '}')> */
		func() bool {
			position578, tokenIndex578 := position, tokenIndex
			{
				position579 := position
				if buffer[position] != rune('{') {
					goto l578
				}
				position++
			l580:
				{
					position581, tokenIndex581 := position, tokenIndex
					if !_rules[rule_]() {
						goto l581
					}
					if !_rules[ruleDeclaration]() {
						goto l581
					}
					goto l580
				l581:
					position, tokenIndex = position581, tokenIndex581
				}
				if !_rules[rule_]() {
					goto l578
				}
				if !_rules[ruleExpr]() {
					goto l578
				}
				if !_rules[rule_]() {
					goto l578
				}
				if buffer[position] != rune('}') {
					goto l578
				}
				position++
				add(ruleBlock, position579)
			}
			return true
		l578:
			position, tokenIndex = position578, tokenIndex578
			return false
		},
		/* 79 BlockWithoutPar <- <((_ Declaration)* _ Expr)> */
		func() bool {
			position582, tokenIndex582 := position, tokenIndex
			{
				position583 := position
			l584:
				{
					position585, tokenIndex585 := position, tokenIndex
					if !_rules[rule_]() {
						goto l585
					}
					if !_rules[ruleDeclaration]() {
						goto l585
					}
					goto l584
				l585:
					position, tokenIndex = position585, tokenIndex585
				}
				if !_rules[rule_]() {
					goto l582
				}
				if !_rules[ruleExpr]() {
					goto l582
				}
				add(ruleBlockWithoutPar, position583)
			}
			return true
		l582:
			position, tokenIndex = position582, tokenIndex582
			return false
		},
		/* 80 FunctionCall <- <(Identifier _ '(' _ ExprSeq? _ ')')> */
		func() bool {
			position586, tokenIndex586 := position, tokenIndex
			{
				position587 := position
				if !_rules[ruleIdentifier]() {
					goto l586
				}
				if !_rules[rule_]() {
					goto l586
				}
				if buffer[position] != rune('(') {
					goto l586
				}
				position++
				if !_rules[rule_]() {
					goto l586
				}
				{
					position588, tokenIndex588 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l588
					}
					goto l589
				l588:
					position, tokenIndex = position588, tokenIndex588
				}
			l589:
				if !_rules[rule_]() {
					goto l586
				}
				if buffer[position] != rune(')') {
					goto l586
				}
				position++
				add(ruleFunctionCall, position587)
			}
			return true
		l586:
			position, tokenIndex = position586, tokenIndex586
			return false
		},
		/* 81 FoldMacro <- <('F' 'O' 'L' 'D' _ '<' _ Integer _ '>' _ '(' _ Expr _ ',' _ Expr _ ',' _ Identifier _ ')')> */
		func() bool {
			position590, tokenIndex590 := position, tokenIndex
			{
				position591 := position
				if buffer[position] != rune('F') {
					goto l590
				}
				position++
				if buffer[position] != rune('O') {
					goto l590
				}
				position++
				if buffer[position] != rune('L') {
					goto l590
				}
				position++
				if buffer[position] != rune('D') {
					goto l590
				}
				position++
				if !_rules[rule_]() {
					goto l590
				}
				if buffer[position] != rune('<') {
					goto l590
				}
				position++
				if !_rules[rule_]() {
					goto l590
				}
				if !_rules[ruleInteger]() {
					goto l590
				}
				if !_rules[rule_]() {
					goto l590
				}
				if buffer[position] != rune('>') {
					goto l590
				}
				position++
				if !_rules[rule_]() {
					goto l590
				}
				if buffer[position] != rune('(') {
					goto l590
				}
				position++
				if !_rules[rule_]() {
					goto l590
				}
				if !_rules[ruleExpr]() {
					goto l590
				}
				if !_rules[rule_]() {
					goto l590
				}
				if buffer[position] != rune(',') {
					goto l590
				}
				position++
				if !_rules[rule_]() {
					goto l590
				}
				if !_rules[ruleExpr]() {
					goto l590
				}
				if !_rules[rule_]() {
					goto l590
				}
				if buffer[position] != rune(',') {
					goto l590
				}
				position++
				if !_rules[rule_]() {
					goto l590
				}
				if !_rules[ruleIdentifier]() {
					goto l590
				}
				if !_rules[rule_]() {
					goto l590
				}
				if buffer[position] != rune(')') {
					goto l590
				}
				position++
				add(ruleFoldMacro, position591)
			}
			return true
		l590:
			position, tokenIndex = position590, tokenIndex590
			return false
		},
		/* 82 IfWithError <- <(If / FailedIfWithoutElse)> */
		func() bool {
			position592, tokenIndex592 := position, tokenIndex
			{
				position593 := position
				{
					position594, tokenIndex594 := position, tokenIndex
					if !_rules[ruleIf]() {
						goto l595
					}
					goto l594
				l595:
					position, tokenIndex = position594, tokenIndex594
					if !_rules[ruleFailedIfWithoutElse]() {
						goto l592
					}
				}
			l594:
				add(ruleIfWithError, position593)
			}
			return true
		l592:
			position, tokenIndex = position592, tokenIndex592
			return false
		},
		/* 83 If <- <('i' 'f' _ Expr _ ('t' 'h' 'e' 'n') _ Expr _ ('e' 'l' 's' 'e') _ Expr)> */
		func() bool {
			position596, tokenIndex596 := position, tokenIndex
			{
				position597 := position
				if buffer[position] != rune('i') {
					goto l596
				}
				position++
				if buffer[position] != rune('f') {
					goto l596
				}
				position++
				if !_rules[rule_]() {
					goto l596
				}
				if !_rules[ruleExpr]() {
					goto l596
				}
				if !_rules[rule_]() {
					goto l596
				}
				if buffer[position] != rune('t') {
					goto l596
				}
				position++
				if buffer[position] != rune('h') {
					goto l596
				}
				position++
				if buffer[position] != rune('e') {
					goto l596
				}
				position++
				if buffer[position] != rune('n') {
					goto l596
				}
				position++
				if !_rules[rule_]() {
					goto l596
				}
				if !_rules[ruleExpr]() {
					goto l596
				}
				if !_rules[rule_]() {
					goto l596
				}
				if buffer[position] != rune('e') {
					goto l596
				}
				position++
				if buffer[position] != rune('l') {
					goto l596
				}
				position++
				if buffer[position] != rune('s') {
					goto l596
				}
				position++
				if buffer[position] != rune('e') {
					goto l596
				}
				position++
				if !_rules[rule_]() {
					goto l596
				}
				if !_rules[ruleExpr]() {
					goto l596
				}
				add(ruleIf, position597)
			}
			return true
		l596:
			position, tokenIndex = position596, tokenIndex596
			return false
		},
		/* 84 FailedIfWithoutElse <- <('i' 'f' _ Expr _ ('t' 'h' 'e' 'n') _ Expr)> */
		func() bool {
			position598, tokenIndex598 := position, tokenIndex
			{
				position599 := position
				if buffer[position] != rune('i') {
					goto l598
				}
				position++
				if buffer[position] != rune('f') {
					goto l598
				}
				position++
				if !_rules[rule_]() {
					goto l598
				}
				if !_rules[ruleExpr]() {
					goto l598
				}
				if !_rules[rule_]() {
					goto l598
				}
				if buffer[position] != rune('t') {
					goto l598
				}
				position++
				if buffer[position] != rune('h') {
					goto l598
				}
				position++
				if buffer[position] != rune('e') {
					goto l598
				}
				position++
				if buffer[position] != rune('n') {
					goto l598
				}
				position++
				if !_rules[rule_]() {
					goto l598
				}
				if !_rules[ruleExpr]() {
					goto l598
				}
				add(ruleFailedIfWithoutElse, position599)
			}
			return true
		l598:
			position, tokenIndex = position598, tokenIndex598
			return false
		},
		/* 85 Match <- <('m' 'a' 't' 'c' 'h' _ Expr _ '{' (_ MatchCase)+ _ '}')> */
		func() bool {
			position600, tokenIndex600 := position, tokenIndex
			{
				position601 := position
				if buffer[position] != rune('m') {
					goto l600
				}
				position++
				if buffer[position] != rune('a') {
					goto l600
				}
				position++
				if buffer[position] != rune('t') {
					goto l600
				}
				position++
				if buffer[position] != rune('c') {
					goto l600
				}
				position++
				if buffer[position] != rune('h') {
					goto l600
				}
				position++
				if !_rules[rule_]() {
					goto l600
				}
				if !_rules[ruleExpr]() {
					goto l600
				}
				if !_rules[rule_]() {
					goto l600
				}
				if buffer[position] != rune('{') {
					goto l600
				}
				position++
				if !_rules[rule_]() {
					goto l600
				}
				if !_rules[ruleMatchCase]() {
					goto l600
				}
			l602:
				{
					position603, tokenIndex603 := position, tokenIndex
					if !_rules[rule_]() {
						goto l603
					}
					if !_rules[ruleMatchCase]() {
						goto l603
					}
					goto l602
				l603:
					position, tokenIndex = position603, tokenIndex603
				}
				if !_rules[rule_]() {
					goto l600
				}
				if buffer[position] != rune('}') {
					goto l600
				}
				position++
				add(ruleMatch, position601)
			}
			return true
		l600:
			position, tokenIndex = position600, tokenIndex600
			return false
		},
		/* 86 MatchCase <- <('c' 'a' 's' 'e' _ ((Identifier _ (':' _ Types)?) / DefaultMatchCasePart) _ ('=' '>') _ BlockWithoutPar)> */
		func() bool {
			position604, tokenIndex604 := position, tokenIndex
			{
				position605 := position
				if buffer[position] != rune('c') {
					goto l604
				}
				position++
				if buffer[position] != rune('a') {
					goto l604
				}
				position++
				if buffer[position] != rune('s') {
					goto l604
				}
				position++
				if buffer[position] != rune('e') {
					goto l604
				}
				position++
				if !_rules[rule_]() {
					goto l604
				}
				{
					position606, tokenIndex606 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l607
					}
					if !_rules[rule_]() {
						goto l607
					}
					{
						position608, tokenIndex608 := position, tokenIndex
						if buffer[position] != rune(':') {
							goto l608
						}
						position++
						if !_rules[rule_]() {
							goto l608
						}
						if !_rules[ruleTypes]() {
							goto l608
						}
						goto l609
					l608:
						position, tokenIndex = position608, tokenIndex608
					}
				l609:
					goto l606
				l607:
					position, tokenIndex = position606, tokenIndex606
					if !_rules[ruleDefaultMatchCasePart]() {
						goto l604
					}
				}
			l606:
				if !_rules[rule_]() {
					goto l604
				}
				if buffer[position] != rune('=') {
					goto l604
				}
				position++
				if buffer[position] != rune('>') {
					goto l604
				}
				position++
				if !_rules[rule_]() {
					goto l604
				}
				if !_rules[ruleBlockWithoutPar]() {
					goto l604
				}
				add(ruleMatchCase, position605)
			}
			return true
		l604:
			position, tokenIndex = position604, tokenIndex604
			return false
		},
		/* 87 DefaultMatchCasePart <- <('{' _ (':' _ Types)?)> */
		func() bool {
			position610, tokenIndex610 := position, tokenIndex
			{
				position611 := position
				if buffer[position] != rune('{') {
					goto l610
				}
				position++
				if !_rules[rule_]() {
					goto l610
				}
				{
					position612, tokenIndex612 := position, tokenIndex
					if buffer[position] != rune(':') {
						goto l612
					}
					position++
					if !_rules[rule_]() {
						goto l612
					}
					if !_rules[ruleTypes]() {
						goto l612
					}
					goto l613
				l612:
					position, tokenIndex = position612, tokenIndex612
				}
			l613:
				add(ruleDefaultMatchCasePart, position611)
			}
			return true
		l610:
			position, tokenIndex = position610, tokenIndex610
			return false
		},
		/* 88 Tuple <- <('(' _ AtomExpr (_ ',' _ AtomExpr)+ _ ')')> */
		func() bool {
			position614, tokenIndex614 := position, tokenIndex
			{
				position615 := position
				if buffer[position] != rune('(') {
					goto l614
				}
				position++
				if !_rules[rule_]() {
					goto l614
				}
				if !_rules[ruleAtomExpr]() {
					goto l614
				}
				if !_rules[rule_]() {
					goto l614
				}
				if buffer[position] != rune(',') {
					goto l614
				}
				position++
				if !_rules[rule_]() {
					goto l614
				}
				if !_rules[ruleAtomExpr]() {
					goto l614
				}
			l616:
				{
					position617, tokenIndex617 := position, tokenIndex
					if !_rules[rule_]() {
						goto l617
					}
					if buffer[position] != rune(',') {
						goto l617
					}
					position++
					if !_rules[rule_]() {
						goto l617
					}
					if !_rules[ruleAtomExpr]() {
						goto l617
					}
					goto l616
				l617:
					position, tokenIndex = position617, tokenIndex617
				}
				if !_rules[rule_]() {
					goto l614
				}
				if buffer[position] != rune(')') {
					goto l614
				}
				position++
				add(ruleTuple, position615)
			}
			return true
		l614:
			position, tokenIndex = position614, tokenIndex614
			return false
		},
		/* 89 TupleRef <- <('(' _ Identifier (_ ',' _ Identifier)+ _ ')')> */
		func() bool {
			position618, tokenIndex618 := position, tokenIndex
			{
				position619 := position
				if buffer[position] != rune('(') {
					goto l618
				}
				position++
				if !_rules[rule_]() {
					goto l618
				}
				if !_rules[ruleIdentifier]() {
					goto l618
				}
				if !_rules[rule_]() {
					goto l618
				}
				if buffer[position] != rune(',') {
					goto l618
				}
				position++
				if !_rules[rule_]() {
					goto l618
				}
				if !_rules[ruleIdentifier]() {
					goto l618
				}
			l620:
				{
					position621, tokenIndex621 := position, tokenIndex
					if !_rules[rule_]() {
						goto l621
					}
					if buffer[position] != rune(',') {
						goto l621
					}
					position++
					if !_rules[rule_]() {
						goto l621
					}
					if !_rules[ruleIdentifier]() {
						goto l621
					}
					goto l620
				l621:
					position, tokenIndex = position621, tokenIndex621
				}
				if !_rules[rule_]() {
					goto l618
				}
				if buffer[position] != rune(')') {
					goto l618
				}
				position++
				add(ruleTupleRef, position619)
			}
			return true
		l618:
			position, tokenIndex = position618, tokenIndex618
			return false
		},
		/* 90 TupleAccess <- <('_' [0-9]+)> */
		func() bool {
			position622, tokenIndex622 := position, tokenIndex
			{
				position623 := position
				if buffer[position] != rune('_') {
					goto l622
				}
				position++
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l622
				}
				position++
			l624:
				{
					position625, tokenIndex625 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l625
					}
					position++
					goto l624
				l625:
					position, tokenIndex = position625, tokenIndex625
				}
				add(ruleTupleAccess, position623)
			}
			return true
		l622:
			position, tokenIndex = position622, tokenIndex622
			return false
		},
	}
	p.rules = _rules
	return nil
}

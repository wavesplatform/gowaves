package compiler

// Code generated by peg -output=parser.peg.go ride.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleCode
	ruleDAppRoot
	ruleScriptRoot
	ruleWS
	ruleEOL
	ruleComment
	rule_
	ruleEOF
	ruleDirectiveName
	ruleUpperCaseString
	ruleIntString
	rulePathString
	ruleDirective
	ruleDeclaration
	ruleVariable
	ruleFunc
	ruleFuncArg
	ruleFuncArgSeq
	ruleAnnotatedFunc
	ruleAnnotation
	ruleIdentifierAtomSeq
	ruleAnnotationSeq
	ruleOrOp
	ruleAndOp
	ruleEqGroupOp
	ruleEqOp
	ruleNeOp
	ruleCompareGroupOp
	ruleGtOp
	ruleGeOp
	ruleLtOp
	ruleLeOp
	ruleConsOp
	ruleSumGroupOp
	ruleSumOp
	ruleSubOp
	ruleMultGroupOp
	ruleMulOp
	ruleDivOp
	ruleModOp
	ruleUnaryOp
	rulePositiveOp
	ruleNegativeOp
	ruleNotOp
	ruleReservedWords
	ruleConstAtom
	ruleIdentifierAtom
	ruleGenericTypesAtom
	ruleOneGenericTypeAtom
	ruleTypesAtom
	ruleOneTypeAtom
	ruleBase16
	ruleBase58
	ruleBase64
	ruleByteVectorAtom
	ruleBooleanAtom
	ruleStringAtom
	ruleUnicodeCharAtom
	ruleEscapedCharAtom
	ruleCharAtom
	ruleIntegerAtom
	ruleListAtom
	ruleExprSeq
	ruleAtomExpr
	ruleMultGroupOpAtom
	ruleSumGroupOpAtom
	ruleConsOpAtom
	ruleCompareGroupOpAtom
	ruleEqualityGroupOpAtom
	ruleAndOpAtom
	ruleOrOpAtom
	ruleExpr
	ruleParExpr
	ruleGettableExpr
	ruleFunctionCallAccess
	ruleIdentifierAtomAccess
	ruleListAccess
	ruleBlock
	ruleBlockWithoutPar
	ruleBlockDecExprSep
	ruleFunctionCall
	ruleFoldMacro
	ruleIfWithError
	ruleIf
	ruleFailedIfWithoutElse
	ruleMatch
	ruleMatchCase
	ruleDefaultMatchCasePart
)

var rul3s = [...]string{
	"Unknown",
	"Code",
	"DAppRoot",
	"ScriptRoot",
	"WS",
	"EOL",
	"Comment",
	"_",
	"EOF",
	"DirectiveName",
	"UpperCaseString",
	"IntString",
	"PathString",
	"Directive",
	"Declaration",
	"Variable",
	"Func",
	"FuncArg",
	"FuncArgSeq",
	"AnnotatedFunc",
	"Annotation",
	"IdentifierAtomSeq",
	"AnnotationSeq",
	"OrOp",
	"AndOp",
	"EqGroupOp",
	"EqOp",
	"NeOp",
	"CompareGroupOp",
	"GtOp",
	"GeOp",
	"LtOp",
	"LeOp",
	"ConsOp",
	"SumGroupOp",
	"SumOp",
	"SubOp",
	"MultGroupOp",
	"MulOp",
	"DivOp",
	"ModOp",
	"UnaryOp",
	"PositiveOp",
	"NegativeOp",
	"NotOp",
	"ReservedWords",
	"ConstAtom",
	"IdentifierAtom",
	"GenericTypesAtom",
	"OneGenericTypeAtom",
	"TypesAtom",
	"OneTypeAtom",
	"Base16",
	"Base58",
	"Base64",
	"ByteVectorAtom",
	"BooleanAtom",
	"StringAtom",
	"UnicodeCharAtom",
	"EscapedCharAtom",
	"CharAtom",
	"IntegerAtom",
	"ListAtom",
	"ExprSeq",
	"AtomExpr",
	"MultGroupOpAtom",
	"SumGroupOpAtom",
	"ConsOpAtom",
	"CompareGroupOpAtom",
	"EqualityGroupOpAtom",
	"AndOpAtom",
	"OrOpAtom",
	"Expr",
	"ParExpr",
	"GettableExpr",
	"FunctionCallAccess",
	"IdentifierAtomAccess",
	"ListAccess",
	"Block",
	"BlockWithoutPar",
	"BlockDecExprSep",
	"FunctionCall",
	"FoldMacro",
	"IfWithError",
	"If",
	"FailedIfWithoutElse",
	"Match",
	"MatchCase",
	"DefaultMatchCasePart",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Buffer string
	buffer []rune
	rules  [89]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Code <- <(DAppRoot / ScriptRoot)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[ruleDAppRoot]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[ruleScriptRoot]() {
						goto l0
					}
				}
			l2:
				add(ruleCode, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 DAppRoot <- <(_ (Directive _)* (_ Declaration)* (_ AnnotatedFunc)* _ EOF)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
				if !_rules[rule_]() {
					goto l4
				}
			l6:
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l7
					}
					if !_rules[rule_]() {
						goto l7
					}
					goto l6
				l7:
					position, tokenIndex = position7, tokenIndex7
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[rule_]() {
						goto l9
					}
					if !_rules[ruleDeclaration]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
			l10:
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[rule_]() {
						goto l11
					}
					if !_rules[ruleAnnotatedFunc]() {
						goto l11
					}
					goto l10
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				if !_rules[rule_]() {
					goto l4
				}
				if !_rules[ruleEOF]() {
					goto l4
				}
				add(ruleDAppRoot, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 ScriptRoot <- <(_ (Directive _)* (_ Declaration)* _ BlockDecExprSep? _ Expr _ EOF)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[rule_]() {
					goto l12
				}
			l14:
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l15
					}
					if !_rules[rule_]() {
						goto l15
					}
					goto l14
				l15:
					position, tokenIndex = position15, tokenIndex15
				}
			l16:
				{
					position17, tokenIndex17 := position, tokenIndex
					if !_rules[rule_]() {
						goto l17
					}
					if !_rules[ruleDeclaration]() {
						goto l17
					}
					goto l16
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				if !_rules[rule_]() {
					goto l12
				}
				{
					position18, tokenIndex18 := position, tokenIndex
					if !_rules[ruleBlockDecExprSep]() {
						goto l18
					}
					goto l19
				l18:
					position, tokenIndex = position18, tokenIndex18
				}
			l19:
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleExpr]() {
					goto l12
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleEOF]() {
					goto l12
				}
				add(ruleScriptRoot, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 WS <- <(' ' / '\t')> */
		func() bool {
			position20, tokenIndex20 := position, tokenIndex
			{
				position21 := position
				{
					position22, tokenIndex22 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l23
					}
					position++
					goto l22
				l23:
					position, tokenIndex = position22, tokenIndex22
					if buffer[position] != rune('\t') {
						goto l20
					}
					position++
				}
			l22:
				add(ruleWS, position21)
			}
			return true
		l20:
			position, tokenIndex = position20, tokenIndex20
			return false
		},
		/* 4 EOL <- <('\n' / '\r' / '\f')> */
		func() bool {
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26, tokenIndex26 := position, tokenIndex
					if buffer[position] != rune('\n') {
						goto l27
					}
					position++
					goto l26
				l27:
					position, tokenIndex = position26, tokenIndex26
					if buffer[position] != rune('\r') {
						goto l28
					}
					position++
					goto l26
				l28:
					position, tokenIndex = position26, tokenIndex26
					if buffer[position] != rune('\f') {
						goto l24
					}
					position++
				}
			l26:
				add(ruleEOL, position25)
			}
			return true
		l24:
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 5 Comment <- <('#' (!('\r' / '^' / '\n') .)*)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				if buffer[position] != rune('#') {
					goto l29
				}
				position++
			l31:
				{
					position32, tokenIndex32 := position, tokenIndex
					{
						position33, tokenIndex33 := position, tokenIndex
						{
							position34, tokenIndex34 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l35
							}
							position++
							goto l34
						l35:
							position, tokenIndex = position34, tokenIndex34
							if buffer[position] != rune('^') {
								goto l36
							}
							position++
							goto l34
						l36:
							position, tokenIndex = position34, tokenIndex34
							if buffer[position] != rune('\n') {
								goto l33
							}
							position++
						}
					l34:
						goto l32
					l33:
						position, tokenIndex = position33, tokenIndex33
					}
					if !matchDot() {
						goto l32
					}
					goto l31
				l32:
					position, tokenIndex = position32, tokenIndex32
				}
				add(ruleComment, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 6 _ <- <(Comment / (WS / EOL)+)*> */
		func() bool {
			{
				position38 := position
			l39:
				{
					position40, tokenIndex40 := position, tokenIndex
					{
						position41, tokenIndex41 := position, tokenIndex
						if !_rules[ruleComment]() {
							goto l42
						}
						goto l41
					l42:
						position, tokenIndex = position41, tokenIndex41
						{
							position45, tokenIndex45 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l46
							}
							goto l45
						l46:
							position, tokenIndex = position45, tokenIndex45
							if !_rules[ruleEOL]() {
								goto l40
							}
						}
					l45:
					l43:
						{
							position44, tokenIndex44 := position, tokenIndex
							{
								position47, tokenIndex47 := position, tokenIndex
								if !_rules[ruleWS]() {
									goto l48
								}
								goto l47
							l48:
								position, tokenIndex = position47, tokenIndex47
								if !_rules[ruleEOL]() {
									goto l44
								}
							}
						l47:
							goto l43
						l44:
							position, tokenIndex = position44, tokenIndex44
						}
					}
				l41:
					goto l39
				l40:
					position, tokenIndex = position40, tokenIndex40
				}
				add(rule_, position38)
			}
			return true
		},
		/* 7 EOF <- <!.> */
		func() bool {
			position49, tokenIndex49 := position, tokenIndex
			{
				position50 := position
				{
					position51, tokenIndex51 := position, tokenIndex
					if !matchDot() {
						goto l51
					}
					goto l49
				l51:
					position, tokenIndex = position51, tokenIndex51
				}
				add(ruleEOF, position50)
			}
			return true
		l49:
			position, tokenIndex = position49, tokenIndex49
			return false
		},
		/* 8 DirectiveName <- <([A-Z]+ ('_' / [A-Z])*)> */
		func() bool {
			position52, tokenIndex52 := position, tokenIndex
			{
				position53 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l52
				}
				position++
			l54:
				{
					position55, tokenIndex55 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l55
					}
					position++
					goto l54
				l55:
					position, tokenIndex = position55, tokenIndex55
				}
			l56:
				{
					position57, tokenIndex57 := position, tokenIndex
					{
						position58, tokenIndex58 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l59
						}
						position++
						goto l58
					l59:
						position, tokenIndex = position58, tokenIndex58
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l57
						}
						position++
					}
				l58:
					goto l56
				l57:
					position, tokenIndex = position57, tokenIndex57
				}
				add(ruleDirectiveName, position53)
			}
			return true
		l52:
			position, tokenIndex = position52, tokenIndex52
			return false
		},
		/* 9 UpperCaseString <- <[A-Z]+> */
		func() bool {
			position60, tokenIndex60 := position, tokenIndex
			{
				position61 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l60
				}
				position++
			l62:
				{
					position63, tokenIndex63 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l63
					}
					position++
					goto l62
				l63:
					position, tokenIndex = position63, tokenIndex63
				}
				add(ruleUpperCaseString, position61)
			}
			return true
		l60:
			position, tokenIndex = position60, tokenIndex60
			return false
		},
		/* 10 IntString <- <[0-9]+> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l64
				}
				position++
			l66:
				{
					position67, tokenIndex67 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l67
					}
					position++
					goto l66
				l67:
					position, tokenIndex = position67, tokenIndex67
				}
				add(ruleIntString, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 11 PathString <- <('_' / [a-z] / [A-Z] / [0-9] / '-' / '/' / ',' / '.')+> */
		func() bool {
			position68, tokenIndex68 := position, tokenIndex
			{
				position69 := position
				{
					position72, tokenIndex72 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l73
					}
					position++
					goto l72
				l73:
					position, tokenIndex = position72, tokenIndex72
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l74
					}
					position++
					goto l72
				l74:
					position, tokenIndex = position72, tokenIndex72
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l75
					}
					position++
					goto l72
				l75:
					position, tokenIndex = position72, tokenIndex72
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l76
					}
					position++
					goto l72
				l76:
					position, tokenIndex = position72, tokenIndex72
					if buffer[position] != rune('-') {
						goto l77
					}
					position++
					goto l72
				l77:
					position, tokenIndex = position72, tokenIndex72
					if buffer[position] != rune('/') {
						goto l78
					}
					position++
					goto l72
				l78:
					position, tokenIndex = position72, tokenIndex72
					if buffer[position] != rune(',') {
						goto l79
					}
					position++
					goto l72
				l79:
					position, tokenIndex = position72, tokenIndex72
					if buffer[position] != rune('.') {
						goto l68
					}
					position++
				}
			l72:
			l70:
				{
					position71, tokenIndex71 := position, tokenIndex
					{
						position80, tokenIndex80 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l81
						}
						position++
						goto l80
					l81:
						position, tokenIndex = position80, tokenIndex80
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l82
						}
						position++
						goto l80
					l82:
						position, tokenIndex = position80, tokenIndex80
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l83
						}
						position++
						goto l80
					l83:
						position, tokenIndex = position80, tokenIndex80
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l84
						}
						position++
						goto l80
					l84:
						position, tokenIndex = position80, tokenIndex80
						if buffer[position] != rune('-') {
							goto l85
						}
						position++
						goto l80
					l85:
						position, tokenIndex = position80, tokenIndex80
						if buffer[position] != rune('/') {
							goto l86
						}
						position++
						goto l80
					l86:
						position, tokenIndex = position80, tokenIndex80
						if buffer[position] != rune(',') {
							goto l87
						}
						position++
						goto l80
					l87:
						position, tokenIndex = position80, tokenIndex80
						if buffer[position] != rune('.') {
							goto l71
						}
						position++
					}
				l80:
					goto l70
				l71:
					position, tokenIndex = position71, tokenIndex71
				}
				add(rulePathString, position69)
			}
			return true
		l68:
			position, tokenIndex = position68, tokenIndex68
			return false
		},
		/* 12 Directive <- <('{' '-' '#' WS+ DirectiveName WS+ (IntString / UpperCaseString / PathString) WS+ ('#' '-' '}'))> */
		func() bool {
			position88, tokenIndex88 := position, tokenIndex
			{
				position89 := position
				if buffer[position] != rune('{') {
					goto l88
				}
				position++
				if buffer[position] != rune('-') {
					goto l88
				}
				position++
				if buffer[position] != rune('#') {
					goto l88
				}
				position++
				if !_rules[ruleWS]() {
					goto l88
				}
			l90:
				{
					position91, tokenIndex91 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l91
					}
					goto l90
				l91:
					position, tokenIndex = position91, tokenIndex91
				}
				if !_rules[ruleDirectiveName]() {
					goto l88
				}
				if !_rules[ruleWS]() {
					goto l88
				}
			l92:
				{
					position93, tokenIndex93 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l93
					}
					goto l92
				l93:
					position, tokenIndex = position93, tokenIndex93
				}
				{
					position94, tokenIndex94 := position, tokenIndex
					if !_rules[ruleIntString]() {
						goto l95
					}
					goto l94
				l95:
					position, tokenIndex = position94, tokenIndex94
					if !_rules[ruleUpperCaseString]() {
						goto l96
					}
					goto l94
				l96:
					position, tokenIndex = position94, tokenIndex94
					if !_rules[rulePathString]() {
						goto l88
					}
				}
			l94:
				if !_rules[ruleWS]() {
					goto l88
				}
			l97:
				{
					position98, tokenIndex98 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l98
					}
					goto l97
				l98:
					position, tokenIndex = position98, tokenIndex98
				}
				if buffer[position] != rune('#') {
					goto l88
				}
				position++
				if buffer[position] != rune('-') {
					goto l88
				}
				position++
				if buffer[position] != rune('}') {
					goto l88
				}
				position++
				add(ruleDirective, position89)
			}
			return true
		l88:
			position, tokenIndex = position88, tokenIndex88
			return false
		},
		/* 13 Declaration <- <(Variable / Func)> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				{
					position101, tokenIndex101 := position, tokenIndex
					if !_rules[ruleVariable]() {
						goto l102
					}
					goto l101
				l102:
					position, tokenIndex = position101, tokenIndex101
					if !_rules[ruleFunc]() {
						goto l99
					}
				}
			l101:
				add(ruleDeclaration, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 14 Variable <- <(('l' / 'L') ('e' / 'E') ('t' / 'T') _ IdentifierAtom _ '=' _ Expr)> */
		func() bool {
			position103, tokenIndex103 := position, tokenIndex
			{
				position104 := position
				{
					position105, tokenIndex105 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l106
					}
					position++
					goto l105
				l106:
					position, tokenIndex = position105, tokenIndex105
					if buffer[position] != rune('L') {
						goto l103
					}
					position++
				}
			l105:
				{
					position107, tokenIndex107 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l108
					}
					position++
					goto l107
				l108:
					position, tokenIndex = position107, tokenIndex107
					if buffer[position] != rune('E') {
						goto l103
					}
					position++
				}
			l107:
				{
					position109, tokenIndex109 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l110
					}
					position++
					goto l109
				l110:
					position, tokenIndex = position109, tokenIndex109
					if buffer[position] != rune('T') {
						goto l103
					}
					position++
				}
			l109:
				if !_rules[rule_]() {
					goto l103
				}
				if !_rules[ruleIdentifierAtom]() {
					goto l103
				}
				if !_rules[rule_]() {
					goto l103
				}
				if buffer[position] != rune('=') {
					goto l103
				}
				position++
				if !_rules[rule_]() {
					goto l103
				}
				if !_rules[ruleExpr]() {
					goto l103
				}
				add(ruleVariable, position104)
			}
			return true
		l103:
			position, tokenIndex = position103, tokenIndex103
			return false
		},
		/* 15 Func <- <(('f' / 'F') ('u' / 'U') ('n' / 'N') ('c' / 'C') _ IdentifierAtom _ '(' _ FuncArgSeq? _ ')' _ '=' _ Expr)> */
		func() bool {
			position111, tokenIndex111 := position, tokenIndex
			{
				position112 := position
				{
					position113, tokenIndex113 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l114
					}
					position++
					goto l113
				l114:
					position, tokenIndex = position113, tokenIndex113
					if buffer[position] != rune('F') {
						goto l111
					}
					position++
				}
			l113:
				{
					position115, tokenIndex115 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l116
					}
					position++
					goto l115
				l116:
					position, tokenIndex = position115, tokenIndex115
					if buffer[position] != rune('U') {
						goto l111
					}
					position++
				}
			l115:
				{
					position117, tokenIndex117 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l118
					}
					position++
					goto l117
				l118:
					position, tokenIndex = position117, tokenIndex117
					if buffer[position] != rune('N') {
						goto l111
					}
					position++
				}
			l117:
				{
					position119, tokenIndex119 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l120
					}
					position++
					goto l119
				l120:
					position, tokenIndex = position119, tokenIndex119
					if buffer[position] != rune('C') {
						goto l111
					}
					position++
				}
			l119:
				if !_rules[rule_]() {
					goto l111
				}
				if !_rules[ruleIdentifierAtom]() {
					goto l111
				}
				if !_rules[rule_]() {
					goto l111
				}
				if buffer[position] != rune('(') {
					goto l111
				}
				position++
				if !_rules[rule_]() {
					goto l111
				}
				{
					position121, tokenIndex121 := position, tokenIndex
					if !_rules[ruleFuncArgSeq]() {
						goto l121
					}
					goto l122
				l121:
					position, tokenIndex = position121, tokenIndex121
				}
			l122:
				if !_rules[rule_]() {
					goto l111
				}
				if buffer[position] != rune(')') {
					goto l111
				}
				position++
				if !_rules[rule_]() {
					goto l111
				}
				if buffer[position] != rune('=') {
					goto l111
				}
				position++
				if !_rules[rule_]() {
					goto l111
				}
				if !_rules[ruleExpr]() {
					goto l111
				}
				add(ruleFunc, position112)
			}
			return true
		l111:
			position, tokenIndex = position111, tokenIndex111
			return false
		},
		/* 16 FuncArg <- <(IdentifierAtom _ ':' _ GenericTypesAtom)> */
		func() bool {
			position123, tokenIndex123 := position, tokenIndex
			{
				position124 := position
				if !_rules[ruleIdentifierAtom]() {
					goto l123
				}
				if !_rules[rule_]() {
					goto l123
				}
				if buffer[position] != rune(':') {
					goto l123
				}
				position++
				if !_rules[rule_]() {
					goto l123
				}
				if !_rules[ruleGenericTypesAtom]() {
					goto l123
				}
				add(ruleFuncArg, position124)
			}
			return true
		l123:
			position, tokenIndex = position123, tokenIndex123
			return false
		},
		/* 17 FuncArgSeq <- <(FuncArg ((_ ',' _ FuncArgSeq) / FuncArg)?)> */
		func() bool {
			position125, tokenIndex125 := position, tokenIndex
			{
				position126 := position
				if !_rules[ruleFuncArg]() {
					goto l125
				}
				{
					position127, tokenIndex127 := position, tokenIndex
					{
						position129, tokenIndex129 := position, tokenIndex
						if !_rules[rule_]() {
							goto l130
						}
						if buffer[position] != rune(',') {
							goto l130
						}
						position++
						if !_rules[rule_]() {
							goto l130
						}
						if !_rules[ruleFuncArgSeq]() {
							goto l130
						}
						goto l129
					l130:
						position, tokenIndex = position129, tokenIndex129
						if !_rules[ruleFuncArg]() {
							goto l127
						}
					}
				l129:
					goto l128
				l127:
					position, tokenIndex = position127, tokenIndex127
				}
			l128:
				add(ruleFuncArgSeq, position126)
			}
			return true
		l125:
			position, tokenIndex = position125, tokenIndex125
			return false
		},
		/* 18 AnnotatedFunc <- <(AnnotationSeq _ Func)> */
		func() bool {
			position131, tokenIndex131 := position, tokenIndex
			{
				position132 := position
				if !_rules[ruleAnnotationSeq]() {
					goto l131
				}
				if !_rules[rule_]() {
					goto l131
				}
				if !_rules[ruleFunc]() {
					goto l131
				}
				add(ruleAnnotatedFunc, position132)
			}
			return true
		l131:
			position, tokenIndex = position131, tokenIndex131
			return false
		},
		/* 19 Annotation <- <('@' IdentifierAtom _ '(' _ IdentifierAtomSeq _ ')')> */
		func() bool {
			position133, tokenIndex133 := position, tokenIndex
			{
				position134 := position
				if buffer[position] != rune('@') {
					goto l133
				}
				position++
				if !_rules[ruleIdentifierAtom]() {
					goto l133
				}
				if !_rules[rule_]() {
					goto l133
				}
				if buffer[position] != rune('(') {
					goto l133
				}
				position++
				if !_rules[rule_]() {
					goto l133
				}
				if !_rules[ruleIdentifierAtomSeq]() {
					goto l133
				}
				if !_rules[rule_]() {
					goto l133
				}
				if buffer[position] != rune(')') {
					goto l133
				}
				position++
				add(ruleAnnotation, position134)
			}
			return true
		l133:
			position, tokenIndex = position133, tokenIndex133
			return false
		},
		/* 20 IdentifierAtomSeq <- <(IdentifierAtom ((_ ',' _ IdentifierAtomSeq) / IdentifierAtom)?)> */
		func() bool {
			position135, tokenIndex135 := position, tokenIndex
			{
				position136 := position
				if !_rules[ruleIdentifierAtom]() {
					goto l135
				}
				{
					position137, tokenIndex137 := position, tokenIndex
					{
						position139, tokenIndex139 := position, tokenIndex
						if !_rules[rule_]() {
							goto l140
						}
						if buffer[position] != rune(',') {
							goto l140
						}
						position++
						if !_rules[rule_]() {
							goto l140
						}
						if !_rules[ruleIdentifierAtomSeq]() {
							goto l140
						}
						goto l139
					l140:
						position, tokenIndex = position139, tokenIndex139
						if !_rules[ruleIdentifierAtom]() {
							goto l137
						}
					}
				l139:
					goto l138
				l137:
					position, tokenIndex = position137, tokenIndex137
				}
			l138:
				add(ruleIdentifierAtomSeq, position136)
			}
			return true
		l135:
			position, tokenIndex = position135, tokenIndex135
			return false
		},
		/* 21 AnnotationSeq <- <(Annotation ((_ AnnotationSeq) / Annotation)?)> */
		func() bool {
			position141, tokenIndex141 := position, tokenIndex
			{
				position142 := position
				if !_rules[ruleAnnotation]() {
					goto l141
				}
				{
					position143, tokenIndex143 := position, tokenIndex
					{
						position145, tokenIndex145 := position, tokenIndex
						if !_rules[rule_]() {
							goto l146
						}
						if !_rules[ruleAnnotationSeq]() {
							goto l146
						}
						goto l145
					l146:
						position, tokenIndex = position145, tokenIndex145
						if !_rules[ruleAnnotation]() {
							goto l143
						}
					}
				l145:
					goto l144
				l143:
					position, tokenIndex = position143, tokenIndex143
				}
			l144:
				add(ruleAnnotationSeq, position142)
			}
			return true
		l141:
			position, tokenIndex = position141, tokenIndex141
			return false
		},
		/* 22 OrOp <- <('|' '|')> */
		func() bool {
			position147, tokenIndex147 := position, tokenIndex
			{
				position148 := position
				if buffer[position] != rune('|') {
					goto l147
				}
				position++
				if buffer[position] != rune('|') {
					goto l147
				}
				position++
				add(ruleOrOp, position148)
			}
			return true
		l147:
			position, tokenIndex = position147, tokenIndex147
			return false
		},
		/* 23 AndOp <- <('&' '&')> */
		func() bool {
			position149, tokenIndex149 := position, tokenIndex
			{
				position150 := position
				if buffer[position] != rune('&') {
					goto l149
				}
				position++
				if buffer[position] != rune('&') {
					goto l149
				}
				position++
				add(ruleAndOp, position150)
			}
			return true
		l149:
			position, tokenIndex = position149, tokenIndex149
			return false
		},
		/* 24 EqGroupOp <- <(EqOp / NeOp)> */
		func() bool {
			position151, tokenIndex151 := position, tokenIndex
			{
				position152 := position
				{
					position153, tokenIndex153 := position, tokenIndex
					if !_rules[ruleEqOp]() {
						goto l154
					}
					goto l153
				l154:
					position, tokenIndex = position153, tokenIndex153
					if !_rules[ruleNeOp]() {
						goto l151
					}
				}
			l153:
				add(ruleEqGroupOp, position152)
			}
			return true
		l151:
			position, tokenIndex = position151, tokenIndex151
			return false
		},
		/* 25 EqOp <- <('=' '=')> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				if buffer[position] != rune('=') {
					goto l155
				}
				position++
				if buffer[position] != rune('=') {
					goto l155
				}
				position++
				add(ruleEqOp, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 26 NeOp <- <('!' '=')> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				if buffer[position] != rune('!') {
					goto l157
				}
				position++
				if buffer[position] != rune('=') {
					goto l157
				}
				position++
				add(ruleNeOp, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 27 CompareGroupOp <- <(GtOp / GeOp / LtOp / LeOp)> */
		func() bool {
			position159, tokenIndex159 := position, tokenIndex
			{
				position160 := position
				{
					position161, tokenIndex161 := position, tokenIndex
					if !_rules[ruleGtOp]() {
						goto l162
					}
					goto l161
				l162:
					position, tokenIndex = position161, tokenIndex161
					if !_rules[ruleGeOp]() {
						goto l163
					}
					goto l161
				l163:
					position, tokenIndex = position161, tokenIndex161
					if !_rules[ruleLtOp]() {
						goto l164
					}
					goto l161
				l164:
					position, tokenIndex = position161, tokenIndex161
					if !_rules[ruleLeOp]() {
						goto l159
					}
				}
			l161:
				add(ruleCompareGroupOp, position160)
			}
			return true
		l159:
			position, tokenIndex = position159, tokenIndex159
			return false
		},
		/* 28 GtOp <- <('>' !'=')> */
		func() bool {
			position165, tokenIndex165 := position, tokenIndex
			{
				position166 := position
				if buffer[position] != rune('>') {
					goto l165
				}
				position++
				{
					position167, tokenIndex167 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l167
					}
					position++
					goto l165
				l167:
					position, tokenIndex = position167, tokenIndex167
				}
				add(ruleGtOp, position166)
			}
			return true
		l165:
			position, tokenIndex = position165, tokenIndex165
			return false
		},
		/* 29 GeOp <- <('>' '=')> */
		func() bool {
			position168, tokenIndex168 := position, tokenIndex
			{
				position169 := position
				if buffer[position] != rune('>') {
					goto l168
				}
				position++
				if buffer[position] != rune('=') {
					goto l168
				}
				position++
				add(ruleGeOp, position169)
			}
			return true
		l168:
			position, tokenIndex = position168, tokenIndex168
			return false
		},
		/* 30 LtOp <- <('<' !'=')> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				if buffer[position] != rune('<') {
					goto l170
				}
				position++
				{
					position172, tokenIndex172 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l172
					}
					position++
					goto l170
				l172:
					position, tokenIndex = position172, tokenIndex172
				}
				add(ruleLtOp, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 31 LeOp <- <('<' '=')> */
		func() bool {
			position173, tokenIndex173 := position, tokenIndex
			{
				position174 := position
				if buffer[position] != rune('<') {
					goto l173
				}
				position++
				if buffer[position] != rune('=') {
					goto l173
				}
				position++
				add(ruleLeOp, position174)
			}
			return true
		l173:
			position, tokenIndex = position173, tokenIndex173
			return false
		},
		/* 32 ConsOp <- <(':' ':')> */
		func() bool {
			position175, tokenIndex175 := position, tokenIndex
			{
				position176 := position
				if buffer[position] != rune(':') {
					goto l175
				}
				position++
				if buffer[position] != rune(':') {
					goto l175
				}
				position++
				add(ruleConsOp, position176)
			}
			return true
		l175:
			position, tokenIndex = position175, tokenIndex175
			return false
		},
		/* 33 SumGroupOp <- <(SumOp / SubOp)> */
		func() bool {
			position177, tokenIndex177 := position, tokenIndex
			{
				position178 := position
				{
					position179, tokenIndex179 := position, tokenIndex
					if !_rules[ruleSumOp]() {
						goto l180
					}
					goto l179
				l180:
					position, tokenIndex = position179, tokenIndex179
					if !_rules[ruleSubOp]() {
						goto l177
					}
				}
			l179:
				add(ruleSumGroupOp, position178)
			}
			return true
		l177:
			position, tokenIndex = position177, tokenIndex177
			return false
		},
		/* 34 SumOp <- <'+'> */
		func() bool {
			position181, tokenIndex181 := position, tokenIndex
			{
				position182 := position
				if buffer[position] != rune('+') {
					goto l181
				}
				position++
				add(ruleSumOp, position182)
			}
			return true
		l181:
			position, tokenIndex = position181, tokenIndex181
			return false
		},
		/* 35 SubOp <- <'-'> */
		func() bool {
			position183, tokenIndex183 := position, tokenIndex
			{
				position184 := position
				if buffer[position] != rune('-') {
					goto l183
				}
				position++
				add(ruleSubOp, position184)
			}
			return true
		l183:
			position, tokenIndex = position183, tokenIndex183
			return false
		},
		/* 36 MultGroupOp <- <(MulOp / DivOp / ModOp)> */
		func() bool {
			position185, tokenIndex185 := position, tokenIndex
			{
				position186 := position
				{
					position187, tokenIndex187 := position, tokenIndex
					if !_rules[ruleMulOp]() {
						goto l188
					}
					goto l187
				l188:
					position, tokenIndex = position187, tokenIndex187
					if !_rules[ruleDivOp]() {
						goto l189
					}
					goto l187
				l189:
					position, tokenIndex = position187, tokenIndex187
					if !_rules[ruleModOp]() {
						goto l185
					}
				}
			l187:
				add(ruleMultGroupOp, position186)
			}
			return true
		l185:
			position, tokenIndex = position185, tokenIndex185
			return false
		},
		/* 37 MulOp <- <'*'> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if buffer[position] != rune('*') {
					goto l190
				}
				position++
				add(ruleMulOp, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 38 DivOp <- <'/'> */
		func() bool {
			position192, tokenIndex192 := position, tokenIndex
			{
				position193 := position
				if buffer[position] != rune('/') {
					goto l192
				}
				position++
				add(ruleDivOp, position193)
			}
			return true
		l192:
			position, tokenIndex = position192, tokenIndex192
			return false
		},
		/* 39 ModOp <- <'%'> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
				if buffer[position] != rune('%') {
					goto l194
				}
				position++
				add(ruleModOp, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 40 UnaryOp <- <(PositiveOp / NegativeOp / NotOp)> */
		func() bool {
			position196, tokenIndex196 := position, tokenIndex
			{
				position197 := position
				{
					position198, tokenIndex198 := position, tokenIndex
					if !_rules[rulePositiveOp]() {
						goto l199
					}
					goto l198
				l199:
					position, tokenIndex = position198, tokenIndex198
					if !_rules[ruleNegativeOp]() {
						goto l200
					}
					goto l198
				l200:
					position, tokenIndex = position198, tokenIndex198
					if !_rules[ruleNotOp]() {
						goto l196
					}
				}
			l198:
				add(ruleUnaryOp, position197)
			}
			return true
		l196:
			position, tokenIndex = position196, tokenIndex196
			return false
		},
		/* 41 PositiveOp <- <'+'> */
		func() bool {
			position201, tokenIndex201 := position, tokenIndex
			{
				position202 := position
				if buffer[position] != rune('+') {
					goto l201
				}
				position++
				add(rulePositiveOp, position202)
			}
			return true
		l201:
			position, tokenIndex = position201, tokenIndex201
			return false
		},
		/* 42 NegativeOp <- <('-' !'#')> */
		func() bool {
			position203, tokenIndex203 := position, tokenIndex
			{
				position204 := position
				if buffer[position] != rune('-') {
					goto l203
				}
				position++
				{
					position205, tokenIndex205 := position, tokenIndex
					if buffer[position] != rune('#') {
						goto l205
					}
					position++
					goto l203
				l205:
					position, tokenIndex = position205, tokenIndex205
				}
				add(ruleNegativeOp, position204)
			}
			return true
		l203:
			position, tokenIndex = position203, tokenIndex203
			return false
		},
		/* 43 NotOp <- <'!'> */
		func() bool {
			position206, tokenIndex206 := position, tokenIndex
			{
				position207 := position
				if buffer[position] != rune('!') {
					goto l206
				}
				position++
				add(ruleNotOp, position207)
			}
			return true
		l206:
			position, tokenIndex = position206, tokenIndex206
			return false
		},
		/* 44 ReservedWords <- <((('l' / 'L') ('e' / 'E') ('t' / 'T')) / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '1' '6') / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '5' '8') / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '6' '4') / (('t' / 'T') ('r' / 'R') ('u' / 'U') ('e' / 'E')) / (('f' / 'F') ('a' / 'A') ('l' / 'L') ('s' / 'S') ('e' / 'E')) / (('i' / 'I') ('f' / 'F')) / (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) / (('e' / 'E') ('l' / 'L') ('s' / 'S') ('e' / 'E')) / (('m' / 'M') ('a' / 'A') ('t' / 'T') ('c' / 'C') ('h' / 'H')) / (('c' / 'C') ('a' / 'A') ('s' / 'S') ('e' / 'E')) / (('f' / 'F') ('u' / 'U') ('n' / 'N') ('c' / 'C')))> */
		func() bool {
			position208, tokenIndex208 := position, tokenIndex
			{
				position209 := position
				{
					position210, tokenIndex210 := position, tokenIndex
					{
						position212, tokenIndex212 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l213
						}
						position++
						goto l212
					l213:
						position, tokenIndex = position212, tokenIndex212
						if buffer[position] != rune('L') {
							goto l211
						}
						position++
					}
				l212:
					{
						position214, tokenIndex214 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l215
						}
						position++
						goto l214
					l215:
						position, tokenIndex = position214, tokenIndex214
						if buffer[position] != rune('E') {
							goto l211
						}
						position++
					}
				l214:
					{
						position216, tokenIndex216 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l217
						}
						position++
						goto l216
					l217:
						position, tokenIndex = position216, tokenIndex216
						if buffer[position] != rune('T') {
							goto l211
						}
						position++
					}
				l216:
					goto l210
				l211:
					position, tokenIndex = position210, tokenIndex210
					{
						position219, tokenIndex219 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l220
						}
						position++
						goto l219
					l220:
						position, tokenIndex = position219, tokenIndex219
						if buffer[position] != rune('B') {
							goto l218
						}
						position++
					}
				l219:
					{
						position221, tokenIndex221 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l222
						}
						position++
						goto l221
					l222:
						position, tokenIndex = position221, tokenIndex221
						if buffer[position] != rune('A') {
							goto l218
						}
						position++
					}
				l221:
					{
						position223, tokenIndex223 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l224
						}
						position++
						goto l223
					l224:
						position, tokenIndex = position223, tokenIndex223
						if buffer[position] != rune('S') {
							goto l218
						}
						position++
					}
				l223:
					{
						position225, tokenIndex225 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l226
						}
						position++
						goto l225
					l226:
						position, tokenIndex = position225, tokenIndex225
						if buffer[position] != rune('E') {
							goto l218
						}
						position++
					}
				l225:
					if buffer[position] != rune('1') {
						goto l218
					}
					position++
					if buffer[position] != rune('6') {
						goto l218
					}
					position++
					goto l210
				l218:
					position, tokenIndex = position210, tokenIndex210
					{
						position228, tokenIndex228 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l229
						}
						position++
						goto l228
					l229:
						position, tokenIndex = position228, tokenIndex228
						if buffer[position] != rune('B') {
							goto l227
						}
						position++
					}
				l228:
					{
						position230, tokenIndex230 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l231
						}
						position++
						goto l230
					l231:
						position, tokenIndex = position230, tokenIndex230
						if buffer[position] != rune('A') {
							goto l227
						}
						position++
					}
				l230:
					{
						position232, tokenIndex232 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l233
						}
						position++
						goto l232
					l233:
						position, tokenIndex = position232, tokenIndex232
						if buffer[position] != rune('S') {
							goto l227
						}
						position++
					}
				l232:
					{
						position234, tokenIndex234 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l235
						}
						position++
						goto l234
					l235:
						position, tokenIndex = position234, tokenIndex234
						if buffer[position] != rune('E') {
							goto l227
						}
						position++
					}
				l234:
					if buffer[position] != rune('5') {
						goto l227
					}
					position++
					if buffer[position] != rune('8') {
						goto l227
					}
					position++
					goto l210
				l227:
					position, tokenIndex = position210, tokenIndex210
					{
						position237, tokenIndex237 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l238
						}
						position++
						goto l237
					l238:
						position, tokenIndex = position237, tokenIndex237
						if buffer[position] != rune('B') {
							goto l236
						}
						position++
					}
				l237:
					{
						position239, tokenIndex239 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l240
						}
						position++
						goto l239
					l240:
						position, tokenIndex = position239, tokenIndex239
						if buffer[position] != rune('A') {
							goto l236
						}
						position++
					}
				l239:
					{
						position241, tokenIndex241 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l242
						}
						position++
						goto l241
					l242:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('S') {
							goto l236
						}
						position++
					}
				l241:
					{
						position243, tokenIndex243 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l244
						}
						position++
						goto l243
					l244:
						position, tokenIndex = position243, tokenIndex243
						if buffer[position] != rune('E') {
							goto l236
						}
						position++
					}
				l243:
					if buffer[position] != rune('6') {
						goto l236
					}
					position++
					if buffer[position] != rune('4') {
						goto l236
					}
					position++
					goto l210
				l236:
					position, tokenIndex = position210, tokenIndex210
					{
						position246, tokenIndex246 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l247
						}
						position++
						goto l246
					l247:
						position, tokenIndex = position246, tokenIndex246
						if buffer[position] != rune('T') {
							goto l245
						}
						position++
					}
				l246:
					{
						position248, tokenIndex248 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l249
						}
						position++
						goto l248
					l249:
						position, tokenIndex = position248, tokenIndex248
						if buffer[position] != rune('R') {
							goto l245
						}
						position++
					}
				l248:
					{
						position250, tokenIndex250 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l251
						}
						position++
						goto l250
					l251:
						position, tokenIndex = position250, tokenIndex250
						if buffer[position] != rune('U') {
							goto l245
						}
						position++
					}
				l250:
					{
						position252, tokenIndex252 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l253
						}
						position++
						goto l252
					l253:
						position, tokenIndex = position252, tokenIndex252
						if buffer[position] != rune('E') {
							goto l245
						}
						position++
					}
				l252:
					goto l210
				l245:
					position, tokenIndex = position210, tokenIndex210
					{
						position255, tokenIndex255 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l256
						}
						position++
						goto l255
					l256:
						position, tokenIndex = position255, tokenIndex255
						if buffer[position] != rune('F') {
							goto l254
						}
						position++
					}
				l255:
					{
						position257, tokenIndex257 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l258
						}
						position++
						goto l257
					l258:
						position, tokenIndex = position257, tokenIndex257
						if buffer[position] != rune('A') {
							goto l254
						}
						position++
					}
				l257:
					{
						position259, tokenIndex259 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l260
						}
						position++
						goto l259
					l260:
						position, tokenIndex = position259, tokenIndex259
						if buffer[position] != rune('L') {
							goto l254
						}
						position++
					}
				l259:
					{
						position261, tokenIndex261 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l262
						}
						position++
						goto l261
					l262:
						position, tokenIndex = position261, tokenIndex261
						if buffer[position] != rune('S') {
							goto l254
						}
						position++
					}
				l261:
					{
						position263, tokenIndex263 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l264
						}
						position++
						goto l263
					l264:
						position, tokenIndex = position263, tokenIndex263
						if buffer[position] != rune('E') {
							goto l254
						}
						position++
					}
				l263:
					goto l210
				l254:
					position, tokenIndex = position210, tokenIndex210
					{
						position266, tokenIndex266 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l267
						}
						position++
						goto l266
					l267:
						position, tokenIndex = position266, tokenIndex266
						if buffer[position] != rune('I') {
							goto l265
						}
						position++
					}
				l266:
					{
						position268, tokenIndex268 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l269
						}
						position++
						goto l268
					l269:
						position, tokenIndex = position268, tokenIndex268
						if buffer[position] != rune('F') {
							goto l265
						}
						position++
					}
				l268:
					goto l210
				l265:
					position, tokenIndex = position210, tokenIndex210
					{
						position271, tokenIndex271 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l272
						}
						position++
						goto l271
					l272:
						position, tokenIndex = position271, tokenIndex271
						if buffer[position] != rune('T') {
							goto l270
						}
						position++
					}
				l271:
					{
						position273, tokenIndex273 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l274
						}
						position++
						goto l273
					l274:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('H') {
							goto l270
						}
						position++
					}
				l273:
					{
						position275, tokenIndex275 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l276
						}
						position++
						goto l275
					l276:
						position, tokenIndex = position275, tokenIndex275
						if buffer[position] != rune('E') {
							goto l270
						}
						position++
					}
				l275:
					{
						position277, tokenIndex277 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l278
						}
						position++
						goto l277
					l278:
						position, tokenIndex = position277, tokenIndex277
						if buffer[position] != rune('N') {
							goto l270
						}
						position++
					}
				l277:
					goto l210
				l270:
					position, tokenIndex = position210, tokenIndex210
					{
						position280, tokenIndex280 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l281
						}
						position++
						goto l280
					l281:
						position, tokenIndex = position280, tokenIndex280
						if buffer[position] != rune('E') {
							goto l279
						}
						position++
					}
				l280:
					{
						position282, tokenIndex282 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l283
						}
						position++
						goto l282
					l283:
						position, tokenIndex = position282, tokenIndex282
						if buffer[position] != rune('L') {
							goto l279
						}
						position++
					}
				l282:
					{
						position284, tokenIndex284 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l285
						}
						position++
						goto l284
					l285:
						position, tokenIndex = position284, tokenIndex284
						if buffer[position] != rune('S') {
							goto l279
						}
						position++
					}
				l284:
					{
						position286, tokenIndex286 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l287
						}
						position++
						goto l286
					l287:
						position, tokenIndex = position286, tokenIndex286
						if buffer[position] != rune('E') {
							goto l279
						}
						position++
					}
				l286:
					goto l210
				l279:
					position, tokenIndex = position210, tokenIndex210
					{
						position289, tokenIndex289 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l290
						}
						position++
						goto l289
					l290:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('M') {
							goto l288
						}
						position++
					}
				l289:
					{
						position291, tokenIndex291 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l292
						}
						position++
						goto l291
					l292:
						position, tokenIndex = position291, tokenIndex291
						if buffer[position] != rune('A') {
							goto l288
						}
						position++
					}
				l291:
					{
						position293, tokenIndex293 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l294
						}
						position++
						goto l293
					l294:
						position, tokenIndex = position293, tokenIndex293
						if buffer[position] != rune('T') {
							goto l288
						}
						position++
					}
				l293:
					{
						position295, tokenIndex295 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l296
						}
						position++
						goto l295
					l296:
						position, tokenIndex = position295, tokenIndex295
						if buffer[position] != rune('C') {
							goto l288
						}
						position++
					}
				l295:
					{
						position297, tokenIndex297 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l298
						}
						position++
						goto l297
					l298:
						position, tokenIndex = position297, tokenIndex297
						if buffer[position] != rune('H') {
							goto l288
						}
						position++
					}
				l297:
					goto l210
				l288:
					position, tokenIndex = position210, tokenIndex210
					{
						position300, tokenIndex300 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l301
						}
						position++
						goto l300
					l301:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('C') {
							goto l299
						}
						position++
					}
				l300:
					{
						position302, tokenIndex302 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l303
						}
						position++
						goto l302
					l303:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('A') {
							goto l299
						}
						position++
					}
				l302:
					{
						position304, tokenIndex304 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l305
						}
						position++
						goto l304
					l305:
						position, tokenIndex = position304, tokenIndex304
						if buffer[position] != rune('S') {
							goto l299
						}
						position++
					}
				l304:
					{
						position306, tokenIndex306 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l307
						}
						position++
						goto l306
					l307:
						position, tokenIndex = position306, tokenIndex306
						if buffer[position] != rune('E') {
							goto l299
						}
						position++
					}
				l306:
					goto l210
				l299:
					position, tokenIndex = position210, tokenIndex210
					{
						position308, tokenIndex308 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l309
						}
						position++
						goto l308
					l309:
						position, tokenIndex = position308, tokenIndex308
						if buffer[position] != rune('F') {
							goto l208
						}
						position++
					}
				l308:
					{
						position310, tokenIndex310 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l311
						}
						position++
						goto l310
					l311:
						position, tokenIndex = position310, tokenIndex310
						if buffer[position] != rune('U') {
							goto l208
						}
						position++
					}
				l310:
					{
						position312, tokenIndex312 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l313
						}
						position++
						goto l312
					l313:
						position, tokenIndex = position312, tokenIndex312
						if buffer[position] != rune('N') {
							goto l208
						}
						position++
					}
				l312:
					{
						position314, tokenIndex314 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l315
						}
						position++
						goto l314
					l315:
						position, tokenIndex = position314, tokenIndex314
						if buffer[position] != rune('C') {
							goto l208
						}
						position++
					}
				l314:
				}
			l210:
				add(ruleReservedWords, position209)
			}
			return true
		l208:
			position, tokenIndex = position208, tokenIndex208
			return false
		},
		/* 45 ConstAtom <- <(IntegerAtom / StringAtom / ByteVectorAtom / BooleanAtom / ListAtom)> */
		func() bool {
			position316, tokenIndex316 := position, tokenIndex
			{
				position317 := position
				{
					position318, tokenIndex318 := position, tokenIndex
					if !_rules[ruleIntegerAtom]() {
						goto l319
					}
					goto l318
				l319:
					position, tokenIndex = position318, tokenIndex318
					if !_rules[ruleStringAtom]() {
						goto l320
					}
					goto l318
				l320:
					position, tokenIndex = position318, tokenIndex318
					if !_rules[ruleByteVectorAtom]() {
						goto l321
					}
					goto l318
				l321:
					position, tokenIndex = position318, tokenIndex318
					if !_rules[ruleBooleanAtom]() {
						goto l322
					}
					goto l318
				l322:
					position, tokenIndex = position318, tokenIndex318
					if !_rules[ruleListAtom]() {
						goto l316
					}
				}
			l318:
				add(ruleConstAtom, position317)
			}
			return true
		l316:
			position, tokenIndex = position316, tokenIndex316
			return false
		},
		/* 46 IdentifierAtom <- <((!ReservedWords ([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])*) / (ReservedWords ([A-Z] / [a-z] / [0-9])+))> */
		func() bool {
			position323, tokenIndex323 := position, tokenIndex
			{
				position324 := position
				{
					position325, tokenIndex325 := position, tokenIndex
					{
						position327, tokenIndex327 := position, tokenIndex
						if !_rules[ruleReservedWords]() {
							goto l327
						}
						goto l326
					l327:
						position, tokenIndex = position327, tokenIndex327
					}
					{
						position328, tokenIndex328 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l329
						}
						position++
						goto l328
					l329:
						position, tokenIndex = position328, tokenIndex328
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l326
						}
						position++
					}
				l328:
				l330:
					{
						position331, tokenIndex331 := position, tokenIndex
						{
							position332, tokenIndex332 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l333
							}
							position++
							goto l332
						l333:
							position, tokenIndex = position332, tokenIndex332
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l334
							}
							position++
							goto l332
						l334:
							position, tokenIndex = position332, tokenIndex332
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l331
							}
							position++
						}
					l332:
						goto l330
					l331:
						position, tokenIndex = position331, tokenIndex331
					}
					goto l325
				l326:
					position, tokenIndex = position325, tokenIndex325
					if !_rules[ruleReservedWords]() {
						goto l323
					}
					{
						position337, tokenIndex337 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l338
						}
						position++
						goto l337
					l338:
						position, tokenIndex = position337, tokenIndex337
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l339
						}
						position++
						goto l337
					l339:
						position, tokenIndex = position337, tokenIndex337
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l323
						}
						position++
					}
				l337:
				l335:
					{
						position336, tokenIndex336 := position, tokenIndex
						{
							position340, tokenIndex340 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l341
							}
							position++
							goto l340
						l341:
							position, tokenIndex = position340, tokenIndex340
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l342
							}
							position++
							goto l340
						l342:
							position, tokenIndex = position340, tokenIndex340
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l336
							}
							position++
						}
					l340:
						goto l335
					l336:
						position, tokenIndex = position336, tokenIndex336
					}
				}
			l325:
				add(ruleIdentifierAtom, position324)
			}
			return true
		l323:
			position, tokenIndex = position323, tokenIndex323
			return false
		},
		/* 47 GenericTypesAtom <- <(OneGenericTypeAtom ((_ '|' _ GenericTypesAtom) / OneGenericTypeAtom)?)> */
		func() bool {
			position343, tokenIndex343 := position, tokenIndex
			{
				position344 := position
				if !_rules[ruleOneGenericTypeAtom]() {
					goto l343
				}
				{
					position345, tokenIndex345 := position, tokenIndex
					{
						position347, tokenIndex347 := position, tokenIndex
						if !_rules[rule_]() {
							goto l348
						}
						if buffer[position] != rune('|') {
							goto l348
						}
						position++
						if !_rules[rule_]() {
							goto l348
						}
						if !_rules[ruleGenericTypesAtom]() {
							goto l348
						}
						goto l347
					l348:
						position, tokenIndex = position347, tokenIndex347
						if !_rules[ruleOneGenericTypeAtom]() {
							goto l345
						}
					}
				l347:
					goto l346
				l345:
					position, tokenIndex = position345, tokenIndex345
				}
			l346:
				add(ruleGenericTypesAtom, position344)
			}
			return true
		l343:
			position, tokenIndex = position343, tokenIndex343
			return false
		},
		/* 48 OneGenericTypeAtom <- <(([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])* (_ '[' _ OneTypeAtom _ ']' _)?)> */
		func() bool {
			position349, tokenIndex349 := position, tokenIndex
			{
				position350 := position
				{
					position351, tokenIndex351 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l352
					}
					position++
					goto l351
				l352:
					position, tokenIndex = position351, tokenIndex351
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l349
					}
					position++
				}
			l351:
			l353:
				{
					position354, tokenIndex354 := position, tokenIndex
					{
						position355, tokenIndex355 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l356
						}
						position++
						goto l355
					l356:
						position, tokenIndex = position355, tokenIndex355
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l357
						}
						position++
						goto l355
					l357:
						position, tokenIndex = position355, tokenIndex355
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l354
						}
						position++
					}
				l355:
					goto l353
				l354:
					position, tokenIndex = position354, tokenIndex354
				}
				{
					position358, tokenIndex358 := position, tokenIndex
					if !_rules[rule_]() {
						goto l358
					}
					if buffer[position] != rune('[') {
						goto l358
					}
					position++
					if !_rules[rule_]() {
						goto l358
					}
					if !_rules[ruleOneTypeAtom]() {
						goto l358
					}
					if !_rules[rule_]() {
						goto l358
					}
					if buffer[position] != rune(']') {
						goto l358
					}
					position++
					if !_rules[rule_]() {
						goto l358
					}
					goto l359
				l358:
					position, tokenIndex = position358, tokenIndex358
				}
			l359:
				add(ruleOneGenericTypeAtom, position350)
			}
			return true
		l349:
			position, tokenIndex = position349, tokenIndex349
			return false
		},
		/* 49 TypesAtom <- <(OneTypeAtom ((_ '|' _ TypesAtom) / OneTypeAtom)?)> */
		func() bool {
			position360, tokenIndex360 := position, tokenIndex
			{
				position361 := position
				if !_rules[ruleOneTypeAtom]() {
					goto l360
				}
				{
					position362, tokenIndex362 := position, tokenIndex
					{
						position364, tokenIndex364 := position, tokenIndex
						if !_rules[rule_]() {
							goto l365
						}
						if buffer[position] != rune('|') {
							goto l365
						}
						position++
						if !_rules[rule_]() {
							goto l365
						}
						if !_rules[ruleTypesAtom]() {
							goto l365
						}
						goto l364
					l365:
						position, tokenIndex = position364, tokenIndex364
						if !_rules[ruleOneTypeAtom]() {
							goto l362
						}
					}
				l364:
					goto l363
				l362:
					position, tokenIndex = position362, tokenIndex362
				}
			l363:
				add(ruleTypesAtom, position361)
			}
			return true
		l360:
			position, tokenIndex = position360, tokenIndex360
			return false
		},
		/* 50 OneTypeAtom <- <(([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])*)> */
		func() bool {
			position366, tokenIndex366 := position, tokenIndex
			{
				position367 := position
				{
					position368, tokenIndex368 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l369
					}
					position++
					goto l368
				l369:
					position, tokenIndex = position368, tokenIndex368
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l366
					}
					position++
				}
			l368:
			l370:
				{
					position371, tokenIndex371 := position, tokenIndex
					{
						position372, tokenIndex372 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l373
						}
						position++
						goto l372
					l373:
						position, tokenIndex = position372, tokenIndex372
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l374
						}
						position++
						goto l372
					l374:
						position, tokenIndex = position372, tokenIndex372
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l371
						}
						position++
					}
				l372:
					goto l370
				l371:
					position, tokenIndex = position371, tokenIndex371
				}
				add(ruleOneTypeAtom, position367)
			}
			return true
		l366:
			position, tokenIndex = position366, tokenIndex366
			return false
		},
		/* 51 Base16 <- <(('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '1' '6' '\'' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')* '\'')> */
		func() bool {
			position375, tokenIndex375 := position, tokenIndex
			{
				position376 := position
				{
					position377, tokenIndex377 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l378
					}
					position++
					goto l377
				l378:
					position, tokenIndex = position377, tokenIndex377
					if buffer[position] != rune('B') {
						goto l375
					}
					position++
				}
			l377:
				{
					position379, tokenIndex379 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l380
					}
					position++
					goto l379
				l380:
					position, tokenIndex = position379, tokenIndex379
					if buffer[position] != rune('A') {
						goto l375
					}
					position++
				}
			l379:
				{
					position381, tokenIndex381 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l382
					}
					position++
					goto l381
				l382:
					position, tokenIndex = position381, tokenIndex381
					if buffer[position] != rune('S') {
						goto l375
					}
					position++
				}
			l381:
				{
					position383, tokenIndex383 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l384
					}
					position++
					goto l383
				l384:
					position, tokenIndex = position383, tokenIndex383
					if buffer[position] != rune('E') {
						goto l375
					}
					position++
				}
			l383:
				if buffer[position] != rune('1') {
					goto l375
				}
				position++
				if buffer[position] != rune('6') {
					goto l375
				}
				position++
				if buffer[position] != rune('\'') {
					goto l375
				}
				position++
			l385:
				{
					position386, tokenIndex386 := position, tokenIndex
					{
						position387, tokenIndex387 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l388
						}
						position++
						goto l387
					l388:
						position, tokenIndex = position387, tokenIndex387
						if buffer[position] != rune('A') {
							goto l389
						}
						position++
						goto l387
					l389:
						position, tokenIndex = position387, tokenIndex387
						if buffer[position] != rune('B') {
							goto l390
						}
						position++
						goto l387
					l390:
						position, tokenIndex = position387, tokenIndex387
						if buffer[position] != rune('C') {
							goto l391
						}
						position++
						goto l387
					l391:
						position, tokenIndex = position387, tokenIndex387
						if buffer[position] != rune('D') {
							goto l392
						}
						position++
						goto l387
					l392:
						position, tokenIndex = position387, tokenIndex387
						if buffer[position] != rune('E') {
							goto l393
						}
						position++
						goto l387
					l393:
						position, tokenIndex = position387, tokenIndex387
						if buffer[position] != rune('F') {
							goto l394
						}
						position++
						goto l387
					l394:
						position, tokenIndex = position387, tokenIndex387
						if buffer[position] != rune('a') {
							goto l395
						}
						position++
						goto l387
					l395:
						position, tokenIndex = position387, tokenIndex387
						if buffer[position] != rune('b') {
							goto l396
						}
						position++
						goto l387
					l396:
						position, tokenIndex = position387, tokenIndex387
						if buffer[position] != rune('c') {
							goto l397
						}
						position++
						goto l387
					l397:
						position, tokenIndex = position387, tokenIndex387
						if buffer[position] != rune('d') {
							goto l398
						}
						position++
						goto l387
					l398:
						position, tokenIndex = position387, tokenIndex387
						if buffer[position] != rune('e') {
							goto l399
						}
						position++
						goto l387
					l399:
						position, tokenIndex = position387, tokenIndex387
						if buffer[position] != rune('f') {
							goto l386
						}
						position++
					}
				l387:
					goto l385
				l386:
					position, tokenIndex = position386, tokenIndex386
				}
				if buffer[position] != rune('\'') {
					goto l375
				}
				position++
				add(ruleBase16, position376)
			}
			return true
		l375:
			position, tokenIndex = position375, tokenIndex375
			return false
		},
		/* 52 Base58 <- <(('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '5' '8' '\'' ('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'J' / 'K' / 'L' / 'M' / 'N' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z')* '\'')> */
		func() bool {
			position400, tokenIndex400 := position, tokenIndex
			{
				position401 := position
				{
					position402, tokenIndex402 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l403
					}
					position++
					goto l402
				l403:
					position, tokenIndex = position402, tokenIndex402
					if buffer[position] != rune('B') {
						goto l400
					}
					position++
				}
			l402:
				{
					position404, tokenIndex404 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l405
					}
					position++
					goto l404
				l405:
					position, tokenIndex = position404, tokenIndex404
					if buffer[position] != rune('A') {
						goto l400
					}
					position++
				}
			l404:
				{
					position406, tokenIndex406 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l407
					}
					position++
					goto l406
				l407:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('S') {
						goto l400
					}
					position++
				}
			l406:
				{
					position408, tokenIndex408 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l409
					}
					position++
					goto l408
				l409:
					position, tokenIndex = position408, tokenIndex408
					if buffer[position] != rune('E') {
						goto l400
					}
					position++
				}
			l408:
				if buffer[position] != rune('5') {
					goto l400
				}
				position++
				if buffer[position] != rune('8') {
					goto l400
				}
				position++
				if buffer[position] != rune('\'') {
					goto l400
				}
				position++
			l410:
				{
					position411, tokenIndex411 := position, tokenIndex
					{
						position412, tokenIndex412 := position, tokenIndex
						if buffer[position] != rune('1') {
							goto l413
						}
						position++
						goto l412
					l413:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('2') {
							goto l414
						}
						position++
						goto l412
					l414:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('3') {
							goto l415
						}
						position++
						goto l412
					l415:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('4') {
							goto l416
						}
						position++
						goto l412
					l416:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('5') {
							goto l417
						}
						position++
						goto l412
					l417:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('6') {
							goto l418
						}
						position++
						goto l412
					l418:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('7') {
							goto l419
						}
						position++
						goto l412
					l419:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('8') {
							goto l420
						}
						position++
						goto l412
					l420:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('9') {
							goto l421
						}
						position++
						goto l412
					l421:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('A') {
							goto l422
						}
						position++
						goto l412
					l422:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('B') {
							goto l423
						}
						position++
						goto l412
					l423:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('C') {
							goto l424
						}
						position++
						goto l412
					l424:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('D') {
							goto l425
						}
						position++
						goto l412
					l425:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('E') {
							goto l426
						}
						position++
						goto l412
					l426:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('F') {
							goto l427
						}
						position++
						goto l412
					l427:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('G') {
							goto l428
						}
						position++
						goto l412
					l428:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('H') {
							goto l429
						}
						position++
						goto l412
					l429:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('J') {
							goto l430
						}
						position++
						goto l412
					l430:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('K') {
							goto l431
						}
						position++
						goto l412
					l431:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('L') {
							goto l432
						}
						position++
						goto l412
					l432:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('M') {
							goto l433
						}
						position++
						goto l412
					l433:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('N') {
							goto l434
						}
						position++
						goto l412
					l434:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('P') {
							goto l435
						}
						position++
						goto l412
					l435:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('Q') {
							goto l436
						}
						position++
						goto l412
					l436:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('R') {
							goto l437
						}
						position++
						goto l412
					l437:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('S') {
							goto l438
						}
						position++
						goto l412
					l438:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('T') {
							goto l439
						}
						position++
						goto l412
					l439:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('U') {
							goto l440
						}
						position++
						goto l412
					l440:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('V') {
							goto l441
						}
						position++
						goto l412
					l441:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('W') {
							goto l442
						}
						position++
						goto l412
					l442:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('X') {
							goto l443
						}
						position++
						goto l412
					l443:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('Y') {
							goto l444
						}
						position++
						goto l412
					l444:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('Z') {
							goto l445
						}
						position++
						goto l412
					l445:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('a') {
							goto l446
						}
						position++
						goto l412
					l446:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('b') {
							goto l447
						}
						position++
						goto l412
					l447:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('c') {
							goto l448
						}
						position++
						goto l412
					l448:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('d') {
							goto l449
						}
						position++
						goto l412
					l449:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('e') {
							goto l450
						}
						position++
						goto l412
					l450:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('f') {
							goto l451
						}
						position++
						goto l412
					l451:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('g') {
							goto l452
						}
						position++
						goto l412
					l452:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('h') {
							goto l453
						}
						position++
						goto l412
					l453:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('i') {
							goto l454
						}
						position++
						goto l412
					l454:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('j') {
							goto l455
						}
						position++
						goto l412
					l455:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('k') {
							goto l456
						}
						position++
						goto l412
					l456:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('m') {
							goto l457
						}
						position++
						goto l412
					l457:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('n') {
							goto l458
						}
						position++
						goto l412
					l458:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('o') {
							goto l459
						}
						position++
						goto l412
					l459:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('p') {
							goto l460
						}
						position++
						goto l412
					l460:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('q') {
							goto l461
						}
						position++
						goto l412
					l461:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('r') {
							goto l462
						}
						position++
						goto l412
					l462:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('s') {
							goto l463
						}
						position++
						goto l412
					l463:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('t') {
							goto l464
						}
						position++
						goto l412
					l464:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('u') {
							goto l465
						}
						position++
						goto l412
					l465:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('v') {
							goto l466
						}
						position++
						goto l412
					l466:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('w') {
							goto l467
						}
						position++
						goto l412
					l467:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('x') {
							goto l468
						}
						position++
						goto l412
					l468:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('y') {
							goto l469
						}
						position++
						goto l412
					l469:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('z') {
							goto l411
						}
						position++
					}
				l412:
					goto l410
				l411:
					position, tokenIndex = position411, tokenIndex411
				}
				if buffer[position] != rune('\'') {
					goto l400
				}
				position++
				add(ruleBase58, position401)
			}
			return true
		l400:
			position, tokenIndex = position400, tokenIndex400
			return false
		},
		/* 53 Base64 <- <(('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '6' '4' '\'' ('A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'I' / 'J' / 'K' / 'L' / 'M' / 'N' / 'O' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '0' / '1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / '+' / '/' / '=')* '\'')> */
		func() bool {
			position470, tokenIndex470 := position, tokenIndex
			{
				position471 := position
				{
					position472, tokenIndex472 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l473
					}
					position++
					goto l472
				l473:
					position, tokenIndex = position472, tokenIndex472
					if buffer[position] != rune('B') {
						goto l470
					}
					position++
				}
			l472:
				{
					position474, tokenIndex474 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l475
					}
					position++
					goto l474
				l475:
					position, tokenIndex = position474, tokenIndex474
					if buffer[position] != rune('A') {
						goto l470
					}
					position++
				}
			l474:
				{
					position476, tokenIndex476 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l477
					}
					position++
					goto l476
				l477:
					position, tokenIndex = position476, tokenIndex476
					if buffer[position] != rune('S') {
						goto l470
					}
					position++
				}
			l476:
				{
					position478, tokenIndex478 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l479
					}
					position++
					goto l478
				l479:
					position, tokenIndex = position478, tokenIndex478
					if buffer[position] != rune('E') {
						goto l470
					}
					position++
				}
			l478:
				if buffer[position] != rune('6') {
					goto l470
				}
				position++
				if buffer[position] != rune('4') {
					goto l470
				}
				position++
				if buffer[position] != rune('\'') {
					goto l470
				}
				position++
			l480:
				{
					position481, tokenIndex481 := position, tokenIndex
					{
						position482, tokenIndex482 := position, tokenIndex
						if buffer[position] != rune('A') {
							goto l483
						}
						position++
						goto l482
					l483:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('B') {
							goto l484
						}
						position++
						goto l482
					l484:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('C') {
							goto l485
						}
						position++
						goto l482
					l485:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('D') {
							goto l486
						}
						position++
						goto l482
					l486:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('E') {
							goto l487
						}
						position++
						goto l482
					l487:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('F') {
							goto l488
						}
						position++
						goto l482
					l488:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('G') {
							goto l489
						}
						position++
						goto l482
					l489:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('H') {
							goto l490
						}
						position++
						goto l482
					l490:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('I') {
							goto l491
						}
						position++
						goto l482
					l491:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('J') {
							goto l492
						}
						position++
						goto l482
					l492:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('K') {
							goto l493
						}
						position++
						goto l482
					l493:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('L') {
							goto l494
						}
						position++
						goto l482
					l494:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('M') {
							goto l495
						}
						position++
						goto l482
					l495:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('N') {
							goto l496
						}
						position++
						goto l482
					l496:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('O') {
							goto l497
						}
						position++
						goto l482
					l497:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('P') {
							goto l498
						}
						position++
						goto l482
					l498:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('Q') {
							goto l499
						}
						position++
						goto l482
					l499:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('R') {
							goto l500
						}
						position++
						goto l482
					l500:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('S') {
							goto l501
						}
						position++
						goto l482
					l501:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('T') {
							goto l502
						}
						position++
						goto l482
					l502:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('U') {
							goto l503
						}
						position++
						goto l482
					l503:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('V') {
							goto l504
						}
						position++
						goto l482
					l504:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('W') {
							goto l505
						}
						position++
						goto l482
					l505:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('X') {
							goto l506
						}
						position++
						goto l482
					l506:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('Y') {
							goto l507
						}
						position++
						goto l482
					l507:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('Z') {
							goto l508
						}
						position++
						goto l482
					l508:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('a') {
							goto l509
						}
						position++
						goto l482
					l509:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('b') {
							goto l510
						}
						position++
						goto l482
					l510:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('c') {
							goto l511
						}
						position++
						goto l482
					l511:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('d') {
							goto l512
						}
						position++
						goto l482
					l512:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('e') {
							goto l513
						}
						position++
						goto l482
					l513:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('f') {
							goto l514
						}
						position++
						goto l482
					l514:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('g') {
							goto l515
						}
						position++
						goto l482
					l515:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('h') {
							goto l516
						}
						position++
						goto l482
					l516:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('i') {
							goto l517
						}
						position++
						goto l482
					l517:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('j') {
							goto l518
						}
						position++
						goto l482
					l518:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('k') {
							goto l519
						}
						position++
						goto l482
					l519:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('l') {
							goto l520
						}
						position++
						goto l482
					l520:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('m') {
							goto l521
						}
						position++
						goto l482
					l521:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('n') {
							goto l522
						}
						position++
						goto l482
					l522:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('o') {
							goto l523
						}
						position++
						goto l482
					l523:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('p') {
							goto l524
						}
						position++
						goto l482
					l524:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('q') {
							goto l525
						}
						position++
						goto l482
					l525:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('r') {
							goto l526
						}
						position++
						goto l482
					l526:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('s') {
							goto l527
						}
						position++
						goto l482
					l527:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('t') {
							goto l528
						}
						position++
						goto l482
					l528:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('u') {
							goto l529
						}
						position++
						goto l482
					l529:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('v') {
							goto l530
						}
						position++
						goto l482
					l530:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('w') {
							goto l531
						}
						position++
						goto l482
					l531:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('x') {
							goto l532
						}
						position++
						goto l482
					l532:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('y') {
							goto l533
						}
						position++
						goto l482
					l533:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('z') {
							goto l534
						}
						position++
						goto l482
					l534:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('0') {
							goto l535
						}
						position++
						goto l482
					l535:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('1') {
							goto l536
						}
						position++
						goto l482
					l536:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('2') {
							goto l537
						}
						position++
						goto l482
					l537:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('3') {
							goto l538
						}
						position++
						goto l482
					l538:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('4') {
							goto l539
						}
						position++
						goto l482
					l539:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('5') {
							goto l540
						}
						position++
						goto l482
					l540:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('6') {
							goto l541
						}
						position++
						goto l482
					l541:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('7') {
							goto l542
						}
						position++
						goto l482
					l542:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('8') {
							goto l543
						}
						position++
						goto l482
					l543:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('9') {
							goto l544
						}
						position++
						goto l482
					l544:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('+') {
							goto l545
						}
						position++
						goto l482
					l545:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('/') {
							goto l546
						}
						position++
						goto l482
					l546:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('=') {
							goto l481
						}
						position++
					}
				l482:
					goto l480
				l481:
					position, tokenIndex = position481, tokenIndex481
				}
				if buffer[position] != rune('\'') {
					goto l470
				}
				position++
				add(ruleBase64, position471)
			}
			return true
		l470:
			position, tokenIndex = position470, tokenIndex470
			return false
		},
		/* 54 ByteVectorAtom <- <(Base16 / Base58 / Base64)> */
		func() bool {
			position547, tokenIndex547 := position, tokenIndex
			{
				position548 := position
				{
					position549, tokenIndex549 := position, tokenIndex
					if !_rules[ruleBase16]() {
						goto l550
					}
					goto l549
				l550:
					position, tokenIndex = position549, tokenIndex549
					if !_rules[ruleBase58]() {
						goto l551
					}
					goto l549
				l551:
					position, tokenIndex = position549, tokenIndex549
					if !_rules[ruleBase64]() {
						goto l547
					}
				}
			l549:
				add(ruleByteVectorAtom, position548)
			}
			return true
		l547:
			position, tokenIndex = position547, tokenIndex547
			return false
		},
		/* 55 BooleanAtom <- <((('t' / 'T') ('r' / 'R') ('u' / 'U') ('e' / 'E')) / (('f' / 'F') ('a' / 'A') ('l' / 'L') ('s' / 'S') ('e' / 'E')))> */
		func() bool {
			position552, tokenIndex552 := position, tokenIndex
			{
				position553 := position
				{
					position554, tokenIndex554 := position, tokenIndex
					{
						position556, tokenIndex556 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l557
						}
						position++
						goto l556
					l557:
						position, tokenIndex = position556, tokenIndex556
						if buffer[position] != rune('T') {
							goto l555
						}
						position++
					}
				l556:
					{
						position558, tokenIndex558 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l559
						}
						position++
						goto l558
					l559:
						position, tokenIndex = position558, tokenIndex558
						if buffer[position] != rune('R') {
							goto l555
						}
						position++
					}
				l558:
					{
						position560, tokenIndex560 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l561
						}
						position++
						goto l560
					l561:
						position, tokenIndex = position560, tokenIndex560
						if buffer[position] != rune('U') {
							goto l555
						}
						position++
					}
				l560:
					{
						position562, tokenIndex562 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l563
						}
						position++
						goto l562
					l563:
						position, tokenIndex = position562, tokenIndex562
						if buffer[position] != rune('E') {
							goto l555
						}
						position++
					}
				l562:
					goto l554
				l555:
					position, tokenIndex = position554, tokenIndex554
					{
						position564, tokenIndex564 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l565
						}
						position++
						goto l564
					l565:
						position, tokenIndex = position564, tokenIndex564
						if buffer[position] != rune('F') {
							goto l552
						}
						position++
					}
				l564:
					{
						position566, tokenIndex566 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l567
						}
						position++
						goto l566
					l567:
						position, tokenIndex = position566, tokenIndex566
						if buffer[position] != rune('A') {
							goto l552
						}
						position++
					}
				l566:
					{
						position568, tokenIndex568 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l569
						}
						position++
						goto l568
					l569:
						position, tokenIndex = position568, tokenIndex568
						if buffer[position] != rune('L') {
							goto l552
						}
						position++
					}
				l568:
					{
						position570, tokenIndex570 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l571
						}
						position++
						goto l570
					l571:
						position, tokenIndex = position570, tokenIndex570
						if buffer[position] != rune('S') {
							goto l552
						}
						position++
					}
				l570:
					{
						position572, tokenIndex572 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l573
						}
						position++
						goto l572
					l573:
						position, tokenIndex = position572, tokenIndex572
						if buffer[position] != rune('E') {
							goto l552
						}
						position++
					}
				l572:
				}
			l554:
				add(ruleBooleanAtom, position553)
			}
			return true
		l552:
			position, tokenIndex = position552, tokenIndex552
			return false
		},
		/* 56 StringAtom <- <('"' (UnicodeCharAtom / EscapedCharAtom / CharAtom)* '"')> */
		func() bool {
			position574, tokenIndex574 := position, tokenIndex
			{
				position575 := position
				if buffer[position] != rune('"') {
					goto l574
				}
				position++
			l576:
				{
					position577, tokenIndex577 := position, tokenIndex
					{
						position578, tokenIndex578 := position, tokenIndex
						if !_rules[ruleUnicodeCharAtom]() {
							goto l579
						}
						goto l578
					l579:
						position, tokenIndex = position578, tokenIndex578
						if !_rules[ruleEscapedCharAtom]() {
							goto l580
						}
						goto l578
					l580:
						position, tokenIndex = position578, tokenIndex578
						if !_rules[ruleCharAtom]() {
							goto l577
						}
					}
				l578:
					goto l576
				l577:
					position, tokenIndex = position577, tokenIndex577
				}
				if buffer[position] != rune('"') {
					goto l574
				}
				position++
				add(ruleStringAtom, position575)
			}
			return true
		l574:
			position, tokenIndex = position574, tokenIndex574
			return false
		},
		/* 57 UnicodeCharAtom <- <('\\' ('u' / 'U') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')? ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')? ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')?)> */
		func() bool {
			position581, tokenIndex581 := position, tokenIndex
			{
				position582 := position
				if buffer[position] != rune('\\') {
					goto l581
				}
				position++
				{
					position583, tokenIndex583 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l584
					}
					position++
					goto l583
				l584:
					position, tokenIndex = position583, tokenIndex583
					if buffer[position] != rune('U') {
						goto l581
					}
					position++
				}
			l583:
				{
					position585, tokenIndex585 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l586
					}
					position++
					goto l585
				l586:
					position, tokenIndex = position585, tokenIndex585
					if buffer[position] != rune('A') {
						goto l587
					}
					position++
					goto l585
				l587:
					position, tokenIndex = position585, tokenIndex585
					if buffer[position] != rune('B') {
						goto l588
					}
					position++
					goto l585
				l588:
					position, tokenIndex = position585, tokenIndex585
					if buffer[position] != rune('C') {
						goto l589
					}
					position++
					goto l585
				l589:
					position, tokenIndex = position585, tokenIndex585
					if buffer[position] != rune('D') {
						goto l590
					}
					position++
					goto l585
				l590:
					position, tokenIndex = position585, tokenIndex585
					if buffer[position] != rune('E') {
						goto l591
					}
					position++
					goto l585
				l591:
					position, tokenIndex = position585, tokenIndex585
					if buffer[position] != rune('F') {
						goto l592
					}
					position++
					goto l585
				l592:
					position, tokenIndex = position585, tokenIndex585
					if buffer[position] != rune('a') {
						goto l593
					}
					position++
					goto l585
				l593:
					position, tokenIndex = position585, tokenIndex585
					if buffer[position] != rune('b') {
						goto l594
					}
					position++
					goto l585
				l594:
					position, tokenIndex = position585, tokenIndex585
					if buffer[position] != rune('c') {
						goto l595
					}
					position++
					goto l585
				l595:
					position, tokenIndex = position585, tokenIndex585
					if buffer[position] != rune('d') {
						goto l596
					}
					position++
					goto l585
				l596:
					position, tokenIndex = position585, tokenIndex585
					if buffer[position] != rune('e') {
						goto l597
					}
					position++
					goto l585
				l597:
					position, tokenIndex = position585, tokenIndex585
					if buffer[position] != rune('f') {
						goto l581
					}
					position++
				}
			l585:
				{
					position598, tokenIndex598 := position, tokenIndex
					{
						position600, tokenIndex600 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l601
						}
						position++
						goto l600
					l601:
						position, tokenIndex = position600, tokenIndex600
						if buffer[position] != rune('A') {
							goto l602
						}
						position++
						goto l600
					l602:
						position, tokenIndex = position600, tokenIndex600
						if buffer[position] != rune('B') {
							goto l603
						}
						position++
						goto l600
					l603:
						position, tokenIndex = position600, tokenIndex600
						if buffer[position] != rune('C') {
							goto l604
						}
						position++
						goto l600
					l604:
						position, tokenIndex = position600, tokenIndex600
						if buffer[position] != rune('D') {
							goto l605
						}
						position++
						goto l600
					l605:
						position, tokenIndex = position600, tokenIndex600
						if buffer[position] != rune('E') {
							goto l606
						}
						position++
						goto l600
					l606:
						position, tokenIndex = position600, tokenIndex600
						if buffer[position] != rune('F') {
							goto l607
						}
						position++
						goto l600
					l607:
						position, tokenIndex = position600, tokenIndex600
						if buffer[position] != rune('a') {
							goto l608
						}
						position++
						goto l600
					l608:
						position, tokenIndex = position600, tokenIndex600
						if buffer[position] != rune('b') {
							goto l609
						}
						position++
						goto l600
					l609:
						position, tokenIndex = position600, tokenIndex600
						if buffer[position] != rune('c') {
							goto l610
						}
						position++
						goto l600
					l610:
						position, tokenIndex = position600, tokenIndex600
						if buffer[position] != rune('d') {
							goto l611
						}
						position++
						goto l600
					l611:
						position, tokenIndex = position600, tokenIndex600
						if buffer[position] != rune('e') {
							goto l612
						}
						position++
						goto l600
					l612:
						position, tokenIndex = position600, tokenIndex600
						if buffer[position] != rune('f') {
							goto l598
						}
						position++
					}
				l600:
					goto l599
				l598:
					position, tokenIndex = position598, tokenIndex598
				}
			l599:
				{
					position613, tokenIndex613 := position, tokenIndex
					{
						position615, tokenIndex615 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l616
						}
						position++
						goto l615
					l616:
						position, tokenIndex = position615, tokenIndex615
						if buffer[position] != rune('A') {
							goto l617
						}
						position++
						goto l615
					l617:
						position, tokenIndex = position615, tokenIndex615
						if buffer[position] != rune('B') {
							goto l618
						}
						position++
						goto l615
					l618:
						position, tokenIndex = position615, tokenIndex615
						if buffer[position] != rune('C') {
							goto l619
						}
						position++
						goto l615
					l619:
						position, tokenIndex = position615, tokenIndex615
						if buffer[position] != rune('D') {
							goto l620
						}
						position++
						goto l615
					l620:
						position, tokenIndex = position615, tokenIndex615
						if buffer[position] != rune('E') {
							goto l621
						}
						position++
						goto l615
					l621:
						position, tokenIndex = position615, tokenIndex615
						if buffer[position] != rune('F') {
							goto l622
						}
						position++
						goto l615
					l622:
						position, tokenIndex = position615, tokenIndex615
						if buffer[position] != rune('a') {
							goto l623
						}
						position++
						goto l615
					l623:
						position, tokenIndex = position615, tokenIndex615
						if buffer[position] != rune('b') {
							goto l624
						}
						position++
						goto l615
					l624:
						position, tokenIndex = position615, tokenIndex615
						if buffer[position] != rune('c') {
							goto l625
						}
						position++
						goto l615
					l625:
						position, tokenIndex = position615, tokenIndex615
						if buffer[position] != rune('d') {
							goto l626
						}
						position++
						goto l615
					l626:
						position, tokenIndex = position615, tokenIndex615
						if buffer[position] != rune('e') {
							goto l627
						}
						position++
						goto l615
					l627:
						position, tokenIndex = position615, tokenIndex615
						if buffer[position] != rune('f') {
							goto l613
						}
						position++
					}
				l615:
					goto l614
				l613:
					position, tokenIndex = position613, tokenIndex613
				}
			l614:
				{
					position628, tokenIndex628 := position, tokenIndex
					{
						position630, tokenIndex630 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l631
						}
						position++
						goto l630
					l631:
						position, tokenIndex = position630, tokenIndex630
						if buffer[position] != rune('A') {
							goto l632
						}
						position++
						goto l630
					l632:
						position, tokenIndex = position630, tokenIndex630
						if buffer[position] != rune('B') {
							goto l633
						}
						position++
						goto l630
					l633:
						position, tokenIndex = position630, tokenIndex630
						if buffer[position] != rune('C') {
							goto l634
						}
						position++
						goto l630
					l634:
						position, tokenIndex = position630, tokenIndex630
						if buffer[position] != rune('D') {
							goto l635
						}
						position++
						goto l630
					l635:
						position, tokenIndex = position630, tokenIndex630
						if buffer[position] != rune('E') {
							goto l636
						}
						position++
						goto l630
					l636:
						position, tokenIndex = position630, tokenIndex630
						if buffer[position] != rune('F') {
							goto l637
						}
						position++
						goto l630
					l637:
						position, tokenIndex = position630, tokenIndex630
						if buffer[position] != rune('a') {
							goto l638
						}
						position++
						goto l630
					l638:
						position, tokenIndex = position630, tokenIndex630
						if buffer[position] != rune('b') {
							goto l639
						}
						position++
						goto l630
					l639:
						position, tokenIndex = position630, tokenIndex630
						if buffer[position] != rune('c') {
							goto l640
						}
						position++
						goto l630
					l640:
						position, tokenIndex = position630, tokenIndex630
						if buffer[position] != rune('d') {
							goto l641
						}
						position++
						goto l630
					l641:
						position, tokenIndex = position630, tokenIndex630
						if buffer[position] != rune('e') {
							goto l642
						}
						position++
						goto l630
					l642:
						position, tokenIndex = position630, tokenIndex630
						if buffer[position] != rune('f') {
							goto l628
						}
						position++
					}
				l630:
					goto l629
				l628:
					position, tokenIndex = position628, tokenIndex628
				}
			l629:
				add(ruleUnicodeCharAtom, position582)
			}
			return true
		l581:
			position, tokenIndex = position581, tokenIndex581
			return false
		},
		/* 58 EscapedCharAtom <- <('\\' .)> */
		func() bool {
			position643, tokenIndex643 := position, tokenIndex
			{
				position644 := position
				if buffer[position] != rune('\\') {
					goto l643
				}
				position++
				if !matchDot() {
					goto l643
				}
				add(ruleEscapedCharAtom, position644)
			}
			return true
		l643:
			position, tokenIndex = position643, tokenIndex643
			return false
		},
		/* 59 CharAtom <- <(!'"' .)> */
		func() bool {
			position645, tokenIndex645 := position, tokenIndex
			{
				position646 := position
				{
					position647, tokenIndex647 := position, tokenIndex
					if buffer[position] != rune('"') {
						goto l647
					}
					position++
					goto l645
				l647:
					position, tokenIndex = position647, tokenIndex647
				}
				if !matchDot() {
					goto l645
				}
				add(ruleCharAtom, position646)
			}
			return true
		l645:
			position, tokenIndex = position645, tokenIndex645
			return false
		},
		/* 60 IntegerAtom <- <[0-9]+> */
		func() bool {
			position648, tokenIndex648 := position, tokenIndex
			{
				position649 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l648
				}
				position++
			l650:
				{
					position651, tokenIndex651 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l651
					}
					position++
					goto l650
				l651:
					position, tokenIndex = position651, tokenIndex651
				}
				add(ruleIntegerAtom, position649)
			}
			return true
		l648:
			position, tokenIndex = position648, tokenIndex648
			return false
		},
		/* 61 ListAtom <- <('[' _ ExprSeq? _ ']')> */
		func() bool {
			position652, tokenIndex652 := position, tokenIndex
			{
				position653 := position
				if buffer[position] != rune('[') {
					goto l652
				}
				position++
				if !_rules[rule_]() {
					goto l652
				}
				{
					position654, tokenIndex654 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l654
					}
					goto l655
				l654:
					position, tokenIndex = position654, tokenIndex654
				}
			l655:
				if !_rules[rule_]() {
					goto l652
				}
				if buffer[position] != rune(']') {
					goto l652
				}
				position++
				add(ruleListAtom, position653)
			}
			return true
		l652:
			position, tokenIndex = position652, tokenIndex652
			return false
		},
		/* 62 ExprSeq <- <(Expr ((_ ',' _ ExprSeq) / Expr)?)> */
		func() bool {
			position656, tokenIndex656 := position, tokenIndex
			{
				position657 := position
				if !_rules[ruleExpr]() {
					goto l656
				}
				{
					position658, tokenIndex658 := position, tokenIndex
					{
						position660, tokenIndex660 := position, tokenIndex
						if !_rules[rule_]() {
							goto l661
						}
						if buffer[position] != rune(',') {
							goto l661
						}
						position++
						if !_rules[rule_]() {
							goto l661
						}
						if !_rules[ruleExprSeq]() {
							goto l661
						}
						goto l660
					l661:
						position, tokenIndex = position660, tokenIndex660
						if !_rules[ruleExpr]() {
							goto l658
						}
					}
				l660:
					goto l659
				l658:
					position, tokenIndex = position658, tokenIndex658
				}
			l659:
				add(ruleExprSeq, position657)
			}
			return true
		l656:
			position, tokenIndex = position656, tokenIndex656
			return false
		},
		/* 63 AtomExpr <- <(UnaryOp? _ (FoldMacro / GettableExpr / IfWithError / Match / ConstAtom))> */
		func() bool {
			position662, tokenIndex662 := position, tokenIndex
			{
				position663 := position
				{
					position664, tokenIndex664 := position, tokenIndex
					if !_rules[ruleUnaryOp]() {
						goto l664
					}
					goto l665
				l664:
					position, tokenIndex = position664, tokenIndex664
				}
			l665:
				if !_rules[rule_]() {
					goto l662
				}
				{
					position666, tokenIndex666 := position, tokenIndex
					if !_rules[ruleFoldMacro]() {
						goto l667
					}
					goto l666
				l667:
					position, tokenIndex = position666, tokenIndex666
					if !_rules[ruleGettableExpr]() {
						goto l668
					}
					goto l666
				l668:
					position, tokenIndex = position666, tokenIndex666
					if !_rules[ruleIfWithError]() {
						goto l669
					}
					goto l666
				l669:
					position, tokenIndex = position666, tokenIndex666
					if !_rules[ruleMatch]() {
						goto l670
					}
					goto l666
				l670:
					position, tokenIndex = position666, tokenIndex666
					if !_rules[ruleConstAtom]() {
						goto l662
					}
				}
			l666:
				add(ruleAtomExpr, position663)
			}
			return true
		l662:
			position, tokenIndex = position662, tokenIndex662
			return false
		},
		/* 64 MultGroupOpAtom <- <(AtomExpr (_ MultGroupOp _ AtomExpr)*)> */
		func() bool {
			position671, tokenIndex671 := position, tokenIndex
			{
				position672 := position
				if !_rules[ruleAtomExpr]() {
					goto l671
				}
			l673:
				{
					position674, tokenIndex674 := position, tokenIndex
					if !_rules[rule_]() {
						goto l674
					}
					if !_rules[ruleMultGroupOp]() {
						goto l674
					}
					if !_rules[rule_]() {
						goto l674
					}
					if !_rules[ruleAtomExpr]() {
						goto l674
					}
					goto l673
				l674:
					position, tokenIndex = position674, tokenIndex674
				}
				add(ruleMultGroupOpAtom, position672)
			}
			return true
		l671:
			position, tokenIndex = position671, tokenIndex671
			return false
		},
		/* 65 SumGroupOpAtom <- <(MultGroupOpAtom (_ SumGroupOp _ MultGroupOpAtom)*)> */
		func() bool {
			position675, tokenIndex675 := position, tokenIndex
			{
				position676 := position
				if !_rules[ruleMultGroupOpAtom]() {
					goto l675
				}
			l677:
				{
					position678, tokenIndex678 := position, tokenIndex
					if !_rules[rule_]() {
						goto l678
					}
					if !_rules[ruleSumGroupOp]() {
						goto l678
					}
					if !_rules[rule_]() {
						goto l678
					}
					if !_rules[ruleMultGroupOpAtom]() {
						goto l678
					}
					goto l677
				l678:
					position, tokenIndex = position678, tokenIndex678
				}
				add(ruleSumGroupOpAtom, position676)
			}
			return true
		l675:
			position, tokenIndex = position675, tokenIndex675
			return false
		},
		/* 66 ConsOpAtom <- <(SumGroupOpAtom (_ ConsOp _ SumGroupOpAtom)*)> */
		func() bool {
			position679, tokenIndex679 := position, tokenIndex
			{
				position680 := position
				if !_rules[ruleSumGroupOpAtom]() {
					goto l679
				}
			l681:
				{
					position682, tokenIndex682 := position, tokenIndex
					if !_rules[rule_]() {
						goto l682
					}
					if !_rules[ruleConsOp]() {
						goto l682
					}
					if !_rules[rule_]() {
						goto l682
					}
					if !_rules[ruleSumGroupOpAtom]() {
						goto l682
					}
					goto l681
				l682:
					position, tokenIndex = position682, tokenIndex682
				}
				add(ruleConsOpAtom, position680)
			}
			return true
		l679:
			position, tokenIndex = position679, tokenIndex679
			return false
		},
		/* 67 CompareGroupOpAtom <- <(ConsOpAtom (_ CompareGroupOp _ ConsOpAtom)*)> */
		func() bool {
			position683, tokenIndex683 := position, tokenIndex
			{
				position684 := position
				if !_rules[ruleConsOpAtom]() {
					goto l683
				}
			l685:
				{
					position686, tokenIndex686 := position, tokenIndex
					if !_rules[rule_]() {
						goto l686
					}
					if !_rules[ruleCompareGroupOp]() {
						goto l686
					}
					if !_rules[rule_]() {
						goto l686
					}
					if !_rules[ruleConsOpAtom]() {
						goto l686
					}
					goto l685
				l686:
					position, tokenIndex = position686, tokenIndex686
				}
				add(ruleCompareGroupOpAtom, position684)
			}
			return true
		l683:
			position, tokenIndex = position683, tokenIndex683
			return false
		},
		/* 68 EqualityGroupOpAtom <- <(CompareGroupOpAtom (_ EqGroupOp _ CompareGroupOpAtom)*)> */
		func() bool {
			position687, tokenIndex687 := position, tokenIndex
			{
				position688 := position
				if !_rules[ruleCompareGroupOpAtom]() {
					goto l687
				}
			l689:
				{
					position690, tokenIndex690 := position, tokenIndex
					if !_rules[rule_]() {
						goto l690
					}
					if !_rules[ruleEqGroupOp]() {
						goto l690
					}
					if !_rules[rule_]() {
						goto l690
					}
					if !_rules[ruleCompareGroupOpAtom]() {
						goto l690
					}
					goto l689
				l690:
					position, tokenIndex = position690, tokenIndex690
				}
				add(ruleEqualityGroupOpAtom, position688)
			}
			return true
		l687:
			position, tokenIndex = position687, tokenIndex687
			return false
		},
		/* 69 AndOpAtom <- <(EqualityGroupOpAtom (_ AndOp _ EqualityGroupOpAtom)*)> */
		func() bool {
			position691, tokenIndex691 := position, tokenIndex
			{
				position692 := position
				if !_rules[ruleEqualityGroupOpAtom]() {
					goto l691
				}
			l693:
				{
					position694, tokenIndex694 := position, tokenIndex
					if !_rules[rule_]() {
						goto l694
					}
					if !_rules[ruleAndOp]() {
						goto l694
					}
					if !_rules[rule_]() {
						goto l694
					}
					if !_rules[ruleEqualityGroupOpAtom]() {
						goto l694
					}
					goto l693
				l694:
					position, tokenIndex = position694, tokenIndex694
				}
				add(ruleAndOpAtom, position692)
			}
			return true
		l691:
			position, tokenIndex = position691, tokenIndex691
			return false
		},
		/* 70 OrOpAtom <- <(AndOpAtom (_ OrOp _ AndOpAtom)*)> */
		func() bool {
			position695, tokenIndex695 := position, tokenIndex
			{
				position696 := position
				if !_rules[ruleAndOpAtom]() {
					goto l695
				}
			l697:
				{
					position698, tokenIndex698 := position, tokenIndex
					if !_rules[rule_]() {
						goto l698
					}
					if !_rules[ruleOrOp]() {
						goto l698
					}
					if !_rules[rule_]() {
						goto l698
					}
					if !_rules[ruleAndOpAtom]() {
						goto l698
					}
					goto l697
				l698:
					position, tokenIndex = position698, tokenIndex698
				}
				add(ruleOrOpAtom, position696)
			}
			return true
		l695:
			position, tokenIndex = position695, tokenIndex695
			return false
		},
		/* 71 Expr <- <OrOpAtom> */
		func() bool {
			position699, tokenIndex699 := position, tokenIndex
			{
				position700 := position
				if !_rules[ruleOrOpAtom]() {
					goto l699
				}
				add(ruleExpr, position700)
			}
			return true
		l699:
			position, tokenIndex = position699, tokenIndex699
			return false
		},
		/* 72 ParExpr <- <('(' _ Expr _ ')')> */
		func() bool {
			position701, tokenIndex701 := position, tokenIndex
			{
				position702 := position
				if buffer[position] != rune('(') {
					goto l701
				}
				position++
				if !_rules[rule_]() {
					goto l701
				}
				if !_rules[ruleExpr]() {
					goto l701
				}
				if !_rules[rule_]() {
					goto l701
				}
				if buffer[position] != rune(')') {
					goto l701
				}
				position++
				add(ruleParExpr, position702)
			}
			return true
		l701:
			position, tokenIndex = position701, tokenIndex701
			return false
		},
		/* 73 GettableExpr <- <((ParExpr / Block / FunctionCall / IdentifierAtom) (_ (ListAccess / ('.' _ (FunctionCallAccess / IdentifierAtomAccess))))*)> */
		func() bool {
			position703, tokenIndex703 := position, tokenIndex
			{
				position704 := position
				{
					position705, tokenIndex705 := position, tokenIndex
					if !_rules[ruleParExpr]() {
						goto l706
					}
					goto l705
				l706:
					position, tokenIndex = position705, tokenIndex705
					if !_rules[ruleBlock]() {
						goto l707
					}
					goto l705
				l707:
					position, tokenIndex = position705, tokenIndex705
					if !_rules[ruleFunctionCall]() {
						goto l708
					}
					goto l705
				l708:
					position, tokenIndex = position705, tokenIndex705
					if !_rules[ruleIdentifierAtom]() {
						goto l703
					}
				}
			l705:
			l709:
				{
					position710, tokenIndex710 := position, tokenIndex
					if !_rules[rule_]() {
						goto l710
					}
					{
						position711, tokenIndex711 := position, tokenIndex
						if !_rules[ruleListAccess]() {
							goto l712
						}
						goto l711
					l712:
						position, tokenIndex = position711, tokenIndex711
						if buffer[position] != rune('.') {
							goto l710
						}
						position++
						if !_rules[rule_]() {
							goto l710
						}
						{
							position713, tokenIndex713 := position, tokenIndex
							if !_rules[ruleFunctionCallAccess]() {
								goto l714
							}
							goto l713
						l714:
							position, tokenIndex = position713, tokenIndex713
							if !_rules[ruleIdentifierAtomAccess]() {
								goto l710
							}
						}
					l713:
					}
				l711:
					goto l709
				l710:
					position, tokenIndex = position710, tokenIndex710
				}
				add(ruleGettableExpr, position704)
			}
			return true
		l703:
			position, tokenIndex = position703, tokenIndex703
			return false
		},
		/* 74 FunctionCallAccess <- <FunctionCall> */
		func() bool {
			position715, tokenIndex715 := position, tokenIndex
			{
				position716 := position
				if !_rules[ruleFunctionCall]() {
					goto l715
				}
				add(ruleFunctionCallAccess, position716)
			}
			return true
		l715:
			position, tokenIndex = position715, tokenIndex715
			return false
		},
		/* 75 IdentifierAtomAccess <- <IdentifierAtom> */
		func() bool {
			position717, tokenIndex717 := position, tokenIndex
			{
				position718 := position
				if !_rules[ruleIdentifierAtom]() {
					goto l717
				}
				add(ruleIdentifierAtomAccess, position718)
			}
			return true
		l717:
			position, tokenIndex = position717, tokenIndex717
			return false
		},
		/* 76 ListAccess <- <('[' _ (Expr / IdentifierAtom) _ ']')> */
		func() bool {
			position719, tokenIndex719 := position, tokenIndex
			{
				position720 := position
				if buffer[position] != rune('[') {
					goto l719
				}
				position++
				if !_rules[rule_]() {
					goto l719
				}
				{
					position721, tokenIndex721 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l722
					}
					goto l721
				l722:
					position, tokenIndex = position721, tokenIndex721
					if !_rules[ruleIdentifierAtom]() {
						goto l719
					}
				}
			l721:
				if !_rules[rule_]() {
					goto l719
				}
				if buffer[position] != rune(']') {
					goto l719
				}
				position++
				add(ruleListAccess, position720)
			}
			return true
		l719:
			position, tokenIndex = position719, tokenIndex719
			return false
		},
		/* 77 Block <- <('{' (_ Declaration)* _ BlockDecExprSep? _ Expr _ '}')> */
		func() bool {
			position723, tokenIndex723 := position, tokenIndex
			{
				position724 := position
				if buffer[position] != rune('{') {
					goto l723
				}
				position++
			l725:
				{
					position726, tokenIndex726 := position, tokenIndex
					if !_rules[rule_]() {
						goto l726
					}
					if !_rules[ruleDeclaration]() {
						goto l726
					}
					goto l725
				l726:
					position, tokenIndex = position726, tokenIndex726
				}
				if !_rules[rule_]() {
					goto l723
				}
				{
					position727, tokenIndex727 := position, tokenIndex
					if !_rules[ruleBlockDecExprSep]() {
						goto l727
					}
					goto l728
				l727:
					position, tokenIndex = position727, tokenIndex727
				}
			l728:
				if !_rules[rule_]() {
					goto l723
				}
				if !_rules[ruleExpr]() {
					goto l723
				}
				if !_rules[rule_]() {
					goto l723
				}
				if buffer[position] != rune('}') {
					goto l723
				}
				position++
				add(ruleBlock, position724)
			}
			return true
		l723:
			position, tokenIndex = position723, tokenIndex723
			return false
		},
		/* 78 BlockWithoutPar <- <((_ Declaration)* _ BlockDecExprSep? _ Expr)> */
		func() bool {
			position729, tokenIndex729 := position, tokenIndex
			{
				position730 := position
			l731:
				{
					position732, tokenIndex732 := position, tokenIndex
					if !_rules[rule_]() {
						goto l732
					}
					if !_rules[ruleDeclaration]() {
						goto l732
					}
					goto l731
				l732:
					position, tokenIndex = position732, tokenIndex732
				}
				if !_rules[rule_]() {
					goto l729
				}
				{
					position733, tokenIndex733 := position, tokenIndex
					if !_rules[ruleBlockDecExprSep]() {
						goto l733
					}
					goto l734
				l733:
					position, tokenIndex = position733, tokenIndex733
				}
			l734:
				if !_rules[rule_]() {
					goto l729
				}
				if !_rules[ruleExpr]() {
					goto l729
				}
				add(ruleBlockWithoutPar, position730)
			}
			return true
		l729:
			position, tokenIndex = position729, tokenIndex729
			return false
		},
		/* 79 BlockDecExprSep <- <':'> */
		func() bool {
			position735, tokenIndex735 := position, tokenIndex
			{
				position736 := position
				if buffer[position] != rune(':') {
					goto l735
				}
				position++
				add(ruleBlockDecExprSep, position736)
			}
			return true
		l735:
			position, tokenIndex = position735, tokenIndex735
			return false
		},
		/* 80 FunctionCall <- <(IdentifierAtom _ '(' _ ExprSeq? _ ')')> */
		func() bool {
			position737, tokenIndex737 := position, tokenIndex
			{
				position738 := position
				if !_rules[ruleIdentifierAtom]() {
					goto l737
				}
				if !_rules[rule_]() {
					goto l737
				}
				if buffer[position] != rune('(') {
					goto l737
				}
				position++
				if !_rules[rule_]() {
					goto l737
				}
				{
					position739, tokenIndex739 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l739
					}
					goto l740
				l739:
					position, tokenIndex = position739, tokenIndex739
				}
			l740:
				if !_rules[rule_]() {
					goto l737
				}
				if buffer[position] != rune(')') {
					goto l737
				}
				position++
				add(ruleFunctionCall, position738)
			}
			return true
		l737:
			position, tokenIndex = position737, tokenIndex737
			return false
		},
		/* 81 FoldMacro <- <(('f' / 'F') ('o' / 'O') ('l' / 'L') ('d' / 'D') _ '<' _ IntegerAtom _ '>' _ '(' _ Expr _ ',' _ Expr _ ',' _ IdentifierAtom _ ')')> */
		func() bool {
			position741, tokenIndex741 := position, tokenIndex
			{
				position742 := position
				{
					position743, tokenIndex743 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l744
					}
					position++
					goto l743
				l744:
					position, tokenIndex = position743, tokenIndex743
					if buffer[position] != rune('F') {
						goto l741
					}
					position++
				}
			l743:
				{
					position745, tokenIndex745 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l746
					}
					position++
					goto l745
				l746:
					position, tokenIndex = position745, tokenIndex745
					if buffer[position] != rune('O') {
						goto l741
					}
					position++
				}
			l745:
				{
					position747, tokenIndex747 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l748
					}
					position++
					goto l747
				l748:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('L') {
						goto l741
					}
					position++
				}
			l747:
				{
					position749, tokenIndex749 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l750
					}
					position++
					goto l749
				l750:
					position, tokenIndex = position749, tokenIndex749
					if buffer[position] != rune('D') {
						goto l741
					}
					position++
				}
			l749:
				if !_rules[rule_]() {
					goto l741
				}
				if buffer[position] != rune('<') {
					goto l741
				}
				position++
				if !_rules[rule_]() {
					goto l741
				}
				if !_rules[ruleIntegerAtom]() {
					goto l741
				}
				if !_rules[rule_]() {
					goto l741
				}
				if buffer[position] != rune('>') {
					goto l741
				}
				position++
				if !_rules[rule_]() {
					goto l741
				}
				if buffer[position] != rune('(') {
					goto l741
				}
				position++
				if !_rules[rule_]() {
					goto l741
				}
				if !_rules[ruleExpr]() {
					goto l741
				}
				if !_rules[rule_]() {
					goto l741
				}
				if buffer[position] != rune(',') {
					goto l741
				}
				position++
				if !_rules[rule_]() {
					goto l741
				}
				if !_rules[ruleExpr]() {
					goto l741
				}
				if !_rules[rule_]() {
					goto l741
				}
				if buffer[position] != rune(',') {
					goto l741
				}
				position++
				if !_rules[rule_]() {
					goto l741
				}
				if !_rules[ruleIdentifierAtom]() {
					goto l741
				}
				if !_rules[rule_]() {
					goto l741
				}
				if buffer[position] != rune(')') {
					goto l741
				}
				position++
				add(ruleFoldMacro, position742)
			}
			return true
		l741:
			position, tokenIndex = position741, tokenIndex741
			return false
		},
		/* 82 IfWithError <- <(If / FailedIfWithoutElse)> */
		func() bool {
			position751, tokenIndex751 := position, tokenIndex
			{
				position752 := position
				{
					position753, tokenIndex753 := position, tokenIndex
					if !_rules[ruleIf]() {
						goto l754
					}
					goto l753
				l754:
					position, tokenIndex = position753, tokenIndex753
					if !_rules[ruleFailedIfWithoutElse]() {
						goto l751
					}
				}
			l753:
				add(ruleIfWithError, position752)
			}
			return true
		l751:
			position, tokenIndex = position751, tokenIndex751
			return false
		},
		/* 83 If <- <(('i' / 'I') ('f' / 'F') _ Expr _ (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) _ Expr _ (('e' / 'E') ('l' / 'L') ('s' / 'S') ('e' / 'E')) _ Expr)> */
		func() bool {
			position755, tokenIndex755 := position, tokenIndex
			{
				position756 := position
				{
					position757, tokenIndex757 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l758
					}
					position++
					goto l757
				l758:
					position, tokenIndex = position757, tokenIndex757
					if buffer[position] != rune('I') {
						goto l755
					}
					position++
				}
			l757:
				{
					position759, tokenIndex759 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l760
					}
					position++
					goto l759
				l760:
					position, tokenIndex = position759, tokenIndex759
					if buffer[position] != rune('F') {
						goto l755
					}
					position++
				}
			l759:
				if !_rules[rule_]() {
					goto l755
				}
				if !_rules[ruleExpr]() {
					goto l755
				}
				if !_rules[rule_]() {
					goto l755
				}
				{
					position761, tokenIndex761 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l762
					}
					position++
					goto l761
				l762:
					position, tokenIndex = position761, tokenIndex761
					if buffer[position] != rune('T') {
						goto l755
					}
					position++
				}
			l761:
				{
					position763, tokenIndex763 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l764
					}
					position++
					goto l763
				l764:
					position, tokenIndex = position763, tokenIndex763
					if buffer[position] != rune('H') {
						goto l755
					}
					position++
				}
			l763:
				{
					position765, tokenIndex765 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l766
					}
					position++
					goto l765
				l766:
					position, tokenIndex = position765, tokenIndex765
					if buffer[position] != rune('E') {
						goto l755
					}
					position++
				}
			l765:
				{
					position767, tokenIndex767 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l768
					}
					position++
					goto l767
				l768:
					position, tokenIndex = position767, tokenIndex767
					if buffer[position] != rune('N') {
						goto l755
					}
					position++
				}
			l767:
				if !_rules[rule_]() {
					goto l755
				}
				if !_rules[ruleExpr]() {
					goto l755
				}
				if !_rules[rule_]() {
					goto l755
				}
				{
					position769, tokenIndex769 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l770
					}
					position++
					goto l769
				l770:
					position, tokenIndex = position769, tokenIndex769
					if buffer[position] != rune('E') {
						goto l755
					}
					position++
				}
			l769:
				{
					position771, tokenIndex771 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l772
					}
					position++
					goto l771
				l772:
					position, tokenIndex = position771, tokenIndex771
					if buffer[position] != rune('L') {
						goto l755
					}
					position++
				}
			l771:
				{
					position773, tokenIndex773 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l774
					}
					position++
					goto l773
				l774:
					position, tokenIndex = position773, tokenIndex773
					if buffer[position] != rune('S') {
						goto l755
					}
					position++
				}
			l773:
				{
					position775, tokenIndex775 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l776
					}
					position++
					goto l775
				l776:
					position, tokenIndex = position775, tokenIndex775
					if buffer[position] != rune('E') {
						goto l755
					}
					position++
				}
			l775:
				if !_rules[rule_]() {
					goto l755
				}
				if !_rules[ruleExpr]() {
					goto l755
				}
				add(ruleIf, position756)
			}
			return true
		l755:
			position, tokenIndex = position755, tokenIndex755
			return false
		},
		/* 84 FailedIfWithoutElse <- <(('i' / 'I') ('f' / 'F') _ Expr _ (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) _ Expr)> */
		func() bool {
			position777, tokenIndex777 := position, tokenIndex
			{
				position778 := position
				{
					position779, tokenIndex779 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l780
					}
					position++
					goto l779
				l780:
					position, tokenIndex = position779, tokenIndex779
					if buffer[position] != rune('I') {
						goto l777
					}
					position++
				}
			l779:
				{
					position781, tokenIndex781 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l782
					}
					position++
					goto l781
				l782:
					position, tokenIndex = position781, tokenIndex781
					if buffer[position] != rune('F') {
						goto l777
					}
					position++
				}
			l781:
				if !_rules[rule_]() {
					goto l777
				}
				if !_rules[ruleExpr]() {
					goto l777
				}
				if !_rules[rule_]() {
					goto l777
				}
				{
					position783, tokenIndex783 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l784
					}
					position++
					goto l783
				l784:
					position, tokenIndex = position783, tokenIndex783
					if buffer[position] != rune('T') {
						goto l777
					}
					position++
				}
			l783:
				{
					position785, tokenIndex785 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l786
					}
					position++
					goto l785
				l786:
					position, tokenIndex = position785, tokenIndex785
					if buffer[position] != rune('H') {
						goto l777
					}
					position++
				}
			l785:
				{
					position787, tokenIndex787 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l788
					}
					position++
					goto l787
				l788:
					position, tokenIndex = position787, tokenIndex787
					if buffer[position] != rune('E') {
						goto l777
					}
					position++
				}
			l787:
				{
					position789, tokenIndex789 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l790
					}
					position++
					goto l789
				l790:
					position, tokenIndex = position789, tokenIndex789
					if buffer[position] != rune('N') {
						goto l777
					}
					position++
				}
			l789:
				if !_rules[rule_]() {
					goto l777
				}
				if !_rules[ruleExpr]() {
					goto l777
				}
				add(ruleFailedIfWithoutElse, position778)
			}
			return true
		l777:
			position, tokenIndex = position777, tokenIndex777
			return false
		},
		/* 85 Match <- <(('m' / 'M') ('a' / 'A') ('t' / 'T') ('c' / 'C') ('h' / 'H') _ Expr _ '{' (_ MatchCase)+ _ '}')> */
		func() bool {
			position791, tokenIndex791 := position, tokenIndex
			{
				position792 := position
				{
					position793, tokenIndex793 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l794
					}
					position++
					goto l793
				l794:
					position, tokenIndex = position793, tokenIndex793
					if buffer[position] != rune('M') {
						goto l791
					}
					position++
				}
			l793:
				{
					position795, tokenIndex795 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l796
					}
					position++
					goto l795
				l796:
					position, tokenIndex = position795, tokenIndex795
					if buffer[position] != rune('A') {
						goto l791
					}
					position++
				}
			l795:
				{
					position797, tokenIndex797 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l798
					}
					position++
					goto l797
				l798:
					position, tokenIndex = position797, tokenIndex797
					if buffer[position] != rune('T') {
						goto l791
					}
					position++
				}
			l797:
				{
					position799, tokenIndex799 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l800
					}
					position++
					goto l799
				l800:
					position, tokenIndex = position799, tokenIndex799
					if buffer[position] != rune('C') {
						goto l791
					}
					position++
				}
			l799:
				{
					position801, tokenIndex801 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l802
					}
					position++
					goto l801
				l802:
					position, tokenIndex = position801, tokenIndex801
					if buffer[position] != rune('H') {
						goto l791
					}
					position++
				}
			l801:
				if !_rules[rule_]() {
					goto l791
				}
				if !_rules[ruleExpr]() {
					goto l791
				}
				if !_rules[rule_]() {
					goto l791
				}
				if buffer[position] != rune('{') {
					goto l791
				}
				position++
				if !_rules[rule_]() {
					goto l791
				}
				if !_rules[ruleMatchCase]() {
					goto l791
				}
			l803:
				{
					position804, tokenIndex804 := position, tokenIndex
					if !_rules[rule_]() {
						goto l804
					}
					if !_rules[ruleMatchCase]() {
						goto l804
					}
					goto l803
				l804:
					position, tokenIndex = position804, tokenIndex804
				}
				if !_rules[rule_]() {
					goto l791
				}
				if buffer[position] != rune('}') {
					goto l791
				}
				position++
				add(ruleMatch, position792)
			}
			return true
		l791:
			position, tokenIndex = position791, tokenIndex791
			return false
		},
		/* 86 MatchCase <- <(('c' / 'C') ('a' / 'A') ('s' / 'S') ('e' / 'E') _ ((IdentifierAtom _ (':' _ TypesAtom)?) / DefaultMatchCasePart) _ ('=' '>') _ BlockWithoutPar)> */
		func() bool {
			position805, tokenIndex805 := position, tokenIndex
			{
				position806 := position
				{
					position807, tokenIndex807 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l808
					}
					position++
					goto l807
				l808:
					position, tokenIndex = position807, tokenIndex807
					if buffer[position] != rune('C') {
						goto l805
					}
					position++
				}
			l807:
				{
					position809, tokenIndex809 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l810
					}
					position++
					goto l809
				l810:
					position, tokenIndex = position809, tokenIndex809
					if buffer[position] != rune('A') {
						goto l805
					}
					position++
				}
			l809:
				{
					position811, tokenIndex811 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l812
					}
					position++
					goto l811
				l812:
					position, tokenIndex = position811, tokenIndex811
					if buffer[position] != rune('S') {
						goto l805
					}
					position++
				}
			l811:
				{
					position813, tokenIndex813 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l814
					}
					position++
					goto l813
				l814:
					position, tokenIndex = position813, tokenIndex813
					if buffer[position] != rune('E') {
						goto l805
					}
					position++
				}
			l813:
				if !_rules[rule_]() {
					goto l805
				}
				{
					position815, tokenIndex815 := position, tokenIndex
					if !_rules[ruleIdentifierAtom]() {
						goto l816
					}
					if !_rules[rule_]() {
						goto l816
					}
					{
						position817, tokenIndex817 := position, tokenIndex
						if buffer[position] != rune(':') {
							goto l817
						}
						position++
						if !_rules[rule_]() {
							goto l817
						}
						if !_rules[ruleTypesAtom]() {
							goto l817
						}
						goto l818
					l817:
						position, tokenIndex = position817, tokenIndex817
					}
				l818:
					goto l815
				l816:
					position, tokenIndex = position815, tokenIndex815
					if !_rules[ruleDefaultMatchCasePart]() {
						goto l805
					}
				}
			l815:
				if !_rules[rule_]() {
					goto l805
				}
				if buffer[position] != rune('=') {
					goto l805
				}
				position++
				if buffer[position] != rune('>') {
					goto l805
				}
				position++
				if !_rules[rule_]() {
					goto l805
				}
				if !_rules[ruleBlockWithoutPar]() {
					goto l805
				}
				add(ruleMatchCase, position806)
			}
			return true
		l805:
			position, tokenIndex = position805, tokenIndex805
			return false
		},
		/* 87 DefaultMatchCasePart <- <('{' _ (':' _ TypesAtom)?)> */
		func() bool {
			position819, tokenIndex819 := position, tokenIndex
			{
				position820 := position
				if buffer[position] != rune('{') {
					goto l819
				}
				position++
				if !_rules[rule_]() {
					goto l819
				}
				{
					position821, tokenIndex821 := position, tokenIndex
					if buffer[position] != rune(':') {
						goto l821
					}
					position++
					if !_rules[rule_]() {
						goto l821
					}
					if !_rules[ruleTypesAtom]() {
						goto l821
					}
					goto l822
				l821:
					position, tokenIndex = position821, tokenIndex821
				}
			l822:
				add(ruleDefaultMatchCasePart, position820)
			}
			return true
		l819:
			position, tokenIndex = position819, tokenIndex819
			return false
		},
	}
	p.rules = _rules
	return nil
}

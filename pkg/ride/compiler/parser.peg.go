package compiler

// Code generated by peg -output=parser.peg.go ride.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleCode
	ruleDAppRoot
	ruleScriptRoot
	ruleWS
	ruleEOL
	ruleComment
	rule_
	ruleEOF
	ruleDirectiveName
	ruleUpperCaseString
	ruleIntString
	rulePathString
	ruleDirective
	ruleDeclaration
	ruleVariable
	ruleFunc
	ruleFuncArg
	ruleFuncArgSeq
	ruleAnnotatedFunc
	ruleAnnotation
	ruleIdentifierAtomSeq
	ruleAnnotationSeq
	ruleOrOp
	ruleAndOp
	ruleEqGroupOp
	ruleEqOp
	ruleNeOp
	ruleCompareGroupOp
	ruleGtOp
	ruleGeOp
	ruleLtOp
	ruleLeOp
	ruleConsOp
	ruleSumGroupOp
	ruleSumOp
	ruleSubOp
	ruleMultGroupOp
	ruleMulOp
	ruleDivOp
	ruleModOp
	ruleUnaryOp
	rulePositiveOp
	ruleNegativeOp
	ruleNotOp
	ruleReservedWords
	ruleConstAtom
	ruleIdentifierAtom
	ruleGenericTypesAtom
	ruleOneGenericTypeAtom
	ruleTypesAtom
	ruleOneTypeAtom
	ruleBase16
	ruleBase58
	ruleBase64
	ruleByteVectorAtom
	ruleBooleanAtom
	ruleStringAtom
	ruleUnicodeCharAtom
	ruleEscapedCharAtom
	ruleCharAtom
	ruleIntegerAtom
	ruleListAtom
	ruleExprSeq
	ruleAtomExpr
	ruleMultGroupOpAtom
	ruleSumGroupOpAtom
	ruleConsOpAtom
	ruleCompareGroupOpAtom
	ruleEqualityGroupOpAtom
	ruleAndOpAtom
	ruleOrOpAtom
	ruleExpr
	ruleParExpr
	ruleGettableExpr
	ruleFunctionCallAccess
	ruleIdentifierAtomAccess
	ruleListAccess
	ruleBlock
	ruleBlockWithoutPar
	ruleBlockDecExprSep
	ruleFunctionCall
	ruleFoldMacro
	ruleIfWithError
	ruleIf
	ruleFailedIfWithoutElse
	ruleMatch
	ruleMatchCase
	ruleDefaultMatchCasePart
)

var rul3s = [...]string{
	"Unknown",
	"Code",
	"DAppRoot",
	"ScriptRoot",
	"WS",
	"EOL",
	"Comment",
	"_",
	"EOF",
	"DirectiveName",
	"UpperCaseString",
	"IntString",
	"PathString",
	"Directive",
	"Declaration",
	"Variable",
	"Func",
	"FuncArg",
	"FuncArgSeq",
	"AnnotatedFunc",
	"Annotation",
	"IdentifierAtomSeq",
	"AnnotationSeq",
	"OrOp",
	"AndOp",
	"EqGroupOp",
	"EqOp",
	"NeOp",
	"CompareGroupOp",
	"GtOp",
	"GeOp",
	"LtOp",
	"LeOp",
	"ConsOp",
	"SumGroupOp",
	"SumOp",
	"SubOp",
	"MultGroupOp",
	"MulOp",
	"DivOp",
	"ModOp",
	"UnaryOp",
	"PositiveOp",
	"NegativeOp",
	"NotOp",
	"ReservedWords",
	"ConstAtom",
	"IdentifierAtom",
	"GenericTypesAtom",
	"OneGenericTypeAtom",
	"TypesAtom",
	"OneTypeAtom",
	"Base16",
	"Base58",
	"Base64",
	"ByteVectorAtom",
	"BooleanAtom",
	"StringAtom",
	"UnicodeCharAtom",
	"EscapedCharAtom",
	"CharAtom",
	"IntegerAtom",
	"ListAtom",
	"ExprSeq",
	"AtomExpr",
	"MultGroupOpAtom",
	"SumGroupOpAtom",
	"ConsOpAtom",
	"CompareGroupOpAtom",
	"EqualityGroupOpAtom",
	"AndOpAtom",
	"OrOpAtom",
	"Expr",
	"ParExpr",
	"GettableExpr",
	"FunctionCallAccess",
	"IdentifierAtomAccess",
	"ListAccess",
	"Block",
	"BlockWithoutPar",
	"BlockDecExprSep",
	"FunctionCall",
	"FoldMacro",
	"IfWithError",
	"If",
	"FailedIfWithoutElse",
	"Match",
	"MatchCase",
	"DefaultMatchCasePart",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Buffer string
	buffer []rune
	rules  [89]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Code <- <(DAppRoot / ScriptRoot)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[ruleDAppRoot]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[ruleScriptRoot]() {
						goto l0
					}
				}
			l2:
				add(ruleCode, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 DAppRoot <- <(_ (Directive _)* (_ Declaration)* (_ AnnotatedFunc)* _ EOF)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
				if !_rules[rule_]() {
					goto l4
				}
			l6:
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l7
					}
					if !_rules[rule_]() {
						goto l7
					}
					goto l6
				l7:
					position, tokenIndex = position7, tokenIndex7
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[rule_]() {
						goto l9
					}
					if !_rules[ruleDeclaration]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
			l10:
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[rule_]() {
						goto l11
					}
					if !_rules[ruleAnnotatedFunc]() {
						goto l11
					}
					goto l10
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				if !_rules[rule_]() {
					goto l4
				}
				if !_rules[ruleEOF]() {
					goto l4
				}
				add(ruleDAppRoot, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 ScriptRoot <- <(_ (Directive _)* (_ Declaration)* _ BlockDecExprSep? _ Expr _ EOF)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[rule_]() {
					goto l12
				}
			l14:
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l15
					}
					if !_rules[rule_]() {
						goto l15
					}
					goto l14
				l15:
					position, tokenIndex = position15, tokenIndex15
				}
			l16:
				{
					position17, tokenIndex17 := position, tokenIndex
					if !_rules[rule_]() {
						goto l17
					}
					if !_rules[ruleDeclaration]() {
						goto l17
					}
					goto l16
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				if !_rules[rule_]() {
					goto l12
				}
				{
					position18, tokenIndex18 := position, tokenIndex
					if !_rules[ruleBlockDecExprSep]() {
						goto l18
					}
					goto l19
				l18:
					position, tokenIndex = position18, tokenIndex18
				}
			l19:
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleExpr]() {
					goto l12
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleEOF]() {
					goto l12
				}
				add(ruleScriptRoot, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 WS <- <(' ' / '\t')> */
		func() bool {
			position20, tokenIndex20 := position, tokenIndex
			{
				position21 := position
				{
					position22, tokenIndex22 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l23
					}
					position++
					goto l22
				l23:
					position, tokenIndex = position22, tokenIndex22
					if buffer[position] != rune('\t') {
						goto l20
					}
					position++
				}
			l22:
				add(ruleWS, position21)
			}
			return true
		l20:
			position, tokenIndex = position20, tokenIndex20
			return false
		},
		/* 4 EOL <- <('\n' / '\r' / '\f')> */
		func() bool {
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26, tokenIndex26 := position, tokenIndex
					if buffer[position] != rune('\n') {
						goto l27
					}
					position++
					goto l26
				l27:
					position, tokenIndex = position26, tokenIndex26
					if buffer[position] != rune('\r') {
						goto l28
					}
					position++
					goto l26
				l28:
					position, tokenIndex = position26, tokenIndex26
					if buffer[position] != rune('\f') {
						goto l24
					}
					position++
				}
			l26:
				add(ruleEOL, position25)
			}
			return true
		l24:
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 5 Comment <- <('#' (!('\r' / '^' / '\n') .)*)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				if buffer[position] != rune('#') {
					goto l29
				}
				position++
			l31:
				{
					position32, tokenIndex32 := position, tokenIndex
					{
						position33, tokenIndex33 := position, tokenIndex
						{
							position34, tokenIndex34 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l35
							}
							position++
							goto l34
						l35:
							position, tokenIndex = position34, tokenIndex34
							if buffer[position] != rune('^') {
								goto l36
							}
							position++
							goto l34
						l36:
							position, tokenIndex = position34, tokenIndex34
							if buffer[position] != rune('\n') {
								goto l33
							}
							position++
						}
					l34:
						goto l32
					l33:
						position, tokenIndex = position33, tokenIndex33
					}
					if !matchDot() {
						goto l32
					}
					goto l31
				l32:
					position, tokenIndex = position32, tokenIndex32
				}
				add(ruleComment, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 6 _ <- <(Comment / (WS / EOL)+)*> */
		func() bool {
			{
				position38 := position
			l39:
				{
					position40, tokenIndex40 := position, tokenIndex
					{
						position41, tokenIndex41 := position, tokenIndex
						if !_rules[ruleComment]() {
							goto l42
						}
						goto l41
					l42:
						position, tokenIndex = position41, tokenIndex41
						{
							position45, tokenIndex45 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l46
							}
							goto l45
						l46:
							position, tokenIndex = position45, tokenIndex45
							if !_rules[ruleEOL]() {
								goto l40
							}
						}
					l45:
					l43:
						{
							position44, tokenIndex44 := position, tokenIndex
							{
								position47, tokenIndex47 := position, tokenIndex
								if !_rules[ruleWS]() {
									goto l48
								}
								goto l47
							l48:
								position, tokenIndex = position47, tokenIndex47
								if !_rules[ruleEOL]() {
									goto l44
								}
							}
						l47:
							goto l43
						l44:
							position, tokenIndex = position44, tokenIndex44
						}
					}
				l41:
					goto l39
				l40:
					position, tokenIndex = position40, tokenIndex40
				}
				add(rule_, position38)
			}
			return true
		},
		/* 7 EOF <- <!.> */
		func() bool {
			position49, tokenIndex49 := position, tokenIndex
			{
				position50 := position
				{
					position51, tokenIndex51 := position, tokenIndex
					if !matchDot() {
						goto l51
					}
					goto l49
				l51:
					position, tokenIndex = position51, tokenIndex51
				}
				add(ruleEOF, position50)
			}
			return true
		l49:
			position, tokenIndex = position49, tokenIndex49
			return false
		},
		/* 8 DirectiveName <- <([A-Z]+ ('_' / [A-Z])*)> */
		func() bool {
			position52, tokenIndex52 := position, tokenIndex
			{
				position53 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l52
				}
				position++
			l54:
				{
					position55, tokenIndex55 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l55
					}
					position++
					goto l54
				l55:
					position, tokenIndex = position55, tokenIndex55
				}
			l56:
				{
					position57, tokenIndex57 := position, tokenIndex
					{
						position58, tokenIndex58 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l59
						}
						position++
						goto l58
					l59:
						position, tokenIndex = position58, tokenIndex58
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l57
						}
						position++
					}
				l58:
					goto l56
				l57:
					position, tokenIndex = position57, tokenIndex57
				}
				add(ruleDirectiveName, position53)
			}
			return true
		l52:
			position, tokenIndex = position52, tokenIndex52
			return false
		},
		/* 9 UpperCaseString <- <[A-Z]+> */
		func() bool {
			position60, tokenIndex60 := position, tokenIndex
			{
				position61 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l60
				}
				position++
			l62:
				{
					position63, tokenIndex63 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l63
					}
					position++
					goto l62
				l63:
					position, tokenIndex = position63, tokenIndex63
				}
				add(ruleUpperCaseString, position61)
			}
			return true
		l60:
			position, tokenIndex = position60, tokenIndex60
			return false
		},
		/* 10 IntString <- <[0-9]+> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l64
				}
				position++
			l66:
				{
					position67, tokenIndex67 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l67
					}
					position++
					goto l66
				l67:
					position, tokenIndex = position67, tokenIndex67
				}
				add(ruleIntString, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 11 PathString <- <('_' / [a-z] / [A-Z] / [0-9] / '-' / '/' / ',' / '.')+> */
		func() bool {
			position68, tokenIndex68 := position, tokenIndex
			{
				position69 := position
				{
					position72, tokenIndex72 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l73
					}
					position++
					goto l72
				l73:
					position, tokenIndex = position72, tokenIndex72
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l74
					}
					position++
					goto l72
				l74:
					position, tokenIndex = position72, tokenIndex72
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l75
					}
					position++
					goto l72
				l75:
					position, tokenIndex = position72, tokenIndex72
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l76
					}
					position++
					goto l72
				l76:
					position, tokenIndex = position72, tokenIndex72
					if buffer[position] != rune('-') {
						goto l77
					}
					position++
					goto l72
				l77:
					position, tokenIndex = position72, tokenIndex72
					if buffer[position] != rune('/') {
						goto l78
					}
					position++
					goto l72
				l78:
					position, tokenIndex = position72, tokenIndex72
					if buffer[position] != rune(',') {
						goto l79
					}
					position++
					goto l72
				l79:
					position, tokenIndex = position72, tokenIndex72
					if buffer[position] != rune('.') {
						goto l68
					}
					position++
				}
			l72:
			l70:
				{
					position71, tokenIndex71 := position, tokenIndex
					{
						position80, tokenIndex80 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l81
						}
						position++
						goto l80
					l81:
						position, tokenIndex = position80, tokenIndex80
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l82
						}
						position++
						goto l80
					l82:
						position, tokenIndex = position80, tokenIndex80
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l83
						}
						position++
						goto l80
					l83:
						position, tokenIndex = position80, tokenIndex80
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l84
						}
						position++
						goto l80
					l84:
						position, tokenIndex = position80, tokenIndex80
						if buffer[position] != rune('-') {
							goto l85
						}
						position++
						goto l80
					l85:
						position, tokenIndex = position80, tokenIndex80
						if buffer[position] != rune('/') {
							goto l86
						}
						position++
						goto l80
					l86:
						position, tokenIndex = position80, tokenIndex80
						if buffer[position] != rune(',') {
							goto l87
						}
						position++
						goto l80
					l87:
						position, tokenIndex = position80, tokenIndex80
						if buffer[position] != rune('.') {
							goto l71
						}
						position++
					}
				l80:
					goto l70
				l71:
					position, tokenIndex = position71, tokenIndex71
				}
				add(rulePathString, position69)
			}
			return true
		l68:
			position, tokenIndex = position68, tokenIndex68
			return false
		},
		/* 12 Directive <- <('{' '-' '#' WS+ DirectiveName WS+ (IntString / UpperCaseString / PathString) WS+ ('#' '-' '}'))> */
		func() bool {
			position88, tokenIndex88 := position, tokenIndex
			{
				position89 := position
				if buffer[position] != rune('{') {
					goto l88
				}
				position++
				if buffer[position] != rune('-') {
					goto l88
				}
				position++
				if buffer[position] != rune('#') {
					goto l88
				}
				position++
				if !_rules[ruleWS]() {
					goto l88
				}
			l90:
				{
					position91, tokenIndex91 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l91
					}
					goto l90
				l91:
					position, tokenIndex = position91, tokenIndex91
				}
				if !_rules[ruleDirectiveName]() {
					goto l88
				}
				if !_rules[ruleWS]() {
					goto l88
				}
			l92:
				{
					position93, tokenIndex93 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l93
					}
					goto l92
				l93:
					position, tokenIndex = position93, tokenIndex93
				}
				{
					position94, tokenIndex94 := position, tokenIndex
					if !_rules[ruleIntString]() {
						goto l95
					}
					goto l94
				l95:
					position, tokenIndex = position94, tokenIndex94
					if !_rules[ruleUpperCaseString]() {
						goto l96
					}
					goto l94
				l96:
					position, tokenIndex = position94, tokenIndex94
					if !_rules[rulePathString]() {
						goto l88
					}
				}
			l94:
				if !_rules[ruleWS]() {
					goto l88
				}
			l97:
				{
					position98, tokenIndex98 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l98
					}
					goto l97
				l98:
					position, tokenIndex = position98, tokenIndex98
				}
				if buffer[position] != rune('#') {
					goto l88
				}
				position++
				if buffer[position] != rune('-') {
					goto l88
				}
				position++
				if buffer[position] != rune('}') {
					goto l88
				}
				position++
				add(ruleDirective, position89)
			}
			return true
		l88:
			position, tokenIndex = position88, tokenIndex88
			return false
		},
		/* 13 Declaration <- <(Variable / Func)> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				{
					position101, tokenIndex101 := position, tokenIndex
					if !_rules[ruleVariable]() {
						goto l102
					}
					goto l101
				l102:
					position, tokenIndex = position101, tokenIndex101
					if !_rules[ruleFunc]() {
						goto l99
					}
				}
			l101:
				add(ruleDeclaration, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 14 Variable <- <(('l' / 'L') ('e' / 'E') ('t' / 'T') _ IdentifierAtom _ '=' _ Expr)> */
		func() bool {
			position103, tokenIndex103 := position, tokenIndex
			{
				position104 := position
				{
					position105, tokenIndex105 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l106
					}
					position++
					goto l105
				l106:
					position, tokenIndex = position105, tokenIndex105
					if buffer[position] != rune('L') {
						goto l103
					}
					position++
				}
			l105:
				{
					position107, tokenIndex107 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l108
					}
					position++
					goto l107
				l108:
					position, tokenIndex = position107, tokenIndex107
					if buffer[position] != rune('E') {
						goto l103
					}
					position++
				}
			l107:
				{
					position109, tokenIndex109 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l110
					}
					position++
					goto l109
				l110:
					position, tokenIndex = position109, tokenIndex109
					if buffer[position] != rune('T') {
						goto l103
					}
					position++
				}
			l109:
				if !_rules[rule_]() {
					goto l103
				}
				if !_rules[ruleIdentifierAtom]() {
					goto l103
				}
				if !_rules[rule_]() {
					goto l103
				}
				if buffer[position] != rune('=') {
					goto l103
				}
				position++
				if !_rules[rule_]() {
					goto l103
				}
				if !_rules[ruleExpr]() {
					goto l103
				}
				add(ruleVariable, position104)
			}
			return true
		l103:
			position, tokenIndex = position103, tokenIndex103
			return false
		},
		/* 15 Func <- <(('f' / 'F') ('u' / 'U') ('n' / 'N') ('c' / 'C') _ IdentifierAtom _ '(' _ FuncArgSeq? _ ')' _ '=' _ Expr)> */
		func() bool {
			position111, tokenIndex111 := position, tokenIndex
			{
				position112 := position
				{
					position113, tokenIndex113 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l114
					}
					position++
					goto l113
				l114:
					position, tokenIndex = position113, tokenIndex113
					if buffer[position] != rune('F') {
						goto l111
					}
					position++
				}
			l113:
				{
					position115, tokenIndex115 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l116
					}
					position++
					goto l115
				l116:
					position, tokenIndex = position115, tokenIndex115
					if buffer[position] != rune('U') {
						goto l111
					}
					position++
				}
			l115:
				{
					position117, tokenIndex117 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l118
					}
					position++
					goto l117
				l118:
					position, tokenIndex = position117, tokenIndex117
					if buffer[position] != rune('N') {
						goto l111
					}
					position++
				}
			l117:
				{
					position119, tokenIndex119 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l120
					}
					position++
					goto l119
				l120:
					position, tokenIndex = position119, tokenIndex119
					if buffer[position] != rune('C') {
						goto l111
					}
					position++
				}
			l119:
				if !_rules[rule_]() {
					goto l111
				}
				if !_rules[ruleIdentifierAtom]() {
					goto l111
				}
				if !_rules[rule_]() {
					goto l111
				}
				if buffer[position] != rune('(') {
					goto l111
				}
				position++
				if !_rules[rule_]() {
					goto l111
				}
				{
					position121, tokenIndex121 := position, tokenIndex
					if !_rules[ruleFuncArgSeq]() {
						goto l121
					}
					goto l122
				l121:
					position, tokenIndex = position121, tokenIndex121
				}
			l122:
				if !_rules[rule_]() {
					goto l111
				}
				if buffer[position] != rune(')') {
					goto l111
				}
				position++
				if !_rules[rule_]() {
					goto l111
				}
				if buffer[position] != rune('=') {
					goto l111
				}
				position++
				if !_rules[rule_]() {
					goto l111
				}
				if !_rules[ruleExpr]() {
					goto l111
				}
				add(ruleFunc, position112)
			}
			return true
		l111:
			position, tokenIndex = position111, tokenIndex111
			return false
		},
		/* 16 FuncArg <- <(IdentifierAtom _ ':' _ GenericTypesAtom)> */
		func() bool {
			position123, tokenIndex123 := position, tokenIndex
			{
				position124 := position
				if !_rules[ruleIdentifierAtom]() {
					goto l123
				}
				if !_rules[rule_]() {
					goto l123
				}
				if buffer[position] != rune(':') {
					goto l123
				}
				position++
				if !_rules[rule_]() {
					goto l123
				}
				if !_rules[ruleGenericTypesAtom]() {
					goto l123
				}
				add(ruleFuncArg, position124)
			}
			return true
		l123:
			position, tokenIndex = position123, tokenIndex123
			return false
		},
		/* 17 FuncArgSeq <- <(FuncArg (_ ',' _ FuncArgSeq)?)> */
		func() bool {
			position125, tokenIndex125 := position, tokenIndex
			{
				position126 := position
				if !_rules[ruleFuncArg]() {
					goto l125
				}
				{
					position127, tokenIndex127 := position, tokenIndex
					if !_rules[rule_]() {
						goto l127
					}
					if buffer[position] != rune(',') {
						goto l127
					}
					position++
					if !_rules[rule_]() {
						goto l127
					}
					if !_rules[ruleFuncArgSeq]() {
						goto l127
					}
					goto l128
				l127:
					position, tokenIndex = position127, tokenIndex127
				}
			l128:
				add(ruleFuncArgSeq, position126)
			}
			return true
		l125:
			position, tokenIndex = position125, tokenIndex125
			return false
		},
		/* 18 AnnotatedFunc <- <(AnnotationSeq _ Func)> */
		func() bool {
			position129, tokenIndex129 := position, tokenIndex
			{
				position130 := position
				if !_rules[ruleAnnotationSeq]() {
					goto l129
				}
				if !_rules[rule_]() {
					goto l129
				}
				if !_rules[ruleFunc]() {
					goto l129
				}
				add(ruleAnnotatedFunc, position130)
			}
			return true
		l129:
			position, tokenIndex = position129, tokenIndex129
			return false
		},
		/* 19 Annotation <- <('@' IdentifierAtom _ '(' _ IdentifierAtomSeq _ ')')> */
		func() bool {
			position131, tokenIndex131 := position, tokenIndex
			{
				position132 := position
				if buffer[position] != rune('@') {
					goto l131
				}
				position++
				if !_rules[ruleIdentifierAtom]() {
					goto l131
				}
				if !_rules[rule_]() {
					goto l131
				}
				if buffer[position] != rune('(') {
					goto l131
				}
				position++
				if !_rules[rule_]() {
					goto l131
				}
				if !_rules[ruleIdentifierAtomSeq]() {
					goto l131
				}
				if !_rules[rule_]() {
					goto l131
				}
				if buffer[position] != rune(')') {
					goto l131
				}
				position++
				add(ruleAnnotation, position132)
			}
			return true
		l131:
			position, tokenIndex = position131, tokenIndex131
			return false
		},
		/* 20 IdentifierAtomSeq <- <(IdentifierAtom (_ ',' _ IdentifierAtomSeq)?)> */
		func() bool {
			position133, tokenIndex133 := position, tokenIndex
			{
				position134 := position
				if !_rules[ruleIdentifierAtom]() {
					goto l133
				}
				{
					position135, tokenIndex135 := position, tokenIndex
					if !_rules[rule_]() {
						goto l135
					}
					if buffer[position] != rune(',') {
						goto l135
					}
					position++
					if !_rules[rule_]() {
						goto l135
					}
					if !_rules[ruleIdentifierAtomSeq]() {
						goto l135
					}
					goto l136
				l135:
					position, tokenIndex = position135, tokenIndex135
				}
			l136:
				add(ruleIdentifierAtomSeq, position134)
			}
			return true
		l133:
			position, tokenIndex = position133, tokenIndex133
			return false
		},
		/* 21 AnnotationSeq <- <(Annotation (_ AnnotationSeq)?)> */
		func() bool {
			position137, tokenIndex137 := position, tokenIndex
			{
				position138 := position
				if !_rules[ruleAnnotation]() {
					goto l137
				}
				{
					position139, tokenIndex139 := position, tokenIndex
					if !_rules[rule_]() {
						goto l139
					}
					if !_rules[ruleAnnotationSeq]() {
						goto l139
					}
					goto l140
				l139:
					position, tokenIndex = position139, tokenIndex139
				}
			l140:
				add(ruleAnnotationSeq, position138)
			}
			return true
		l137:
			position, tokenIndex = position137, tokenIndex137
			return false
		},
		/* 22 OrOp <- <('|' '|')> */
		func() bool {
			position141, tokenIndex141 := position, tokenIndex
			{
				position142 := position
				if buffer[position] != rune('|') {
					goto l141
				}
				position++
				if buffer[position] != rune('|') {
					goto l141
				}
				position++
				add(ruleOrOp, position142)
			}
			return true
		l141:
			position, tokenIndex = position141, tokenIndex141
			return false
		},
		/* 23 AndOp <- <('&' '&')> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				if buffer[position] != rune('&') {
					goto l143
				}
				position++
				if buffer[position] != rune('&') {
					goto l143
				}
				position++
				add(ruleAndOp, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 24 EqGroupOp <- <(EqOp / NeOp)> */
		func() bool {
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				{
					position147, tokenIndex147 := position, tokenIndex
					if !_rules[ruleEqOp]() {
						goto l148
					}
					goto l147
				l148:
					position, tokenIndex = position147, tokenIndex147
					if !_rules[ruleNeOp]() {
						goto l145
					}
				}
			l147:
				add(ruleEqGroupOp, position146)
			}
			return true
		l145:
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 25 EqOp <- <('=' '=')> */
		func() bool {
			position149, tokenIndex149 := position, tokenIndex
			{
				position150 := position
				if buffer[position] != rune('=') {
					goto l149
				}
				position++
				if buffer[position] != rune('=') {
					goto l149
				}
				position++
				add(ruleEqOp, position150)
			}
			return true
		l149:
			position, tokenIndex = position149, tokenIndex149
			return false
		},
		/* 26 NeOp <- <('!' '=')> */
		func() bool {
			position151, tokenIndex151 := position, tokenIndex
			{
				position152 := position
				if buffer[position] != rune('!') {
					goto l151
				}
				position++
				if buffer[position] != rune('=') {
					goto l151
				}
				position++
				add(ruleNeOp, position152)
			}
			return true
		l151:
			position, tokenIndex = position151, tokenIndex151
			return false
		},
		/* 27 CompareGroupOp <- <(GtOp / GeOp / LtOp / LeOp)> */
		func() bool {
			position153, tokenIndex153 := position, tokenIndex
			{
				position154 := position
				{
					position155, tokenIndex155 := position, tokenIndex
					if !_rules[ruleGtOp]() {
						goto l156
					}
					goto l155
				l156:
					position, tokenIndex = position155, tokenIndex155
					if !_rules[ruleGeOp]() {
						goto l157
					}
					goto l155
				l157:
					position, tokenIndex = position155, tokenIndex155
					if !_rules[ruleLtOp]() {
						goto l158
					}
					goto l155
				l158:
					position, tokenIndex = position155, tokenIndex155
					if !_rules[ruleLeOp]() {
						goto l153
					}
				}
			l155:
				add(ruleCompareGroupOp, position154)
			}
			return true
		l153:
			position, tokenIndex = position153, tokenIndex153
			return false
		},
		/* 28 GtOp <- <('>' !'=')> */
		func() bool {
			position159, tokenIndex159 := position, tokenIndex
			{
				position160 := position
				if buffer[position] != rune('>') {
					goto l159
				}
				position++
				{
					position161, tokenIndex161 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l161
					}
					position++
					goto l159
				l161:
					position, tokenIndex = position161, tokenIndex161
				}
				add(ruleGtOp, position160)
			}
			return true
		l159:
			position, tokenIndex = position159, tokenIndex159
			return false
		},
		/* 29 GeOp <- <('>' '=')> */
		func() bool {
			position162, tokenIndex162 := position, tokenIndex
			{
				position163 := position
				if buffer[position] != rune('>') {
					goto l162
				}
				position++
				if buffer[position] != rune('=') {
					goto l162
				}
				position++
				add(ruleGeOp, position163)
			}
			return true
		l162:
			position, tokenIndex = position162, tokenIndex162
			return false
		},
		/* 30 LtOp <- <('<' !'=')> */
		func() bool {
			position164, tokenIndex164 := position, tokenIndex
			{
				position165 := position
				if buffer[position] != rune('<') {
					goto l164
				}
				position++
				{
					position166, tokenIndex166 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l166
					}
					position++
					goto l164
				l166:
					position, tokenIndex = position166, tokenIndex166
				}
				add(ruleLtOp, position165)
			}
			return true
		l164:
			position, tokenIndex = position164, tokenIndex164
			return false
		},
		/* 31 LeOp <- <('<' '=')> */
		func() bool {
			position167, tokenIndex167 := position, tokenIndex
			{
				position168 := position
				if buffer[position] != rune('<') {
					goto l167
				}
				position++
				if buffer[position] != rune('=') {
					goto l167
				}
				position++
				add(ruleLeOp, position168)
			}
			return true
		l167:
			position, tokenIndex = position167, tokenIndex167
			return false
		},
		/* 32 ConsOp <- <(':' ':')> */
		func() bool {
			position169, tokenIndex169 := position, tokenIndex
			{
				position170 := position
				if buffer[position] != rune(':') {
					goto l169
				}
				position++
				if buffer[position] != rune(':') {
					goto l169
				}
				position++
				add(ruleConsOp, position170)
			}
			return true
		l169:
			position, tokenIndex = position169, tokenIndex169
			return false
		},
		/* 33 SumGroupOp <- <(SumOp / SubOp)> */
		func() bool {
			position171, tokenIndex171 := position, tokenIndex
			{
				position172 := position
				{
					position173, tokenIndex173 := position, tokenIndex
					if !_rules[ruleSumOp]() {
						goto l174
					}
					goto l173
				l174:
					position, tokenIndex = position173, tokenIndex173
					if !_rules[ruleSubOp]() {
						goto l171
					}
				}
			l173:
				add(ruleSumGroupOp, position172)
			}
			return true
		l171:
			position, tokenIndex = position171, tokenIndex171
			return false
		},
		/* 34 SumOp <- <'+'> */
		func() bool {
			position175, tokenIndex175 := position, tokenIndex
			{
				position176 := position
				if buffer[position] != rune('+') {
					goto l175
				}
				position++
				add(ruleSumOp, position176)
			}
			return true
		l175:
			position, tokenIndex = position175, tokenIndex175
			return false
		},
		/* 35 SubOp <- <'-'> */
		func() bool {
			position177, tokenIndex177 := position, tokenIndex
			{
				position178 := position
				if buffer[position] != rune('-') {
					goto l177
				}
				position++
				add(ruleSubOp, position178)
			}
			return true
		l177:
			position, tokenIndex = position177, tokenIndex177
			return false
		},
		/* 36 MultGroupOp <- <(MulOp / DivOp / ModOp)> */
		func() bool {
			position179, tokenIndex179 := position, tokenIndex
			{
				position180 := position
				{
					position181, tokenIndex181 := position, tokenIndex
					if !_rules[ruleMulOp]() {
						goto l182
					}
					goto l181
				l182:
					position, tokenIndex = position181, tokenIndex181
					if !_rules[ruleDivOp]() {
						goto l183
					}
					goto l181
				l183:
					position, tokenIndex = position181, tokenIndex181
					if !_rules[ruleModOp]() {
						goto l179
					}
				}
			l181:
				add(ruleMultGroupOp, position180)
			}
			return true
		l179:
			position, tokenIndex = position179, tokenIndex179
			return false
		},
		/* 37 MulOp <- <'*'> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				if buffer[position] != rune('*') {
					goto l184
				}
				position++
				add(ruleMulOp, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 38 DivOp <- <'/'> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				if buffer[position] != rune('/') {
					goto l186
				}
				position++
				add(ruleDivOp, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 39 ModOp <- <'%'> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				if buffer[position] != rune('%') {
					goto l188
				}
				position++
				add(ruleModOp, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 40 UnaryOp <- <(PositiveOp / NegativeOp / NotOp)> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				{
					position192, tokenIndex192 := position, tokenIndex
					if !_rules[rulePositiveOp]() {
						goto l193
					}
					goto l192
				l193:
					position, tokenIndex = position192, tokenIndex192
					if !_rules[ruleNegativeOp]() {
						goto l194
					}
					goto l192
				l194:
					position, tokenIndex = position192, tokenIndex192
					if !_rules[ruleNotOp]() {
						goto l190
					}
				}
			l192:
				add(ruleUnaryOp, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 41 PositiveOp <- <'+'> */
		func() bool {
			position195, tokenIndex195 := position, tokenIndex
			{
				position196 := position
				if buffer[position] != rune('+') {
					goto l195
				}
				position++
				add(rulePositiveOp, position196)
			}
			return true
		l195:
			position, tokenIndex = position195, tokenIndex195
			return false
		},
		/* 42 NegativeOp <- <('-' !'#')> */
		func() bool {
			position197, tokenIndex197 := position, tokenIndex
			{
				position198 := position
				if buffer[position] != rune('-') {
					goto l197
				}
				position++
				{
					position199, tokenIndex199 := position, tokenIndex
					if buffer[position] != rune('#') {
						goto l199
					}
					position++
					goto l197
				l199:
					position, tokenIndex = position199, tokenIndex199
				}
				add(ruleNegativeOp, position198)
			}
			return true
		l197:
			position, tokenIndex = position197, tokenIndex197
			return false
		},
		/* 43 NotOp <- <'!'> */
		func() bool {
			position200, tokenIndex200 := position, tokenIndex
			{
				position201 := position
				if buffer[position] != rune('!') {
					goto l200
				}
				position++
				add(ruleNotOp, position201)
			}
			return true
		l200:
			position, tokenIndex = position200, tokenIndex200
			return false
		},
		/* 44 ReservedWords <- <((('l' / 'L') ('e' / 'E') ('t' / 'T')) / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '1' '6') / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '5' '8') / (('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '6' '4') / (('t' / 'T') ('r' / 'R') ('u' / 'U') ('e' / 'E')) / (('f' / 'F') ('a' / 'A') ('l' / 'L') ('s' / 'S') ('e' / 'E')) / (('i' / 'I') ('f' / 'F')) / (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) / (('e' / 'E') ('l' / 'L') ('s' / 'S') ('e' / 'E')) / (('m' / 'M') ('a' / 'A') ('t' / 'T') ('c' / 'C') ('h' / 'H')) / (('c' / 'C') ('a' / 'A') ('s' / 'S') ('e' / 'E')) / (('f' / 'F') ('u' / 'U') ('n' / 'N') ('c' / 'C')))> */
		func() bool {
			position202, tokenIndex202 := position, tokenIndex
			{
				position203 := position
				{
					position204, tokenIndex204 := position, tokenIndex
					{
						position206, tokenIndex206 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l207
						}
						position++
						goto l206
					l207:
						position, tokenIndex = position206, tokenIndex206
						if buffer[position] != rune('L') {
							goto l205
						}
						position++
					}
				l206:
					{
						position208, tokenIndex208 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l209
						}
						position++
						goto l208
					l209:
						position, tokenIndex = position208, tokenIndex208
						if buffer[position] != rune('E') {
							goto l205
						}
						position++
					}
				l208:
					{
						position210, tokenIndex210 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l211
						}
						position++
						goto l210
					l211:
						position, tokenIndex = position210, tokenIndex210
						if buffer[position] != rune('T') {
							goto l205
						}
						position++
					}
				l210:
					goto l204
				l205:
					position, tokenIndex = position204, tokenIndex204
					{
						position213, tokenIndex213 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l214
						}
						position++
						goto l213
					l214:
						position, tokenIndex = position213, tokenIndex213
						if buffer[position] != rune('B') {
							goto l212
						}
						position++
					}
				l213:
					{
						position215, tokenIndex215 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l216
						}
						position++
						goto l215
					l216:
						position, tokenIndex = position215, tokenIndex215
						if buffer[position] != rune('A') {
							goto l212
						}
						position++
					}
				l215:
					{
						position217, tokenIndex217 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l218
						}
						position++
						goto l217
					l218:
						position, tokenIndex = position217, tokenIndex217
						if buffer[position] != rune('S') {
							goto l212
						}
						position++
					}
				l217:
					{
						position219, tokenIndex219 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l220
						}
						position++
						goto l219
					l220:
						position, tokenIndex = position219, tokenIndex219
						if buffer[position] != rune('E') {
							goto l212
						}
						position++
					}
				l219:
					if buffer[position] != rune('1') {
						goto l212
					}
					position++
					if buffer[position] != rune('6') {
						goto l212
					}
					position++
					goto l204
				l212:
					position, tokenIndex = position204, tokenIndex204
					{
						position222, tokenIndex222 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l223
						}
						position++
						goto l222
					l223:
						position, tokenIndex = position222, tokenIndex222
						if buffer[position] != rune('B') {
							goto l221
						}
						position++
					}
				l222:
					{
						position224, tokenIndex224 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l225
						}
						position++
						goto l224
					l225:
						position, tokenIndex = position224, tokenIndex224
						if buffer[position] != rune('A') {
							goto l221
						}
						position++
					}
				l224:
					{
						position226, tokenIndex226 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l227
						}
						position++
						goto l226
					l227:
						position, tokenIndex = position226, tokenIndex226
						if buffer[position] != rune('S') {
							goto l221
						}
						position++
					}
				l226:
					{
						position228, tokenIndex228 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l229
						}
						position++
						goto l228
					l229:
						position, tokenIndex = position228, tokenIndex228
						if buffer[position] != rune('E') {
							goto l221
						}
						position++
					}
				l228:
					if buffer[position] != rune('5') {
						goto l221
					}
					position++
					if buffer[position] != rune('8') {
						goto l221
					}
					position++
					goto l204
				l221:
					position, tokenIndex = position204, tokenIndex204
					{
						position231, tokenIndex231 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l232
						}
						position++
						goto l231
					l232:
						position, tokenIndex = position231, tokenIndex231
						if buffer[position] != rune('B') {
							goto l230
						}
						position++
					}
				l231:
					{
						position233, tokenIndex233 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l234
						}
						position++
						goto l233
					l234:
						position, tokenIndex = position233, tokenIndex233
						if buffer[position] != rune('A') {
							goto l230
						}
						position++
					}
				l233:
					{
						position235, tokenIndex235 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l236
						}
						position++
						goto l235
					l236:
						position, tokenIndex = position235, tokenIndex235
						if buffer[position] != rune('S') {
							goto l230
						}
						position++
					}
				l235:
					{
						position237, tokenIndex237 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l238
						}
						position++
						goto l237
					l238:
						position, tokenIndex = position237, tokenIndex237
						if buffer[position] != rune('E') {
							goto l230
						}
						position++
					}
				l237:
					if buffer[position] != rune('6') {
						goto l230
					}
					position++
					if buffer[position] != rune('4') {
						goto l230
					}
					position++
					goto l204
				l230:
					position, tokenIndex = position204, tokenIndex204
					{
						position240, tokenIndex240 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l241
						}
						position++
						goto l240
					l241:
						position, tokenIndex = position240, tokenIndex240
						if buffer[position] != rune('T') {
							goto l239
						}
						position++
					}
				l240:
					{
						position242, tokenIndex242 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l243
						}
						position++
						goto l242
					l243:
						position, tokenIndex = position242, tokenIndex242
						if buffer[position] != rune('R') {
							goto l239
						}
						position++
					}
				l242:
					{
						position244, tokenIndex244 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l245
						}
						position++
						goto l244
					l245:
						position, tokenIndex = position244, tokenIndex244
						if buffer[position] != rune('U') {
							goto l239
						}
						position++
					}
				l244:
					{
						position246, tokenIndex246 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l247
						}
						position++
						goto l246
					l247:
						position, tokenIndex = position246, tokenIndex246
						if buffer[position] != rune('E') {
							goto l239
						}
						position++
					}
				l246:
					goto l204
				l239:
					position, tokenIndex = position204, tokenIndex204
					{
						position249, tokenIndex249 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l250
						}
						position++
						goto l249
					l250:
						position, tokenIndex = position249, tokenIndex249
						if buffer[position] != rune('F') {
							goto l248
						}
						position++
					}
				l249:
					{
						position251, tokenIndex251 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l252
						}
						position++
						goto l251
					l252:
						position, tokenIndex = position251, tokenIndex251
						if buffer[position] != rune('A') {
							goto l248
						}
						position++
					}
				l251:
					{
						position253, tokenIndex253 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l254
						}
						position++
						goto l253
					l254:
						position, tokenIndex = position253, tokenIndex253
						if buffer[position] != rune('L') {
							goto l248
						}
						position++
					}
				l253:
					{
						position255, tokenIndex255 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l256
						}
						position++
						goto l255
					l256:
						position, tokenIndex = position255, tokenIndex255
						if buffer[position] != rune('S') {
							goto l248
						}
						position++
					}
				l255:
					{
						position257, tokenIndex257 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l258
						}
						position++
						goto l257
					l258:
						position, tokenIndex = position257, tokenIndex257
						if buffer[position] != rune('E') {
							goto l248
						}
						position++
					}
				l257:
					goto l204
				l248:
					position, tokenIndex = position204, tokenIndex204
					{
						position260, tokenIndex260 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l261
						}
						position++
						goto l260
					l261:
						position, tokenIndex = position260, tokenIndex260
						if buffer[position] != rune('I') {
							goto l259
						}
						position++
					}
				l260:
					{
						position262, tokenIndex262 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l263
						}
						position++
						goto l262
					l263:
						position, tokenIndex = position262, tokenIndex262
						if buffer[position] != rune('F') {
							goto l259
						}
						position++
					}
				l262:
					goto l204
				l259:
					position, tokenIndex = position204, tokenIndex204
					{
						position265, tokenIndex265 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l266
						}
						position++
						goto l265
					l266:
						position, tokenIndex = position265, tokenIndex265
						if buffer[position] != rune('T') {
							goto l264
						}
						position++
					}
				l265:
					{
						position267, tokenIndex267 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l268
						}
						position++
						goto l267
					l268:
						position, tokenIndex = position267, tokenIndex267
						if buffer[position] != rune('H') {
							goto l264
						}
						position++
					}
				l267:
					{
						position269, tokenIndex269 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l270
						}
						position++
						goto l269
					l270:
						position, tokenIndex = position269, tokenIndex269
						if buffer[position] != rune('E') {
							goto l264
						}
						position++
					}
				l269:
					{
						position271, tokenIndex271 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l272
						}
						position++
						goto l271
					l272:
						position, tokenIndex = position271, tokenIndex271
						if buffer[position] != rune('N') {
							goto l264
						}
						position++
					}
				l271:
					goto l204
				l264:
					position, tokenIndex = position204, tokenIndex204
					{
						position274, tokenIndex274 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l275
						}
						position++
						goto l274
					l275:
						position, tokenIndex = position274, tokenIndex274
						if buffer[position] != rune('E') {
							goto l273
						}
						position++
					}
				l274:
					{
						position276, tokenIndex276 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l277
						}
						position++
						goto l276
					l277:
						position, tokenIndex = position276, tokenIndex276
						if buffer[position] != rune('L') {
							goto l273
						}
						position++
					}
				l276:
					{
						position278, tokenIndex278 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l279
						}
						position++
						goto l278
					l279:
						position, tokenIndex = position278, tokenIndex278
						if buffer[position] != rune('S') {
							goto l273
						}
						position++
					}
				l278:
					{
						position280, tokenIndex280 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l281
						}
						position++
						goto l280
					l281:
						position, tokenIndex = position280, tokenIndex280
						if buffer[position] != rune('E') {
							goto l273
						}
						position++
					}
				l280:
					goto l204
				l273:
					position, tokenIndex = position204, tokenIndex204
					{
						position283, tokenIndex283 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l284
						}
						position++
						goto l283
					l284:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('M') {
							goto l282
						}
						position++
					}
				l283:
					{
						position285, tokenIndex285 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l286
						}
						position++
						goto l285
					l286:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('A') {
							goto l282
						}
						position++
					}
				l285:
					{
						position287, tokenIndex287 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l288
						}
						position++
						goto l287
					l288:
						position, tokenIndex = position287, tokenIndex287
						if buffer[position] != rune('T') {
							goto l282
						}
						position++
					}
				l287:
					{
						position289, tokenIndex289 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l290
						}
						position++
						goto l289
					l290:
						position, tokenIndex = position289, tokenIndex289
						if buffer[position] != rune('C') {
							goto l282
						}
						position++
					}
				l289:
					{
						position291, tokenIndex291 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l292
						}
						position++
						goto l291
					l292:
						position, tokenIndex = position291, tokenIndex291
						if buffer[position] != rune('H') {
							goto l282
						}
						position++
					}
				l291:
					goto l204
				l282:
					position, tokenIndex = position204, tokenIndex204
					{
						position294, tokenIndex294 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l295
						}
						position++
						goto l294
					l295:
						position, tokenIndex = position294, tokenIndex294
						if buffer[position] != rune('C') {
							goto l293
						}
						position++
					}
				l294:
					{
						position296, tokenIndex296 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l297
						}
						position++
						goto l296
					l297:
						position, tokenIndex = position296, tokenIndex296
						if buffer[position] != rune('A') {
							goto l293
						}
						position++
					}
				l296:
					{
						position298, tokenIndex298 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l299
						}
						position++
						goto l298
					l299:
						position, tokenIndex = position298, tokenIndex298
						if buffer[position] != rune('S') {
							goto l293
						}
						position++
					}
				l298:
					{
						position300, tokenIndex300 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l301
						}
						position++
						goto l300
					l301:
						position, tokenIndex = position300, tokenIndex300
						if buffer[position] != rune('E') {
							goto l293
						}
						position++
					}
				l300:
					goto l204
				l293:
					position, tokenIndex = position204, tokenIndex204
					{
						position302, tokenIndex302 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l303
						}
						position++
						goto l302
					l303:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('F') {
							goto l202
						}
						position++
					}
				l302:
					{
						position304, tokenIndex304 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l305
						}
						position++
						goto l304
					l305:
						position, tokenIndex = position304, tokenIndex304
						if buffer[position] != rune('U') {
							goto l202
						}
						position++
					}
				l304:
					{
						position306, tokenIndex306 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l307
						}
						position++
						goto l306
					l307:
						position, tokenIndex = position306, tokenIndex306
						if buffer[position] != rune('N') {
							goto l202
						}
						position++
					}
				l306:
					{
						position308, tokenIndex308 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l309
						}
						position++
						goto l308
					l309:
						position, tokenIndex = position308, tokenIndex308
						if buffer[position] != rune('C') {
							goto l202
						}
						position++
					}
				l308:
				}
			l204:
				add(ruleReservedWords, position203)
			}
			return true
		l202:
			position, tokenIndex = position202, tokenIndex202
			return false
		},
		/* 45 ConstAtom <- <(IntegerAtom / StringAtom / ByteVectorAtom / BooleanAtom / ListAtom)> */
		func() bool {
			position310, tokenIndex310 := position, tokenIndex
			{
				position311 := position
				{
					position312, tokenIndex312 := position, tokenIndex
					if !_rules[ruleIntegerAtom]() {
						goto l313
					}
					goto l312
				l313:
					position, tokenIndex = position312, tokenIndex312
					if !_rules[ruleStringAtom]() {
						goto l314
					}
					goto l312
				l314:
					position, tokenIndex = position312, tokenIndex312
					if !_rules[ruleByteVectorAtom]() {
						goto l315
					}
					goto l312
				l315:
					position, tokenIndex = position312, tokenIndex312
					if !_rules[ruleBooleanAtom]() {
						goto l316
					}
					goto l312
				l316:
					position, tokenIndex = position312, tokenIndex312
					if !_rules[ruleListAtom]() {
						goto l310
					}
				}
			l312:
				add(ruleConstAtom, position311)
			}
			return true
		l310:
			position, tokenIndex = position310, tokenIndex310
			return false
		},
		/* 46 IdentifierAtom <- <((!ReservedWords ([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])*) / (ReservedWords ([A-Z] / [a-z] / [0-9])+))> */
		func() bool {
			position317, tokenIndex317 := position, tokenIndex
			{
				position318 := position
				{
					position319, tokenIndex319 := position, tokenIndex
					{
						position321, tokenIndex321 := position, tokenIndex
						if !_rules[ruleReservedWords]() {
							goto l321
						}
						goto l320
					l321:
						position, tokenIndex = position321, tokenIndex321
					}
					{
						position322, tokenIndex322 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l323
						}
						position++
						goto l322
					l323:
						position, tokenIndex = position322, tokenIndex322
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l320
						}
						position++
					}
				l322:
				l324:
					{
						position325, tokenIndex325 := position, tokenIndex
						{
							position326, tokenIndex326 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l327
							}
							position++
							goto l326
						l327:
							position, tokenIndex = position326, tokenIndex326
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l328
							}
							position++
							goto l326
						l328:
							position, tokenIndex = position326, tokenIndex326
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l325
							}
							position++
						}
					l326:
						goto l324
					l325:
						position, tokenIndex = position325, tokenIndex325
					}
					goto l319
				l320:
					position, tokenIndex = position319, tokenIndex319
					if !_rules[ruleReservedWords]() {
						goto l317
					}
					{
						position331, tokenIndex331 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l332
						}
						position++
						goto l331
					l332:
						position, tokenIndex = position331, tokenIndex331
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l333
						}
						position++
						goto l331
					l333:
						position, tokenIndex = position331, tokenIndex331
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l317
						}
						position++
					}
				l331:
				l329:
					{
						position330, tokenIndex330 := position, tokenIndex
						{
							position334, tokenIndex334 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l335
							}
							position++
							goto l334
						l335:
							position, tokenIndex = position334, tokenIndex334
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l336
							}
							position++
							goto l334
						l336:
							position, tokenIndex = position334, tokenIndex334
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l330
							}
							position++
						}
					l334:
						goto l329
					l330:
						position, tokenIndex = position330, tokenIndex330
					}
				}
			l319:
				add(ruleIdentifierAtom, position318)
			}
			return true
		l317:
			position, tokenIndex = position317, tokenIndex317
			return false
		},
		/* 47 GenericTypesAtom <- <(OneGenericTypeAtom ((_ '|' _ GenericTypesAtom) / OneGenericTypeAtom)?)> */
		func() bool {
			position337, tokenIndex337 := position, tokenIndex
			{
				position338 := position
				if !_rules[ruleOneGenericTypeAtom]() {
					goto l337
				}
				{
					position339, tokenIndex339 := position, tokenIndex
					{
						position341, tokenIndex341 := position, tokenIndex
						if !_rules[rule_]() {
							goto l342
						}
						if buffer[position] != rune('|') {
							goto l342
						}
						position++
						if !_rules[rule_]() {
							goto l342
						}
						if !_rules[ruleGenericTypesAtom]() {
							goto l342
						}
						goto l341
					l342:
						position, tokenIndex = position341, tokenIndex341
						if !_rules[ruleOneGenericTypeAtom]() {
							goto l339
						}
					}
				l341:
					goto l340
				l339:
					position, tokenIndex = position339, tokenIndex339
				}
			l340:
				add(ruleGenericTypesAtom, position338)
			}
			return true
		l337:
			position, tokenIndex = position337, tokenIndex337
			return false
		},
		/* 48 OneGenericTypeAtom <- <(([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])* (_ '[' _ OneTypeAtom _ ']' _)?)> */
		func() bool {
			position343, tokenIndex343 := position, tokenIndex
			{
				position344 := position
				{
					position345, tokenIndex345 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l346
					}
					position++
					goto l345
				l346:
					position, tokenIndex = position345, tokenIndex345
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l343
					}
					position++
				}
			l345:
			l347:
				{
					position348, tokenIndex348 := position, tokenIndex
					{
						position349, tokenIndex349 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l350
						}
						position++
						goto l349
					l350:
						position, tokenIndex = position349, tokenIndex349
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l351
						}
						position++
						goto l349
					l351:
						position, tokenIndex = position349, tokenIndex349
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l348
						}
						position++
					}
				l349:
					goto l347
				l348:
					position, tokenIndex = position348, tokenIndex348
				}
				{
					position352, tokenIndex352 := position, tokenIndex
					if !_rules[rule_]() {
						goto l352
					}
					if buffer[position] != rune('[') {
						goto l352
					}
					position++
					if !_rules[rule_]() {
						goto l352
					}
					if !_rules[ruleOneTypeAtom]() {
						goto l352
					}
					if !_rules[rule_]() {
						goto l352
					}
					if buffer[position] != rune(']') {
						goto l352
					}
					position++
					if !_rules[rule_]() {
						goto l352
					}
					goto l353
				l352:
					position, tokenIndex = position352, tokenIndex352
				}
			l353:
				add(ruleOneGenericTypeAtom, position344)
			}
			return true
		l343:
			position, tokenIndex = position343, tokenIndex343
			return false
		},
		/* 49 TypesAtom <- <(OneTypeAtom ((_ '|' _ TypesAtom) / OneTypeAtom)?)> */
		func() bool {
			position354, tokenIndex354 := position, tokenIndex
			{
				position355 := position
				if !_rules[ruleOneTypeAtom]() {
					goto l354
				}
				{
					position356, tokenIndex356 := position, tokenIndex
					{
						position358, tokenIndex358 := position, tokenIndex
						if !_rules[rule_]() {
							goto l359
						}
						if buffer[position] != rune('|') {
							goto l359
						}
						position++
						if !_rules[rule_]() {
							goto l359
						}
						if !_rules[ruleTypesAtom]() {
							goto l359
						}
						goto l358
					l359:
						position, tokenIndex = position358, tokenIndex358
						if !_rules[ruleOneTypeAtom]() {
							goto l356
						}
					}
				l358:
					goto l357
				l356:
					position, tokenIndex = position356, tokenIndex356
				}
			l357:
				add(ruleTypesAtom, position355)
			}
			return true
		l354:
			position, tokenIndex = position354, tokenIndex354
			return false
		},
		/* 50 OneTypeAtom <- <(([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])*)> */
		func() bool {
			position360, tokenIndex360 := position, tokenIndex
			{
				position361 := position
				{
					position362, tokenIndex362 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l363
					}
					position++
					goto l362
				l363:
					position, tokenIndex = position362, tokenIndex362
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l360
					}
					position++
				}
			l362:
			l364:
				{
					position365, tokenIndex365 := position, tokenIndex
					{
						position366, tokenIndex366 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l367
						}
						position++
						goto l366
					l367:
						position, tokenIndex = position366, tokenIndex366
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l368
						}
						position++
						goto l366
					l368:
						position, tokenIndex = position366, tokenIndex366
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l365
						}
						position++
					}
				l366:
					goto l364
				l365:
					position, tokenIndex = position365, tokenIndex365
				}
				add(ruleOneTypeAtom, position361)
			}
			return true
		l360:
			position, tokenIndex = position360, tokenIndex360
			return false
		},
		/* 51 Base16 <- <(('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '1' '6' '\'' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')* '\'')> */
		func() bool {
			position369, tokenIndex369 := position, tokenIndex
			{
				position370 := position
				{
					position371, tokenIndex371 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l372
					}
					position++
					goto l371
				l372:
					position, tokenIndex = position371, tokenIndex371
					if buffer[position] != rune('B') {
						goto l369
					}
					position++
				}
			l371:
				{
					position373, tokenIndex373 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l374
					}
					position++
					goto l373
				l374:
					position, tokenIndex = position373, tokenIndex373
					if buffer[position] != rune('A') {
						goto l369
					}
					position++
				}
			l373:
				{
					position375, tokenIndex375 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l376
					}
					position++
					goto l375
				l376:
					position, tokenIndex = position375, tokenIndex375
					if buffer[position] != rune('S') {
						goto l369
					}
					position++
				}
			l375:
				{
					position377, tokenIndex377 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l378
					}
					position++
					goto l377
				l378:
					position, tokenIndex = position377, tokenIndex377
					if buffer[position] != rune('E') {
						goto l369
					}
					position++
				}
			l377:
				if buffer[position] != rune('1') {
					goto l369
				}
				position++
				if buffer[position] != rune('6') {
					goto l369
				}
				position++
				if buffer[position] != rune('\'') {
					goto l369
				}
				position++
			l379:
				{
					position380, tokenIndex380 := position, tokenIndex
					{
						position381, tokenIndex381 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l382
						}
						position++
						goto l381
					l382:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('A') {
							goto l383
						}
						position++
						goto l381
					l383:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('B') {
							goto l384
						}
						position++
						goto l381
					l384:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('C') {
							goto l385
						}
						position++
						goto l381
					l385:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('D') {
							goto l386
						}
						position++
						goto l381
					l386:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('E') {
							goto l387
						}
						position++
						goto l381
					l387:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('F') {
							goto l388
						}
						position++
						goto l381
					l388:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('a') {
							goto l389
						}
						position++
						goto l381
					l389:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('b') {
							goto l390
						}
						position++
						goto l381
					l390:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('c') {
							goto l391
						}
						position++
						goto l381
					l391:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('d') {
							goto l392
						}
						position++
						goto l381
					l392:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('e') {
							goto l393
						}
						position++
						goto l381
					l393:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('f') {
							goto l380
						}
						position++
					}
				l381:
					goto l379
				l380:
					position, tokenIndex = position380, tokenIndex380
				}
				if buffer[position] != rune('\'') {
					goto l369
				}
				position++
				add(ruleBase16, position370)
			}
			return true
		l369:
			position, tokenIndex = position369, tokenIndex369
			return false
		},
		/* 52 Base58 <- <(('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '5' '8' '\'' ('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'J' / 'K' / 'L' / 'M' / 'N' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z')* '\'')> */
		func() bool {
			position394, tokenIndex394 := position, tokenIndex
			{
				position395 := position
				{
					position396, tokenIndex396 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l397
					}
					position++
					goto l396
				l397:
					position, tokenIndex = position396, tokenIndex396
					if buffer[position] != rune('B') {
						goto l394
					}
					position++
				}
			l396:
				{
					position398, tokenIndex398 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l399
					}
					position++
					goto l398
				l399:
					position, tokenIndex = position398, tokenIndex398
					if buffer[position] != rune('A') {
						goto l394
					}
					position++
				}
			l398:
				{
					position400, tokenIndex400 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l401
					}
					position++
					goto l400
				l401:
					position, tokenIndex = position400, tokenIndex400
					if buffer[position] != rune('S') {
						goto l394
					}
					position++
				}
			l400:
				{
					position402, tokenIndex402 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l403
					}
					position++
					goto l402
				l403:
					position, tokenIndex = position402, tokenIndex402
					if buffer[position] != rune('E') {
						goto l394
					}
					position++
				}
			l402:
				if buffer[position] != rune('5') {
					goto l394
				}
				position++
				if buffer[position] != rune('8') {
					goto l394
				}
				position++
				if buffer[position] != rune('\'') {
					goto l394
				}
				position++
			l404:
				{
					position405, tokenIndex405 := position, tokenIndex
					{
						position406, tokenIndex406 := position, tokenIndex
						if buffer[position] != rune('1') {
							goto l407
						}
						position++
						goto l406
					l407:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('2') {
							goto l408
						}
						position++
						goto l406
					l408:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('3') {
							goto l409
						}
						position++
						goto l406
					l409:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('4') {
							goto l410
						}
						position++
						goto l406
					l410:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('5') {
							goto l411
						}
						position++
						goto l406
					l411:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('6') {
							goto l412
						}
						position++
						goto l406
					l412:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('7') {
							goto l413
						}
						position++
						goto l406
					l413:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('8') {
							goto l414
						}
						position++
						goto l406
					l414:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('9') {
							goto l415
						}
						position++
						goto l406
					l415:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('A') {
							goto l416
						}
						position++
						goto l406
					l416:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('B') {
							goto l417
						}
						position++
						goto l406
					l417:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('C') {
							goto l418
						}
						position++
						goto l406
					l418:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('D') {
							goto l419
						}
						position++
						goto l406
					l419:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('E') {
							goto l420
						}
						position++
						goto l406
					l420:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('F') {
							goto l421
						}
						position++
						goto l406
					l421:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('G') {
							goto l422
						}
						position++
						goto l406
					l422:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('H') {
							goto l423
						}
						position++
						goto l406
					l423:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('J') {
							goto l424
						}
						position++
						goto l406
					l424:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('K') {
							goto l425
						}
						position++
						goto l406
					l425:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('L') {
							goto l426
						}
						position++
						goto l406
					l426:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('M') {
							goto l427
						}
						position++
						goto l406
					l427:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('N') {
							goto l428
						}
						position++
						goto l406
					l428:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('P') {
							goto l429
						}
						position++
						goto l406
					l429:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('Q') {
							goto l430
						}
						position++
						goto l406
					l430:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('R') {
							goto l431
						}
						position++
						goto l406
					l431:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('S') {
							goto l432
						}
						position++
						goto l406
					l432:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('T') {
							goto l433
						}
						position++
						goto l406
					l433:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('U') {
							goto l434
						}
						position++
						goto l406
					l434:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('V') {
							goto l435
						}
						position++
						goto l406
					l435:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('W') {
							goto l436
						}
						position++
						goto l406
					l436:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('X') {
							goto l437
						}
						position++
						goto l406
					l437:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('Y') {
							goto l438
						}
						position++
						goto l406
					l438:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('Z') {
							goto l439
						}
						position++
						goto l406
					l439:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('a') {
							goto l440
						}
						position++
						goto l406
					l440:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('b') {
							goto l441
						}
						position++
						goto l406
					l441:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('c') {
							goto l442
						}
						position++
						goto l406
					l442:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('d') {
							goto l443
						}
						position++
						goto l406
					l443:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('e') {
							goto l444
						}
						position++
						goto l406
					l444:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('f') {
							goto l445
						}
						position++
						goto l406
					l445:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('g') {
							goto l446
						}
						position++
						goto l406
					l446:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('h') {
							goto l447
						}
						position++
						goto l406
					l447:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('i') {
							goto l448
						}
						position++
						goto l406
					l448:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('j') {
							goto l449
						}
						position++
						goto l406
					l449:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('k') {
							goto l450
						}
						position++
						goto l406
					l450:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('m') {
							goto l451
						}
						position++
						goto l406
					l451:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('n') {
							goto l452
						}
						position++
						goto l406
					l452:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('o') {
							goto l453
						}
						position++
						goto l406
					l453:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('p') {
							goto l454
						}
						position++
						goto l406
					l454:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('q') {
							goto l455
						}
						position++
						goto l406
					l455:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('r') {
							goto l456
						}
						position++
						goto l406
					l456:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('s') {
							goto l457
						}
						position++
						goto l406
					l457:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('t') {
							goto l458
						}
						position++
						goto l406
					l458:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('u') {
							goto l459
						}
						position++
						goto l406
					l459:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('v') {
							goto l460
						}
						position++
						goto l406
					l460:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('w') {
							goto l461
						}
						position++
						goto l406
					l461:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('x') {
							goto l462
						}
						position++
						goto l406
					l462:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('y') {
							goto l463
						}
						position++
						goto l406
					l463:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('z') {
							goto l405
						}
						position++
					}
				l406:
					goto l404
				l405:
					position, tokenIndex = position405, tokenIndex405
				}
				if buffer[position] != rune('\'') {
					goto l394
				}
				position++
				add(ruleBase58, position395)
			}
			return true
		l394:
			position, tokenIndex = position394, tokenIndex394
			return false
		},
		/* 53 Base64 <- <(('b' / 'B') ('a' / 'A') ('s' / 'S') ('e' / 'E') '6' '4' '\'' ('A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'I' / 'J' / 'K' / 'L' / 'M' / 'N' / 'O' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '0' / '1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / '+' / '/' / '=')* '\'')> */
		func() bool {
			position464, tokenIndex464 := position, tokenIndex
			{
				position465 := position
				{
					position466, tokenIndex466 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l467
					}
					position++
					goto l466
				l467:
					position, tokenIndex = position466, tokenIndex466
					if buffer[position] != rune('B') {
						goto l464
					}
					position++
				}
			l466:
				{
					position468, tokenIndex468 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l469
					}
					position++
					goto l468
				l469:
					position, tokenIndex = position468, tokenIndex468
					if buffer[position] != rune('A') {
						goto l464
					}
					position++
				}
			l468:
				{
					position470, tokenIndex470 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l471
					}
					position++
					goto l470
				l471:
					position, tokenIndex = position470, tokenIndex470
					if buffer[position] != rune('S') {
						goto l464
					}
					position++
				}
			l470:
				{
					position472, tokenIndex472 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l473
					}
					position++
					goto l472
				l473:
					position, tokenIndex = position472, tokenIndex472
					if buffer[position] != rune('E') {
						goto l464
					}
					position++
				}
			l472:
				if buffer[position] != rune('6') {
					goto l464
				}
				position++
				if buffer[position] != rune('4') {
					goto l464
				}
				position++
				if buffer[position] != rune('\'') {
					goto l464
				}
				position++
			l474:
				{
					position475, tokenIndex475 := position, tokenIndex
					{
						position476, tokenIndex476 := position, tokenIndex
						if buffer[position] != rune('A') {
							goto l477
						}
						position++
						goto l476
					l477:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('B') {
							goto l478
						}
						position++
						goto l476
					l478:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('C') {
							goto l479
						}
						position++
						goto l476
					l479:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('D') {
							goto l480
						}
						position++
						goto l476
					l480:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('E') {
							goto l481
						}
						position++
						goto l476
					l481:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('F') {
							goto l482
						}
						position++
						goto l476
					l482:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('G') {
							goto l483
						}
						position++
						goto l476
					l483:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('H') {
							goto l484
						}
						position++
						goto l476
					l484:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('I') {
							goto l485
						}
						position++
						goto l476
					l485:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('J') {
							goto l486
						}
						position++
						goto l476
					l486:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('K') {
							goto l487
						}
						position++
						goto l476
					l487:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('L') {
							goto l488
						}
						position++
						goto l476
					l488:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('M') {
							goto l489
						}
						position++
						goto l476
					l489:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('N') {
							goto l490
						}
						position++
						goto l476
					l490:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('O') {
							goto l491
						}
						position++
						goto l476
					l491:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('P') {
							goto l492
						}
						position++
						goto l476
					l492:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('Q') {
							goto l493
						}
						position++
						goto l476
					l493:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('R') {
							goto l494
						}
						position++
						goto l476
					l494:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('S') {
							goto l495
						}
						position++
						goto l476
					l495:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('T') {
							goto l496
						}
						position++
						goto l476
					l496:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('U') {
							goto l497
						}
						position++
						goto l476
					l497:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('V') {
							goto l498
						}
						position++
						goto l476
					l498:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('W') {
							goto l499
						}
						position++
						goto l476
					l499:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('X') {
							goto l500
						}
						position++
						goto l476
					l500:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('Y') {
							goto l501
						}
						position++
						goto l476
					l501:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('Z') {
							goto l502
						}
						position++
						goto l476
					l502:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('a') {
							goto l503
						}
						position++
						goto l476
					l503:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('b') {
							goto l504
						}
						position++
						goto l476
					l504:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('c') {
							goto l505
						}
						position++
						goto l476
					l505:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('d') {
							goto l506
						}
						position++
						goto l476
					l506:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('e') {
							goto l507
						}
						position++
						goto l476
					l507:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('f') {
							goto l508
						}
						position++
						goto l476
					l508:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('g') {
							goto l509
						}
						position++
						goto l476
					l509:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('h') {
							goto l510
						}
						position++
						goto l476
					l510:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('i') {
							goto l511
						}
						position++
						goto l476
					l511:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('j') {
							goto l512
						}
						position++
						goto l476
					l512:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('k') {
							goto l513
						}
						position++
						goto l476
					l513:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('l') {
							goto l514
						}
						position++
						goto l476
					l514:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('m') {
							goto l515
						}
						position++
						goto l476
					l515:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('n') {
							goto l516
						}
						position++
						goto l476
					l516:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('o') {
							goto l517
						}
						position++
						goto l476
					l517:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('p') {
							goto l518
						}
						position++
						goto l476
					l518:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('q') {
							goto l519
						}
						position++
						goto l476
					l519:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('r') {
							goto l520
						}
						position++
						goto l476
					l520:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('s') {
							goto l521
						}
						position++
						goto l476
					l521:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('t') {
							goto l522
						}
						position++
						goto l476
					l522:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('u') {
							goto l523
						}
						position++
						goto l476
					l523:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('v') {
							goto l524
						}
						position++
						goto l476
					l524:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('w') {
							goto l525
						}
						position++
						goto l476
					l525:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('x') {
							goto l526
						}
						position++
						goto l476
					l526:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('y') {
							goto l527
						}
						position++
						goto l476
					l527:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('z') {
							goto l528
						}
						position++
						goto l476
					l528:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('0') {
							goto l529
						}
						position++
						goto l476
					l529:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('1') {
							goto l530
						}
						position++
						goto l476
					l530:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('2') {
							goto l531
						}
						position++
						goto l476
					l531:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('3') {
							goto l532
						}
						position++
						goto l476
					l532:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('4') {
							goto l533
						}
						position++
						goto l476
					l533:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('5') {
							goto l534
						}
						position++
						goto l476
					l534:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('6') {
							goto l535
						}
						position++
						goto l476
					l535:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('7') {
							goto l536
						}
						position++
						goto l476
					l536:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('8') {
							goto l537
						}
						position++
						goto l476
					l537:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('9') {
							goto l538
						}
						position++
						goto l476
					l538:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('+') {
							goto l539
						}
						position++
						goto l476
					l539:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('/') {
							goto l540
						}
						position++
						goto l476
					l540:
						position, tokenIndex = position476, tokenIndex476
						if buffer[position] != rune('=') {
							goto l475
						}
						position++
					}
				l476:
					goto l474
				l475:
					position, tokenIndex = position475, tokenIndex475
				}
				if buffer[position] != rune('\'') {
					goto l464
				}
				position++
				add(ruleBase64, position465)
			}
			return true
		l464:
			position, tokenIndex = position464, tokenIndex464
			return false
		},
		/* 54 ByteVectorAtom <- <(Base16 / Base58 / Base64)> */
		func() bool {
			position541, tokenIndex541 := position, tokenIndex
			{
				position542 := position
				{
					position543, tokenIndex543 := position, tokenIndex
					if !_rules[ruleBase16]() {
						goto l544
					}
					goto l543
				l544:
					position, tokenIndex = position543, tokenIndex543
					if !_rules[ruleBase58]() {
						goto l545
					}
					goto l543
				l545:
					position, tokenIndex = position543, tokenIndex543
					if !_rules[ruleBase64]() {
						goto l541
					}
				}
			l543:
				add(ruleByteVectorAtom, position542)
			}
			return true
		l541:
			position, tokenIndex = position541, tokenIndex541
			return false
		},
		/* 55 BooleanAtom <- <((('t' / 'T') ('r' / 'R') ('u' / 'U') ('e' / 'E')) / (('f' / 'F') ('a' / 'A') ('l' / 'L') ('s' / 'S') ('e' / 'E')))> */
		func() bool {
			position546, tokenIndex546 := position, tokenIndex
			{
				position547 := position
				{
					position548, tokenIndex548 := position, tokenIndex
					{
						position550, tokenIndex550 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l551
						}
						position++
						goto l550
					l551:
						position, tokenIndex = position550, tokenIndex550
						if buffer[position] != rune('T') {
							goto l549
						}
						position++
					}
				l550:
					{
						position552, tokenIndex552 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l553
						}
						position++
						goto l552
					l553:
						position, tokenIndex = position552, tokenIndex552
						if buffer[position] != rune('R') {
							goto l549
						}
						position++
					}
				l552:
					{
						position554, tokenIndex554 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l555
						}
						position++
						goto l554
					l555:
						position, tokenIndex = position554, tokenIndex554
						if buffer[position] != rune('U') {
							goto l549
						}
						position++
					}
				l554:
					{
						position556, tokenIndex556 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l557
						}
						position++
						goto l556
					l557:
						position, tokenIndex = position556, tokenIndex556
						if buffer[position] != rune('E') {
							goto l549
						}
						position++
					}
				l556:
					goto l548
				l549:
					position, tokenIndex = position548, tokenIndex548
					{
						position558, tokenIndex558 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l559
						}
						position++
						goto l558
					l559:
						position, tokenIndex = position558, tokenIndex558
						if buffer[position] != rune('F') {
							goto l546
						}
						position++
					}
				l558:
					{
						position560, tokenIndex560 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l561
						}
						position++
						goto l560
					l561:
						position, tokenIndex = position560, tokenIndex560
						if buffer[position] != rune('A') {
							goto l546
						}
						position++
					}
				l560:
					{
						position562, tokenIndex562 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l563
						}
						position++
						goto l562
					l563:
						position, tokenIndex = position562, tokenIndex562
						if buffer[position] != rune('L') {
							goto l546
						}
						position++
					}
				l562:
					{
						position564, tokenIndex564 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l565
						}
						position++
						goto l564
					l565:
						position, tokenIndex = position564, tokenIndex564
						if buffer[position] != rune('S') {
							goto l546
						}
						position++
					}
				l564:
					{
						position566, tokenIndex566 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l567
						}
						position++
						goto l566
					l567:
						position, tokenIndex = position566, tokenIndex566
						if buffer[position] != rune('E') {
							goto l546
						}
						position++
					}
				l566:
				}
			l548:
				add(ruleBooleanAtom, position547)
			}
			return true
		l546:
			position, tokenIndex = position546, tokenIndex546
			return false
		},
		/* 56 StringAtom <- <('"' (UnicodeCharAtom / EscapedCharAtom / CharAtom)* '"')> */
		func() bool {
			position568, tokenIndex568 := position, tokenIndex
			{
				position569 := position
				if buffer[position] != rune('"') {
					goto l568
				}
				position++
			l570:
				{
					position571, tokenIndex571 := position, tokenIndex
					{
						position572, tokenIndex572 := position, tokenIndex
						if !_rules[ruleUnicodeCharAtom]() {
							goto l573
						}
						goto l572
					l573:
						position, tokenIndex = position572, tokenIndex572
						if !_rules[ruleEscapedCharAtom]() {
							goto l574
						}
						goto l572
					l574:
						position, tokenIndex = position572, tokenIndex572
						if !_rules[ruleCharAtom]() {
							goto l571
						}
					}
				l572:
					goto l570
				l571:
					position, tokenIndex = position571, tokenIndex571
				}
				if buffer[position] != rune('"') {
					goto l568
				}
				position++
				add(ruleStringAtom, position569)
			}
			return true
		l568:
			position, tokenIndex = position568, tokenIndex568
			return false
		},
		/* 57 UnicodeCharAtom <- <('\\' ('u' / 'U') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')? ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')? ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')?)> */
		func() bool {
			position575, tokenIndex575 := position, tokenIndex
			{
				position576 := position
				if buffer[position] != rune('\\') {
					goto l575
				}
				position++
				{
					position577, tokenIndex577 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l578
					}
					position++
					goto l577
				l578:
					position, tokenIndex = position577, tokenIndex577
					if buffer[position] != rune('U') {
						goto l575
					}
					position++
				}
			l577:
				{
					position579, tokenIndex579 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l580
					}
					position++
					goto l579
				l580:
					position, tokenIndex = position579, tokenIndex579
					if buffer[position] != rune('A') {
						goto l581
					}
					position++
					goto l579
				l581:
					position, tokenIndex = position579, tokenIndex579
					if buffer[position] != rune('B') {
						goto l582
					}
					position++
					goto l579
				l582:
					position, tokenIndex = position579, tokenIndex579
					if buffer[position] != rune('C') {
						goto l583
					}
					position++
					goto l579
				l583:
					position, tokenIndex = position579, tokenIndex579
					if buffer[position] != rune('D') {
						goto l584
					}
					position++
					goto l579
				l584:
					position, tokenIndex = position579, tokenIndex579
					if buffer[position] != rune('E') {
						goto l585
					}
					position++
					goto l579
				l585:
					position, tokenIndex = position579, tokenIndex579
					if buffer[position] != rune('F') {
						goto l586
					}
					position++
					goto l579
				l586:
					position, tokenIndex = position579, tokenIndex579
					if buffer[position] != rune('a') {
						goto l587
					}
					position++
					goto l579
				l587:
					position, tokenIndex = position579, tokenIndex579
					if buffer[position] != rune('b') {
						goto l588
					}
					position++
					goto l579
				l588:
					position, tokenIndex = position579, tokenIndex579
					if buffer[position] != rune('c') {
						goto l589
					}
					position++
					goto l579
				l589:
					position, tokenIndex = position579, tokenIndex579
					if buffer[position] != rune('d') {
						goto l590
					}
					position++
					goto l579
				l590:
					position, tokenIndex = position579, tokenIndex579
					if buffer[position] != rune('e') {
						goto l591
					}
					position++
					goto l579
				l591:
					position, tokenIndex = position579, tokenIndex579
					if buffer[position] != rune('f') {
						goto l575
					}
					position++
				}
			l579:
				{
					position592, tokenIndex592 := position, tokenIndex
					{
						position594, tokenIndex594 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l595
						}
						position++
						goto l594
					l595:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('A') {
							goto l596
						}
						position++
						goto l594
					l596:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('B') {
							goto l597
						}
						position++
						goto l594
					l597:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('C') {
							goto l598
						}
						position++
						goto l594
					l598:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('D') {
							goto l599
						}
						position++
						goto l594
					l599:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('E') {
							goto l600
						}
						position++
						goto l594
					l600:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('F') {
							goto l601
						}
						position++
						goto l594
					l601:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('a') {
							goto l602
						}
						position++
						goto l594
					l602:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('b') {
							goto l603
						}
						position++
						goto l594
					l603:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('c') {
							goto l604
						}
						position++
						goto l594
					l604:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('d') {
							goto l605
						}
						position++
						goto l594
					l605:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('e') {
							goto l606
						}
						position++
						goto l594
					l606:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('f') {
							goto l592
						}
						position++
					}
				l594:
					goto l593
				l592:
					position, tokenIndex = position592, tokenIndex592
				}
			l593:
				{
					position607, tokenIndex607 := position, tokenIndex
					{
						position609, tokenIndex609 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l610
						}
						position++
						goto l609
					l610:
						position, tokenIndex = position609, tokenIndex609
						if buffer[position] != rune('A') {
							goto l611
						}
						position++
						goto l609
					l611:
						position, tokenIndex = position609, tokenIndex609
						if buffer[position] != rune('B') {
							goto l612
						}
						position++
						goto l609
					l612:
						position, tokenIndex = position609, tokenIndex609
						if buffer[position] != rune('C') {
							goto l613
						}
						position++
						goto l609
					l613:
						position, tokenIndex = position609, tokenIndex609
						if buffer[position] != rune('D') {
							goto l614
						}
						position++
						goto l609
					l614:
						position, tokenIndex = position609, tokenIndex609
						if buffer[position] != rune('E') {
							goto l615
						}
						position++
						goto l609
					l615:
						position, tokenIndex = position609, tokenIndex609
						if buffer[position] != rune('F') {
							goto l616
						}
						position++
						goto l609
					l616:
						position, tokenIndex = position609, tokenIndex609
						if buffer[position] != rune('a') {
							goto l617
						}
						position++
						goto l609
					l617:
						position, tokenIndex = position609, tokenIndex609
						if buffer[position] != rune('b') {
							goto l618
						}
						position++
						goto l609
					l618:
						position, tokenIndex = position609, tokenIndex609
						if buffer[position] != rune('c') {
							goto l619
						}
						position++
						goto l609
					l619:
						position, tokenIndex = position609, tokenIndex609
						if buffer[position] != rune('d') {
							goto l620
						}
						position++
						goto l609
					l620:
						position, tokenIndex = position609, tokenIndex609
						if buffer[position] != rune('e') {
							goto l621
						}
						position++
						goto l609
					l621:
						position, tokenIndex = position609, tokenIndex609
						if buffer[position] != rune('f') {
							goto l607
						}
						position++
					}
				l609:
					goto l608
				l607:
					position, tokenIndex = position607, tokenIndex607
				}
			l608:
				{
					position622, tokenIndex622 := position, tokenIndex
					{
						position624, tokenIndex624 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l625
						}
						position++
						goto l624
					l625:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('A') {
							goto l626
						}
						position++
						goto l624
					l626:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('B') {
							goto l627
						}
						position++
						goto l624
					l627:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('C') {
							goto l628
						}
						position++
						goto l624
					l628:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('D') {
							goto l629
						}
						position++
						goto l624
					l629:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('E') {
							goto l630
						}
						position++
						goto l624
					l630:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('F') {
							goto l631
						}
						position++
						goto l624
					l631:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('a') {
							goto l632
						}
						position++
						goto l624
					l632:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('b') {
							goto l633
						}
						position++
						goto l624
					l633:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('c') {
							goto l634
						}
						position++
						goto l624
					l634:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('d') {
							goto l635
						}
						position++
						goto l624
					l635:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('e') {
							goto l636
						}
						position++
						goto l624
					l636:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('f') {
							goto l622
						}
						position++
					}
				l624:
					goto l623
				l622:
					position, tokenIndex = position622, tokenIndex622
				}
			l623:
				add(ruleUnicodeCharAtom, position576)
			}
			return true
		l575:
			position, tokenIndex = position575, tokenIndex575
			return false
		},
		/* 58 EscapedCharAtom <- <('\\' .)> */
		func() bool {
			position637, tokenIndex637 := position, tokenIndex
			{
				position638 := position
				if buffer[position] != rune('\\') {
					goto l637
				}
				position++
				if !matchDot() {
					goto l637
				}
				add(ruleEscapedCharAtom, position638)
			}
			return true
		l637:
			position, tokenIndex = position637, tokenIndex637
			return false
		},
		/* 59 CharAtom <- <(!'"' .)> */
		func() bool {
			position639, tokenIndex639 := position, tokenIndex
			{
				position640 := position
				{
					position641, tokenIndex641 := position, tokenIndex
					if buffer[position] != rune('"') {
						goto l641
					}
					position++
					goto l639
				l641:
					position, tokenIndex = position641, tokenIndex641
				}
				if !matchDot() {
					goto l639
				}
				add(ruleCharAtom, position640)
			}
			return true
		l639:
			position, tokenIndex = position639, tokenIndex639
			return false
		},
		/* 60 IntegerAtom <- <[0-9]+> */
		func() bool {
			position642, tokenIndex642 := position, tokenIndex
			{
				position643 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l642
				}
				position++
			l644:
				{
					position645, tokenIndex645 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l645
					}
					position++
					goto l644
				l645:
					position, tokenIndex = position645, tokenIndex645
				}
				add(ruleIntegerAtom, position643)
			}
			return true
		l642:
			position, tokenIndex = position642, tokenIndex642
			return false
		},
		/* 61 ListAtom <- <('[' _ ExprSeq? _ ']')> */
		func() bool {
			position646, tokenIndex646 := position, tokenIndex
			{
				position647 := position
				if buffer[position] != rune('[') {
					goto l646
				}
				position++
				if !_rules[rule_]() {
					goto l646
				}
				{
					position648, tokenIndex648 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l648
					}
					goto l649
				l648:
					position, tokenIndex = position648, tokenIndex648
				}
			l649:
				if !_rules[rule_]() {
					goto l646
				}
				if buffer[position] != rune(']') {
					goto l646
				}
				position++
				add(ruleListAtom, position647)
			}
			return true
		l646:
			position, tokenIndex = position646, tokenIndex646
			return false
		},
		/* 62 ExprSeq <- <(Expr (_ ',' _ ExprSeq)?)> */
		func() bool {
			position650, tokenIndex650 := position, tokenIndex
			{
				position651 := position
				if !_rules[ruleExpr]() {
					goto l650
				}
				{
					position652, tokenIndex652 := position, tokenIndex
					if !_rules[rule_]() {
						goto l652
					}
					if buffer[position] != rune(',') {
						goto l652
					}
					position++
					if !_rules[rule_]() {
						goto l652
					}
					if !_rules[ruleExprSeq]() {
						goto l652
					}
					goto l653
				l652:
					position, tokenIndex = position652, tokenIndex652
				}
			l653:
				add(ruleExprSeq, position651)
			}
			return true
		l650:
			position, tokenIndex = position650, tokenIndex650
			return false
		},
		/* 63 AtomExpr <- <(UnaryOp? _ (FoldMacro / GettableExpr / IfWithError / Match / ConstAtom))> */
		func() bool {
			position654, tokenIndex654 := position, tokenIndex
			{
				position655 := position
				{
					position656, tokenIndex656 := position, tokenIndex
					if !_rules[ruleUnaryOp]() {
						goto l656
					}
					goto l657
				l656:
					position, tokenIndex = position656, tokenIndex656
				}
			l657:
				if !_rules[rule_]() {
					goto l654
				}
				{
					position658, tokenIndex658 := position, tokenIndex
					if !_rules[ruleFoldMacro]() {
						goto l659
					}
					goto l658
				l659:
					position, tokenIndex = position658, tokenIndex658
					if !_rules[ruleGettableExpr]() {
						goto l660
					}
					goto l658
				l660:
					position, tokenIndex = position658, tokenIndex658
					if !_rules[ruleIfWithError]() {
						goto l661
					}
					goto l658
				l661:
					position, tokenIndex = position658, tokenIndex658
					if !_rules[ruleMatch]() {
						goto l662
					}
					goto l658
				l662:
					position, tokenIndex = position658, tokenIndex658
					if !_rules[ruleConstAtom]() {
						goto l654
					}
				}
			l658:
				add(ruleAtomExpr, position655)
			}
			return true
		l654:
			position, tokenIndex = position654, tokenIndex654
			return false
		},
		/* 64 MultGroupOpAtom <- <(AtomExpr (_ MultGroupOp _ AtomExpr)*)> */
		func() bool {
			position663, tokenIndex663 := position, tokenIndex
			{
				position664 := position
				if !_rules[ruleAtomExpr]() {
					goto l663
				}
			l665:
				{
					position666, tokenIndex666 := position, tokenIndex
					if !_rules[rule_]() {
						goto l666
					}
					if !_rules[ruleMultGroupOp]() {
						goto l666
					}
					if !_rules[rule_]() {
						goto l666
					}
					if !_rules[ruleAtomExpr]() {
						goto l666
					}
					goto l665
				l666:
					position, tokenIndex = position666, tokenIndex666
				}
				add(ruleMultGroupOpAtom, position664)
			}
			return true
		l663:
			position, tokenIndex = position663, tokenIndex663
			return false
		},
		/* 65 SumGroupOpAtom <- <(MultGroupOpAtom (_ SumGroupOp _ MultGroupOpAtom)*)> */
		func() bool {
			position667, tokenIndex667 := position, tokenIndex
			{
				position668 := position
				if !_rules[ruleMultGroupOpAtom]() {
					goto l667
				}
			l669:
				{
					position670, tokenIndex670 := position, tokenIndex
					if !_rules[rule_]() {
						goto l670
					}
					if !_rules[ruleSumGroupOp]() {
						goto l670
					}
					if !_rules[rule_]() {
						goto l670
					}
					if !_rules[ruleMultGroupOpAtom]() {
						goto l670
					}
					goto l669
				l670:
					position, tokenIndex = position670, tokenIndex670
				}
				add(ruleSumGroupOpAtom, position668)
			}
			return true
		l667:
			position, tokenIndex = position667, tokenIndex667
			return false
		},
		/* 66 ConsOpAtom <- <(SumGroupOpAtom (_ ConsOp _ SumGroupOpAtom)*)> */
		func() bool {
			position671, tokenIndex671 := position, tokenIndex
			{
				position672 := position
				if !_rules[ruleSumGroupOpAtom]() {
					goto l671
				}
			l673:
				{
					position674, tokenIndex674 := position, tokenIndex
					if !_rules[rule_]() {
						goto l674
					}
					if !_rules[ruleConsOp]() {
						goto l674
					}
					if !_rules[rule_]() {
						goto l674
					}
					if !_rules[ruleSumGroupOpAtom]() {
						goto l674
					}
					goto l673
				l674:
					position, tokenIndex = position674, tokenIndex674
				}
				add(ruleConsOpAtom, position672)
			}
			return true
		l671:
			position, tokenIndex = position671, tokenIndex671
			return false
		},
		/* 67 CompareGroupOpAtom <- <(ConsOpAtom (_ CompareGroupOp _ ConsOpAtom)*)> */
		func() bool {
			position675, tokenIndex675 := position, tokenIndex
			{
				position676 := position
				if !_rules[ruleConsOpAtom]() {
					goto l675
				}
			l677:
				{
					position678, tokenIndex678 := position, tokenIndex
					if !_rules[rule_]() {
						goto l678
					}
					if !_rules[ruleCompareGroupOp]() {
						goto l678
					}
					if !_rules[rule_]() {
						goto l678
					}
					if !_rules[ruleConsOpAtom]() {
						goto l678
					}
					goto l677
				l678:
					position, tokenIndex = position678, tokenIndex678
				}
				add(ruleCompareGroupOpAtom, position676)
			}
			return true
		l675:
			position, tokenIndex = position675, tokenIndex675
			return false
		},
		/* 68 EqualityGroupOpAtom <- <(CompareGroupOpAtom (_ EqGroupOp _ CompareGroupOpAtom)*)> */
		func() bool {
			position679, tokenIndex679 := position, tokenIndex
			{
				position680 := position
				if !_rules[ruleCompareGroupOpAtom]() {
					goto l679
				}
			l681:
				{
					position682, tokenIndex682 := position, tokenIndex
					if !_rules[rule_]() {
						goto l682
					}
					if !_rules[ruleEqGroupOp]() {
						goto l682
					}
					if !_rules[rule_]() {
						goto l682
					}
					if !_rules[ruleCompareGroupOpAtom]() {
						goto l682
					}
					goto l681
				l682:
					position, tokenIndex = position682, tokenIndex682
				}
				add(ruleEqualityGroupOpAtom, position680)
			}
			return true
		l679:
			position, tokenIndex = position679, tokenIndex679
			return false
		},
		/* 69 AndOpAtom <- <(EqualityGroupOpAtom (_ AndOp _ EqualityGroupOpAtom)*)> */
		func() bool {
			position683, tokenIndex683 := position, tokenIndex
			{
				position684 := position
				if !_rules[ruleEqualityGroupOpAtom]() {
					goto l683
				}
			l685:
				{
					position686, tokenIndex686 := position, tokenIndex
					if !_rules[rule_]() {
						goto l686
					}
					if !_rules[ruleAndOp]() {
						goto l686
					}
					if !_rules[rule_]() {
						goto l686
					}
					if !_rules[ruleEqualityGroupOpAtom]() {
						goto l686
					}
					goto l685
				l686:
					position, tokenIndex = position686, tokenIndex686
				}
				add(ruleAndOpAtom, position684)
			}
			return true
		l683:
			position, tokenIndex = position683, tokenIndex683
			return false
		},
		/* 70 OrOpAtom <- <(AndOpAtom (_ OrOp _ AndOpAtom)*)> */
		func() bool {
			position687, tokenIndex687 := position, tokenIndex
			{
				position688 := position
				if !_rules[ruleAndOpAtom]() {
					goto l687
				}
			l689:
				{
					position690, tokenIndex690 := position, tokenIndex
					if !_rules[rule_]() {
						goto l690
					}
					if !_rules[ruleOrOp]() {
						goto l690
					}
					if !_rules[rule_]() {
						goto l690
					}
					if !_rules[ruleAndOpAtom]() {
						goto l690
					}
					goto l689
				l690:
					position, tokenIndex = position690, tokenIndex690
				}
				add(ruleOrOpAtom, position688)
			}
			return true
		l687:
			position, tokenIndex = position687, tokenIndex687
			return false
		},
		/* 71 Expr <- <OrOpAtom> */
		func() bool {
			position691, tokenIndex691 := position, tokenIndex
			{
				position692 := position
				if !_rules[ruleOrOpAtom]() {
					goto l691
				}
				add(ruleExpr, position692)
			}
			return true
		l691:
			position, tokenIndex = position691, tokenIndex691
			return false
		},
		/* 72 ParExpr <- <('(' _ Expr _ ')')> */
		func() bool {
			position693, tokenIndex693 := position, tokenIndex
			{
				position694 := position
				if buffer[position] != rune('(') {
					goto l693
				}
				position++
				if !_rules[rule_]() {
					goto l693
				}
				if !_rules[ruleExpr]() {
					goto l693
				}
				if !_rules[rule_]() {
					goto l693
				}
				if buffer[position] != rune(')') {
					goto l693
				}
				position++
				add(ruleParExpr, position694)
			}
			return true
		l693:
			position, tokenIndex = position693, tokenIndex693
			return false
		},
		/* 73 GettableExpr <- <((ParExpr / Block / FunctionCall / IdentifierAtom) (_ (ListAccess / ('.' _ (FunctionCallAccess / IdentifierAtomAccess))))*)> */
		func() bool {
			position695, tokenIndex695 := position, tokenIndex
			{
				position696 := position
				{
					position697, tokenIndex697 := position, tokenIndex
					if !_rules[ruleParExpr]() {
						goto l698
					}
					goto l697
				l698:
					position, tokenIndex = position697, tokenIndex697
					if !_rules[ruleBlock]() {
						goto l699
					}
					goto l697
				l699:
					position, tokenIndex = position697, tokenIndex697
					if !_rules[ruleFunctionCall]() {
						goto l700
					}
					goto l697
				l700:
					position, tokenIndex = position697, tokenIndex697
					if !_rules[ruleIdentifierAtom]() {
						goto l695
					}
				}
			l697:
			l701:
				{
					position702, tokenIndex702 := position, tokenIndex
					if !_rules[rule_]() {
						goto l702
					}
					{
						position703, tokenIndex703 := position, tokenIndex
						if !_rules[ruleListAccess]() {
							goto l704
						}
						goto l703
					l704:
						position, tokenIndex = position703, tokenIndex703
						if buffer[position] != rune('.') {
							goto l702
						}
						position++
						if !_rules[rule_]() {
							goto l702
						}
						{
							position705, tokenIndex705 := position, tokenIndex
							if !_rules[ruleFunctionCallAccess]() {
								goto l706
							}
							goto l705
						l706:
							position, tokenIndex = position705, tokenIndex705
							if !_rules[ruleIdentifierAtomAccess]() {
								goto l702
							}
						}
					l705:
					}
				l703:
					goto l701
				l702:
					position, tokenIndex = position702, tokenIndex702
				}
				add(ruleGettableExpr, position696)
			}
			return true
		l695:
			position, tokenIndex = position695, tokenIndex695
			return false
		},
		/* 74 FunctionCallAccess <- <FunctionCall> */
		func() bool {
			position707, tokenIndex707 := position, tokenIndex
			{
				position708 := position
				if !_rules[ruleFunctionCall]() {
					goto l707
				}
				add(ruleFunctionCallAccess, position708)
			}
			return true
		l707:
			position, tokenIndex = position707, tokenIndex707
			return false
		},
		/* 75 IdentifierAtomAccess <- <IdentifierAtom> */
		func() bool {
			position709, tokenIndex709 := position, tokenIndex
			{
				position710 := position
				if !_rules[ruleIdentifierAtom]() {
					goto l709
				}
				add(ruleIdentifierAtomAccess, position710)
			}
			return true
		l709:
			position, tokenIndex = position709, tokenIndex709
			return false
		},
		/* 76 ListAccess <- <('[' _ (Expr / IdentifierAtom) _ ']')> */
		func() bool {
			position711, tokenIndex711 := position, tokenIndex
			{
				position712 := position
				if buffer[position] != rune('[') {
					goto l711
				}
				position++
				if !_rules[rule_]() {
					goto l711
				}
				{
					position713, tokenIndex713 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l714
					}
					goto l713
				l714:
					position, tokenIndex = position713, tokenIndex713
					if !_rules[ruleIdentifierAtom]() {
						goto l711
					}
				}
			l713:
				if !_rules[rule_]() {
					goto l711
				}
				if buffer[position] != rune(']') {
					goto l711
				}
				position++
				add(ruleListAccess, position712)
			}
			return true
		l711:
			position, tokenIndex = position711, tokenIndex711
			return false
		},
		/* 77 Block <- <('{' (_ Declaration)* _ BlockDecExprSep? _ Expr _ '}')> */
		func() bool {
			position715, tokenIndex715 := position, tokenIndex
			{
				position716 := position
				if buffer[position] != rune('{') {
					goto l715
				}
				position++
			l717:
				{
					position718, tokenIndex718 := position, tokenIndex
					if !_rules[rule_]() {
						goto l718
					}
					if !_rules[ruleDeclaration]() {
						goto l718
					}
					goto l717
				l718:
					position, tokenIndex = position718, tokenIndex718
				}
				if !_rules[rule_]() {
					goto l715
				}
				{
					position719, tokenIndex719 := position, tokenIndex
					if !_rules[ruleBlockDecExprSep]() {
						goto l719
					}
					goto l720
				l719:
					position, tokenIndex = position719, tokenIndex719
				}
			l720:
				if !_rules[rule_]() {
					goto l715
				}
				if !_rules[ruleExpr]() {
					goto l715
				}
				if !_rules[rule_]() {
					goto l715
				}
				if buffer[position] != rune('}') {
					goto l715
				}
				position++
				add(ruleBlock, position716)
			}
			return true
		l715:
			position, tokenIndex = position715, tokenIndex715
			return false
		},
		/* 78 BlockWithoutPar <- <((_ Declaration)* _ BlockDecExprSep? _ Expr)> */
		func() bool {
			position721, tokenIndex721 := position, tokenIndex
			{
				position722 := position
			l723:
				{
					position724, tokenIndex724 := position, tokenIndex
					if !_rules[rule_]() {
						goto l724
					}
					if !_rules[ruleDeclaration]() {
						goto l724
					}
					goto l723
				l724:
					position, tokenIndex = position724, tokenIndex724
				}
				if !_rules[rule_]() {
					goto l721
				}
				{
					position725, tokenIndex725 := position, tokenIndex
					if !_rules[ruleBlockDecExprSep]() {
						goto l725
					}
					goto l726
				l725:
					position, tokenIndex = position725, tokenIndex725
				}
			l726:
				if !_rules[rule_]() {
					goto l721
				}
				if !_rules[ruleExpr]() {
					goto l721
				}
				add(ruleBlockWithoutPar, position722)
			}
			return true
		l721:
			position, tokenIndex = position721, tokenIndex721
			return false
		},
		/* 79 BlockDecExprSep <- <':'> */
		func() bool {
			position727, tokenIndex727 := position, tokenIndex
			{
				position728 := position
				if buffer[position] != rune(':') {
					goto l727
				}
				position++
				add(ruleBlockDecExprSep, position728)
			}
			return true
		l727:
			position, tokenIndex = position727, tokenIndex727
			return false
		},
		/* 80 FunctionCall <- <(IdentifierAtom _ '(' _ ExprSeq? _ ')')> */
		func() bool {
			position729, tokenIndex729 := position, tokenIndex
			{
				position730 := position
				if !_rules[ruleIdentifierAtom]() {
					goto l729
				}
				if !_rules[rule_]() {
					goto l729
				}
				if buffer[position] != rune('(') {
					goto l729
				}
				position++
				if !_rules[rule_]() {
					goto l729
				}
				{
					position731, tokenIndex731 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l731
					}
					goto l732
				l731:
					position, tokenIndex = position731, tokenIndex731
				}
			l732:
				if !_rules[rule_]() {
					goto l729
				}
				if buffer[position] != rune(')') {
					goto l729
				}
				position++
				add(ruleFunctionCall, position730)
			}
			return true
		l729:
			position, tokenIndex = position729, tokenIndex729
			return false
		},
		/* 81 FoldMacro <- <(('f' / 'F') ('o' / 'O') ('l' / 'L') ('d' / 'D') _ '<' _ IntegerAtom _ '>' _ '(' _ Expr _ ',' _ Expr _ ',' _ IdentifierAtom _ ')')> */
		func() bool {
			position733, tokenIndex733 := position, tokenIndex
			{
				position734 := position
				{
					position735, tokenIndex735 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l736
					}
					position++
					goto l735
				l736:
					position, tokenIndex = position735, tokenIndex735
					if buffer[position] != rune('F') {
						goto l733
					}
					position++
				}
			l735:
				{
					position737, tokenIndex737 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l738
					}
					position++
					goto l737
				l738:
					position, tokenIndex = position737, tokenIndex737
					if buffer[position] != rune('O') {
						goto l733
					}
					position++
				}
			l737:
				{
					position739, tokenIndex739 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l740
					}
					position++
					goto l739
				l740:
					position, tokenIndex = position739, tokenIndex739
					if buffer[position] != rune('L') {
						goto l733
					}
					position++
				}
			l739:
				{
					position741, tokenIndex741 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l742
					}
					position++
					goto l741
				l742:
					position, tokenIndex = position741, tokenIndex741
					if buffer[position] != rune('D') {
						goto l733
					}
					position++
				}
			l741:
				if !_rules[rule_]() {
					goto l733
				}
				if buffer[position] != rune('<') {
					goto l733
				}
				position++
				if !_rules[rule_]() {
					goto l733
				}
				if !_rules[ruleIntegerAtom]() {
					goto l733
				}
				if !_rules[rule_]() {
					goto l733
				}
				if buffer[position] != rune('>') {
					goto l733
				}
				position++
				if !_rules[rule_]() {
					goto l733
				}
				if buffer[position] != rune('(') {
					goto l733
				}
				position++
				if !_rules[rule_]() {
					goto l733
				}
				if !_rules[ruleExpr]() {
					goto l733
				}
				if !_rules[rule_]() {
					goto l733
				}
				if buffer[position] != rune(',') {
					goto l733
				}
				position++
				if !_rules[rule_]() {
					goto l733
				}
				if !_rules[ruleExpr]() {
					goto l733
				}
				if !_rules[rule_]() {
					goto l733
				}
				if buffer[position] != rune(',') {
					goto l733
				}
				position++
				if !_rules[rule_]() {
					goto l733
				}
				if !_rules[ruleIdentifierAtom]() {
					goto l733
				}
				if !_rules[rule_]() {
					goto l733
				}
				if buffer[position] != rune(')') {
					goto l733
				}
				position++
				add(ruleFoldMacro, position734)
			}
			return true
		l733:
			position, tokenIndex = position733, tokenIndex733
			return false
		},
		/* 82 IfWithError <- <(If / FailedIfWithoutElse)> */
		func() bool {
			position743, tokenIndex743 := position, tokenIndex
			{
				position744 := position
				{
					position745, tokenIndex745 := position, tokenIndex
					if !_rules[ruleIf]() {
						goto l746
					}
					goto l745
				l746:
					position, tokenIndex = position745, tokenIndex745
					if !_rules[ruleFailedIfWithoutElse]() {
						goto l743
					}
				}
			l745:
				add(ruleIfWithError, position744)
			}
			return true
		l743:
			position, tokenIndex = position743, tokenIndex743
			return false
		},
		/* 83 If <- <(('i' / 'I') ('f' / 'F') _ Expr _ (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) _ Expr _ (('e' / 'E') ('l' / 'L') ('s' / 'S') ('e' / 'E')) _ Expr)> */
		func() bool {
			position747, tokenIndex747 := position, tokenIndex
			{
				position748 := position
				{
					position749, tokenIndex749 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l750
					}
					position++
					goto l749
				l750:
					position, tokenIndex = position749, tokenIndex749
					if buffer[position] != rune('I') {
						goto l747
					}
					position++
				}
			l749:
				{
					position751, tokenIndex751 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l752
					}
					position++
					goto l751
				l752:
					position, tokenIndex = position751, tokenIndex751
					if buffer[position] != rune('F') {
						goto l747
					}
					position++
				}
			l751:
				if !_rules[rule_]() {
					goto l747
				}
				if !_rules[ruleExpr]() {
					goto l747
				}
				if !_rules[rule_]() {
					goto l747
				}
				{
					position753, tokenIndex753 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l754
					}
					position++
					goto l753
				l754:
					position, tokenIndex = position753, tokenIndex753
					if buffer[position] != rune('T') {
						goto l747
					}
					position++
				}
			l753:
				{
					position755, tokenIndex755 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l756
					}
					position++
					goto l755
				l756:
					position, tokenIndex = position755, tokenIndex755
					if buffer[position] != rune('H') {
						goto l747
					}
					position++
				}
			l755:
				{
					position757, tokenIndex757 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l758
					}
					position++
					goto l757
				l758:
					position, tokenIndex = position757, tokenIndex757
					if buffer[position] != rune('E') {
						goto l747
					}
					position++
				}
			l757:
				{
					position759, tokenIndex759 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l760
					}
					position++
					goto l759
				l760:
					position, tokenIndex = position759, tokenIndex759
					if buffer[position] != rune('N') {
						goto l747
					}
					position++
				}
			l759:
				if !_rules[rule_]() {
					goto l747
				}
				if !_rules[ruleExpr]() {
					goto l747
				}
				if !_rules[rule_]() {
					goto l747
				}
				{
					position761, tokenIndex761 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l762
					}
					position++
					goto l761
				l762:
					position, tokenIndex = position761, tokenIndex761
					if buffer[position] != rune('E') {
						goto l747
					}
					position++
				}
			l761:
				{
					position763, tokenIndex763 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l764
					}
					position++
					goto l763
				l764:
					position, tokenIndex = position763, tokenIndex763
					if buffer[position] != rune('L') {
						goto l747
					}
					position++
				}
			l763:
				{
					position765, tokenIndex765 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l766
					}
					position++
					goto l765
				l766:
					position, tokenIndex = position765, tokenIndex765
					if buffer[position] != rune('S') {
						goto l747
					}
					position++
				}
			l765:
				{
					position767, tokenIndex767 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l768
					}
					position++
					goto l767
				l768:
					position, tokenIndex = position767, tokenIndex767
					if buffer[position] != rune('E') {
						goto l747
					}
					position++
				}
			l767:
				if !_rules[rule_]() {
					goto l747
				}
				if !_rules[ruleExpr]() {
					goto l747
				}
				add(ruleIf, position748)
			}
			return true
		l747:
			position, tokenIndex = position747, tokenIndex747
			return false
		},
		/* 84 FailedIfWithoutElse <- <(('i' / 'I') ('f' / 'F') _ Expr _ (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) _ Expr)> */
		func() bool {
			position769, tokenIndex769 := position, tokenIndex
			{
				position770 := position
				{
					position771, tokenIndex771 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l772
					}
					position++
					goto l771
				l772:
					position, tokenIndex = position771, tokenIndex771
					if buffer[position] != rune('I') {
						goto l769
					}
					position++
				}
			l771:
				{
					position773, tokenIndex773 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l774
					}
					position++
					goto l773
				l774:
					position, tokenIndex = position773, tokenIndex773
					if buffer[position] != rune('F') {
						goto l769
					}
					position++
				}
			l773:
				if !_rules[rule_]() {
					goto l769
				}
				if !_rules[ruleExpr]() {
					goto l769
				}
				if !_rules[rule_]() {
					goto l769
				}
				{
					position775, tokenIndex775 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l776
					}
					position++
					goto l775
				l776:
					position, tokenIndex = position775, tokenIndex775
					if buffer[position] != rune('T') {
						goto l769
					}
					position++
				}
			l775:
				{
					position777, tokenIndex777 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l778
					}
					position++
					goto l777
				l778:
					position, tokenIndex = position777, tokenIndex777
					if buffer[position] != rune('H') {
						goto l769
					}
					position++
				}
			l777:
				{
					position779, tokenIndex779 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l780
					}
					position++
					goto l779
				l780:
					position, tokenIndex = position779, tokenIndex779
					if buffer[position] != rune('E') {
						goto l769
					}
					position++
				}
			l779:
				{
					position781, tokenIndex781 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l782
					}
					position++
					goto l781
				l782:
					position, tokenIndex = position781, tokenIndex781
					if buffer[position] != rune('N') {
						goto l769
					}
					position++
				}
			l781:
				if !_rules[rule_]() {
					goto l769
				}
				if !_rules[ruleExpr]() {
					goto l769
				}
				add(ruleFailedIfWithoutElse, position770)
			}
			return true
		l769:
			position, tokenIndex = position769, tokenIndex769
			return false
		},
		/* 85 Match <- <(('m' / 'M') ('a' / 'A') ('t' / 'T') ('c' / 'C') ('h' / 'H') _ Expr _ '{' (_ MatchCase)+ _ '}')> */
		func() bool {
			position783, tokenIndex783 := position, tokenIndex
			{
				position784 := position
				{
					position785, tokenIndex785 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l786
					}
					position++
					goto l785
				l786:
					position, tokenIndex = position785, tokenIndex785
					if buffer[position] != rune('M') {
						goto l783
					}
					position++
				}
			l785:
				{
					position787, tokenIndex787 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l788
					}
					position++
					goto l787
				l788:
					position, tokenIndex = position787, tokenIndex787
					if buffer[position] != rune('A') {
						goto l783
					}
					position++
				}
			l787:
				{
					position789, tokenIndex789 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l790
					}
					position++
					goto l789
				l790:
					position, tokenIndex = position789, tokenIndex789
					if buffer[position] != rune('T') {
						goto l783
					}
					position++
				}
			l789:
				{
					position791, tokenIndex791 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l792
					}
					position++
					goto l791
				l792:
					position, tokenIndex = position791, tokenIndex791
					if buffer[position] != rune('C') {
						goto l783
					}
					position++
				}
			l791:
				{
					position793, tokenIndex793 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l794
					}
					position++
					goto l793
				l794:
					position, tokenIndex = position793, tokenIndex793
					if buffer[position] != rune('H') {
						goto l783
					}
					position++
				}
			l793:
				if !_rules[rule_]() {
					goto l783
				}
				if !_rules[ruleExpr]() {
					goto l783
				}
				if !_rules[rule_]() {
					goto l783
				}
				if buffer[position] != rune('{') {
					goto l783
				}
				position++
				if !_rules[rule_]() {
					goto l783
				}
				if !_rules[ruleMatchCase]() {
					goto l783
				}
			l795:
				{
					position796, tokenIndex796 := position, tokenIndex
					if !_rules[rule_]() {
						goto l796
					}
					if !_rules[ruleMatchCase]() {
						goto l796
					}
					goto l795
				l796:
					position, tokenIndex = position796, tokenIndex796
				}
				if !_rules[rule_]() {
					goto l783
				}
				if buffer[position] != rune('}') {
					goto l783
				}
				position++
				add(ruleMatch, position784)
			}
			return true
		l783:
			position, tokenIndex = position783, tokenIndex783
			return false
		},
		/* 86 MatchCase <- <(('c' / 'C') ('a' / 'A') ('s' / 'S') ('e' / 'E') _ ((IdentifierAtom _ (':' _ TypesAtom)?) / DefaultMatchCasePart) _ ('=' '>') _ BlockWithoutPar)> */
		func() bool {
			position797, tokenIndex797 := position, tokenIndex
			{
				position798 := position
				{
					position799, tokenIndex799 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l800
					}
					position++
					goto l799
				l800:
					position, tokenIndex = position799, tokenIndex799
					if buffer[position] != rune('C') {
						goto l797
					}
					position++
				}
			l799:
				{
					position801, tokenIndex801 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l802
					}
					position++
					goto l801
				l802:
					position, tokenIndex = position801, tokenIndex801
					if buffer[position] != rune('A') {
						goto l797
					}
					position++
				}
			l801:
				{
					position803, tokenIndex803 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l804
					}
					position++
					goto l803
				l804:
					position, tokenIndex = position803, tokenIndex803
					if buffer[position] != rune('S') {
						goto l797
					}
					position++
				}
			l803:
				{
					position805, tokenIndex805 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l806
					}
					position++
					goto l805
				l806:
					position, tokenIndex = position805, tokenIndex805
					if buffer[position] != rune('E') {
						goto l797
					}
					position++
				}
			l805:
				if !_rules[rule_]() {
					goto l797
				}
				{
					position807, tokenIndex807 := position, tokenIndex
					if !_rules[ruleIdentifierAtom]() {
						goto l808
					}
					if !_rules[rule_]() {
						goto l808
					}
					{
						position809, tokenIndex809 := position, tokenIndex
						if buffer[position] != rune(':') {
							goto l809
						}
						position++
						if !_rules[rule_]() {
							goto l809
						}
						if !_rules[ruleTypesAtom]() {
							goto l809
						}
						goto l810
					l809:
						position, tokenIndex = position809, tokenIndex809
					}
				l810:
					goto l807
				l808:
					position, tokenIndex = position807, tokenIndex807
					if !_rules[ruleDefaultMatchCasePart]() {
						goto l797
					}
				}
			l807:
				if !_rules[rule_]() {
					goto l797
				}
				if buffer[position] != rune('=') {
					goto l797
				}
				position++
				if buffer[position] != rune('>') {
					goto l797
				}
				position++
				if !_rules[rule_]() {
					goto l797
				}
				if !_rules[ruleBlockWithoutPar]() {
					goto l797
				}
				add(ruleMatchCase, position798)
			}
			return true
		l797:
			position, tokenIndex = position797, tokenIndex797
			return false
		},
		/* 87 DefaultMatchCasePart <- <('{' _ (':' _ TypesAtom)?)> */
		func() bool {
			position811, tokenIndex811 := position, tokenIndex
			{
				position812 := position
				if buffer[position] != rune('{') {
					goto l811
				}
				position++
				if !_rules[rule_]() {
					goto l811
				}
				{
					position813, tokenIndex813 := position, tokenIndex
					if buffer[position] != rune(':') {
						goto l813
					}
					position++
					if !_rules[rule_]() {
						goto l813
					}
					if !_rules[ruleTypesAtom]() {
						goto l813
					}
					goto l814
				l813:
					position, tokenIndex = position813, tokenIndex813
				}
			l814:
				add(ruleDefaultMatchCasePart, position812)
			}
			return true
		l811:
			position, tokenIndex = position811, tokenIndex811
			return false
		},
	}
	p.rules = _rules
	return nil
}

package compiler

// Code generated by peg -output=parser.peg.go ride.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleCode
	ruleDAppRoot
	ruleScriptRoot
	ruleWS
	ruleEOL
	ruleComment
	rule_
	ruleEOF
	ruleDirectiveName
	ruleUpperCaseString
	ruleIntString
	rulePathString
	ruleDirective
	ruleDeclaration
	ruleVariable
	ruleStrictVariable
	ruleFunc
	ruleFuncArgSeq
	ruleFuncArg
	ruleAnnotatedFunc
	ruleAnnotation
	ruleIdentifierSeq
	ruleAnnotationSeq
	ruleOrOp
	ruleAndOp
	ruleEqGroupOp
	ruleEqOp
	ruleNeOp
	ruleCompareGroupOp
	ruleGtOp
	ruleGeOp
	ruleLtOp
	ruleLeOp
	ruleListGroupOp
	ruleConsOp
	ruleConcatOp
	ruleAppendOp
	ruleSumGroupOp
	ruleSumOp
	ruleSubOp
	ruleMultGroupOp
	ruleMulOp
	ruleDivOp
	ruleModOp
	ruleUnaryOp
	rulePositiveOp
	ruleNegativeOp
	ruleNotOp
	ruleReservedWords
	ruleConst
	ruleIdentifier
	ruleType
	ruleGenericType
	ruleTupleType
	ruleTypes
	ruleBase16
	ruleBase58
	ruleBase64
	ruleByteVector
	ruleBoolean
	ruleString
	ruleUnicodeChar
	ruleEscapedChar
	ruleChar
	ruleInteger
	ruleList
	ruleExprSeq
	ruleAtomExpr
	ruleMultGroupOpAtom
	ruleSumGroupOpAtom
	ruleListGroupOpAtom
	ruleCompareGroupOpAtom
	ruleEqualityGroupOpAtom
	ruleAndOpAtom
	ruleOrOpAtom
	ruleExpr
	ruleParExpr
	ruleGettableExpr
	ruleFunctionCallAccess
	ruleIdentifierAccess
	ruleListAccess
	ruleBlock
	ruleBlockWithoutPar
	ruleFunctionCall
	ruleFoldMacro
	ruleIfWithError
	ruleIf
	ruleFailedIfWithoutElse
	ruleMatch
	ruleCase
	rulePlaceholder
	ruleValuePattern
	ruleTupleValuesPattern
	ruleTuplePattern
	ruleObjectFieldsPattern
	ruleObjectPattern
	ruleTuple
	ruleTupleRef
	ruleTupleAccess
)

var rul3s = [...]string{
	"Unknown",
	"Code",
	"DAppRoot",
	"ScriptRoot",
	"WS",
	"EOL",
	"Comment",
	"_",
	"EOF",
	"DirectiveName",
	"UpperCaseString",
	"IntString",
	"PathString",
	"Directive",
	"Declaration",
	"Variable",
	"StrictVariable",
	"Func",
	"FuncArgSeq",
	"FuncArg",
	"AnnotatedFunc",
	"Annotation",
	"IdentifierSeq",
	"AnnotationSeq",
	"OrOp",
	"AndOp",
	"EqGroupOp",
	"EqOp",
	"NeOp",
	"CompareGroupOp",
	"GtOp",
	"GeOp",
	"LtOp",
	"LeOp",
	"ListGroupOp",
	"ConsOp",
	"ConcatOp",
	"AppendOp",
	"SumGroupOp",
	"SumOp",
	"SubOp",
	"MultGroupOp",
	"MulOp",
	"DivOp",
	"ModOp",
	"UnaryOp",
	"PositiveOp",
	"NegativeOp",
	"NotOp",
	"ReservedWords",
	"Const",
	"Identifier",
	"Type",
	"GenericType",
	"TupleType",
	"Types",
	"Base16",
	"Base58",
	"Base64",
	"ByteVector",
	"Boolean",
	"String",
	"UnicodeChar",
	"EscapedChar",
	"Char",
	"Integer",
	"List",
	"ExprSeq",
	"AtomExpr",
	"MultGroupOpAtom",
	"SumGroupOpAtom",
	"ListGroupOpAtom",
	"CompareGroupOpAtom",
	"EqualityGroupOpAtom",
	"AndOpAtom",
	"OrOpAtom",
	"Expr",
	"ParExpr",
	"GettableExpr",
	"FunctionCallAccess",
	"IdentifierAccess",
	"ListAccess",
	"Block",
	"BlockWithoutPar",
	"FunctionCall",
	"FoldMacro",
	"IfWithError",
	"If",
	"FailedIfWithoutElse",
	"Match",
	"Case",
	"Placeholder",
	"ValuePattern",
	"TupleValuesPattern",
	"TuplePattern",
	"ObjectFieldsPattern",
	"ObjectPattern",
	"Tuple",
	"TupleRef",
	"TupleAccess",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Buffer string
	buffer []rune
	rules  [100]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Code <- <(DAppRoot / ScriptRoot)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[ruleDAppRoot]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[ruleScriptRoot]() {
						goto l0
					}
				}
			l2:
				add(ruleCode, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 DAppRoot <- <(_ (Directive _)* (_ Declaration)* (_ AnnotatedFunc)* _ EOF)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
				if !_rules[rule_]() {
					goto l4
				}
			l6:
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l7
					}
					if !_rules[rule_]() {
						goto l7
					}
					goto l6
				l7:
					position, tokenIndex = position7, tokenIndex7
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[rule_]() {
						goto l9
					}
					if !_rules[ruleDeclaration]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
			l10:
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[rule_]() {
						goto l11
					}
					if !_rules[ruleAnnotatedFunc]() {
						goto l11
					}
					goto l10
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				if !_rules[rule_]() {
					goto l4
				}
				if !_rules[ruleEOF]() {
					goto l4
				}
				add(ruleDAppRoot, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 ScriptRoot <- <(_ (Directive _)* (_ Declaration)* _ Expr _ EOF)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[rule_]() {
					goto l12
				}
			l14:
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l15
					}
					if !_rules[rule_]() {
						goto l15
					}
					goto l14
				l15:
					position, tokenIndex = position15, tokenIndex15
				}
			l16:
				{
					position17, tokenIndex17 := position, tokenIndex
					if !_rules[rule_]() {
						goto l17
					}
					if !_rules[ruleDeclaration]() {
						goto l17
					}
					goto l16
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleExpr]() {
					goto l12
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleEOF]() {
					goto l12
				}
				add(ruleScriptRoot, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 WS <- <(' ' / '\t')> */
		func() bool {
			position18, tokenIndex18 := position, tokenIndex
			{
				position19 := position
				{
					position20, tokenIndex20 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l21
					}
					position++
					goto l20
				l21:
					position, tokenIndex = position20, tokenIndex20
					if buffer[position] != rune('\t') {
						goto l18
					}
					position++
				}
			l20:
				add(ruleWS, position19)
			}
			return true
		l18:
			position, tokenIndex = position18, tokenIndex18
			return false
		},
		/* 4 EOL <- <('\n' / '\r' / '\f')> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24, tokenIndex24 := position, tokenIndex
					if buffer[position] != rune('\n') {
						goto l25
					}
					position++
					goto l24
				l25:
					position, tokenIndex = position24, tokenIndex24
					if buffer[position] != rune('\r') {
						goto l26
					}
					position++
					goto l24
				l26:
					position, tokenIndex = position24, tokenIndex24
					if buffer[position] != rune('\f') {
						goto l22
					}
					position++
				}
			l24:
				add(ruleEOL, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 5 Comment <- <('#' (!('\r' / '\n') .)*)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				if buffer[position] != rune('#') {
					goto l27
				}
				position++
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					{
						position31, tokenIndex31 := position, tokenIndex
						{
							position32, tokenIndex32 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l33
							}
							position++
							goto l32
						l33:
							position, tokenIndex = position32, tokenIndex32
							if buffer[position] != rune('\n') {
								goto l31
							}
							position++
						}
					l32:
						goto l30
					l31:
						position, tokenIndex = position31, tokenIndex31
					}
					if !matchDot() {
						goto l30
					}
					goto l29
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
				add(ruleComment, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 6 _ <- <(Comment / (WS / EOL)+)*> */
		func() bool {
			{
				position35 := position
			l36:
				{
					position37, tokenIndex37 := position, tokenIndex
					{
						position38, tokenIndex38 := position, tokenIndex
						if !_rules[ruleComment]() {
							goto l39
						}
						goto l38
					l39:
						position, tokenIndex = position38, tokenIndex38
						{
							position42, tokenIndex42 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l43
							}
							goto l42
						l43:
							position, tokenIndex = position42, tokenIndex42
							if !_rules[ruleEOL]() {
								goto l37
							}
						}
					l42:
					l40:
						{
							position41, tokenIndex41 := position, tokenIndex
							{
								position44, tokenIndex44 := position, tokenIndex
								if !_rules[ruleWS]() {
									goto l45
								}
								goto l44
							l45:
								position, tokenIndex = position44, tokenIndex44
								if !_rules[ruleEOL]() {
									goto l41
								}
							}
						l44:
							goto l40
						l41:
							position, tokenIndex = position41, tokenIndex41
						}
					}
				l38:
					goto l36
				l37:
					position, tokenIndex = position37, tokenIndex37
				}
				add(rule_, position35)
			}
			return true
		},
		/* 7 EOF <- <!.> */
		func() bool {
			position46, tokenIndex46 := position, tokenIndex
			{
				position47 := position
				{
					position48, tokenIndex48 := position, tokenIndex
					if !matchDot() {
						goto l48
					}
					goto l46
				l48:
					position, tokenIndex = position48, tokenIndex48
				}
				add(ruleEOF, position47)
			}
			return true
		l46:
			position, tokenIndex = position46, tokenIndex46
			return false
		},
		/* 8 DirectiveName <- <([A-Z]+ ('_' / [A-Z])*)> */
		func() bool {
			position49, tokenIndex49 := position, tokenIndex
			{
				position50 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l49
				}
				position++
			l51:
				{
					position52, tokenIndex52 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l52
					}
					position++
					goto l51
				l52:
					position, tokenIndex = position52, tokenIndex52
				}
			l53:
				{
					position54, tokenIndex54 := position, tokenIndex
					{
						position55, tokenIndex55 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l56
						}
						position++
						goto l55
					l56:
						position, tokenIndex = position55, tokenIndex55
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l54
						}
						position++
					}
				l55:
					goto l53
				l54:
					position, tokenIndex = position54, tokenIndex54
				}
				add(ruleDirectiveName, position50)
			}
			return true
		l49:
			position, tokenIndex = position49, tokenIndex49
			return false
		},
		/* 9 UpperCaseString <- <[A-Z]+> */
		func() bool {
			position57, tokenIndex57 := position, tokenIndex
			{
				position58 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l57
				}
				position++
			l59:
				{
					position60, tokenIndex60 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l60
					}
					position++
					goto l59
				l60:
					position, tokenIndex = position60, tokenIndex60
				}
				add(ruleUpperCaseString, position58)
			}
			return true
		l57:
			position, tokenIndex = position57, tokenIndex57
			return false
		},
		/* 10 IntString <- <[0-9]+> */
		func() bool {
			position61, tokenIndex61 := position, tokenIndex
			{
				position62 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l61
				}
				position++
			l63:
				{
					position64, tokenIndex64 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l64
					}
					position++
					goto l63
				l64:
					position, tokenIndex = position64, tokenIndex64
				}
				add(ruleIntString, position62)
			}
			return true
		l61:
			position, tokenIndex = position61, tokenIndex61
			return false
		},
		/* 11 PathString <- <('_' / [a-z] / [A-Z] / [0-9] / '-' / '/' / ',' / '.')+> */
		func() bool {
			position65, tokenIndex65 := position, tokenIndex
			{
				position66 := position
				{
					position69, tokenIndex69 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l70
					}
					position++
					goto l69
				l70:
					position, tokenIndex = position69, tokenIndex69
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l71
					}
					position++
					goto l69
				l71:
					position, tokenIndex = position69, tokenIndex69
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l72
					}
					position++
					goto l69
				l72:
					position, tokenIndex = position69, tokenIndex69
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l73
					}
					position++
					goto l69
				l73:
					position, tokenIndex = position69, tokenIndex69
					if buffer[position] != rune('-') {
						goto l74
					}
					position++
					goto l69
				l74:
					position, tokenIndex = position69, tokenIndex69
					if buffer[position] != rune('/') {
						goto l75
					}
					position++
					goto l69
				l75:
					position, tokenIndex = position69, tokenIndex69
					if buffer[position] != rune(',') {
						goto l76
					}
					position++
					goto l69
				l76:
					position, tokenIndex = position69, tokenIndex69
					if buffer[position] != rune('.') {
						goto l65
					}
					position++
				}
			l69:
			l67:
				{
					position68, tokenIndex68 := position, tokenIndex
					{
						position77, tokenIndex77 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l78
						}
						position++
						goto l77
					l78:
						position, tokenIndex = position77, tokenIndex77
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l79
						}
						position++
						goto l77
					l79:
						position, tokenIndex = position77, tokenIndex77
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l80
						}
						position++
						goto l77
					l80:
						position, tokenIndex = position77, tokenIndex77
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l81
						}
						position++
						goto l77
					l81:
						position, tokenIndex = position77, tokenIndex77
						if buffer[position] != rune('-') {
							goto l82
						}
						position++
						goto l77
					l82:
						position, tokenIndex = position77, tokenIndex77
						if buffer[position] != rune('/') {
							goto l83
						}
						position++
						goto l77
					l83:
						position, tokenIndex = position77, tokenIndex77
						if buffer[position] != rune(',') {
							goto l84
						}
						position++
						goto l77
					l84:
						position, tokenIndex = position77, tokenIndex77
						if buffer[position] != rune('.') {
							goto l68
						}
						position++
					}
				l77:
					goto l67
				l68:
					position, tokenIndex = position68, tokenIndex68
				}
				add(rulePathString, position66)
			}
			return true
		l65:
			position, tokenIndex = position65, tokenIndex65
			return false
		},
		/* 12 Directive <- <('{' '-' '#' WS+ DirectiveName WS+ (IntString / UpperCaseString / PathString) WS+ ('#' '-' '}'))> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				if buffer[position] != rune('{') {
					goto l85
				}
				position++
				if buffer[position] != rune('-') {
					goto l85
				}
				position++
				if buffer[position] != rune('#') {
					goto l85
				}
				position++
				if !_rules[ruleWS]() {
					goto l85
				}
			l87:
				{
					position88, tokenIndex88 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l88
					}
					goto l87
				l88:
					position, tokenIndex = position88, tokenIndex88
				}
				if !_rules[ruleDirectiveName]() {
					goto l85
				}
				if !_rules[ruleWS]() {
					goto l85
				}
			l89:
				{
					position90, tokenIndex90 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l90
					}
					goto l89
				l90:
					position, tokenIndex = position90, tokenIndex90
				}
				{
					position91, tokenIndex91 := position, tokenIndex
					if !_rules[ruleIntString]() {
						goto l92
					}
					goto l91
				l92:
					position, tokenIndex = position91, tokenIndex91
					if !_rules[ruleUpperCaseString]() {
						goto l93
					}
					goto l91
				l93:
					position, tokenIndex = position91, tokenIndex91
					if !_rules[rulePathString]() {
						goto l85
					}
				}
			l91:
				if !_rules[ruleWS]() {
					goto l85
				}
			l94:
				{
					position95, tokenIndex95 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l95
					}
					goto l94
				l95:
					position, tokenIndex = position95, tokenIndex95
				}
				if buffer[position] != rune('#') {
					goto l85
				}
				position++
				if buffer[position] != rune('-') {
					goto l85
				}
				position++
				if buffer[position] != rune('}') {
					goto l85
				}
				position++
				add(ruleDirective, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 13 Declaration <- <((Variable / StrictVariable / Func) _ ';'?)> */
		func() bool {
			position96, tokenIndex96 := position, tokenIndex
			{
				position97 := position
				{
					position98, tokenIndex98 := position, tokenIndex
					if !_rules[ruleVariable]() {
						goto l99
					}
					goto l98
				l99:
					position, tokenIndex = position98, tokenIndex98
					if !_rules[ruleStrictVariable]() {
						goto l100
					}
					goto l98
				l100:
					position, tokenIndex = position98, tokenIndex98
					if !_rules[ruleFunc]() {
						goto l96
					}
				}
			l98:
				if !_rules[rule_]() {
					goto l96
				}
				{
					position101, tokenIndex101 := position, tokenIndex
					if buffer[position] != rune(';') {
						goto l101
					}
					position++
					goto l102
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
			l102:
				add(ruleDeclaration, position97)
			}
			return true
		l96:
			position, tokenIndex = position96, tokenIndex96
			return false
		},
		/* 14 Variable <- <('l' 'e' 't' _ (Identifier / TupleRef) _ '=' _ Expr)> */
		func() bool {
			position103, tokenIndex103 := position, tokenIndex
			{
				position104 := position
				if buffer[position] != rune('l') {
					goto l103
				}
				position++
				if buffer[position] != rune('e') {
					goto l103
				}
				position++
				if buffer[position] != rune('t') {
					goto l103
				}
				position++
				if !_rules[rule_]() {
					goto l103
				}
				{
					position105, tokenIndex105 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l106
					}
					goto l105
				l106:
					position, tokenIndex = position105, tokenIndex105
					if !_rules[ruleTupleRef]() {
						goto l103
					}
				}
			l105:
				if !_rules[rule_]() {
					goto l103
				}
				if buffer[position] != rune('=') {
					goto l103
				}
				position++
				if !_rules[rule_]() {
					goto l103
				}
				if !_rules[ruleExpr]() {
					goto l103
				}
				add(ruleVariable, position104)
			}
			return true
		l103:
			position, tokenIndex = position103, tokenIndex103
			return false
		},
		/* 15 StrictVariable <- <('s' 't' 'r' 'i' 'c' 't' _ (Identifier / TupleRef) _ '=' _ Expr)> */
		func() bool {
			position107, tokenIndex107 := position, tokenIndex
			{
				position108 := position
				if buffer[position] != rune('s') {
					goto l107
				}
				position++
				if buffer[position] != rune('t') {
					goto l107
				}
				position++
				if buffer[position] != rune('r') {
					goto l107
				}
				position++
				if buffer[position] != rune('i') {
					goto l107
				}
				position++
				if buffer[position] != rune('c') {
					goto l107
				}
				position++
				if buffer[position] != rune('t') {
					goto l107
				}
				position++
				if !_rules[rule_]() {
					goto l107
				}
				{
					position109, tokenIndex109 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l110
					}
					goto l109
				l110:
					position, tokenIndex = position109, tokenIndex109
					if !_rules[ruleTupleRef]() {
						goto l107
					}
				}
			l109:
				if !_rules[rule_]() {
					goto l107
				}
				if buffer[position] != rune('=') {
					goto l107
				}
				position++
				if !_rules[rule_]() {
					goto l107
				}
				if !_rules[ruleExpr]() {
					goto l107
				}
				add(ruleStrictVariable, position108)
			}
			return true
		l107:
			position, tokenIndex = position107, tokenIndex107
			return false
		},
		/* 16 Func <- <('f' 'u' 'n' 'c' _ Identifier _ '(' _ FuncArgSeq? _ ')' _ '=' _ Expr)> */
		func() bool {
			position111, tokenIndex111 := position, tokenIndex
			{
				position112 := position
				if buffer[position] != rune('f') {
					goto l111
				}
				position++
				if buffer[position] != rune('u') {
					goto l111
				}
				position++
				if buffer[position] != rune('n') {
					goto l111
				}
				position++
				if buffer[position] != rune('c') {
					goto l111
				}
				position++
				if !_rules[rule_]() {
					goto l111
				}
				if !_rules[ruleIdentifier]() {
					goto l111
				}
				if !_rules[rule_]() {
					goto l111
				}
				if buffer[position] != rune('(') {
					goto l111
				}
				position++
				if !_rules[rule_]() {
					goto l111
				}
				{
					position113, tokenIndex113 := position, tokenIndex
					if !_rules[ruleFuncArgSeq]() {
						goto l113
					}
					goto l114
				l113:
					position, tokenIndex = position113, tokenIndex113
				}
			l114:
				if !_rules[rule_]() {
					goto l111
				}
				if buffer[position] != rune(')') {
					goto l111
				}
				position++
				if !_rules[rule_]() {
					goto l111
				}
				if buffer[position] != rune('=') {
					goto l111
				}
				position++
				if !_rules[rule_]() {
					goto l111
				}
				if !_rules[ruleExpr]() {
					goto l111
				}
				add(ruleFunc, position112)
			}
			return true
		l111:
			position, tokenIndex = position111, tokenIndex111
			return false
		},
		/* 17 FuncArgSeq <- <(FuncArg (_ ',' _ FuncArgSeq)?)> */
		func() bool {
			position115, tokenIndex115 := position, tokenIndex
			{
				position116 := position
				if !_rules[ruleFuncArg]() {
					goto l115
				}
				{
					position117, tokenIndex117 := position, tokenIndex
					if !_rules[rule_]() {
						goto l117
					}
					if buffer[position] != rune(',') {
						goto l117
					}
					position++
					if !_rules[rule_]() {
						goto l117
					}
					if !_rules[ruleFuncArgSeq]() {
						goto l117
					}
					goto l118
				l117:
					position, tokenIndex = position117, tokenIndex117
				}
			l118:
				add(ruleFuncArgSeq, position116)
			}
			return true
		l115:
			position, tokenIndex = position115, tokenIndex115
			return false
		},
		/* 18 FuncArg <- <(Identifier _ ':' _ Types)> */
		func() bool {
			position119, tokenIndex119 := position, tokenIndex
			{
				position120 := position
				if !_rules[ruleIdentifier]() {
					goto l119
				}
				if !_rules[rule_]() {
					goto l119
				}
				if buffer[position] != rune(':') {
					goto l119
				}
				position++
				if !_rules[rule_]() {
					goto l119
				}
				if !_rules[ruleTypes]() {
					goto l119
				}
				add(ruleFuncArg, position120)
			}
			return true
		l119:
			position, tokenIndex = position119, tokenIndex119
			return false
		},
		/* 19 AnnotatedFunc <- <(AnnotationSeq _ Func)> */
		func() bool {
			position121, tokenIndex121 := position, tokenIndex
			{
				position122 := position
				if !_rules[ruleAnnotationSeq]() {
					goto l121
				}
				if !_rules[rule_]() {
					goto l121
				}
				if !_rules[ruleFunc]() {
					goto l121
				}
				add(ruleAnnotatedFunc, position122)
			}
			return true
		l121:
			position, tokenIndex = position121, tokenIndex121
			return false
		},
		/* 20 Annotation <- <('@' Identifier _ '(' _ IdentifierSeq _ ')')> */
		func() bool {
			position123, tokenIndex123 := position, tokenIndex
			{
				position124 := position
				if buffer[position] != rune('@') {
					goto l123
				}
				position++
				if !_rules[ruleIdentifier]() {
					goto l123
				}
				if !_rules[rule_]() {
					goto l123
				}
				if buffer[position] != rune('(') {
					goto l123
				}
				position++
				if !_rules[rule_]() {
					goto l123
				}
				if !_rules[ruleIdentifierSeq]() {
					goto l123
				}
				if !_rules[rule_]() {
					goto l123
				}
				if buffer[position] != rune(')') {
					goto l123
				}
				position++
				add(ruleAnnotation, position124)
			}
			return true
		l123:
			position, tokenIndex = position123, tokenIndex123
			return false
		},
		/* 21 IdentifierSeq <- <(Identifier (_ ',' _ IdentifierSeq)?)> */
		func() bool {
			position125, tokenIndex125 := position, tokenIndex
			{
				position126 := position
				if !_rules[ruleIdentifier]() {
					goto l125
				}
				{
					position127, tokenIndex127 := position, tokenIndex
					if !_rules[rule_]() {
						goto l127
					}
					if buffer[position] != rune(',') {
						goto l127
					}
					position++
					if !_rules[rule_]() {
						goto l127
					}
					if !_rules[ruleIdentifierSeq]() {
						goto l127
					}
					goto l128
				l127:
					position, tokenIndex = position127, tokenIndex127
				}
			l128:
				add(ruleIdentifierSeq, position126)
			}
			return true
		l125:
			position, tokenIndex = position125, tokenIndex125
			return false
		},
		/* 22 AnnotationSeq <- <(Annotation (_ AnnotationSeq)?)> */
		func() bool {
			position129, tokenIndex129 := position, tokenIndex
			{
				position130 := position
				if !_rules[ruleAnnotation]() {
					goto l129
				}
				{
					position131, tokenIndex131 := position, tokenIndex
					if !_rules[rule_]() {
						goto l131
					}
					if !_rules[ruleAnnotationSeq]() {
						goto l131
					}
					goto l132
				l131:
					position, tokenIndex = position131, tokenIndex131
				}
			l132:
				add(ruleAnnotationSeq, position130)
			}
			return true
		l129:
			position, tokenIndex = position129, tokenIndex129
			return false
		},
		/* 23 OrOp <- <('|' '|')> */
		func() bool {
			position133, tokenIndex133 := position, tokenIndex
			{
				position134 := position
				if buffer[position] != rune('|') {
					goto l133
				}
				position++
				if buffer[position] != rune('|') {
					goto l133
				}
				position++
				add(ruleOrOp, position134)
			}
			return true
		l133:
			position, tokenIndex = position133, tokenIndex133
			return false
		},
		/* 24 AndOp <- <('&' '&')> */
		func() bool {
			position135, tokenIndex135 := position, tokenIndex
			{
				position136 := position
				if buffer[position] != rune('&') {
					goto l135
				}
				position++
				if buffer[position] != rune('&') {
					goto l135
				}
				position++
				add(ruleAndOp, position136)
			}
			return true
		l135:
			position, tokenIndex = position135, tokenIndex135
			return false
		},
		/* 25 EqGroupOp <- <(EqOp / NeOp)> */
		func() bool {
			position137, tokenIndex137 := position, tokenIndex
			{
				position138 := position
				{
					position139, tokenIndex139 := position, tokenIndex
					if !_rules[ruleEqOp]() {
						goto l140
					}
					goto l139
				l140:
					position, tokenIndex = position139, tokenIndex139
					if !_rules[ruleNeOp]() {
						goto l137
					}
				}
			l139:
				add(ruleEqGroupOp, position138)
			}
			return true
		l137:
			position, tokenIndex = position137, tokenIndex137
			return false
		},
		/* 26 EqOp <- <('=' '=')> */
		func() bool {
			position141, tokenIndex141 := position, tokenIndex
			{
				position142 := position
				if buffer[position] != rune('=') {
					goto l141
				}
				position++
				if buffer[position] != rune('=') {
					goto l141
				}
				position++
				add(ruleEqOp, position142)
			}
			return true
		l141:
			position, tokenIndex = position141, tokenIndex141
			return false
		},
		/* 27 NeOp <- <('!' '=')> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				if buffer[position] != rune('!') {
					goto l143
				}
				position++
				if buffer[position] != rune('=') {
					goto l143
				}
				position++
				add(ruleNeOp, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 28 CompareGroupOp <- <(GtOp / GeOp / LtOp / LeOp)> */
		func() bool {
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				{
					position147, tokenIndex147 := position, tokenIndex
					if !_rules[ruleGtOp]() {
						goto l148
					}
					goto l147
				l148:
					position, tokenIndex = position147, tokenIndex147
					if !_rules[ruleGeOp]() {
						goto l149
					}
					goto l147
				l149:
					position, tokenIndex = position147, tokenIndex147
					if !_rules[ruleLtOp]() {
						goto l150
					}
					goto l147
				l150:
					position, tokenIndex = position147, tokenIndex147
					if !_rules[ruleLeOp]() {
						goto l145
					}
				}
			l147:
				add(ruleCompareGroupOp, position146)
			}
			return true
		l145:
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 29 GtOp <- <('>' !'=')> */
		func() bool {
			position151, tokenIndex151 := position, tokenIndex
			{
				position152 := position
				if buffer[position] != rune('>') {
					goto l151
				}
				position++
				{
					position153, tokenIndex153 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l153
					}
					position++
					goto l151
				l153:
					position, tokenIndex = position153, tokenIndex153
				}
				add(ruleGtOp, position152)
			}
			return true
		l151:
			position, tokenIndex = position151, tokenIndex151
			return false
		},
		/* 30 GeOp <- <('>' '=')> */
		func() bool {
			position154, tokenIndex154 := position, tokenIndex
			{
				position155 := position
				if buffer[position] != rune('>') {
					goto l154
				}
				position++
				if buffer[position] != rune('=') {
					goto l154
				}
				position++
				add(ruleGeOp, position155)
			}
			return true
		l154:
			position, tokenIndex = position154, tokenIndex154
			return false
		},
		/* 31 LtOp <- <('<' !'=')> */
		func() bool {
			position156, tokenIndex156 := position, tokenIndex
			{
				position157 := position
				if buffer[position] != rune('<') {
					goto l156
				}
				position++
				{
					position158, tokenIndex158 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l158
					}
					position++
					goto l156
				l158:
					position, tokenIndex = position158, tokenIndex158
				}
				add(ruleLtOp, position157)
			}
			return true
		l156:
			position, tokenIndex = position156, tokenIndex156
			return false
		},
		/* 32 LeOp <- <('<' '=')> */
		func() bool {
			position159, tokenIndex159 := position, tokenIndex
			{
				position160 := position
				if buffer[position] != rune('<') {
					goto l159
				}
				position++
				if buffer[position] != rune('=') {
					goto l159
				}
				position++
				add(ruleLeOp, position160)
			}
			return true
		l159:
			position, tokenIndex = position159, tokenIndex159
			return false
		},
		/* 33 ListGroupOp <- <(ConsOp / ConcatOp / AppendOp)> */
		func() bool {
			position161, tokenIndex161 := position, tokenIndex
			{
				position162 := position
				{
					position163, tokenIndex163 := position, tokenIndex
					if !_rules[ruleConsOp]() {
						goto l164
					}
					goto l163
				l164:
					position, tokenIndex = position163, tokenIndex163
					if !_rules[ruleConcatOp]() {
						goto l165
					}
					goto l163
				l165:
					position, tokenIndex = position163, tokenIndex163
					if !_rules[ruleAppendOp]() {
						goto l161
					}
				}
			l163:
				add(ruleListGroupOp, position162)
			}
			return true
		l161:
			position, tokenIndex = position161, tokenIndex161
			return false
		},
		/* 34 ConsOp <- <(':' ':')> */
		func() bool {
			position166, tokenIndex166 := position, tokenIndex
			{
				position167 := position
				if buffer[position] != rune(':') {
					goto l166
				}
				position++
				if buffer[position] != rune(':') {
					goto l166
				}
				position++
				add(ruleConsOp, position167)
			}
			return true
		l166:
			position, tokenIndex = position166, tokenIndex166
			return false
		},
		/* 35 ConcatOp <- <('+' '+')> */
		func() bool {
			position168, tokenIndex168 := position, tokenIndex
			{
				position169 := position
				if buffer[position] != rune('+') {
					goto l168
				}
				position++
				if buffer[position] != rune('+') {
					goto l168
				}
				position++
				add(ruleConcatOp, position169)
			}
			return true
		l168:
			position, tokenIndex = position168, tokenIndex168
			return false
		},
		/* 36 AppendOp <- <(':' '+')> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				if buffer[position] != rune(':') {
					goto l170
				}
				position++
				if buffer[position] != rune('+') {
					goto l170
				}
				position++
				add(ruleAppendOp, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 37 SumGroupOp <- <(SumOp / SubOp)> */
		func() bool {
			position172, tokenIndex172 := position, tokenIndex
			{
				position173 := position
				{
					position174, tokenIndex174 := position, tokenIndex
					if !_rules[ruleSumOp]() {
						goto l175
					}
					goto l174
				l175:
					position, tokenIndex = position174, tokenIndex174
					if !_rules[ruleSubOp]() {
						goto l172
					}
				}
			l174:
				add(ruleSumGroupOp, position173)
			}
			return true
		l172:
			position, tokenIndex = position172, tokenIndex172
			return false
		},
		/* 38 SumOp <- <('+' !'+')> */
		func() bool {
			position176, tokenIndex176 := position, tokenIndex
			{
				position177 := position
				if buffer[position] != rune('+') {
					goto l176
				}
				position++
				{
					position178, tokenIndex178 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l178
					}
					position++
					goto l176
				l178:
					position, tokenIndex = position178, tokenIndex178
				}
				add(ruleSumOp, position177)
			}
			return true
		l176:
			position, tokenIndex = position176, tokenIndex176
			return false
		},
		/* 39 SubOp <- <'-'> */
		func() bool {
			position179, tokenIndex179 := position, tokenIndex
			{
				position180 := position
				if buffer[position] != rune('-') {
					goto l179
				}
				position++
				add(ruleSubOp, position180)
			}
			return true
		l179:
			position, tokenIndex = position179, tokenIndex179
			return false
		},
		/* 40 MultGroupOp <- <(MulOp / DivOp / ModOp)> */
		func() bool {
			position181, tokenIndex181 := position, tokenIndex
			{
				position182 := position
				{
					position183, tokenIndex183 := position, tokenIndex
					if !_rules[ruleMulOp]() {
						goto l184
					}
					goto l183
				l184:
					position, tokenIndex = position183, tokenIndex183
					if !_rules[ruleDivOp]() {
						goto l185
					}
					goto l183
				l185:
					position, tokenIndex = position183, tokenIndex183
					if !_rules[ruleModOp]() {
						goto l181
					}
				}
			l183:
				add(ruleMultGroupOp, position182)
			}
			return true
		l181:
			position, tokenIndex = position181, tokenIndex181
			return false
		},
		/* 41 MulOp <- <'*'> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				if buffer[position] != rune('*') {
					goto l186
				}
				position++
				add(ruleMulOp, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 42 DivOp <- <'/'> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				if buffer[position] != rune('/') {
					goto l188
				}
				position++
				add(ruleDivOp, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 43 ModOp <- <'%'> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if buffer[position] != rune('%') {
					goto l190
				}
				position++
				add(ruleModOp, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 44 UnaryOp <- <(PositiveOp / NegativeOp / NotOp)> */
		func() bool {
			position192, tokenIndex192 := position, tokenIndex
			{
				position193 := position
				{
					position194, tokenIndex194 := position, tokenIndex
					if !_rules[rulePositiveOp]() {
						goto l195
					}
					goto l194
				l195:
					position, tokenIndex = position194, tokenIndex194
					if !_rules[ruleNegativeOp]() {
						goto l196
					}
					goto l194
				l196:
					position, tokenIndex = position194, tokenIndex194
					if !_rules[ruleNotOp]() {
						goto l192
					}
				}
			l194:
				add(ruleUnaryOp, position193)
			}
			return true
		l192:
			position, tokenIndex = position192, tokenIndex192
			return false
		},
		/* 45 PositiveOp <- <'+'> */
		func() bool {
			position197, tokenIndex197 := position, tokenIndex
			{
				position198 := position
				if buffer[position] != rune('+') {
					goto l197
				}
				position++
				add(rulePositiveOp, position198)
			}
			return true
		l197:
			position, tokenIndex = position197, tokenIndex197
			return false
		},
		/* 46 NegativeOp <- <('-' !'#')> */
		func() bool {
			position199, tokenIndex199 := position, tokenIndex
			{
				position200 := position
				if buffer[position] != rune('-') {
					goto l199
				}
				position++
				{
					position201, tokenIndex201 := position, tokenIndex
					if buffer[position] != rune('#') {
						goto l201
					}
					position++
					goto l199
				l201:
					position, tokenIndex = position201, tokenIndex201
				}
				add(ruleNegativeOp, position200)
			}
			return true
		l199:
			position, tokenIndex = position199, tokenIndex199
			return false
		},
		/* 47 NotOp <- <'!'> */
		func() bool {
			position202, tokenIndex202 := position, tokenIndex
			{
				position203 := position
				if buffer[position] != rune('!') {
					goto l202
				}
				position++
				add(ruleNotOp, position203)
			}
			return true
		l202:
			position, tokenIndex = position202, tokenIndex202
			return false
		},
		/* 48 ReservedWords <- <(('l' 'e' 't') / ('s' 't' 'r' 'i' 'c' 't') / ('b' 'a' 's' 'e' '1' '6') / ('b' 'a' 's' 'e' '5' '8') / ('b' 'a' 's' 'e' '6' '4') / ('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e') / ('i' 'f') / ('t' 'h' 'e' 'n') / ('e' 'l' 's' 'e') / ('m' 'a' 't' 'c' 'h') / ('c' 'a' 's' 'e') / ('f' 'u' 'n' 'c') / ('F' 'O' 'L' 'D'))> */
		func() bool {
			position204, tokenIndex204 := position, tokenIndex
			{
				position205 := position
				{
					position206, tokenIndex206 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l207
					}
					position++
					if buffer[position] != rune('e') {
						goto l207
					}
					position++
					if buffer[position] != rune('t') {
						goto l207
					}
					position++
					goto l206
				l207:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('s') {
						goto l208
					}
					position++
					if buffer[position] != rune('t') {
						goto l208
					}
					position++
					if buffer[position] != rune('r') {
						goto l208
					}
					position++
					if buffer[position] != rune('i') {
						goto l208
					}
					position++
					if buffer[position] != rune('c') {
						goto l208
					}
					position++
					if buffer[position] != rune('t') {
						goto l208
					}
					position++
					goto l206
				l208:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('b') {
						goto l209
					}
					position++
					if buffer[position] != rune('a') {
						goto l209
					}
					position++
					if buffer[position] != rune('s') {
						goto l209
					}
					position++
					if buffer[position] != rune('e') {
						goto l209
					}
					position++
					if buffer[position] != rune('1') {
						goto l209
					}
					position++
					if buffer[position] != rune('6') {
						goto l209
					}
					position++
					goto l206
				l209:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('b') {
						goto l210
					}
					position++
					if buffer[position] != rune('a') {
						goto l210
					}
					position++
					if buffer[position] != rune('s') {
						goto l210
					}
					position++
					if buffer[position] != rune('e') {
						goto l210
					}
					position++
					if buffer[position] != rune('5') {
						goto l210
					}
					position++
					if buffer[position] != rune('8') {
						goto l210
					}
					position++
					goto l206
				l210:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('b') {
						goto l211
					}
					position++
					if buffer[position] != rune('a') {
						goto l211
					}
					position++
					if buffer[position] != rune('s') {
						goto l211
					}
					position++
					if buffer[position] != rune('e') {
						goto l211
					}
					position++
					if buffer[position] != rune('6') {
						goto l211
					}
					position++
					if buffer[position] != rune('4') {
						goto l211
					}
					position++
					goto l206
				l211:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('t') {
						goto l212
					}
					position++
					if buffer[position] != rune('r') {
						goto l212
					}
					position++
					if buffer[position] != rune('u') {
						goto l212
					}
					position++
					if buffer[position] != rune('e') {
						goto l212
					}
					position++
					goto l206
				l212:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('f') {
						goto l213
					}
					position++
					if buffer[position] != rune('a') {
						goto l213
					}
					position++
					if buffer[position] != rune('l') {
						goto l213
					}
					position++
					if buffer[position] != rune('s') {
						goto l213
					}
					position++
					if buffer[position] != rune('e') {
						goto l213
					}
					position++
					goto l206
				l213:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('i') {
						goto l214
					}
					position++
					if buffer[position] != rune('f') {
						goto l214
					}
					position++
					goto l206
				l214:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('t') {
						goto l215
					}
					position++
					if buffer[position] != rune('h') {
						goto l215
					}
					position++
					if buffer[position] != rune('e') {
						goto l215
					}
					position++
					if buffer[position] != rune('n') {
						goto l215
					}
					position++
					goto l206
				l215:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('e') {
						goto l216
					}
					position++
					if buffer[position] != rune('l') {
						goto l216
					}
					position++
					if buffer[position] != rune('s') {
						goto l216
					}
					position++
					if buffer[position] != rune('e') {
						goto l216
					}
					position++
					goto l206
				l216:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('m') {
						goto l217
					}
					position++
					if buffer[position] != rune('a') {
						goto l217
					}
					position++
					if buffer[position] != rune('t') {
						goto l217
					}
					position++
					if buffer[position] != rune('c') {
						goto l217
					}
					position++
					if buffer[position] != rune('h') {
						goto l217
					}
					position++
					goto l206
				l217:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('c') {
						goto l218
					}
					position++
					if buffer[position] != rune('a') {
						goto l218
					}
					position++
					if buffer[position] != rune('s') {
						goto l218
					}
					position++
					if buffer[position] != rune('e') {
						goto l218
					}
					position++
					goto l206
				l218:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('f') {
						goto l219
					}
					position++
					if buffer[position] != rune('u') {
						goto l219
					}
					position++
					if buffer[position] != rune('n') {
						goto l219
					}
					position++
					if buffer[position] != rune('c') {
						goto l219
					}
					position++
					goto l206
				l219:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('F') {
						goto l204
					}
					position++
					if buffer[position] != rune('O') {
						goto l204
					}
					position++
					if buffer[position] != rune('L') {
						goto l204
					}
					position++
					if buffer[position] != rune('D') {
						goto l204
					}
					position++
				}
			l206:
				add(ruleReservedWords, position205)
			}
			return true
		l204:
			position, tokenIndex = position204, tokenIndex204
			return false
		},
		/* 49 Const <- <(Integer / String / ByteVector / Boolean / List / Tuple)> */
		func() bool {
			position220, tokenIndex220 := position, tokenIndex
			{
				position221 := position
				{
					position222, tokenIndex222 := position, tokenIndex
					if !_rules[ruleInteger]() {
						goto l223
					}
					goto l222
				l223:
					position, tokenIndex = position222, tokenIndex222
					if !_rules[ruleString]() {
						goto l224
					}
					goto l222
				l224:
					position, tokenIndex = position222, tokenIndex222
					if !_rules[ruleByteVector]() {
						goto l225
					}
					goto l222
				l225:
					position, tokenIndex = position222, tokenIndex222
					if !_rules[ruleBoolean]() {
						goto l226
					}
					goto l222
				l226:
					position, tokenIndex = position222, tokenIndex222
					if !_rules[ruleList]() {
						goto l227
					}
					goto l222
				l227:
					position, tokenIndex = position222, tokenIndex222
					if !_rules[ruleTuple]() {
						goto l220
					}
				}
			l222:
				add(ruleConst, position221)
			}
			return true
		l220:
			position, tokenIndex = position220, tokenIndex220
			return false
		},
		/* 50 Identifier <- <((!ReservedWords ([A-Z] / [a-z] / ('_' &([A-Z] / [a-z]))) ([A-Z] / [a-z] / [0-9] / ('_' !'_'))*) / (ReservedWords ([A-Z] / [a-z] / [0-9] / ('_' !'_'))+))> */
		func() bool {
			position228, tokenIndex228 := position, tokenIndex
			{
				position229 := position
				{
					position230, tokenIndex230 := position, tokenIndex
					{
						position232, tokenIndex232 := position, tokenIndex
						if !_rules[ruleReservedWords]() {
							goto l232
						}
						goto l231
					l232:
						position, tokenIndex = position232, tokenIndex232
					}
					{
						position233, tokenIndex233 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l234
						}
						position++
						goto l233
					l234:
						position, tokenIndex = position233, tokenIndex233
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l235
						}
						position++
						goto l233
					l235:
						position, tokenIndex = position233, tokenIndex233
						if buffer[position] != rune('_') {
							goto l231
						}
						position++
						{
							position236, tokenIndex236 := position, tokenIndex
							{
								position237, tokenIndex237 := position, tokenIndex
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l238
								}
								position++
								goto l237
							l238:
								position, tokenIndex = position237, tokenIndex237
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l231
								}
								position++
							}
						l237:
							position, tokenIndex = position236, tokenIndex236
						}
					}
				l233:
				l239:
					{
						position240, tokenIndex240 := position, tokenIndex
						{
							position241, tokenIndex241 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l242
							}
							position++
							goto l241
						l242:
							position, tokenIndex = position241, tokenIndex241
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l243
							}
							position++
							goto l241
						l243:
							position, tokenIndex = position241, tokenIndex241
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l244
							}
							position++
							goto l241
						l244:
							position, tokenIndex = position241, tokenIndex241
							if buffer[position] != rune('_') {
								goto l240
							}
							position++
							{
								position245, tokenIndex245 := position, tokenIndex
								if buffer[position] != rune('_') {
									goto l245
								}
								position++
								goto l240
							l245:
								position, tokenIndex = position245, tokenIndex245
							}
						}
					l241:
						goto l239
					l240:
						position, tokenIndex = position240, tokenIndex240
					}
					goto l230
				l231:
					position, tokenIndex = position230, tokenIndex230
					if !_rules[ruleReservedWords]() {
						goto l228
					}
					{
						position248, tokenIndex248 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l249
						}
						position++
						goto l248
					l249:
						position, tokenIndex = position248, tokenIndex248
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l250
						}
						position++
						goto l248
					l250:
						position, tokenIndex = position248, tokenIndex248
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l251
						}
						position++
						goto l248
					l251:
						position, tokenIndex = position248, tokenIndex248
						if buffer[position] != rune('_') {
							goto l228
						}
						position++
						{
							position252, tokenIndex252 := position, tokenIndex
							if buffer[position] != rune('_') {
								goto l252
							}
							position++
							goto l228
						l252:
							position, tokenIndex = position252, tokenIndex252
						}
					}
				l248:
				l246:
					{
						position247, tokenIndex247 := position, tokenIndex
						{
							position253, tokenIndex253 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l254
							}
							position++
							goto l253
						l254:
							position, tokenIndex = position253, tokenIndex253
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l255
							}
							position++
							goto l253
						l255:
							position, tokenIndex = position253, tokenIndex253
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l256
							}
							position++
							goto l253
						l256:
							position, tokenIndex = position253, tokenIndex253
							if buffer[position] != rune('_') {
								goto l247
							}
							position++
							{
								position257, tokenIndex257 := position, tokenIndex
								if buffer[position] != rune('_') {
									goto l257
								}
								position++
								goto l247
							l257:
								position, tokenIndex = position257, tokenIndex257
							}
						}
					l253:
						goto l246
					l247:
						position, tokenIndex = position247, tokenIndex247
					}
				}
			l230:
				add(ruleIdentifier, position229)
			}
			return true
		l228:
			position, tokenIndex = position228, tokenIndex228
			return false
		},
		/* 51 Type <- <(([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])*)> */
		func() bool {
			position258, tokenIndex258 := position, tokenIndex
			{
				position259 := position
				{
					position260, tokenIndex260 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l261
					}
					position++
					goto l260
				l261:
					position, tokenIndex = position260, tokenIndex260
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l258
					}
					position++
				}
			l260:
			l262:
				{
					position263, tokenIndex263 := position, tokenIndex
					{
						position264, tokenIndex264 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l265
						}
						position++
						goto l264
					l265:
						position, tokenIndex = position264, tokenIndex264
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l266
						}
						position++
						goto l264
					l266:
						position, tokenIndex = position264, tokenIndex264
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l263
						}
						position++
					}
				l264:
					goto l262
				l263:
					position, tokenIndex = position263, tokenIndex263
				}
				add(ruleType, position259)
			}
			return true
		l258:
			position, tokenIndex = position258, tokenIndex258
			return false
		},
		/* 52 GenericType <- <(Type _ '[' _ Types _ ']')> */
		func() bool {
			position267, tokenIndex267 := position, tokenIndex
			{
				position268 := position
				if !_rules[ruleType]() {
					goto l267
				}
				if !_rules[rule_]() {
					goto l267
				}
				if buffer[position] != rune('[') {
					goto l267
				}
				position++
				if !_rules[rule_]() {
					goto l267
				}
				if !_rules[ruleTypes]() {
					goto l267
				}
				if !_rules[rule_]() {
					goto l267
				}
				if buffer[position] != rune(']') {
					goto l267
				}
				position++
				add(ruleGenericType, position268)
			}
			return true
		l267:
			position, tokenIndex = position267, tokenIndex267
			return false
		},
		/* 53 TupleType <- <('(' _ Types _ (',' _ Types)+ _ ')')> */
		func() bool {
			position269, tokenIndex269 := position, tokenIndex
			{
				position270 := position
				if buffer[position] != rune('(') {
					goto l269
				}
				position++
				if !_rules[rule_]() {
					goto l269
				}
				if !_rules[ruleTypes]() {
					goto l269
				}
				if !_rules[rule_]() {
					goto l269
				}
				if buffer[position] != rune(',') {
					goto l269
				}
				position++
				if !_rules[rule_]() {
					goto l269
				}
				if !_rules[ruleTypes]() {
					goto l269
				}
			l271:
				{
					position272, tokenIndex272 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l272
					}
					position++
					if !_rules[rule_]() {
						goto l272
					}
					if !_rules[ruleTypes]() {
						goto l272
					}
					goto l271
				l272:
					position, tokenIndex = position272, tokenIndex272
				}
				if !_rules[rule_]() {
					goto l269
				}
				if buffer[position] != rune(')') {
					goto l269
				}
				position++
				add(ruleTupleType, position270)
			}
			return true
		l269:
			position, tokenIndex = position269, tokenIndex269
			return false
		},
		/* 54 Types <- <((GenericType / TupleType / Type) (_ '|' _ Types)?)> */
		func() bool {
			position273, tokenIndex273 := position, tokenIndex
			{
				position274 := position
				{
					position275, tokenIndex275 := position, tokenIndex
					if !_rules[ruleGenericType]() {
						goto l276
					}
					goto l275
				l276:
					position, tokenIndex = position275, tokenIndex275
					if !_rules[ruleTupleType]() {
						goto l277
					}
					goto l275
				l277:
					position, tokenIndex = position275, tokenIndex275
					if !_rules[ruleType]() {
						goto l273
					}
				}
			l275:
				{
					position278, tokenIndex278 := position, tokenIndex
					if !_rules[rule_]() {
						goto l278
					}
					if buffer[position] != rune('|') {
						goto l278
					}
					position++
					if !_rules[rule_]() {
						goto l278
					}
					if !_rules[ruleTypes]() {
						goto l278
					}
					goto l279
				l278:
					position, tokenIndex = position278, tokenIndex278
				}
			l279:
				add(ruleTypes, position274)
			}
			return true
		l273:
			position, tokenIndex = position273, tokenIndex273
			return false
		},
		/* 55 Base16 <- <('b' 'a' 's' 'e' '1' '6' '\'' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')* '\'')> */
		func() bool {
			position280, tokenIndex280 := position, tokenIndex
			{
				position281 := position
				if buffer[position] != rune('b') {
					goto l280
				}
				position++
				if buffer[position] != rune('a') {
					goto l280
				}
				position++
				if buffer[position] != rune('s') {
					goto l280
				}
				position++
				if buffer[position] != rune('e') {
					goto l280
				}
				position++
				if buffer[position] != rune('1') {
					goto l280
				}
				position++
				if buffer[position] != rune('6') {
					goto l280
				}
				position++
				if buffer[position] != rune('\'') {
					goto l280
				}
				position++
			l282:
				{
					position283, tokenIndex283 := position, tokenIndex
					{
						position284, tokenIndex284 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l285
						}
						position++
						goto l284
					l285:
						position, tokenIndex = position284, tokenIndex284
						if buffer[position] != rune('A') {
							goto l286
						}
						position++
						goto l284
					l286:
						position, tokenIndex = position284, tokenIndex284
						if buffer[position] != rune('B') {
							goto l287
						}
						position++
						goto l284
					l287:
						position, tokenIndex = position284, tokenIndex284
						if buffer[position] != rune('C') {
							goto l288
						}
						position++
						goto l284
					l288:
						position, tokenIndex = position284, tokenIndex284
						if buffer[position] != rune('D') {
							goto l289
						}
						position++
						goto l284
					l289:
						position, tokenIndex = position284, tokenIndex284
						if buffer[position] != rune('E') {
							goto l290
						}
						position++
						goto l284
					l290:
						position, tokenIndex = position284, tokenIndex284
						if buffer[position] != rune('F') {
							goto l291
						}
						position++
						goto l284
					l291:
						position, tokenIndex = position284, tokenIndex284
						if buffer[position] != rune('a') {
							goto l292
						}
						position++
						goto l284
					l292:
						position, tokenIndex = position284, tokenIndex284
						if buffer[position] != rune('b') {
							goto l293
						}
						position++
						goto l284
					l293:
						position, tokenIndex = position284, tokenIndex284
						if buffer[position] != rune('c') {
							goto l294
						}
						position++
						goto l284
					l294:
						position, tokenIndex = position284, tokenIndex284
						if buffer[position] != rune('d') {
							goto l295
						}
						position++
						goto l284
					l295:
						position, tokenIndex = position284, tokenIndex284
						if buffer[position] != rune('e') {
							goto l296
						}
						position++
						goto l284
					l296:
						position, tokenIndex = position284, tokenIndex284
						if buffer[position] != rune('f') {
							goto l283
						}
						position++
					}
				l284:
					goto l282
				l283:
					position, tokenIndex = position283, tokenIndex283
				}
				if buffer[position] != rune('\'') {
					goto l280
				}
				position++
				add(ruleBase16, position281)
			}
			return true
		l280:
			position, tokenIndex = position280, tokenIndex280
			return false
		},
		/* 56 Base58 <- <('b' 'a' 's' 'e' '5' '8' '\'' ('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'J' / 'K' / 'L' / 'M' / 'N' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z')* '\'')> */
		func() bool {
			position297, tokenIndex297 := position, tokenIndex
			{
				position298 := position
				if buffer[position] != rune('b') {
					goto l297
				}
				position++
				if buffer[position] != rune('a') {
					goto l297
				}
				position++
				if buffer[position] != rune('s') {
					goto l297
				}
				position++
				if buffer[position] != rune('e') {
					goto l297
				}
				position++
				if buffer[position] != rune('5') {
					goto l297
				}
				position++
				if buffer[position] != rune('8') {
					goto l297
				}
				position++
				if buffer[position] != rune('\'') {
					goto l297
				}
				position++
			l299:
				{
					position300, tokenIndex300 := position, tokenIndex
					{
						position301, tokenIndex301 := position, tokenIndex
						if buffer[position] != rune('1') {
							goto l302
						}
						position++
						goto l301
					l302:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('2') {
							goto l303
						}
						position++
						goto l301
					l303:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('3') {
							goto l304
						}
						position++
						goto l301
					l304:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('4') {
							goto l305
						}
						position++
						goto l301
					l305:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('5') {
							goto l306
						}
						position++
						goto l301
					l306:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('6') {
							goto l307
						}
						position++
						goto l301
					l307:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('7') {
							goto l308
						}
						position++
						goto l301
					l308:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('8') {
							goto l309
						}
						position++
						goto l301
					l309:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('9') {
							goto l310
						}
						position++
						goto l301
					l310:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('A') {
							goto l311
						}
						position++
						goto l301
					l311:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('B') {
							goto l312
						}
						position++
						goto l301
					l312:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('C') {
							goto l313
						}
						position++
						goto l301
					l313:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('D') {
							goto l314
						}
						position++
						goto l301
					l314:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('E') {
							goto l315
						}
						position++
						goto l301
					l315:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('F') {
							goto l316
						}
						position++
						goto l301
					l316:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('G') {
							goto l317
						}
						position++
						goto l301
					l317:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('H') {
							goto l318
						}
						position++
						goto l301
					l318:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('J') {
							goto l319
						}
						position++
						goto l301
					l319:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('K') {
							goto l320
						}
						position++
						goto l301
					l320:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('L') {
							goto l321
						}
						position++
						goto l301
					l321:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('M') {
							goto l322
						}
						position++
						goto l301
					l322:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('N') {
							goto l323
						}
						position++
						goto l301
					l323:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('P') {
							goto l324
						}
						position++
						goto l301
					l324:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('Q') {
							goto l325
						}
						position++
						goto l301
					l325:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('R') {
							goto l326
						}
						position++
						goto l301
					l326:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('S') {
							goto l327
						}
						position++
						goto l301
					l327:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('T') {
							goto l328
						}
						position++
						goto l301
					l328:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('U') {
							goto l329
						}
						position++
						goto l301
					l329:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('V') {
							goto l330
						}
						position++
						goto l301
					l330:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('W') {
							goto l331
						}
						position++
						goto l301
					l331:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('X') {
							goto l332
						}
						position++
						goto l301
					l332:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('Y') {
							goto l333
						}
						position++
						goto l301
					l333:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('Z') {
							goto l334
						}
						position++
						goto l301
					l334:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('a') {
							goto l335
						}
						position++
						goto l301
					l335:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('b') {
							goto l336
						}
						position++
						goto l301
					l336:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('c') {
							goto l337
						}
						position++
						goto l301
					l337:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('d') {
							goto l338
						}
						position++
						goto l301
					l338:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('e') {
							goto l339
						}
						position++
						goto l301
					l339:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('f') {
							goto l340
						}
						position++
						goto l301
					l340:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('g') {
							goto l341
						}
						position++
						goto l301
					l341:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('h') {
							goto l342
						}
						position++
						goto l301
					l342:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('i') {
							goto l343
						}
						position++
						goto l301
					l343:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('j') {
							goto l344
						}
						position++
						goto l301
					l344:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('k') {
							goto l345
						}
						position++
						goto l301
					l345:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('m') {
							goto l346
						}
						position++
						goto l301
					l346:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('n') {
							goto l347
						}
						position++
						goto l301
					l347:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('o') {
							goto l348
						}
						position++
						goto l301
					l348:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('p') {
							goto l349
						}
						position++
						goto l301
					l349:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('q') {
							goto l350
						}
						position++
						goto l301
					l350:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('r') {
							goto l351
						}
						position++
						goto l301
					l351:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('s') {
							goto l352
						}
						position++
						goto l301
					l352:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('t') {
							goto l353
						}
						position++
						goto l301
					l353:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('u') {
							goto l354
						}
						position++
						goto l301
					l354:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('v') {
							goto l355
						}
						position++
						goto l301
					l355:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('w') {
							goto l356
						}
						position++
						goto l301
					l356:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('x') {
							goto l357
						}
						position++
						goto l301
					l357:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('y') {
							goto l358
						}
						position++
						goto l301
					l358:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('z') {
							goto l300
						}
						position++
					}
				l301:
					goto l299
				l300:
					position, tokenIndex = position300, tokenIndex300
				}
				if buffer[position] != rune('\'') {
					goto l297
				}
				position++
				add(ruleBase58, position298)
			}
			return true
		l297:
			position, tokenIndex = position297, tokenIndex297
			return false
		},
		/* 57 Base64 <- <('b' 'a' 's' 'e' '6' '4' '\'' ('A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'I' / 'J' / 'K' / 'L' / 'M' / 'N' / 'O' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '0' / '1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / '+' / '/' / '=')* '\'')> */
		func() bool {
			position359, tokenIndex359 := position, tokenIndex
			{
				position360 := position
				if buffer[position] != rune('b') {
					goto l359
				}
				position++
				if buffer[position] != rune('a') {
					goto l359
				}
				position++
				if buffer[position] != rune('s') {
					goto l359
				}
				position++
				if buffer[position] != rune('e') {
					goto l359
				}
				position++
				if buffer[position] != rune('6') {
					goto l359
				}
				position++
				if buffer[position] != rune('4') {
					goto l359
				}
				position++
				if buffer[position] != rune('\'') {
					goto l359
				}
				position++
			l361:
				{
					position362, tokenIndex362 := position, tokenIndex
					{
						position363, tokenIndex363 := position, tokenIndex
						if buffer[position] != rune('A') {
							goto l364
						}
						position++
						goto l363
					l364:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('B') {
							goto l365
						}
						position++
						goto l363
					l365:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('C') {
							goto l366
						}
						position++
						goto l363
					l366:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('D') {
							goto l367
						}
						position++
						goto l363
					l367:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('E') {
							goto l368
						}
						position++
						goto l363
					l368:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('F') {
							goto l369
						}
						position++
						goto l363
					l369:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('G') {
							goto l370
						}
						position++
						goto l363
					l370:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('H') {
							goto l371
						}
						position++
						goto l363
					l371:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('I') {
							goto l372
						}
						position++
						goto l363
					l372:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('J') {
							goto l373
						}
						position++
						goto l363
					l373:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('K') {
							goto l374
						}
						position++
						goto l363
					l374:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('L') {
							goto l375
						}
						position++
						goto l363
					l375:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('M') {
							goto l376
						}
						position++
						goto l363
					l376:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('N') {
							goto l377
						}
						position++
						goto l363
					l377:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('O') {
							goto l378
						}
						position++
						goto l363
					l378:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('P') {
							goto l379
						}
						position++
						goto l363
					l379:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('Q') {
							goto l380
						}
						position++
						goto l363
					l380:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('R') {
							goto l381
						}
						position++
						goto l363
					l381:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('S') {
							goto l382
						}
						position++
						goto l363
					l382:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('T') {
							goto l383
						}
						position++
						goto l363
					l383:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('U') {
							goto l384
						}
						position++
						goto l363
					l384:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('V') {
							goto l385
						}
						position++
						goto l363
					l385:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('W') {
							goto l386
						}
						position++
						goto l363
					l386:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('X') {
							goto l387
						}
						position++
						goto l363
					l387:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('Y') {
							goto l388
						}
						position++
						goto l363
					l388:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('Z') {
							goto l389
						}
						position++
						goto l363
					l389:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('a') {
							goto l390
						}
						position++
						goto l363
					l390:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('b') {
							goto l391
						}
						position++
						goto l363
					l391:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('c') {
							goto l392
						}
						position++
						goto l363
					l392:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('d') {
							goto l393
						}
						position++
						goto l363
					l393:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('e') {
							goto l394
						}
						position++
						goto l363
					l394:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('f') {
							goto l395
						}
						position++
						goto l363
					l395:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('g') {
							goto l396
						}
						position++
						goto l363
					l396:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('h') {
							goto l397
						}
						position++
						goto l363
					l397:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('i') {
							goto l398
						}
						position++
						goto l363
					l398:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('j') {
							goto l399
						}
						position++
						goto l363
					l399:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('k') {
							goto l400
						}
						position++
						goto l363
					l400:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('l') {
							goto l401
						}
						position++
						goto l363
					l401:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('m') {
							goto l402
						}
						position++
						goto l363
					l402:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('n') {
							goto l403
						}
						position++
						goto l363
					l403:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('o') {
							goto l404
						}
						position++
						goto l363
					l404:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('p') {
							goto l405
						}
						position++
						goto l363
					l405:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('q') {
							goto l406
						}
						position++
						goto l363
					l406:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('r') {
							goto l407
						}
						position++
						goto l363
					l407:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('s') {
							goto l408
						}
						position++
						goto l363
					l408:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('t') {
							goto l409
						}
						position++
						goto l363
					l409:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('u') {
							goto l410
						}
						position++
						goto l363
					l410:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('v') {
							goto l411
						}
						position++
						goto l363
					l411:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('w') {
							goto l412
						}
						position++
						goto l363
					l412:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('x') {
							goto l413
						}
						position++
						goto l363
					l413:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('y') {
							goto l414
						}
						position++
						goto l363
					l414:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('z') {
							goto l415
						}
						position++
						goto l363
					l415:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('0') {
							goto l416
						}
						position++
						goto l363
					l416:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('1') {
							goto l417
						}
						position++
						goto l363
					l417:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('2') {
							goto l418
						}
						position++
						goto l363
					l418:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('3') {
							goto l419
						}
						position++
						goto l363
					l419:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('4') {
							goto l420
						}
						position++
						goto l363
					l420:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('5') {
							goto l421
						}
						position++
						goto l363
					l421:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('6') {
							goto l422
						}
						position++
						goto l363
					l422:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('7') {
							goto l423
						}
						position++
						goto l363
					l423:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('8') {
							goto l424
						}
						position++
						goto l363
					l424:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('9') {
							goto l425
						}
						position++
						goto l363
					l425:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('+') {
							goto l426
						}
						position++
						goto l363
					l426:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('/') {
							goto l427
						}
						position++
						goto l363
					l427:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('=') {
							goto l362
						}
						position++
					}
				l363:
					goto l361
				l362:
					position, tokenIndex = position362, tokenIndex362
				}
				if buffer[position] != rune('\'') {
					goto l359
				}
				position++
				add(ruleBase64, position360)
			}
			return true
		l359:
			position, tokenIndex = position359, tokenIndex359
			return false
		},
		/* 58 ByteVector <- <(Base16 / Base58 / Base64)> */
		func() bool {
			position428, tokenIndex428 := position, tokenIndex
			{
				position429 := position
				{
					position430, tokenIndex430 := position, tokenIndex
					if !_rules[ruleBase16]() {
						goto l431
					}
					goto l430
				l431:
					position, tokenIndex = position430, tokenIndex430
					if !_rules[ruleBase58]() {
						goto l432
					}
					goto l430
				l432:
					position, tokenIndex = position430, tokenIndex430
					if !_rules[ruleBase64]() {
						goto l428
					}
				}
			l430:
				add(ruleByteVector, position429)
			}
			return true
		l428:
			position, tokenIndex = position428, tokenIndex428
			return false
		},
		/* 59 Boolean <- <(('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e'))> */
		func() bool {
			position433, tokenIndex433 := position, tokenIndex
			{
				position434 := position
				{
					position435, tokenIndex435 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l436
					}
					position++
					if buffer[position] != rune('r') {
						goto l436
					}
					position++
					if buffer[position] != rune('u') {
						goto l436
					}
					position++
					if buffer[position] != rune('e') {
						goto l436
					}
					position++
					goto l435
				l436:
					position, tokenIndex = position435, tokenIndex435
					if buffer[position] != rune('f') {
						goto l433
					}
					position++
					if buffer[position] != rune('a') {
						goto l433
					}
					position++
					if buffer[position] != rune('l') {
						goto l433
					}
					position++
					if buffer[position] != rune('s') {
						goto l433
					}
					position++
					if buffer[position] != rune('e') {
						goto l433
					}
					position++
				}
			l435:
				add(ruleBoolean, position434)
			}
			return true
		l433:
			position, tokenIndex = position433, tokenIndex433
			return false
		},
		/* 60 String <- <('"' (UnicodeChar / EscapedChar / Char)* '"')> */
		func() bool {
			position437, tokenIndex437 := position, tokenIndex
			{
				position438 := position
				if buffer[position] != rune('"') {
					goto l437
				}
				position++
			l439:
				{
					position440, tokenIndex440 := position, tokenIndex
					{
						position441, tokenIndex441 := position, tokenIndex
						if !_rules[ruleUnicodeChar]() {
							goto l442
						}
						goto l441
					l442:
						position, tokenIndex = position441, tokenIndex441
						if !_rules[ruleEscapedChar]() {
							goto l443
						}
						goto l441
					l443:
						position, tokenIndex = position441, tokenIndex441
						if !_rules[ruleChar]() {
							goto l440
						}
					}
				l441:
					goto l439
				l440:
					position, tokenIndex = position440, tokenIndex440
				}
				if buffer[position] != rune('"') {
					goto l437
				}
				position++
				add(ruleString, position438)
			}
			return true
		l437:
			position, tokenIndex = position437, tokenIndex437
			return false
		},
		/* 61 UnicodeChar <- <('\\' 'u' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f'))> */
		func() bool {
			position444, tokenIndex444 := position, tokenIndex
			{
				position445 := position
				if buffer[position] != rune('\\') {
					goto l444
				}
				position++
				if buffer[position] != rune('u') {
					goto l444
				}
				position++
				{
					position446, tokenIndex446 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l447
					}
					position++
					goto l446
				l447:
					position, tokenIndex = position446, tokenIndex446
					if buffer[position] != rune('A') {
						goto l448
					}
					position++
					goto l446
				l448:
					position, tokenIndex = position446, tokenIndex446
					if buffer[position] != rune('B') {
						goto l449
					}
					position++
					goto l446
				l449:
					position, tokenIndex = position446, tokenIndex446
					if buffer[position] != rune('C') {
						goto l450
					}
					position++
					goto l446
				l450:
					position, tokenIndex = position446, tokenIndex446
					if buffer[position] != rune('D') {
						goto l451
					}
					position++
					goto l446
				l451:
					position, tokenIndex = position446, tokenIndex446
					if buffer[position] != rune('E') {
						goto l452
					}
					position++
					goto l446
				l452:
					position, tokenIndex = position446, tokenIndex446
					if buffer[position] != rune('F') {
						goto l453
					}
					position++
					goto l446
				l453:
					position, tokenIndex = position446, tokenIndex446
					if buffer[position] != rune('a') {
						goto l454
					}
					position++
					goto l446
				l454:
					position, tokenIndex = position446, tokenIndex446
					if buffer[position] != rune('b') {
						goto l455
					}
					position++
					goto l446
				l455:
					position, tokenIndex = position446, tokenIndex446
					if buffer[position] != rune('c') {
						goto l456
					}
					position++
					goto l446
				l456:
					position, tokenIndex = position446, tokenIndex446
					if buffer[position] != rune('d') {
						goto l457
					}
					position++
					goto l446
				l457:
					position, tokenIndex = position446, tokenIndex446
					if buffer[position] != rune('e') {
						goto l458
					}
					position++
					goto l446
				l458:
					position, tokenIndex = position446, tokenIndex446
					if buffer[position] != rune('f') {
						goto l444
					}
					position++
				}
			l446:
				{
					position459, tokenIndex459 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l460
					}
					position++
					goto l459
				l460:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('A') {
						goto l461
					}
					position++
					goto l459
				l461:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('B') {
						goto l462
					}
					position++
					goto l459
				l462:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('C') {
						goto l463
					}
					position++
					goto l459
				l463:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('D') {
						goto l464
					}
					position++
					goto l459
				l464:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('E') {
						goto l465
					}
					position++
					goto l459
				l465:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('F') {
						goto l466
					}
					position++
					goto l459
				l466:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('a') {
						goto l467
					}
					position++
					goto l459
				l467:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('b') {
						goto l468
					}
					position++
					goto l459
				l468:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('c') {
						goto l469
					}
					position++
					goto l459
				l469:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('d') {
						goto l470
					}
					position++
					goto l459
				l470:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('e') {
						goto l471
					}
					position++
					goto l459
				l471:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('f') {
						goto l444
					}
					position++
				}
			l459:
				{
					position472, tokenIndex472 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l473
					}
					position++
					goto l472
				l473:
					position, tokenIndex = position472, tokenIndex472
					if buffer[position] != rune('A') {
						goto l474
					}
					position++
					goto l472
				l474:
					position, tokenIndex = position472, tokenIndex472
					if buffer[position] != rune('B') {
						goto l475
					}
					position++
					goto l472
				l475:
					position, tokenIndex = position472, tokenIndex472
					if buffer[position] != rune('C') {
						goto l476
					}
					position++
					goto l472
				l476:
					position, tokenIndex = position472, tokenIndex472
					if buffer[position] != rune('D') {
						goto l477
					}
					position++
					goto l472
				l477:
					position, tokenIndex = position472, tokenIndex472
					if buffer[position] != rune('E') {
						goto l478
					}
					position++
					goto l472
				l478:
					position, tokenIndex = position472, tokenIndex472
					if buffer[position] != rune('F') {
						goto l479
					}
					position++
					goto l472
				l479:
					position, tokenIndex = position472, tokenIndex472
					if buffer[position] != rune('a') {
						goto l480
					}
					position++
					goto l472
				l480:
					position, tokenIndex = position472, tokenIndex472
					if buffer[position] != rune('b') {
						goto l481
					}
					position++
					goto l472
				l481:
					position, tokenIndex = position472, tokenIndex472
					if buffer[position] != rune('c') {
						goto l482
					}
					position++
					goto l472
				l482:
					position, tokenIndex = position472, tokenIndex472
					if buffer[position] != rune('d') {
						goto l483
					}
					position++
					goto l472
				l483:
					position, tokenIndex = position472, tokenIndex472
					if buffer[position] != rune('e') {
						goto l484
					}
					position++
					goto l472
				l484:
					position, tokenIndex = position472, tokenIndex472
					if buffer[position] != rune('f') {
						goto l444
					}
					position++
				}
			l472:
				{
					position485, tokenIndex485 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l486
					}
					position++
					goto l485
				l486:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('A') {
						goto l487
					}
					position++
					goto l485
				l487:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('B') {
						goto l488
					}
					position++
					goto l485
				l488:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('C') {
						goto l489
					}
					position++
					goto l485
				l489:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('D') {
						goto l490
					}
					position++
					goto l485
				l490:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('E') {
						goto l491
					}
					position++
					goto l485
				l491:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('F') {
						goto l492
					}
					position++
					goto l485
				l492:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('a') {
						goto l493
					}
					position++
					goto l485
				l493:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('b') {
						goto l494
					}
					position++
					goto l485
				l494:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('c') {
						goto l495
					}
					position++
					goto l485
				l495:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('d') {
						goto l496
					}
					position++
					goto l485
				l496:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('e') {
						goto l497
					}
					position++
					goto l485
				l497:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('f') {
						goto l444
					}
					position++
				}
			l485:
				add(ruleUnicodeChar, position445)
			}
			return true
		l444:
			position, tokenIndex = position444, tokenIndex444
			return false
		},
		/* 62 EscapedChar <- <('\\' .)> */
		func() bool {
			position498, tokenIndex498 := position, tokenIndex
			{
				position499 := position
				if buffer[position] != rune('\\') {
					goto l498
				}
				position++
				if !matchDot() {
					goto l498
				}
				add(ruleEscapedChar, position499)
			}
			return true
		l498:
			position, tokenIndex = position498, tokenIndex498
			return false
		},
		/* 63 Char <- <(!'"' .)> */
		func() bool {
			position500, tokenIndex500 := position, tokenIndex
			{
				position501 := position
				{
					position502, tokenIndex502 := position, tokenIndex
					if buffer[position] != rune('"') {
						goto l502
					}
					position++
					goto l500
				l502:
					position, tokenIndex = position502, tokenIndex502
				}
				if !matchDot() {
					goto l500
				}
				add(ruleChar, position501)
			}
			return true
		l500:
			position, tokenIndex = position500, tokenIndex500
			return false
		},
		/* 64 Integer <- <([0-9] ('_' &[0-9])?)+> */
		func() bool {
			position503, tokenIndex503 := position, tokenIndex
			{
				position504 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l503
				}
				position++
				{
					position507, tokenIndex507 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l507
					}
					position++
					{
						position509, tokenIndex509 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l507
						}
						position++
						position, tokenIndex = position509, tokenIndex509
					}
					goto l508
				l507:
					position, tokenIndex = position507, tokenIndex507
				}
			l508:
			l505:
				{
					position506, tokenIndex506 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l506
					}
					position++
					{
						position510, tokenIndex510 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l510
						}
						position++
						{
							position512, tokenIndex512 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l510
							}
							position++
							position, tokenIndex = position512, tokenIndex512
						}
						goto l511
					l510:
						position, tokenIndex = position510, tokenIndex510
					}
				l511:
					goto l505
				l506:
					position, tokenIndex = position506, tokenIndex506
				}
				add(ruleInteger, position504)
			}
			return true
		l503:
			position, tokenIndex = position503, tokenIndex503
			return false
		},
		/* 65 List <- <('[' _ ExprSeq? _ ']')> */
		func() bool {
			position513, tokenIndex513 := position, tokenIndex
			{
				position514 := position
				if buffer[position] != rune('[') {
					goto l513
				}
				position++
				if !_rules[rule_]() {
					goto l513
				}
				{
					position515, tokenIndex515 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l515
					}
					goto l516
				l515:
					position, tokenIndex = position515, tokenIndex515
				}
			l516:
				if !_rules[rule_]() {
					goto l513
				}
				if buffer[position] != rune(']') {
					goto l513
				}
				position++
				add(ruleList, position514)
			}
			return true
		l513:
			position, tokenIndex = position513, tokenIndex513
			return false
		},
		/* 66 ExprSeq <- <(Expr (_ ',' _ ExprSeq)?)> */
		func() bool {
			position517, tokenIndex517 := position, tokenIndex
			{
				position518 := position
				if !_rules[ruleExpr]() {
					goto l517
				}
				{
					position519, tokenIndex519 := position, tokenIndex
					if !_rules[rule_]() {
						goto l519
					}
					if buffer[position] != rune(',') {
						goto l519
					}
					position++
					if !_rules[rule_]() {
						goto l519
					}
					if !_rules[ruleExprSeq]() {
						goto l519
					}
					goto l520
				l519:
					position, tokenIndex = position519, tokenIndex519
				}
			l520:
				add(ruleExprSeq, position518)
			}
			return true
		l517:
			position, tokenIndex = position517, tokenIndex517
			return false
		},
		/* 67 AtomExpr <- <(UnaryOp? _ (FoldMacro / GettableExpr / IfWithError / Match))> */
		func() bool {
			position521, tokenIndex521 := position, tokenIndex
			{
				position522 := position
				{
					position523, tokenIndex523 := position, tokenIndex
					if !_rules[ruleUnaryOp]() {
						goto l523
					}
					goto l524
				l523:
					position, tokenIndex = position523, tokenIndex523
				}
			l524:
				if !_rules[rule_]() {
					goto l521
				}
				{
					position525, tokenIndex525 := position, tokenIndex
					if !_rules[ruleFoldMacro]() {
						goto l526
					}
					goto l525
				l526:
					position, tokenIndex = position525, tokenIndex525
					if !_rules[ruleGettableExpr]() {
						goto l527
					}
					goto l525
				l527:
					position, tokenIndex = position525, tokenIndex525
					if !_rules[ruleIfWithError]() {
						goto l528
					}
					goto l525
				l528:
					position, tokenIndex = position525, tokenIndex525
					if !_rules[ruleMatch]() {
						goto l521
					}
				}
			l525:
				add(ruleAtomExpr, position522)
			}
			return true
		l521:
			position, tokenIndex = position521, tokenIndex521
			return false
		},
		/* 68 MultGroupOpAtom <- <(AtomExpr (_ MultGroupOp _ AtomExpr)*)> */
		func() bool {
			position529, tokenIndex529 := position, tokenIndex
			{
				position530 := position
				if !_rules[ruleAtomExpr]() {
					goto l529
				}
			l531:
				{
					position532, tokenIndex532 := position, tokenIndex
					if !_rules[rule_]() {
						goto l532
					}
					if !_rules[ruleMultGroupOp]() {
						goto l532
					}
					if !_rules[rule_]() {
						goto l532
					}
					if !_rules[ruleAtomExpr]() {
						goto l532
					}
					goto l531
				l532:
					position, tokenIndex = position532, tokenIndex532
				}
				add(ruleMultGroupOpAtom, position530)
			}
			return true
		l529:
			position, tokenIndex = position529, tokenIndex529
			return false
		},
		/* 69 SumGroupOpAtom <- <(MultGroupOpAtom (_ SumGroupOp _ MultGroupOpAtom)*)> */
		func() bool {
			position533, tokenIndex533 := position, tokenIndex
			{
				position534 := position
				if !_rules[ruleMultGroupOpAtom]() {
					goto l533
				}
			l535:
				{
					position536, tokenIndex536 := position, tokenIndex
					if !_rules[rule_]() {
						goto l536
					}
					if !_rules[ruleSumGroupOp]() {
						goto l536
					}
					if !_rules[rule_]() {
						goto l536
					}
					if !_rules[ruleMultGroupOpAtom]() {
						goto l536
					}
					goto l535
				l536:
					position, tokenIndex = position536, tokenIndex536
				}
				add(ruleSumGroupOpAtom, position534)
			}
			return true
		l533:
			position, tokenIndex = position533, tokenIndex533
			return false
		},
		/* 70 ListGroupOpAtom <- <(SumGroupOpAtom (_ ListGroupOp _ SumGroupOpAtom)*)> */
		func() bool {
			position537, tokenIndex537 := position, tokenIndex
			{
				position538 := position
				if !_rules[ruleSumGroupOpAtom]() {
					goto l537
				}
			l539:
				{
					position540, tokenIndex540 := position, tokenIndex
					if !_rules[rule_]() {
						goto l540
					}
					if !_rules[ruleListGroupOp]() {
						goto l540
					}
					if !_rules[rule_]() {
						goto l540
					}
					if !_rules[ruleSumGroupOpAtom]() {
						goto l540
					}
					goto l539
				l540:
					position, tokenIndex = position540, tokenIndex540
				}
				add(ruleListGroupOpAtom, position538)
			}
			return true
		l537:
			position, tokenIndex = position537, tokenIndex537
			return false
		},
		/* 71 CompareGroupOpAtom <- <(ListGroupOpAtom (_ CompareGroupOp _ ListGroupOpAtom)*)> */
		func() bool {
			position541, tokenIndex541 := position, tokenIndex
			{
				position542 := position
				if !_rules[ruleListGroupOpAtom]() {
					goto l541
				}
			l543:
				{
					position544, tokenIndex544 := position, tokenIndex
					if !_rules[rule_]() {
						goto l544
					}
					if !_rules[ruleCompareGroupOp]() {
						goto l544
					}
					if !_rules[rule_]() {
						goto l544
					}
					if !_rules[ruleListGroupOpAtom]() {
						goto l544
					}
					goto l543
				l544:
					position, tokenIndex = position544, tokenIndex544
				}
				add(ruleCompareGroupOpAtom, position542)
			}
			return true
		l541:
			position, tokenIndex = position541, tokenIndex541
			return false
		},
		/* 72 EqualityGroupOpAtom <- <(CompareGroupOpAtom (_ EqGroupOp _ CompareGroupOpAtom)*)> */
		func() bool {
			position545, tokenIndex545 := position, tokenIndex
			{
				position546 := position
				if !_rules[ruleCompareGroupOpAtom]() {
					goto l545
				}
			l547:
				{
					position548, tokenIndex548 := position, tokenIndex
					if !_rules[rule_]() {
						goto l548
					}
					if !_rules[ruleEqGroupOp]() {
						goto l548
					}
					if !_rules[rule_]() {
						goto l548
					}
					if !_rules[ruleCompareGroupOpAtom]() {
						goto l548
					}
					goto l547
				l548:
					position, tokenIndex = position548, tokenIndex548
				}
				add(ruleEqualityGroupOpAtom, position546)
			}
			return true
		l545:
			position, tokenIndex = position545, tokenIndex545
			return false
		},
		/* 73 AndOpAtom <- <(EqualityGroupOpAtom (_ AndOp _ EqualityGroupOpAtom)*)> */
		func() bool {
			position549, tokenIndex549 := position, tokenIndex
			{
				position550 := position
				if !_rules[ruleEqualityGroupOpAtom]() {
					goto l549
				}
			l551:
				{
					position552, tokenIndex552 := position, tokenIndex
					if !_rules[rule_]() {
						goto l552
					}
					if !_rules[ruleAndOp]() {
						goto l552
					}
					if !_rules[rule_]() {
						goto l552
					}
					if !_rules[ruleEqualityGroupOpAtom]() {
						goto l552
					}
					goto l551
				l552:
					position, tokenIndex = position552, tokenIndex552
				}
				add(ruleAndOpAtom, position550)
			}
			return true
		l549:
			position, tokenIndex = position549, tokenIndex549
			return false
		},
		/* 74 OrOpAtom <- <(AndOpAtom (_ OrOp _ AndOpAtom)*)> */
		func() bool {
			position553, tokenIndex553 := position, tokenIndex
			{
				position554 := position
				if !_rules[ruleAndOpAtom]() {
					goto l553
				}
			l555:
				{
					position556, tokenIndex556 := position, tokenIndex
					if !_rules[rule_]() {
						goto l556
					}
					if !_rules[ruleOrOp]() {
						goto l556
					}
					if !_rules[rule_]() {
						goto l556
					}
					if !_rules[ruleAndOpAtom]() {
						goto l556
					}
					goto l555
				l556:
					position, tokenIndex = position556, tokenIndex556
				}
				add(ruleOrOpAtom, position554)
			}
			return true
		l553:
			position, tokenIndex = position553, tokenIndex553
			return false
		},
		/* 75 Expr <- <OrOpAtom> */
		func() bool {
			position557, tokenIndex557 := position, tokenIndex
			{
				position558 := position
				if !_rules[ruleOrOpAtom]() {
					goto l557
				}
				add(ruleExpr, position558)
			}
			return true
		l557:
			position, tokenIndex = position557, tokenIndex557
			return false
		},
		/* 76 ParExpr <- <('(' _ Expr _ ')')> */
		func() bool {
			position559, tokenIndex559 := position, tokenIndex
			{
				position560 := position
				if buffer[position] != rune('(') {
					goto l559
				}
				position++
				if !_rules[rule_]() {
					goto l559
				}
				if !_rules[ruleExpr]() {
					goto l559
				}
				if !_rules[rule_]() {
					goto l559
				}
				if buffer[position] != rune(')') {
					goto l559
				}
				position++
				add(ruleParExpr, position560)
			}
			return true
		l559:
			position, tokenIndex = position559, tokenIndex559
			return false
		},
		/* 77 GettableExpr <- <((ParExpr / Block / FunctionCall / Identifier / Const) (_ (ListAccess / ('.' _ (FunctionCallAccess / IdentifierAccess / TupleAccess))))*)> */
		func() bool {
			position561, tokenIndex561 := position, tokenIndex
			{
				position562 := position
				{
					position563, tokenIndex563 := position, tokenIndex
					if !_rules[ruleParExpr]() {
						goto l564
					}
					goto l563
				l564:
					position, tokenIndex = position563, tokenIndex563
					if !_rules[ruleBlock]() {
						goto l565
					}
					goto l563
				l565:
					position, tokenIndex = position563, tokenIndex563
					if !_rules[ruleFunctionCall]() {
						goto l566
					}
					goto l563
				l566:
					position, tokenIndex = position563, tokenIndex563
					if !_rules[ruleIdentifier]() {
						goto l567
					}
					goto l563
				l567:
					position, tokenIndex = position563, tokenIndex563
					if !_rules[ruleConst]() {
						goto l561
					}
				}
			l563:
			l568:
				{
					position569, tokenIndex569 := position, tokenIndex
					if !_rules[rule_]() {
						goto l569
					}
					{
						position570, tokenIndex570 := position, tokenIndex
						if !_rules[ruleListAccess]() {
							goto l571
						}
						goto l570
					l571:
						position, tokenIndex = position570, tokenIndex570
						if buffer[position] != rune('.') {
							goto l569
						}
						position++
						if !_rules[rule_]() {
							goto l569
						}
						{
							position572, tokenIndex572 := position, tokenIndex
							if !_rules[ruleFunctionCallAccess]() {
								goto l573
							}
							goto l572
						l573:
							position, tokenIndex = position572, tokenIndex572
							if !_rules[ruleIdentifierAccess]() {
								goto l574
							}
							goto l572
						l574:
							position, tokenIndex = position572, tokenIndex572
							if !_rules[ruleTupleAccess]() {
								goto l569
							}
						}
					l572:
					}
				l570:
					goto l568
				l569:
					position, tokenIndex = position569, tokenIndex569
				}
				add(ruleGettableExpr, position562)
			}
			return true
		l561:
			position, tokenIndex = position561, tokenIndex561
			return false
		},
		/* 78 FunctionCallAccess <- <FunctionCall> */
		func() bool {
			position575, tokenIndex575 := position, tokenIndex
			{
				position576 := position
				if !_rules[ruleFunctionCall]() {
					goto l575
				}
				add(ruleFunctionCallAccess, position576)
			}
			return true
		l575:
			position, tokenIndex = position575, tokenIndex575
			return false
		},
		/* 79 IdentifierAccess <- <Identifier> */
		func() bool {
			position577, tokenIndex577 := position, tokenIndex
			{
				position578 := position
				if !_rules[ruleIdentifier]() {
					goto l577
				}
				add(ruleIdentifierAccess, position578)
			}
			return true
		l577:
			position, tokenIndex = position577, tokenIndex577
			return false
		},
		/* 80 ListAccess <- <('[' _ (Expr / Identifier) _ ']')> */
		func() bool {
			position579, tokenIndex579 := position, tokenIndex
			{
				position580 := position
				if buffer[position] != rune('[') {
					goto l579
				}
				position++
				if !_rules[rule_]() {
					goto l579
				}
				{
					position581, tokenIndex581 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l582
					}
					goto l581
				l582:
					position, tokenIndex = position581, tokenIndex581
					if !_rules[ruleIdentifier]() {
						goto l579
					}
				}
			l581:
				if !_rules[rule_]() {
					goto l579
				}
				if buffer[position] != rune(']') {
					goto l579
				}
				position++
				add(ruleListAccess, position580)
			}
			return true
		l579:
			position, tokenIndex = position579, tokenIndex579
			return false
		},
		/* 81 Block <- <('{' (_ Declaration)* _ Expr _ '}')> */
		func() bool {
			position583, tokenIndex583 := position, tokenIndex
			{
				position584 := position
				if buffer[position] != rune('{') {
					goto l583
				}
				position++
			l585:
				{
					position586, tokenIndex586 := position, tokenIndex
					if !_rules[rule_]() {
						goto l586
					}
					if !_rules[ruleDeclaration]() {
						goto l586
					}
					goto l585
				l586:
					position, tokenIndex = position586, tokenIndex586
				}
				if !_rules[rule_]() {
					goto l583
				}
				if !_rules[ruleExpr]() {
					goto l583
				}
				if !_rules[rule_]() {
					goto l583
				}
				if buffer[position] != rune('}') {
					goto l583
				}
				position++
				add(ruleBlock, position584)
			}
			return true
		l583:
			position, tokenIndex = position583, tokenIndex583
			return false
		},
		/* 82 BlockWithoutPar <- <((_ Declaration)* _ Expr)> */
		func() bool {
			position587, tokenIndex587 := position, tokenIndex
			{
				position588 := position
			l589:
				{
					position590, tokenIndex590 := position, tokenIndex
					if !_rules[rule_]() {
						goto l590
					}
					if !_rules[ruleDeclaration]() {
						goto l590
					}
					goto l589
				l590:
					position, tokenIndex = position590, tokenIndex590
				}
				if !_rules[rule_]() {
					goto l587
				}
				if !_rules[ruleExpr]() {
					goto l587
				}
				add(ruleBlockWithoutPar, position588)
			}
			return true
		l587:
			position, tokenIndex = position587, tokenIndex587
			return false
		},
		/* 83 FunctionCall <- <(Identifier '(' _ ExprSeq? _ ')')> */
		func() bool {
			position591, tokenIndex591 := position, tokenIndex
			{
				position592 := position
				if !_rules[ruleIdentifier]() {
					goto l591
				}
				if buffer[position] != rune('(') {
					goto l591
				}
				position++
				if !_rules[rule_]() {
					goto l591
				}
				{
					position593, tokenIndex593 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l593
					}
					goto l594
				l593:
					position, tokenIndex = position593, tokenIndex593
				}
			l594:
				if !_rules[rule_]() {
					goto l591
				}
				if buffer[position] != rune(')') {
					goto l591
				}
				position++
				add(ruleFunctionCall, position592)
			}
			return true
		l591:
			position, tokenIndex = position591, tokenIndex591
			return false
		},
		/* 84 FoldMacro <- <('F' 'O' 'L' 'D' _ '<' _ Integer _ '>' _ '(' _ Expr _ ',' _ Expr _ ',' _ Identifier _ ')')> */
		func() bool {
			position595, tokenIndex595 := position, tokenIndex
			{
				position596 := position
				if buffer[position] != rune('F') {
					goto l595
				}
				position++
				if buffer[position] != rune('O') {
					goto l595
				}
				position++
				if buffer[position] != rune('L') {
					goto l595
				}
				position++
				if buffer[position] != rune('D') {
					goto l595
				}
				position++
				if !_rules[rule_]() {
					goto l595
				}
				if buffer[position] != rune('<') {
					goto l595
				}
				position++
				if !_rules[rule_]() {
					goto l595
				}
				if !_rules[ruleInteger]() {
					goto l595
				}
				if !_rules[rule_]() {
					goto l595
				}
				if buffer[position] != rune('>') {
					goto l595
				}
				position++
				if !_rules[rule_]() {
					goto l595
				}
				if buffer[position] != rune('(') {
					goto l595
				}
				position++
				if !_rules[rule_]() {
					goto l595
				}
				if !_rules[ruleExpr]() {
					goto l595
				}
				if !_rules[rule_]() {
					goto l595
				}
				if buffer[position] != rune(',') {
					goto l595
				}
				position++
				if !_rules[rule_]() {
					goto l595
				}
				if !_rules[ruleExpr]() {
					goto l595
				}
				if !_rules[rule_]() {
					goto l595
				}
				if buffer[position] != rune(',') {
					goto l595
				}
				position++
				if !_rules[rule_]() {
					goto l595
				}
				if !_rules[ruleIdentifier]() {
					goto l595
				}
				if !_rules[rule_]() {
					goto l595
				}
				if buffer[position] != rune(')') {
					goto l595
				}
				position++
				add(ruleFoldMacro, position596)
			}
			return true
		l595:
			position, tokenIndex = position595, tokenIndex595
			return false
		},
		/* 85 IfWithError <- <(If / FailedIfWithoutElse)> */
		func() bool {
			position597, tokenIndex597 := position, tokenIndex
			{
				position598 := position
				{
					position599, tokenIndex599 := position, tokenIndex
					if !_rules[ruleIf]() {
						goto l600
					}
					goto l599
				l600:
					position, tokenIndex = position599, tokenIndex599
					if !_rules[ruleFailedIfWithoutElse]() {
						goto l597
					}
				}
			l599:
				add(ruleIfWithError, position598)
			}
			return true
		l597:
			position, tokenIndex = position597, tokenIndex597
			return false
		},
		/* 86 If <- <('i' 'f' _ Expr _ ('t' 'h' 'e' 'n') _ (Expr / BlockWithoutPar) _ ('e' 'l' 's' 'e') _ (Expr / BlockWithoutPar))> */
		func() bool {
			position601, tokenIndex601 := position, tokenIndex
			{
				position602 := position
				if buffer[position] != rune('i') {
					goto l601
				}
				position++
				if buffer[position] != rune('f') {
					goto l601
				}
				position++
				if !_rules[rule_]() {
					goto l601
				}
				if !_rules[ruleExpr]() {
					goto l601
				}
				if !_rules[rule_]() {
					goto l601
				}
				if buffer[position] != rune('t') {
					goto l601
				}
				position++
				if buffer[position] != rune('h') {
					goto l601
				}
				position++
				if buffer[position] != rune('e') {
					goto l601
				}
				position++
				if buffer[position] != rune('n') {
					goto l601
				}
				position++
				if !_rules[rule_]() {
					goto l601
				}
				{
					position603, tokenIndex603 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l604
					}
					goto l603
				l604:
					position, tokenIndex = position603, tokenIndex603
					if !_rules[ruleBlockWithoutPar]() {
						goto l601
					}
				}
			l603:
				if !_rules[rule_]() {
					goto l601
				}
				if buffer[position] != rune('e') {
					goto l601
				}
				position++
				if buffer[position] != rune('l') {
					goto l601
				}
				position++
				if buffer[position] != rune('s') {
					goto l601
				}
				position++
				if buffer[position] != rune('e') {
					goto l601
				}
				position++
				if !_rules[rule_]() {
					goto l601
				}
				{
					position605, tokenIndex605 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l606
					}
					goto l605
				l606:
					position, tokenIndex = position605, tokenIndex605
					if !_rules[ruleBlockWithoutPar]() {
						goto l601
					}
				}
			l605:
				add(ruleIf, position602)
			}
			return true
		l601:
			position, tokenIndex = position601, tokenIndex601
			return false
		},
		/* 87 FailedIfWithoutElse <- <('i' 'f' _ Expr _ ('t' 'h' 'e' 'n') _ (Expr / BlockWithoutPar))> */
		func() bool {
			position607, tokenIndex607 := position, tokenIndex
			{
				position608 := position
				if buffer[position] != rune('i') {
					goto l607
				}
				position++
				if buffer[position] != rune('f') {
					goto l607
				}
				position++
				if !_rules[rule_]() {
					goto l607
				}
				if !_rules[ruleExpr]() {
					goto l607
				}
				if !_rules[rule_]() {
					goto l607
				}
				if buffer[position] != rune('t') {
					goto l607
				}
				position++
				if buffer[position] != rune('h') {
					goto l607
				}
				position++
				if buffer[position] != rune('e') {
					goto l607
				}
				position++
				if buffer[position] != rune('n') {
					goto l607
				}
				position++
				if !_rules[rule_]() {
					goto l607
				}
				{
					position609, tokenIndex609 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l610
					}
					goto l609
				l610:
					position, tokenIndex = position609, tokenIndex609
					if !_rules[ruleBlockWithoutPar]() {
						goto l607
					}
				}
			l609:
				add(ruleFailedIfWithoutElse, position608)
			}
			return true
		l607:
			position, tokenIndex = position607, tokenIndex607
			return false
		},
		/* 88 Match <- <('m' 'a' 't' 'c' 'h' _ Expr _ '{' (_ Case)+ _ '}')> */
		func() bool {
			position611, tokenIndex611 := position, tokenIndex
			{
				position612 := position
				if buffer[position] != rune('m') {
					goto l611
				}
				position++
				if buffer[position] != rune('a') {
					goto l611
				}
				position++
				if buffer[position] != rune('t') {
					goto l611
				}
				position++
				if buffer[position] != rune('c') {
					goto l611
				}
				position++
				if buffer[position] != rune('h') {
					goto l611
				}
				position++
				if !_rules[rule_]() {
					goto l611
				}
				if !_rules[ruleExpr]() {
					goto l611
				}
				if !_rules[rule_]() {
					goto l611
				}
				if buffer[position] != rune('{') {
					goto l611
				}
				position++
				if !_rules[rule_]() {
					goto l611
				}
				if !_rules[ruleCase]() {
					goto l611
				}
			l613:
				{
					position614, tokenIndex614 := position, tokenIndex
					if !_rules[rule_]() {
						goto l614
					}
					if !_rules[ruleCase]() {
						goto l614
					}
					goto l613
				l614:
					position, tokenIndex = position614, tokenIndex614
				}
				if !_rules[rule_]() {
					goto l611
				}
				if buffer[position] != rune('}') {
					goto l611
				}
				position++
				add(ruleMatch, position612)
			}
			return true
		l611:
			position, tokenIndex = position611, tokenIndex611
			return false
		},
		/* 89 Case <- <('c' 'a' 's' 'e' _ (ValuePattern / TuplePattern / ObjectPattern / Placeholder / Expr) _ ('=' '>') _ (Block / BlockWithoutPar))> */
		func() bool {
			position615, tokenIndex615 := position, tokenIndex
			{
				position616 := position
				if buffer[position] != rune('c') {
					goto l615
				}
				position++
				if buffer[position] != rune('a') {
					goto l615
				}
				position++
				if buffer[position] != rune('s') {
					goto l615
				}
				position++
				if buffer[position] != rune('e') {
					goto l615
				}
				position++
				if !_rules[rule_]() {
					goto l615
				}
				{
					position617, tokenIndex617 := position, tokenIndex
					if !_rules[ruleValuePattern]() {
						goto l618
					}
					goto l617
				l618:
					position, tokenIndex = position617, tokenIndex617
					if !_rules[ruleTuplePattern]() {
						goto l619
					}
					goto l617
				l619:
					position, tokenIndex = position617, tokenIndex617
					if !_rules[ruleObjectPattern]() {
						goto l620
					}
					goto l617
				l620:
					position, tokenIndex = position617, tokenIndex617
					if !_rules[rulePlaceholder]() {
						goto l621
					}
					goto l617
				l621:
					position, tokenIndex = position617, tokenIndex617
					if !_rules[ruleExpr]() {
						goto l615
					}
				}
			l617:
				if !_rules[rule_]() {
					goto l615
				}
				if buffer[position] != rune('=') {
					goto l615
				}
				position++
				if buffer[position] != rune('>') {
					goto l615
				}
				position++
				if !_rules[rule_]() {
					goto l615
				}
				{
					position622, tokenIndex622 := position, tokenIndex
					if !_rules[ruleBlock]() {
						goto l623
					}
					goto l622
				l623:
					position, tokenIndex = position622, tokenIndex622
					if !_rules[ruleBlockWithoutPar]() {
						goto l615
					}
				}
			l622:
				add(ruleCase, position616)
			}
			return true
		l615:
			position, tokenIndex = position615, tokenIndex615
			return false
		},
		/* 90 Placeholder <- <'_'> */
		func() bool {
			position624, tokenIndex624 := position, tokenIndex
			{
				position625 := position
				if buffer[position] != rune('_') {
					goto l624
				}
				position++
				add(rulePlaceholder, position625)
			}
			return true
		l624:
			position, tokenIndex = position624, tokenIndex624
			return false
		},
		/* 91 ValuePattern <- <((Placeholder / Identifier) _ ':' _ Types)> */
		func() bool {
			position626, tokenIndex626 := position, tokenIndex
			{
				position627 := position
				{
					position628, tokenIndex628 := position, tokenIndex
					if !_rules[rulePlaceholder]() {
						goto l629
					}
					goto l628
				l629:
					position, tokenIndex = position628, tokenIndex628
					if !_rules[ruleIdentifier]() {
						goto l626
					}
				}
			l628:
				if !_rules[rule_]() {
					goto l626
				}
				if buffer[position] != rune(':') {
					goto l626
				}
				position++
				if !_rules[rule_]() {
					goto l626
				}
				if !_rules[ruleTypes]() {
					goto l626
				}
				add(ruleValuePattern, position627)
			}
			return true
		l626:
			position, tokenIndex = position626, tokenIndex626
			return false
		},
		/* 92 TupleValuesPattern <- <((ValuePattern / Placeholder / Identifier / Expr / GettableExpr) (_ ',' _ TupleValuesPattern)?)> */
		func() bool {
			position630, tokenIndex630 := position, tokenIndex
			{
				position631 := position
				{
					position632, tokenIndex632 := position, tokenIndex
					if !_rules[ruleValuePattern]() {
						goto l633
					}
					goto l632
				l633:
					position, tokenIndex = position632, tokenIndex632
					if !_rules[rulePlaceholder]() {
						goto l634
					}
					goto l632
				l634:
					position, tokenIndex = position632, tokenIndex632
					if !_rules[ruleIdentifier]() {
						goto l635
					}
					goto l632
				l635:
					position, tokenIndex = position632, tokenIndex632
					if !_rules[ruleExpr]() {
						goto l636
					}
					goto l632
				l636:
					position, tokenIndex = position632, tokenIndex632
					if !_rules[ruleGettableExpr]() {
						goto l630
					}
				}
			l632:
				{
					position637, tokenIndex637 := position, tokenIndex
					if !_rules[rule_]() {
						goto l637
					}
					if buffer[position] != rune(',') {
						goto l637
					}
					position++
					if !_rules[rule_]() {
						goto l637
					}
					if !_rules[ruleTupleValuesPattern]() {
						goto l637
					}
					goto l638
				l637:
					position, tokenIndex = position637, tokenIndex637
				}
			l638:
				add(ruleTupleValuesPattern, position631)
			}
			return true
		l630:
			position, tokenIndex = position630, tokenIndex630
			return false
		},
		/* 93 TuplePattern <- <('(' _ TupleValuesPattern _ ')')> */
		func() bool {
			position639, tokenIndex639 := position, tokenIndex
			{
				position640 := position
				if buffer[position] != rune('(') {
					goto l639
				}
				position++
				if !_rules[rule_]() {
					goto l639
				}
				if !_rules[ruleTupleValuesPattern]() {
					goto l639
				}
				if !_rules[rule_]() {
					goto l639
				}
				if buffer[position] != rune(')') {
					goto l639
				}
				position++
				add(ruleTuplePattern, position640)
			}
			return true
		l639:
			position, tokenIndex = position639, tokenIndex639
			return false
		},
		/* 94 ObjectFieldsPattern <- <(Identifier _ '=' _ (Identifier / Expr) (_ ',' _ ObjectFieldsPattern)?)> */
		func() bool {
			position641, tokenIndex641 := position, tokenIndex
			{
				position642 := position
				if !_rules[ruleIdentifier]() {
					goto l641
				}
				if !_rules[rule_]() {
					goto l641
				}
				if buffer[position] != rune('=') {
					goto l641
				}
				position++
				if !_rules[rule_]() {
					goto l641
				}
				{
					position643, tokenIndex643 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l644
					}
					goto l643
				l644:
					position, tokenIndex = position643, tokenIndex643
					if !_rules[ruleExpr]() {
						goto l641
					}
				}
			l643:
				{
					position645, tokenIndex645 := position, tokenIndex
					if !_rules[rule_]() {
						goto l645
					}
					if buffer[position] != rune(',') {
						goto l645
					}
					position++
					if !_rules[rule_]() {
						goto l645
					}
					if !_rules[ruleObjectFieldsPattern]() {
						goto l645
					}
					goto l646
				l645:
					position, tokenIndex = position645, tokenIndex645
				}
			l646:
				add(ruleObjectFieldsPattern, position642)
			}
			return true
		l641:
			position, tokenIndex = position641, tokenIndex641
			return false
		},
		/* 95 ObjectPattern <- <(Identifier _ '(' _ ObjectFieldsPattern? _ ')')> */
		func() bool {
			position647, tokenIndex647 := position, tokenIndex
			{
				position648 := position
				if !_rules[ruleIdentifier]() {
					goto l647
				}
				if !_rules[rule_]() {
					goto l647
				}
				if buffer[position] != rune('(') {
					goto l647
				}
				position++
				if !_rules[rule_]() {
					goto l647
				}
				{
					position649, tokenIndex649 := position, tokenIndex
					if !_rules[ruleObjectFieldsPattern]() {
						goto l649
					}
					goto l650
				l649:
					position, tokenIndex = position649, tokenIndex649
				}
			l650:
				if !_rules[rule_]() {
					goto l647
				}
				if buffer[position] != rune(')') {
					goto l647
				}
				position++
				add(ruleObjectPattern, position648)
			}
			return true
		l647:
			position, tokenIndex = position647, tokenIndex647
			return false
		},
		/* 96 Tuple <- <('(' _ Expr (_ ',' _ Expr)+ _ ')')> */
		func() bool {
			position651, tokenIndex651 := position, tokenIndex
			{
				position652 := position
				if buffer[position] != rune('(') {
					goto l651
				}
				position++
				if !_rules[rule_]() {
					goto l651
				}
				if !_rules[ruleExpr]() {
					goto l651
				}
				if !_rules[rule_]() {
					goto l651
				}
				if buffer[position] != rune(',') {
					goto l651
				}
				position++
				if !_rules[rule_]() {
					goto l651
				}
				if !_rules[ruleExpr]() {
					goto l651
				}
			l653:
				{
					position654, tokenIndex654 := position, tokenIndex
					if !_rules[rule_]() {
						goto l654
					}
					if buffer[position] != rune(',') {
						goto l654
					}
					position++
					if !_rules[rule_]() {
						goto l654
					}
					if !_rules[ruleExpr]() {
						goto l654
					}
					goto l653
				l654:
					position, tokenIndex = position654, tokenIndex654
				}
				if !_rules[rule_]() {
					goto l651
				}
				if buffer[position] != rune(')') {
					goto l651
				}
				position++
				add(ruleTuple, position652)
			}
			return true
		l651:
			position, tokenIndex = position651, tokenIndex651
			return false
		},
		/* 97 TupleRef <- <('(' _ Identifier (_ ',' _ Identifier)+ _ ')')> */
		func() bool {
			position655, tokenIndex655 := position, tokenIndex
			{
				position656 := position
				if buffer[position] != rune('(') {
					goto l655
				}
				position++
				if !_rules[rule_]() {
					goto l655
				}
				if !_rules[ruleIdentifier]() {
					goto l655
				}
				if !_rules[rule_]() {
					goto l655
				}
				if buffer[position] != rune(',') {
					goto l655
				}
				position++
				if !_rules[rule_]() {
					goto l655
				}
				if !_rules[ruleIdentifier]() {
					goto l655
				}
			l657:
				{
					position658, tokenIndex658 := position, tokenIndex
					if !_rules[rule_]() {
						goto l658
					}
					if buffer[position] != rune(',') {
						goto l658
					}
					position++
					if !_rules[rule_]() {
						goto l658
					}
					if !_rules[ruleIdentifier]() {
						goto l658
					}
					goto l657
				l658:
					position, tokenIndex = position658, tokenIndex658
				}
				if !_rules[rule_]() {
					goto l655
				}
				if buffer[position] != rune(')') {
					goto l655
				}
				position++
				add(ruleTupleRef, position656)
			}
			return true
		l655:
			position, tokenIndex = position655, tokenIndex655
			return false
		},
		/* 98 TupleAccess <- <('_' [0-9]+)> */
		func() bool {
			position659, tokenIndex659 := position, tokenIndex
			{
				position660 := position
				if buffer[position] != rune('_') {
					goto l659
				}
				position++
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l659
				}
				position++
			l661:
				{
					position662, tokenIndex662 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l662
					}
					position++
					goto l661
				l662:
					position, tokenIndex = position662, tokenIndex662
				}
				add(ruleTupleAccess, position660)
			}
			return true
		l659:
			position, tokenIndex = position659, tokenIndex659
			return false
		},
	}
	p.rules = _rules
	return nil
}

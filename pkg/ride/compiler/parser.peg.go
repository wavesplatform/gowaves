package compiler

// Code generated by peg -output=parser.peg.go ride.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleCode
	ruleDAppRoot
	ruleScriptRoot
	ruleWS
	ruleEOL
	ruleComment
	rule_
	ruleEOF
	ruleDirectiveName
	ruleUpperCaseString
	ruleIntString
	rulePathString
	ruleDirective
	ruleDeclaration
	ruleVariable
	ruleStrictVariable
	ruleFunc
	ruleFuncArgSeq
	ruleFuncArg
	ruleAnnotatedFunc
	ruleAnnotation
	ruleIdentifierSeq
	ruleAnnotationSeq
	ruleOrOp
	ruleAndOp
	ruleEqGroupOp
	ruleEqOp
	ruleNeOp
	ruleCompareGroupOp
	ruleGtOp
	ruleGeOp
	ruleLtOp
	ruleLeOp
	ruleConsOp
	ruleSumGroupOp
	ruleSumOp
	ruleSubOp
	ruleMultGroupOp
	ruleMulOp
	ruleDivOp
	ruleModOp
	ruleUnaryOp
	rulePositiveOp
	ruleNegativeOp
	ruleNotOp
	ruleReservedWords
	ruleConst
	ruleIdentifier
	ruleType
	ruleGenericType
	ruleTupleType
	ruleTypes
	ruleBase16
	ruleBase58
	ruleBase64
	ruleByteVector
	ruleBoolean
	ruleString
	ruleUnicodeChar
	ruleEscapedChar
	ruleChar
	ruleInteger
	ruleList
	ruleExprSeq
	ruleAtomExpr
	ruleMultGroupOpAtom
	ruleSumGroupOpAtom
	ruleConsOpAtom
	ruleCompareGroupOpAtom
	ruleEqualityGroupOpAtom
	ruleAndOpAtom
	ruleOrOpAtom
	ruleExpr
	ruleParExpr
	ruleGettableExpr
	ruleFunctionCallAccess
	ruleIdentifierAccess
	ruleListAccess
	ruleBlock
	ruleBlockWithoutPar
	ruleFunctionCall
	ruleFoldMacro
	ruleIfWithError
	ruleIf
	ruleFailedIfWithoutElse
	ruleMatch
	ruleCase
	rulePlaceholder
	ruleValuePattern
	ruleTupleValuesPattern
	ruleTuplePattern
	ruleObjectFieldsPattern
	ruleObjectPattern
	ruleTuple
	ruleTupleRef
	ruleTupleAccess
)

var rul3s = [...]string{
	"Unknown",
	"Code",
	"DAppRoot",
	"ScriptRoot",
	"WS",
	"EOL",
	"Comment",
	"_",
	"EOF",
	"DirectiveName",
	"UpperCaseString",
	"IntString",
	"PathString",
	"Directive",
	"Declaration",
	"Variable",
	"StrictVariable",
	"Func",
	"FuncArgSeq",
	"FuncArg",
	"AnnotatedFunc",
	"Annotation",
	"IdentifierSeq",
	"AnnotationSeq",
	"OrOp",
	"AndOp",
	"EqGroupOp",
	"EqOp",
	"NeOp",
	"CompareGroupOp",
	"GtOp",
	"GeOp",
	"LtOp",
	"LeOp",
	"ConsOp",
	"SumGroupOp",
	"SumOp",
	"SubOp",
	"MultGroupOp",
	"MulOp",
	"DivOp",
	"ModOp",
	"UnaryOp",
	"PositiveOp",
	"NegativeOp",
	"NotOp",
	"ReservedWords",
	"Const",
	"Identifier",
	"Type",
	"GenericType",
	"TupleType",
	"Types",
	"Base16",
	"Base58",
	"Base64",
	"ByteVector",
	"Boolean",
	"String",
	"UnicodeChar",
	"EscapedChar",
	"Char",
	"Integer",
	"List",
	"ExprSeq",
	"AtomExpr",
	"MultGroupOpAtom",
	"SumGroupOpAtom",
	"ConsOpAtom",
	"CompareGroupOpAtom",
	"EqualityGroupOpAtom",
	"AndOpAtom",
	"OrOpAtom",
	"Expr",
	"ParExpr",
	"GettableExpr",
	"FunctionCallAccess",
	"IdentifierAccess",
	"ListAccess",
	"Block",
	"BlockWithoutPar",
	"FunctionCall",
	"FoldMacro",
	"IfWithError",
	"If",
	"FailedIfWithoutElse",
	"Match",
	"Case",
	"Placeholder",
	"ValuePattern",
	"TupleValuesPattern",
	"TuplePattern",
	"ObjectFieldsPattern",
	"ObjectPattern",
	"Tuple",
	"TupleRef",
	"TupleAccess",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Buffer string
	buffer []rune
	rules  [97]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Code <- <(DAppRoot / ScriptRoot)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[ruleDAppRoot]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[ruleScriptRoot]() {
						goto l0
					}
				}
			l2:
				add(ruleCode, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 DAppRoot <- <(_ (Directive _)* (_ Declaration)* (_ AnnotatedFunc)* _ EOF)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
				if !_rules[rule_]() {
					goto l4
				}
			l6:
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l7
					}
					if !_rules[rule_]() {
						goto l7
					}
					goto l6
				l7:
					position, tokenIndex = position7, tokenIndex7
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[rule_]() {
						goto l9
					}
					if !_rules[ruleDeclaration]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
			l10:
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[rule_]() {
						goto l11
					}
					if !_rules[ruleAnnotatedFunc]() {
						goto l11
					}
					goto l10
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				if !_rules[rule_]() {
					goto l4
				}
				if !_rules[ruleEOF]() {
					goto l4
				}
				add(ruleDAppRoot, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 ScriptRoot <- <(_ (Directive _)* (_ Declaration)* _ Expr _ EOF)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[rule_]() {
					goto l12
				}
			l14:
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l15
					}
					if !_rules[rule_]() {
						goto l15
					}
					goto l14
				l15:
					position, tokenIndex = position15, tokenIndex15
				}
			l16:
				{
					position17, tokenIndex17 := position, tokenIndex
					if !_rules[rule_]() {
						goto l17
					}
					if !_rules[ruleDeclaration]() {
						goto l17
					}
					goto l16
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleExpr]() {
					goto l12
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleEOF]() {
					goto l12
				}
				add(ruleScriptRoot, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 WS <- <(' ' / '\t')> */
		func() bool {
			position18, tokenIndex18 := position, tokenIndex
			{
				position19 := position
				{
					position20, tokenIndex20 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l21
					}
					position++
					goto l20
				l21:
					position, tokenIndex = position20, tokenIndex20
					if buffer[position] != rune('\t') {
						goto l18
					}
					position++
				}
			l20:
				add(ruleWS, position19)
			}
			return true
		l18:
			position, tokenIndex = position18, tokenIndex18
			return false
		},
		/* 4 EOL <- <('\n' / '\r' / '\f')> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24, tokenIndex24 := position, tokenIndex
					if buffer[position] != rune('\n') {
						goto l25
					}
					position++
					goto l24
				l25:
					position, tokenIndex = position24, tokenIndex24
					if buffer[position] != rune('\r') {
						goto l26
					}
					position++
					goto l24
				l26:
					position, tokenIndex = position24, tokenIndex24
					if buffer[position] != rune('\f') {
						goto l22
					}
					position++
				}
			l24:
				add(ruleEOL, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 5 Comment <- <('#' (!('\r' / '^' / '\n') .)*)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				if buffer[position] != rune('#') {
					goto l27
				}
				position++
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					{
						position31, tokenIndex31 := position, tokenIndex
						{
							position32, tokenIndex32 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l33
							}
							position++
							goto l32
						l33:
							position, tokenIndex = position32, tokenIndex32
							if buffer[position] != rune('^') {
								goto l34
							}
							position++
							goto l32
						l34:
							position, tokenIndex = position32, tokenIndex32
							if buffer[position] != rune('\n') {
								goto l31
							}
							position++
						}
					l32:
						goto l30
					l31:
						position, tokenIndex = position31, tokenIndex31
					}
					if !matchDot() {
						goto l30
					}
					goto l29
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
				add(ruleComment, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 6 _ <- <(Comment / (WS / EOL)+)*> */
		func() bool {
			{
				position36 := position
			l37:
				{
					position38, tokenIndex38 := position, tokenIndex
					{
						position39, tokenIndex39 := position, tokenIndex
						if !_rules[ruleComment]() {
							goto l40
						}
						goto l39
					l40:
						position, tokenIndex = position39, tokenIndex39
						{
							position43, tokenIndex43 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l44
							}
							goto l43
						l44:
							position, tokenIndex = position43, tokenIndex43
							if !_rules[ruleEOL]() {
								goto l38
							}
						}
					l43:
					l41:
						{
							position42, tokenIndex42 := position, tokenIndex
							{
								position45, tokenIndex45 := position, tokenIndex
								if !_rules[ruleWS]() {
									goto l46
								}
								goto l45
							l46:
								position, tokenIndex = position45, tokenIndex45
								if !_rules[ruleEOL]() {
									goto l42
								}
							}
						l45:
							goto l41
						l42:
							position, tokenIndex = position42, tokenIndex42
						}
					}
				l39:
					goto l37
				l38:
					position, tokenIndex = position38, tokenIndex38
				}
				add(rule_, position36)
			}
			return true
		},
		/* 7 EOF <- <!.> */
		func() bool {
			position47, tokenIndex47 := position, tokenIndex
			{
				position48 := position
				{
					position49, tokenIndex49 := position, tokenIndex
					if !matchDot() {
						goto l49
					}
					goto l47
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
				add(ruleEOF, position48)
			}
			return true
		l47:
			position, tokenIndex = position47, tokenIndex47
			return false
		},
		/* 8 DirectiveName <- <([A-Z]+ ('_' / [A-Z])*)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l50
				}
				position++
			l52:
				{
					position53, tokenIndex53 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l53
					}
					position++
					goto l52
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				{
					position55, tokenIndex55 := position, tokenIndex
					{
						position56, tokenIndex56 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l57
						}
						position++
						goto l56
					l57:
						position, tokenIndex = position56, tokenIndex56
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l55
						}
						position++
					}
				l56:
					goto l54
				l55:
					position, tokenIndex = position55, tokenIndex55
				}
				add(ruleDirectiveName, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 9 UpperCaseString <- <[A-Z]+> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l58
				}
				position++
			l60:
				{
					position61, tokenIndex61 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l61
					}
					position++
					goto l60
				l61:
					position, tokenIndex = position61, tokenIndex61
				}
				add(ruleUpperCaseString, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 10 IntString <- <[0-9]+> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l62
				}
				position++
			l64:
				{
					position65, tokenIndex65 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l65
					}
					position++
					goto l64
				l65:
					position, tokenIndex = position65, tokenIndex65
				}
				add(ruleIntString, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 11 PathString <- <('_' / [a-z] / [A-Z] / [0-9] / '-' / '/' / ',' / '.')+> */
		func() bool {
			position66, tokenIndex66 := position, tokenIndex
			{
				position67 := position
				{
					position70, tokenIndex70 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l71
					}
					position++
					goto l70
				l71:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l72
					}
					position++
					goto l70
				l72:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l73
					}
					position++
					goto l70
				l73:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l74
					}
					position++
					goto l70
				l74:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('-') {
						goto l75
					}
					position++
					goto l70
				l75:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('/') {
						goto l76
					}
					position++
					goto l70
				l76:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune(',') {
						goto l77
					}
					position++
					goto l70
				l77:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('.') {
						goto l66
					}
					position++
				}
			l70:
			l68:
				{
					position69, tokenIndex69 := position, tokenIndex
					{
						position78, tokenIndex78 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l79
						}
						position++
						goto l78
					l79:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l80
						}
						position++
						goto l78
					l80:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l81
						}
						position++
						goto l78
					l81:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l82
						}
						position++
						goto l78
					l82:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('-') {
							goto l83
						}
						position++
						goto l78
					l83:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('/') {
							goto l84
						}
						position++
						goto l78
					l84:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune(',') {
							goto l85
						}
						position++
						goto l78
					l85:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('.') {
							goto l69
						}
						position++
					}
				l78:
					goto l68
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
				add(rulePathString, position67)
			}
			return true
		l66:
			position, tokenIndex = position66, tokenIndex66
			return false
		},
		/* 12 Directive <- <('{' '-' '#' WS+ DirectiveName WS+ (IntString / UpperCaseString / PathString) WS+ ('#' '-' '}'))> */
		func() bool {
			position86, tokenIndex86 := position, tokenIndex
			{
				position87 := position
				if buffer[position] != rune('{') {
					goto l86
				}
				position++
				if buffer[position] != rune('-') {
					goto l86
				}
				position++
				if buffer[position] != rune('#') {
					goto l86
				}
				position++
				if !_rules[ruleWS]() {
					goto l86
				}
			l88:
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l89
					}
					goto l88
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
				if !_rules[ruleDirectiveName]() {
					goto l86
				}
				if !_rules[ruleWS]() {
					goto l86
				}
			l90:
				{
					position91, tokenIndex91 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l91
					}
					goto l90
				l91:
					position, tokenIndex = position91, tokenIndex91
				}
				{
					position92, tokenIndex92 := position, tokenIndex
					if !_rules[ruleIntString]() {
						goto l93
					}
					goto l92
				l93:
					position, tokenIndex = position92, tokenIndex92
					if !_rules[ruleUpperCaseString]() {
						goto l94
					}
					goto l92
				l94:
					position, tokenIndex = position92, tokenIndex92
					if !_rules[rulePathString]() {
						goto l86
					}
				}
			l92:
				if !_rules[ruleWS]() {
					goto l86
				}
			l95:
				{
					position96, tokenIndex96 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l96
					}
					goto l95
				l96:
					position, tokenIndex = position96, tokenIndex96
				}
				if buffer[position] != rune('#') {
					goto l86
				}
				position++
				if buffer[position] != rune('-') {
					goto l86
				}
				position++
				if buffer[position] != rune('}') {
					goto l86
				}
				position++
				add(ruleDirective, position87)
			}
			return true
		l86:
			position, tokenIndex = position86, tokenIndex86
			return false
		},
		/* 13 Declaration <- <((Variable / StrictVariable / Func) _ ';'?)> */
		func() bool {
			position97, tokenIndex97 := position, tokenIndex
			{
				position98 := position
				{
					position99, tokenIndex99 := position, tokenIndex
					if !_rules[ruleVariable]() {
						goto l100
					}
					goto l99
				l100:
					position, tokenIndex = position99, tokenIndex99
					if !_rules[ruleStrictVariable]() {
						goto l101
					}
					goto l99
				l101:
					position, tokenIndex = position99, tokenIndex99
					if !_rules[ruleFunc]() {
						goto l97
					}
				}
			l99:
				if !_rules[rule_]() {
					goto l97
				}
				{
					position102, tokenIndex102 := position, tokenIndex
					if buffer[position] != rune(';') {
						goto l102
					}
					position++
					goto l103
				l102:
					position, tokenIndex = position102, tokenIndex102
				}
			l103:
				add(ruleDeclaration, position98)
			}
			return true
		l97:
			position, tokenIndex = position97, tokenIndex97
			return false
		},
		/* 14 Variable <- <('l' 'e' 't' _ (Identifier / TupleRef) _ '=' _ Expr)> */
		func() bool {
			position104, tokenIndex104 := position, tokenIndex
			{
				position105 := position
				if buffer[position] != rune('l') {
					goto l104
				}
				position++
				if buffer[position] != rune('e') {
					goto l104
				}
				position++
				if buffer[position] != rune('t') {
					goto l104
				}
				position++
				if !_rules[rule_]() {
					goto l104
				}
				{
					position106, tokenIndex106 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l107
					}
					goto l106
				l107:
					position, tokenIndex = position106, tokenIndex106
					if !_rules[ruleTupleRef]() {
						goto l104
					}
				}
			l106:
				if !_rules[rule_]() {
					goto l104
				}
				if buffer[position] != rune('=') {
					goto l104
				}
				position++
				if !_rules[rule_]() {
					goto l104
				}
				if !_rules[ruleExpr]() {
					goto l104
				}
				add(ruleVariable, position105)
			}
			return true
		l104:
			position, tokenIndex = position104, tokenIndex104
			return false
		},
		/* 15 StrictVariable <- <('s' 't' 'r' 'i' 'c' 't' _ (Identifier / TupleRef) _ '=' _ Expr)> */
		func() bool {
			position108, tokenIndex108 := position, tokenIndex
			{
				position109 := position
				if buffer[position] != rune('s') {
					goto l108
				}
				position++
				if buffer[position] != rune('t') {
					goto l108
				}
				position++
				if buffer[position] != rune('r') {
					goto l108
				}
				position++
				if buffer[position] != rune('i') {
					goto l108
				}
				position++
				if buffer[position] != rune('c') {
					goto l108
				}
				position++
				if buffer[position] != rune('t') {
					goto l108
				}
				position++
				if !_rules[rule_]() {
					goto l108
				}
				{
					position110, tokenIndex110 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l111
					}
					goto l110
				l111:
					position, tokenIndex = position110, tokenIndex110
					if !_rules[ruleTupleRef]() {
						goto l108
					}
				}
			l110:
				if !_rules[rule_]() {
					goto l108
				}
				if buffer[position] != rune('=') {
					goto l108
				}
				position++
				if !_rules[rule_]() {
					goto l108
				}
				if !_rules[ruleExpr]() {
					goto l108
				}
				add(ruleStrictVariable, position109)
			}
			return true
		l108:
			position, tokenIndex = position108, tokenIndex108
			return false
		},
		/* 16 Func <- <('f' 'u' 'n' 'c' _ Identifier _ '(' _ FuncArgSeq? _ ')' _ '=' _ Expr)> */
		func() bool {
			position112, tokenIndex112 := position, tokenIndex
			{
				position113 := position
				if buffer[position] != rune('f') {
					goto l112
				}
				position++
				if buffer[position] != rune('u') {
					goto l112
				}
				position++
				if buffer[position] != rune('n') {
					goto l112
				}
				position++
				if buffer[position] != rune('c') {
					goto l112
				}
				position++
				if !_rules[rule_]() {
					goto l112
				}
				if !_rules[ruleIdentifier]() {
					goto l112
				}
				if !_rules[rule_]() {
					goto l112
				}
				if buffer[position] != rune('(') {
					goto l112
				}
				position++
				if !_rules[rule_]() {
					goto l112
				}
				{
					position114, tokenIndex114 := position, tokenIndex
					if !_rules[ruleFuncArgSeq]() {
						goto l114
					}
					goto l115
				l114:
					position, tokenIndex = position114, tokenIndex114
				}
			l115:
				if !_rules[rule_]() {
					goto l112
				}
				if buffer[position] != rune(')') {
					goto l112
				}
				position++
				if !_rules[rule_]() {
					goto l112
				}
				if buffer[position] != rune('=') {
					goto l112
				}
				position++
				if !_rules[rule_]() {
					goto l112
				}
				if !_rules[ruleExpr]() {
					goto l112
				}
				add(ruleFunc, position113)
			}
			return true
		l112:
			position, tokenIndex = position112, tokenIndex112
			return false
		},
		/* 17 FuncArgSeq <- <(FuncArg (_ ',' _ FuncArgSeq)?)> */
		func() bool {
			position116, tokenIndex116 := position, tokenIndex
			{
				position117 := position
				if !_rules[ruleFuncArg]() {
					goto l116
				}
				{
					position118, tokenIndex118 := position, tokenIndex
					if !_rules[rule_]() {
						goto l118
					}
					if buffer[position] != rune(',') {
						goto l118
					}
					position++
					if !_rules[rule_]() {
						goto l118
					}
					if !_rules[ruleFuncArgSeq]() {
						goto l118
					}
					goto l119
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
			l119:
				add(ruleFuncArgSeq, position117)
			}
			return true
		l116:
			position, tokenIndex = position116, tokenIndex116
			return false
		},
		/* 18 FuncArg <- <(Identifier _ ':' _ Types)> */
		func() bool {
			position120, tokenIndex120 := position, tokenIndex
			{
				position121 := position
				if !_rules[ruleIdentifier]() {
					goto l120
				}
				if !_rules[rule_]() {
					goto l120
				}
				if buffer[position] != rune(':') {
					goto l120
				}
				position++
				if !_rules[rule_]() {
					goto l120
				}
				if !_rules[ruleTypes]() {
					goto l120
				}
				add(ruleFuncArg, position121)
			}
			return true
		l120:
			position, tokenIndex = position120, tokenIndex120
			return false
		},
		/* 19 AnnotatedFunc <- <(AnnotationSeq _ Func)> */
		func() bool {
			position122, tokenIndex122 := position, tokenIndex
			{
				position123 := position
				if !_rules[ruleAnnotationSeq]() {
					goto l122
				}
				if !_rules[rule_]() {
					goto l122
				}
				if !_rules[ruleFunc]() {
					goto l122
				}
				add(ruleAnnotatedFunc, position123)
			}
			return true
		l122:
			position, tokenIndex = position122, tokenIndex122
			return false
		},
		/* 20 Annotation <- <('@' Identifier _ '(' _ IdentifierSeq _ ')')> */
		func() bool {
			position124, tokenIndex124 := position, tokenIndex
			{
				position125 := position
				if buffer[position] != rune('@') {
					goto l124
				}
				position++
				if !_rules[ruleIdentifier]() {
					goto l124
				}
				if !_rules[rule_]() {
					goto l124
				}
				if buffer[position] != rune('(') {
					goto l124
				}
				position++
				if !_rules[rule_]() {
					goto l124
				}
				if !_rules[ruleIdentifierSeq]() {
					goto l124
				}
				if !_rules[rule_]() {
					goto l124
				}
				if buffer[position] != rune(')') {
					goto l124
				}
				position++
				add(ruleAnnotation, position125)
			}
			return true
		l124:
			position, tokenIndex = position124, tokenIndex124
			return false
		},
		/* 21 IdentifierSeq <- <(Identifier (_ ',' _ IdentifierSeq)?)> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				if !_rules[ruleIdentifier]() {
					goto l126
				}
				{
					position128, tokenIndex128 := position, tokenIndex
					if !_rules[rule_]() {
						goto l128
					}
					if buffer[position] != rune(',') {
						goto l128
					}
					position++
					if !_rules[rule_]() {
						goto l128
					}
					if !_rules[ruleIdentifierSeq]() {
						goto l128
					}
					goto l129
				l128:
					position, tokenIndex = position128, tokenIndex128
				}
			l129:
				add(ruleIdentifierSeq, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 22 AnnotationSeq <- <(Annotation (_ AnnotationSeq)?)> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				if !_rules[ruleAnnotation]() {
					goto l130
				}
				{
					position132, tokenIndex132 := position, tokenIndex
					if !_rules[rule_]() {
						goto l132
					}
					if !_rules[ruleAnnotationSeq]() {
						goto l132
					}
					goto l133
				l132:
					position, tokenIndex = position132, tokenIndex132
				}
			l133:
				add(ruleAnnotationSeq, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 23 OrOp <- <('|' '|')> */
		func() bool {
			position134, tokenIndex134 := position, tokenIndex
			{
				position135 := position
				if buffer[position] != rune('|') {
					goto l134
				}
				position++
				if buffer[position] != rune('|') {
					goto l134
				}
				position++
				add(ruleOrOp, position135)
			}
			return true
		l134:
			position, tokenIndex = position134, tokenIndex134
			return false
		},
		/* 24 AndOp <- <('&' '&')> */
		func() bool {
			position136, tokenIndex136 := position, tokenIndex
			{
				position137 := position
				if buffer[position] != rune('&') {
					goto l136
				}
				position++
				if buffer[position] != rune('&') {
					goto l136
				}
				position++
				add(ruleAndOp, position137)
			}
			return true
		l136:
			position, tokenIndex = position136, tokenIndex136
			return false
		},
		/* 25 EqGroupOp <- <(EqOp / NeOp)> */
		func() bool {
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
				{
					position140, tokenIndex140 := position, tokenIndex
					if !_rules[ruleEqOp]() {
						goto l141
					}
					goto l140
				l141:
					position, tokenIndex = position140, tokenIndex140
					if !_rules[ruleNeOp]() {
						goto l138
					}
				}
			l140:
				add(ruleEqGroupOp, position139)
			}
			return true
		l138:
			position, tokenIndex = position138, tokenIndex138
			return false
		},
		/* 26 EqOp <- <('=' '=')> */
		func() bool {
			position142, tokenIndex142 := position, tokenIndex
			{
				position143 := position
				if buffer[position] != rune('=') {
					goto l142
				}
				position++
				if buffer[position] != rune('=') {
					goto l142
				}
				position++
				add(ruleEqOp, position143)
			}
			return true
		l142:
			position, tokenIndex = position142, tokenIndex142
			return false
		},
		/* 27 NeOp <- <('!' '=')> */
		func() bool {
			position144, tokenIndex144 := position, tokenIndex
			{
				position145 := position
				if buffer[position] != rune('!') {
					goto l144
				}
				position++
				if buffer[position] != rune('=') {
					goto l144
				}
				position++
				add(ruleNeOp, position145)
			}
			return true
		l144:
			position, tokenIndex = position144, tokenIndex144
			return false
		},
		/* 28 CompareGroupOp <- <(GtOp / GeOp / LtOp / LeOp)> */
		func() bool {
			position146, tokenIndex146 := position, tokenIndex
			{
				position147 := position
				{
					position148, tokenIndex148 := position, tokenIndex
					if !_rules[ruleGtOp]() {
						goto l149
					}
					goto l148
				l149:
					position, tokenIndex = position148, tokenIndex148
					if !_rules[ruleGeOp]() {
						goto l150
					}
					goto l148
				l150:
					position, tokenIndex = position148, tokenIndex148
					if !_rules[ruleLtOp]() {
						goto l151
					}
					goto l148
				l151:
					position, tokenIndex = position148, tokenIndex148
					if !_rules[ruleLeOp]() {
						goto l146
					}
				}
			l148:
				add(ruleCompareGroupOp, position147)
			}
			return true
		l146:
			position, tokenIndex = position146, tokenIndex146
			return false
		},
		/* 29 GtOp <- <('>' !'=')> */
		func() bool {
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				if buffer[position] != rune('>') {
					goto l152
				}
				position++
				{
					position154, tokenIndex154 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l154
					}
					position++
					goto l152
				l154:
					position, tokenIndex = position154, tokenIndex154
				}
				add(ruleGtOp, position153)
			}
			return true
		l152:
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 30 GeOp <- <('>' '=')> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				if buffer[position] != rune('>') {
					goto l155
				}
				position++
				if buffer[position] != rune('=') {
					goto l155
				}
				position++
				add(ruleGeOp, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 31 LtOp <- <('<' !'=')> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				if buffer[position] != rune('<') {
					goto l157
				}
				position++
				{
					position159, tokenIndex159 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l159
					}
					position++
					goto l157
				l159:
					position, tokenIndex = position159, tokenIndex159
				}
				add(ruleLtOp, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 32 LeOp <- <('<' '=')> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				if buffer[position] != rune('<') {
					goto l160
				}
				position++
				if buffer[position] != rune('=') {
					goto l160
				}
				position++
				add(ruleLeOp, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 33 ConsOp <- <(':' ':')> */
		func() bool {
			position162, tokenIndex162 := position, tokenIndex
			{
				position163 := position
				if buffer[position] != rune(':') {
					goto l162
				}
				position++
				if buffer[position] != rune(':') {
					goto l162
				}
				position++
				add(ruleConsOp, position163)
			}
			return true
		l162:
			position, tokenIndex = position162, tokenIndex162
			return false
		},
		/* 34 SumGroupOp <- <(SumOp / SubOp)> */
		func() bool {
			position164, tokenIndex164 := position, tokenIndex
			{
				position165 := position
				{
					position166, tokenIndex166 := position, tokenIndex
					if !_rules[ruleSumOp]() {
						goto l167
					}
					goto l166
				l167:
					position, tokenIndex = position166, tokenIndex166
					if !_rules[ruleSubOp]() {
						goto l164
					}
				}
			l166:
				add(ruleSumGroupOp, position165)
			}
			return true
		l164:
			position, tokenIndex = position164, tokenIndex164
			return false
		},
		/* 35 SumOp <- <'+'> */
		func() bool {
			position168, tokenIndex168 := position, tokenIndex
			{
				position169 := position
				if buffer[position] != rune('+') {
					goto l168
				}
				position++
				add(ruleSumOp, position169)
			}
			return true
		l168:
			position, tokenIndex = position168, tokenIndex168
			return false
		},
		/* 36 SubOp <- <'-'> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				if buffer[position] != rune('-') {
					goto l170
				}
				position++
				add(ruleSubOp, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 37 MultGroupOp <- <(MulOp / DivOp / ModOp)> */
		func() bool {
			position172, tokenIndex172 := position, tokenIndex
			{
				position173 := position
				{
					position174, tokenIndex174 := position, tokenIndex
					if !_rules[ruleMulOp]() {
						goto l175
					}
					goto l174
				l175:
					position, tokenIndex = position174, tokenIndex174
					if !_rules[ruleDivOp]() {
						goto l176
					}
					goto l174
				l176:
					position, tokenIndex = position174, tokenIndex174
					if !_rules[ruleModOp]() {
						goto l172
					}
				}
			l174:
				add(ruleMultGroupOp, position173)
			}
			return true
		l172:
			position, tokenIndex = position172, tokenIndex172
			return false
		},
		/* 38 MulOp <- <'*'> */
		func() bool {
			position177, tokenIndex177 := position, tokenIndex
			{
				position178 := position
				if buffer[position] != rune('*') {
					goto l177
				}
				position++
				add(ruleMulOp, position178)
			}
			return true
		l177:
			position, tokenIndex = position177, tokenIndex177
			return false
		},
		/* 39 DivOp <- <'/'> */
		func() bool {
			position179, tokenIndex179 := position, tokenIndex
			{
				position180 := position
				if buffer[position] != rune('/') {
					goto l179
				}
				position++
				add(ruleDivOp, position180)
			}
			return true
		l179:
			position, tokenIndex = position179, tokenIndex179
			return false
		},
		/* 40 ModOp <- <'%'> */
		func() bool {
			position181, tokenIndex181 := position, tokenIndex
			{
				position182 := position
				if buffer[position] != rune('%') {
					goto l181
				}
				position++
				add(ruleModOp, position182)
			}
			return true
		l181:
			position, tokenIndex = position181, tokenIndex181
			return false
		},
		/* 41 UnaryOp <- <(PositiveOp / NegativeOp / NotOp)> */
		func() bool {
			position183, tokenIndex183 := position, tokenIndex
			{
				position184 := position
				{
					position185, tokenIndex185 := position, tokenIndex
					if !_rules[rulePositiveOp]() {
						goto l186
					}
					goto l185
				l186:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[ruleNegativeOp]() {
						goto l187
					}
					goto l185
				l187:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[ruleNotOp]() {
						goto l183
					}
				}
			l185:
				add(ruleUnaryOp, position184)
			}
			return true
		l183:
			position, tokenIndex = position183, tokenIndex183
			return false
		},
		/* 42 PositiveOp <- <'+'> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				if buffer[position] != rune('+') {
					goto l188
				}
				position++
				add(rulePositiveOp, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 43 NegativeOp <- <('-' !'#')> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if buffer[position] != rune('-') {
					goto l190
				}
				position++
				{
					position192, tokenIndex192 := position, tokenIndex
					if buffer[position] != rune('#') {
						goto l192
					}
					position++
					goto l190
				l192:
					position, tokenIndex = position192, tokenIndex192
				}
				add(ruleNegativeOp, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 44 NotOp <- <'!'> */
		func() bool {
			position193, tokenIndex193 := position, tokenIndex
			{
				position194 := position
				if buffer[position] != rune('!') {
					goto l193
				}
				position++
				add(ruleNotOp, position194)
			}
			return true
		l193:
			position, tokenIndex = position193, tokenIndex193
			return false
		},
		/* 45 ReservedWords <- <(('l' 'e' 't') / ('s' 't' 'r' 'i' 'c' 't') / ('b' 'a' 's' 'e' '1' '6') / ('b' 'a' 's' 'e' '5' '8') / ('b' 'a' 's' 'e' '6' '4') / ('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e') / ('i' 'f') / ('t' 'h' 'e' 'n') / ('e' 'l' 's' 'e') / ('m' 'a' 't' 'c' 'h') / ('c' 'a' 's' 'e') / ('f' 'u' 'n' 'c') / ('F' 'O' 'L' 'D'))> */
		func() bool {
			position195, tokenIndex195 := position, tokenIndex
			{
				position196 := position
				{
					position197, tokenIndex197 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l198
					}
					position++
					if buffer[position] != rune('e') {
						goto l198
					}
					position++
					if buffer[position] != rune('t') {
						goto l198
					}
					position++
					goto l197
				l198:
					position, tokenIndex = position197, tokenIndex197
					if buffer[position] != rune('s') {
						goto l199
					}
					position++
					if buffer[position] != rune('t') {
						goto l199
					}
					position++
					if buffer[position] != rune('r') {
						goto l199
					}
					position++
					if buffer[position] != rune('i') {
						goto l199
					}
					position++
					if buffer[position] != rune('c') {
						goto l199
					}
					position++
					if buffer[position] != rune('t') {
						goto l199
					}
					position++
					goto l197
				l199:
					position, tokenIndex = position197, tokenIndex197
					if buffer[position] != rune('b') {
						goto l200
					}
					position++
					if buffer[position] != rune('a') {
						goto l200
					}
					position++
					if buffer[position] != rune('s') {
						goto l200
					}
					position++
					if buffer[position] != rune('e') {
						goto l200
					}
					position++
					if buffer[position] != rune('1') {
						goto l200
					}
					position++
					if buffer[position] != rune('6') {
						goto l200
					}
					position++
					goto l197
				l200:
					position, tokenIndex = position197, tokenIndex197
					if buffer[position] != rune('b') {
						goto l201
					}
					position++
					if buffer[position] != rune('a') {
						goto l201
					}
					position++
					if buffer[position] != rune('s') {
						goto l201
					}
					position++
					if buffer[position] != rune('e') {
						goto l201
					}
					position++
					if buffer[position] != rune('5') {
						goto l201
					}
					position++
					if buffer[position] != rune('8') {
						goto l201
					}
					position++
					goto l197
				l201:
					position, tokenIndex = position197, tokenIndex197
					if buffer[position] != rune('b') {
						goto l202
					}
					position++
					if buffer[position] != rune('a') {
						goto l202
					}
					position++
					if buffer[position] != rune('s') {
						goto l202
					}
					position++
					if buffer[position] != rune('e') {
						goto l202
					}
					position++
					if buffer[position] != rune('6') {
						goto l202
					}
					position++
					if buffer[position] != rune('4') {
						goto l202
					}
					position++
					goto l197
				l202:
					position, tokenIndex = position197, tokenIndex197
					if buffer[position] != rune('t') {
						goto l203
					}
					position++
					if buffer[position] != rune('r') {
						goto l203
					}
					position++
					if buffer[position] != rune('u') {
						goto l203
					}
					position++
					if buffer[position] != rune('e') {
						goto l203
					}
					position++
					goto l197
				l203:
					position, tokenIndex = position197, tokenIndex197
					if buffer[position] != rune('f') {
						goto l204
					}
					position++
					if buffer[position] != rune('a') {
						goto l204
					}
					position++
					if buffer[position] != rune('l') {
						goto l204
					}
					position++
					if buffer[position] != rune('s') {
						goto l204
					}
					position++
					if buffer[position] != rune('e') {
						goto l204
					}
					position++
					goto l197
				l204:
					position, tokenIndex = position197, tokenIndex197
					if buffer[position] != rune('i') {
						goto l205
					}
					position++
					if buffer[position] != rune('f') {
						goto l205
					}
					position++
					goto l197
				l205:
					position, tokenIndex = position197, tokenIndex197
					if buffer[position] != rune('t') {
						goto l206
					}
					position++
					if buffer[position] != rune('h') {
						goto l206
					}
					position++
					if buffer[position] != rune('e') {
						goto l206
					}
					position++
					if buffer[position] != rune('n') {
						goto l206
					}
					position++
					goto l197
				l206:
					position, tokenIndex = position197, tokenIndex197
					if buffer[position] != rune('e') {
						goto l207
					}
					position++
					if buffer[position] != rune('l') {
						goto l207
					}
					position++
					if buffer[position] != rune('s') {
						goto l207
					}
					position++
					if buffer[position] != rune('e') {
						goto l207
					}
					position++
					goto l197
				l207:
					position, tokenIndex = position197, tokenIndex197
					if buffer[position] != rune('m') {
						goto l208
					}
					position++
					if buffer[position] != rune('a') {
						goto l208
					}
					position++
					if buffer[position] != rune('t') {
						goto l208
					}
					position++
					if buffer[position] != rune('c') {
						goto l208
					}
					position++
					if buffer[position] != rune('h') {
						goto l208
					}
					position++
					goto l197
				l208:
					position, tokenIndex = position197, tokenIndex197
					if buffer[position] != rune('c') {
						goto l209
					}
					position++
					if buffer[position] != rune('a') {
						goto l209
					}
					position++
					if buffer[position] != rune('s') {
						goto l209
					}
					position++
					if buffer[position] != rune('e') {
						goto l209
					}
					position++
					goto l197
				l209:
					position, tokenIndex = position197, tokenIndex197
					if buffer[position] != rune('f') {
						goto l210
					}
					position++
					if buffer[position] != rune('u') {
						goto l210
					}
					position++
					if buffer[position] != rune('n') {
						goto l210
					}
					position++
					if buffer[position] != rune('c') {
						goto l210
					}
					position++
					goto l197
				l210:
					position, tokenIndex = position197, tokenIndex197
					if buffer[position] != rune('F') {
						goto l195
					}
					position++
					if buffer[position] != rune('O') {
						goto l195
					}
					position++
					if buffer[position] != rune('L') {
						goto l195
					}
					position++
					if buffer[position] != rune('D') {
						goto l195
					}
					position++
				}
			l197:
				add(ruleReservedWords, position196)
			}
			return true
		l195:
			position, tokenIndex = position195, tokenIndex195
			return false
		},
		/* 46 Const <- <(Integer / String / ByteVector / Boolean)> */
		func() bool {
			position211, tokenIndex211 := position, tokenIndex
			{
				position212 := position
				{
					position213, tokenIndex213 := position, tokenIndex
					if !_rules[ruleInteger]() {
						goto l214
					}
					goto l213
				l214:
					position, tokenIndex = position213, tokenIndex213
					if !_rules[ruleString]() {
						goto l215
					}
					goto l213
				l215:
					position, tokenIndex = position213, tokenIndex213
					if !_rules[ruleByteVector]() {
						goto l216
					}
					goto l213
				l216:
					position, tokenIndex = position213, tokenIndex213
					if !_rules[ruleBoolean]() {
						goto l211
					}
				}
			l213:
				add(ruleConst, position212)
			}
			return true
		l211:
			position, tokenIndex = position211, tokenIndex211
			return false
		},
		/* 47 Identifier <- <((!ReservedWords ([A-Z] / [a-z] / ('_' &([A-Z] / [a-z]))) ([A-Z] / [a-z] / [0-9] / ('_' !'_'))*) / (ReservedWords ([A-Z] / [a-z] / [0-9] / ('_' !'_'))+))> */
		func() bool {
			position217, tokenIndex217 := position, tokenIndex
			{
				position218 := position
				{
					position219, tokenIndex219 := position, tokenIndex
					{
						position221, tokenIndex221 := position, tokenIndex
						if !_rules[ruleReservedWords]() {
							goto l221
						}
						goto l220
					l221:
						position, tokenIndex = position221, tokenIndex221
					}
					{
						position222, tokenIndex222 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l223
						}
						position++
						goto l222
					l223:
						position, tokenIndex = position222, tokenIndex222
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l224
						}
						position++
						goto l222
					l224:
						position, tokenIndex = position222, tokenIndex222
						if buffer[position] != rune('_') {
							goto l220
						}
						position++
						{
							position225, tokenIndex225 := position, tokenIndex
							{
								position226, tokenIndex226 := position, tokenIndex
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l227
								}
								position++
								goto l226
							l227:
								position, tokenIndex = position226, tokenIndex226
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l220
								}
								position++
							}
						l226:
							position, tokenIndex = position225, tokenIndex225
						}
					}
				l222:
				l228:
					{
						position229, tokenIndex229 := position, tokenIndex
						{
							position230, tokenIndex230 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l231
							}
							position++
							goto l230
						l231:
							position, tokenIndex = position230, tokenIndex230
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l232
							}
							position++
							goto l230
						l232:
							position, tokenIndex = position230, tokenIndex230
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l233
							}
							position++
							goto l230
						l233:
							position, tokenIndex = position230, tokenIndex230
							if buffer[position] != rune('_') {
								goto l229
							}
							position++
							{
								position234, tokenIndex234 := position, tokenIndex
								if buffer[position] != rune('_') {
									goto l234
								}
								position++
								goto l229
							l234:
								position, tokenIndex = position234, tokenIndex234
							}
						}
					l230:
						goto l228
					l229:
						position, tokenIndex = position229, tokenIndex229
					}
					goto l219
				l220:
					position, tokenIndex = position219, tokenIndex219
					if !_rules[ruleReservedWords]() {
						goto l217
					}
					{
						position237, tokenIndex237 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l238
						}
						position++
						goto l237
					l238:
						position, tokenIndex = position237, tokenIndex237
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l239
						}
						position++
						goto l237
					l239:
						position, tokenIndex = position237, tokenIndex237
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l240
						}
						position++
						goto l237
					l240:
						position, tokenIndex = position237, tokenIndex237
						if buffer[position] != rune('_') {
							goto l217
						}
						position++
						{
							position241, tokenIndex241 := position, tokenIndex
							if buffer[position] != rune('_') {
								goto l241
							}
							position++
							goto l217
						l241:
							position, tokenIndex = position241, tokenIndex241
						}
					}
				l237:
				l235:
					{
						position236, tokenIndex236 := position, tokenIndex
						{
							position242, tokenIndex242 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l243
							}
							position++
							goto l242
						l243:
							position, tokenIndex = position242, tokenIndex242
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l244
							}
							position++
							goto l242
						l244:
							position, tokenIndex = position242, tokenIndex242
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l245
							}
							position++
							goto l242
						l245:
							position, tokenIndex = position242, tokenIndex242
							if buffer[position] != rune('_') {
								goto l236
							}
							position++
							{
								position246, tokenIndex246 := position, tokenIndex
								if buffer[position] != rune('_') {
									goto l246
								}
								position++
								goto l236
							l246:
								position, tokenIndex = position246, tokenIndex246
							}
						}
					l242:
						goto l235
					l236:
						position, tokenIndex = position236, tokenIndex236
					}
				}
			l219:
				add(ruleIdentifier, position218)
			}
			return true
		l217:
			position, tokenIndex = position217, tokenIndex217
			return false
		},
		/* 48 Type <- <(([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])*)> */
		func() bool {
			position247, tokenIndex247 := position, tokenIndex
			{
				position248 := position
				{
					position249, tokenIndex249 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l250
					}
					position++
					goto l249
				l250:
					position, tokenIndex = position249, tokenIndex249
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l247
					}
					position++
				}
			l249:
			l251:
				{
					position252, tokenIndex252 := position, tokenIndex
					{
						position253, tokenIndex253 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l254
						}
						position++
						goto l253
					l254:
						position, tokenIndex = position253, tokenIndex253
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l255
						}
						position++
						goto l253
					l255:
						position, tokenIndex = position253, tokenIndex253
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l252
						}
						position++
					}
				l253:
					goto l251
				l252:
					position, tokenIndex = position252, tokenIndex252
				}
				add(ruleType, position248)
			}
			return true
		l247:
			position, tokenIndex = position247, tokenIndex247
			return false
		},
		/* 49 GenericType <- <(Type _ '[' _ Types _ ']')> */
		func() bool {
			position256, tokenIndex256 := position, tokenIndex
			{
				position257 := position
				if !_rules[ruleType]() {
					goto l256
				}
				if !_rules[rule_]() {
					goto l256
				}
				if buffer[position] != rune('[') {
					goto l256
				}
				position++
				if !_rules[rule_]() {
					goto l256
				}
				if !_rules[ruleTypes]() {
					goto l256
				}
				if !_rules[rule_]() {
					goto l256
				}
				if buffer[position] != rune(']') {
					goto l256
				}
				position++
				add(ruleGenericType, position257)
			}
			return true
		l256:
			position, tokenIndex = position256, tokenIndex256
			return false
		},
		/* 50 TupleType <- <('(' _ Types _ (',' _ Types)+ _ ')')> */
		func() bool {
			position258, tokenIndex258 := position, tokenIndex
			{
				position259 := position
				if buffer[position] != rune('(') {
					goto l258
				}
				position++
				if !_rules[rule_]() {
					goto l258
				}
				if !_rules[ruleTypes]() {
					goto l258
				}
				if !_rules[rule_]() {
					goto l258
				}
				if buffer[position] != rune(',') {
					goto l258
				}
				position++
				if !_rules[rule_]() {
					goto l258
				}
				if !_rules[ruleTypes]() {
					goto l258
				}
			l260:
				{
					position261, tokenIndex261 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l261
					}
					position++
					if !_rules[rule_]() {
						goto l261
					}
					if !_rules[ruleTypes]() {
						goto l261
					}
					goto l260
				l261:
					position, tokenIndex = position261, tokenIndex261
				}
				if !_rules[rule_]() {
					goto l258
				}
				if buffer[position] != rune(')') {
					goto l258
				}
				position++
				add(ruleTupleType, position259)
			}
			return true
		l258:
			position, tokenIndex = position258, tokenIndex258
			return false
		},
		/* 51 Types <- <((GenericType / TupleType / Type) (_ '|' _ Types)?)> */
		func() bool {
			position262, tokenIndex262 := position, tokenIndex
			{
				position263 := position
				{
					position264, tokenIndex264 := position, tokenIndex
					if !_rules[ruleGenericType]() {
						goto l265
					}
					goto l264
				l265:
					position, tokenIndex = position264, tokenIndex264
					if !_rules[ruleTupleType]() {
						goto l266
					}
					goto l264
				l266:
					position, tokenIndex = position264, tokenIndex264
					if !_rules[ruleType]() {
						goto l262
					}
				}
			l264:
				{
					position267, tokenIndex267 := position, tokenIndex
					if !_rules[rule_]() {
						goto l267
					}
					if buffer[position] != rune('|') {
						goto l267
					}
					position++
					if !_rules[rule_]() {
						goto l267
					}
					if !_rules[ruleTypes]() {
						goto l267
					}
					goto l268
				l267:
					position, tokenIndex = position267, tokenIndex267
				}
			l268:
				add(ruleTypes, position263)
			}
			return true
		l262:
			position, tokenIndex = position262, tokenIndex262
			return false
		},
		/* 52 Base16 <- <('b' 'a' 's' 'e' '1' '6' '\'' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')* '\'')> */
		func() bool {
			position269, tokenIndex269 := position, tokenIndex
			{
				position270 := position
				if buffer[position] != rune('b') {
					goto l269
				}
				position++
				if buffer[position] != rune('a') {
					goto l269
				}
				position++
				if buffer[position] != rune('s') {
					goto l269
				}
				position++
				if buffer[position] != rune('e') {
					goto l269
				}
				position++
				if buffer[position] != rune('1') {
					goto l269
				}
				position++
				if buffer[position] != rune('6') {
					goto l269
				}
				position++
				if buffer[position] != rune('\'') {
					goto l269
				}
				position++
			l271:
				{
					position272, tokenIndex272 := position, tokenIndex
					{
						position273, tokenIndex273 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l274
						}
						position++
						goto l273
					l274:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('A') {
							goto l275
						}
						position++
						goto l273
					l275:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('B') {
							goto l276
						}
						position++
						goto l273
					l276:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('C') {
							goto l277
						}
						position++
						goto l273
					l277:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('D') {
							goto l278
						}
						position++
						goto l273
					l278:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('E') {
							goto l279
						}
						position++
						goto l273
					l279:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('F') {
							goto l280
						}
						position++
						goto l273
					l280:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('a') {
							goto l281
						}
						position++
						goto l273
					l281:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('b') {
							goto l282
						}
						position++
						goto l273
					l282:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('c') {
							goto l283
						}
						position++
						goto l273
					l283:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('d') {
							goto l284
						}
						position++
						goto l273
					l284:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('e') {
							goto l285
						}
						position++
						goto l273
					l285:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('f') {
							goto l272
						}
						position++
					}
				l273:
					goto l271
				l272:
					position, tokenIndex = position272, tokenIndex272
				}
				if buffer[position] != rune('\'') {
					goto l269
				}
				position++
				add(ruleBase16, position270)
			}
			return true
		l269:
			position, tokenIndex = position269, tokenIndex269
			return false
		},
		/* 53 Base58 <- <('b' 'a' 's' 'e' '5' '8' '\'' ('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'J' / 'K' / 'L' / 'M' / 'N' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z')* '\'')> */
		func() bool {
			position286, tokenIndex286 := position, tokenIndex
			{
				position287 := position
				if buffer[position] != rune('b') {
					goto l286
				}
				position++
				if buffer[position] != rune('a') {
					goto l286
				}
				position++
				if buffer[position] != rune('s') {
					goto l286
				}
				position++
				if buffer[position] != rune('e') {
					goto l286
				}
				position++
				if buffer[position] != rune('5') {
					goto l286
				}
				position++
				if buffer[position] != rune('8') {
					goto l286
				}
				position++
				if buffer[position] != rune('\'') {
					goto l286
				}
				position++
			l288:
				{
					position289, tokenIndex289 := position, tokenIndex
					{
						position290, tokenIndex290 := position, tokenIndex
						if buffer[position] != rune('1') {
							goto l291
						}
						position++
						goto l290
					l291:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('2') {
							goto l292
						}
						position++
						goto l290
					l292:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('3') {
							goto l293
						}
						position++
						goto l290
					l293:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('4') {
							goto l294
						}
						position++
						goto l290
					l294:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('5') {
							goto l295
						}
						position++
						goto l290
					l295:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('6') {
							goto l296
						}
						position++
						goto l290
					l296:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('7') {
							goto l297
						}
						position++
						goto l290
					l297:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('8') {
							goto l298
						}
						position++
						goto l290
					l298:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('9') {
							goto l299
						}
						position++
						goto l290
					l299:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('A') {
							goto l300
						}
						position++
						goto l290
					l300:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('B') {
							goto l301
						}
						position++
						goto l290
					l301:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('C') {
							goto l302
						}
						position++
						goto l290
					l302:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('D') {
							goto l303
						}
						position++
						goto l290
					l303:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('E') {
							goto l304
						}
						position++
						goto l290
					l304:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('F') {
							goto l305
						}
						position++
						goto l290
					l305:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('G') {
							goto l306
						}
						position++
						goto l290
					l306:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('H') {
							goto l307
						}
						position++
						goto l290
					l307:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('J') {
							goto l308
						}
						position++
						goto l290
					l308:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('K') {
							goto l309
						}
						position++
						goto l290
					l309:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('L') {
							goto l310
						}
						position++
						goto l290
					l310:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('M') {
							goto l311
						}
						position++
						goto l290
					l311:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('N') {
							goto l312
						}
						position++
						goto l290
					l312:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('P') {
							goto l313
						}
						position++
						goto l290
					l313:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('Q') {
							goto l314
						}
						position++
						goto l290
					l314:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('R') {
							goto l315
						}
						position++
						goto l290
					l315:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('S') {
							goto l316
						}
						position++
						goto l290
					l316:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('T') {
							goto l317
						}
						position++
						goto l290
					l317:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('U') {
							goto l318
						}
						position++
						goto l290
					l318:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('V') {
							goto l319
						}
						position++
						goto l290
					l319:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('W') {
							goto l320
						}
						position++
						goto l290
					l320:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('X') {
							goto l321
						}
						position++
						goto l290
					l321:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('Y') {
							goto l322
						}
						position++
						goto l290
					l322:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('Z') {
							goto l323
						}
						position++
						goto l290
					l323:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('a') {
							goto l324
						}
						position++
						goto l290
					l324:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('b') {
							goto l325
						}
						position++
						goto l290
					l325:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('c') {
							goto l326
						}
						position++
						goto l290
					l326:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('d') {
							goto l327
						}
						position++
						goto l290
					l327:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('e') {
							goto l328
						}
						position++
						goto l290
					l328:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('f') {
							goto l329
						}
						position++
						goto l290
					l329:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('g') {
							goto l330
						}
						position++
						goto l290
					l330:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('h') {
							goto l331
						}
						position++
						goto l290
					l331:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('i') {
							goto l332
						}
						position++
						goto l290
					l332:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('j') {
							goto l333
						}
						position++
						goto l290
					l333:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('k') {
							goto l334
						}
						position++
						goto l290
					l334:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('m') {
							goto l335
						}
						position++
						goto l290
					l335:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('n') {
							goto l336
						}
						position++
						goto l290
					l336:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('o') {
							goto l337
						}
						position++
						goto l290
					l337:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('p') {
							goto l338
						}
						position++
						goto l290
					l338:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('q') {
							goto l339
						}
						position++
						goto l290
					l339:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('r') {
							goto l340
						}
						position++
						goto l290
					l340:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('s') {
							goto l341
						}
						position++
						goto l290
					l341:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('t') {
							goto l342
						}
						position++
						goto l290
					l342:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('u') {
							goto l343
						}
						position++
						goto l290
					l343:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('v') {
							goto l344
						}
						position++
						goto l290
					l344:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('w') {
							goto l345
						}
						position++
						goto l290
					l345:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('x') {
							goto l346
						}
						position++
						goto l290
					l346:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('y') {
							goto l347
						}
						position++
						goto l290
					l347:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('z') {
							goto l289
						}
						position++
					}
				l290:
					goto l288
				l289:
					position, tokenIndex = position289, tokenIndex289
				}
				if buffer[position] != rune('\'') {
					goto l286
				}
				position++
				add(ruleBase58, position287)
			}
			return true
		l286:
			position, tokenIndex = position286, tokenIndex286
			return false
		},
		/* 54 Base64 <- <('b' 'a' 's' 'e' '6' '4' '\'' ('A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'I' / 'J' / 'K' / 'L' / 'M' / 'N' / 'O' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '0' / '1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / '+' / '/' / '=')* '\'')> */
		func() bool {
			position348, tokenIndex348 := position, tokenIndex
			{
				position349 := position
				if buffer[position] != rune('b') {
					goto l348
				}
				position++
				if buffer[position] != rune('a') {
					goto l348
				}
				position++
				if buffer[position] != rune('s') {
					goto l348
				}
				position++
				if buffer[position] != rune('e') {
					goto l348
				}
				position++
				if buffer[position] != rune('6') {
					goto l348
				}
				position++
				if buffer[position] != rune('4') {
					goto l348
				}
				position++
				if buffer[position] != rune('\'') {
					goto l348
				}
				position++
			l350:
				{
					position351, tokenIndex351 := position, tokenIndex
					{
						position352, tokenIndex352 := position, tokenIndex
						if buffer[position] != rune('A') {
							goto l353
						}
						position++
						goto l352
					l353:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('B') {
							goto l354
						}
						position++
						goto l352
					l354:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('C') {
							goto l355
						}
						position++
						goto l352
					l355:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('D') {
							goto l356
						}
						position++
						goto l352
					l356:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('E') {
							goto l357
						}
						position++
						goto l352
					l357:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('F') {
							goto l358
						}
						position++
						goto l352
					l358:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('G') {
							goto l359
						}
						position++
						goto l352
					l359:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('H') {
							goto l360
						}
						position++
						goto l352
					l360:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('I') {
							goto l361
						}
						position++
						goto l352
					l361:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('J') {
							goto l362
						}
						position++
						goto l352
					l362:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('K') {
							goto l363
						}
						position++
						goto l352
					l363:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('L') {
							goto l364
						}
						position++
						goto l352
					l364:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('M') {
							goto l365
						}
						position++
						goto l352
					l365:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('N') {
							goto l366
						}
						position++
						goto l352
					l366:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('O') {
							goto l367
						}
						position++
						goto l352
					l367:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('P') {
							goto l368
						}
						position++
						goto l352
					l368:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('Q') {
							goto l369
						}
						position++
						goto l352
					l369:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('R') {
							goto l370
						}
						position++
						goto l352
					l370:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('S') {
							goto l371
						}
						position++
						goto l352
					l371:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('T') {
							goto l372
						}
						position++
						goto l352
					l372:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('U') {
							goto l373
						}
						position++
						goto l352
					l373:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('V') {
							goto l374
						}
						position++
						goto l352
					l374:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('W') {
							goto l375
						}
						position++
						goto l352
					l375:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('X') {
							goto l376
						}
						position++
						goto l352
					l376:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('Y') {
							goto l377
						}
						position++
						goto l352
					l377:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('Z') {
							goto l378
						}
						position++
						goto l352
					l378:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('a') {
							goto l379
						}
						position++
						goto l352
					l379:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('b') {
							goto l380
						}
						position++
						goto l352
					l380:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('c') {
							goto l381
						}
						position++
						goto l352
					l381:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('d') {
							goto l382
						}
						position++
						goto l352
					l382:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('e') {
							goto l383
						}
						position++
						goto l352
					l383:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('f') {
							goto l384
						}
						position++
						goto l352
					l384:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('g') {
							goto l385
						}
						position++
						goto l352
					l385:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('h') {
							goto l386
						}
						position++
						goto l352
					l386:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('i') {
							goto l387
						}
						position++
						goto l352
					l387:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('j') {
							goto l388
						}
						position++
						goto l352
					l388:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('k') {
							goto l389
						}
						position++
						goto l352
					l389:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('l') {
							goto l390
						}
						position++
						goto l352
					l390:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('m') {
							goto l391
						}
						position++
						goto l352
					l391:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('n') {
							goto l392
						}
						position++
						goto l352
					l392:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('o') {
							goto l393
						}
						position++
						goto l352
					l393:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('p') {
							goto l394
						}
						position++
						goto l352
					l394:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('q') {
							goto l395
						}
						position++
						goto l352
					l395:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('r') {
							goto l396
						}
						position++
						goto l352
					l396:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('s') {
							goto l397
						}
						position++
						goto l352
					l397:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('t') {
							goto l398
						}
						position++
						goto l352
					l398:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('u') {
							goto l399
						}
						position++
						goto l352
					l399:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('v') {
							goto l400
						}
						position++
						goto l352
					l400:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('w') {
							goto l401
						}
						position++
						goto l352
					l401:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('x') {
							goto l402
						}
						position++
						goto l352
					l402:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('y') {
							goto l403
						}
						position++
						goto l352
					l403:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('z') {
							goto l404
						}
						position++
						goto l352
					l404:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('0') {
							goto l405
						}
						position++
						goto l352
					l405:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('1') {
							goto l406
						}
						position++
						goto l352
					l406:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('2') {
							goto l407
						}
						position++
						goto l352
					l407:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('3') {
							goto l408
						}
						position++
						goto l352
					l408:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('4') {
							goto l409
						}
						position++
						goto l352
					l409:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('5') {
							goto l410
						}
						position++
						goto l352
					l410:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('6') {
							goto l411
						}
						position++
						goto l352
					l411:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('7') {
							goto l412
						}
						position++
						goto l352
					l412:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('8') {
							goto l413
						}
						position++
						goto l352
					l413:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('9') {
							goto l414
						}
						position++
						goto l352
					l414:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('+') {
							goto l415
						}
						position++
						goto l352
					l415:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('/') {
							goto l416
						}
						position++
						goto l352
					l416:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('=') {
							goto l351
						}
						position++
					}
				l352:
					goto l350
				l351:
					position, tokenIndex = position351, tokenIndex351
				}
				if buffer[position] != rune('\'') {
					goto l348
				}
				position++
				add(ruleBase64, position349)
			}
			return true
		l348:
			position, tokenIndex = position348, tokenIndex348
			return false
		},
		/* 55 ByteVector <- <(Base16 / Base58 / Base64)> */
		func() bool {
			position417, tokenIndex417 := position, tokenIndex
			{
				position418 := position
				{
					position419, tokenIndex419 := position, tokenIndex
					if !_rules[ruleBase16]() {
						goto l420
					}
					goto l419
				l420:
					position, tokenIndex = position419, tokenIndex419
					if !_rules[ruleBase58]() {
						goto l421
					}
					goto l419
				l421:
					position, tokenIndex = position419, tokenIndex419
					if !_rules[ruleBase64]() {
						goto l417
					}
				}
			l419:
				add(ruleByteVector, position418)
			}
			return true
		l417:
			position, tokenIndex = position417, tokenIndex417
			return false
		},
		/* 56 Boolean <- <(('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e'))> */
		func() bool {
			position422, tokenIndex422 := position, tokenIndex
			{
				position423 := position
				{
					position424, tokenIndex424 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l425
					}
					position++
					if buffer[position] != rune('r') {
						goto l425
					}
					position++
					if buffer[position] != rune('u') {
						goto l425
					}
					position++
					if buffer[position] != rune('e') {
						goto l425
					}
					position++
					goto l424
				l425:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('f') {
						goto l422
					}
					position++
					if buffer[position] != rune('a') {
						goto l422
					}
					position++
					if buffer[position] != rune('l') {
						goto l422
					}
					position++
					if buffer[position] != rune('s') {
						goto l422
					}
					position++
					if buffer[position] != rune('e') {
						goto l422
					}
					position++
				}
			l424:
				add(ruleBoolean, position423)
			}
			return true
		l422:
			position, tokenIndex = position422, tokenIndex422
			return false
		},
		/* 57 String <- <('"' (UnicodeChar / EscapedChar / Char)* '"')> */
		func() bool {
			position426, tokenIndex426 := position, tokenIndex
			{
				position427 := position
				if buffer[position] != rune('"') {
					goto l426
				}
				position++
			l428:
				{
					position429, tokenIndex429 := position, tokenIndex
					{
						position430, tokenIndex430 := position, tokenIndex
						if !_rules[ruleUnicodeChar]() {
							goto l431
						}
						goto l430
					l431:
						position, tokenIndex = position430, tokenIndex430
						if !_rules[ruleEscapedChar]() {
							goto l432
						}
						goto l430
					l432:
						position, tokenIndex = position430, tokenIndex430
						if !_rules[ruleChar]() {
							goto l429
						}
					}
				l430:
					goto l428
				l429:
					position, tokenIndex = position429, tokenIndex429
				}
				if buffer[position] != rune('"') {
					goto l426
				}
				position++
				add(ruleString, position427)
			}
			return true
		l426:
			position, tokenIndex = position426, tokenIndex426
			return false
		},
		/* 58 UnicodeChar <- <('\\' 'u' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f'))> */
		func() bool {
			position433, tokenIndex433 := position, tokenIndex
			{
				position434 := position
				if buffer[position] != rune('\\') {
					goto l433
				}
				position++
				if buffer[position] != rune('u') {
					goto l433
				}
				position++
				{
					position435, tokenIndex435 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l436
					}
					position++
					goto l435
				l436:
					position, tokenIndex = position435, tokenIndex435
					if buffer[position] != rune('A') {
						goto l437
					}
					position++
					goto l435
				l437:
					position, tokenIndex = position435, tokenIndex435
					if buffer[position] != rune('B') {
						goto l438
					}
					position++
					goto l435
				l438:
					position, tokenIndex = position435, tokenIndex435
					if buffer[position] != rune('C') {
						goto l439
					}
					position++
					goto l435
				l439:
					position, tokenIndex = position435, tokenIndex435
					if buffer[position] != rune('D') {
						goto l440
					}
					position++
					goto l435
				l440:
					position, tokenIndex = position435, tokenIndex435
					if buffer[position] != rune('E') {
						goto l441
					}
					position++
					goto l435
				l441:
					position, tokenIndex = position435, tokenIndex435
					if buffer[position] != rune('F') {
						goto l442
					}
					position++
					goto l435
				l442:
					position, tokenIndex = position435, tokenIndex435
					if buffer[position] != rune('a') {
						goto l443
					}
					position++
					goto l435
				l443:
					position, tokenIndex = position435, tokenIndex435
					if buffer[position] != rune('b') {
						goto l444
					}
					position++
					goto l435
				l444:
					position, tokenIndex = position435, tokenIndex435
					if buffer[position] != rune('c') {
						goto l445
					}
					position++
					goto l435
				l445:
					position, tokenIndex = position435, tokenIndex435
					if buffer[position] != rune('d') {
						goto l446
					}
					position++
					goto l435
				l446:
					position, tokenIndex = position435, tokenIndex435
					if buffer[position] != rune('e') {
						goto l447
					}
					position++
					goto l435
				l447:
					position, tokenIndex = position435, tokenIndex435
					if buffer[position] != rune('f') {
						goto l433
					}
					position++
				}
			l435:
				{
					position448, tokenIndex448 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l449
					}
					position++
					goto l448
				l449:
					position, tokenIndex = position448, tokenIndex448
					if buffer[position] != rune('A') {
						goto l450
					}
					position++
					goto l448
				l450:
					position, tokenIndex = position448, tokenIndex448
					if buffer[position] != rune('B') {
						goto l451
					}
					position++
					goto l448
				l451:
					position, tokenIndex = position448, tokenIndex448
					if buffer[position] != rune('C') {
						goto l452
					}
					position++
					goto l448
				l452:
					position, tokenIndex = position448, tokenIndex448
					if buffer[position] != rune('D') {
						goto l453
					}
					position++
					goto l448
				l453:
					position, tokenIndex = position448, tokenIndex448
					if buffer[position] != rune('E') {
						goto l454
					}
					position++
					goto l448
				l454:
					position, tokenIndex = position448, tokenIndex448
					if buffer[position] != rune('F') {
						goto l455
					}
					position++
					goto l448
				l455:
					position, tokenIndex = position448, tokenIndex448
					if buffer[position] != rune('a') {
						goto l456
					}
					position++
					goto l448
				l456:
					position, tokenIndex = position448, tokenIndex448
					if buffer[position] != rune('b') {
						goto l457
					}
					position++
					goto l448
				l457:
					position, tokenIndex = position448, tokenIndex448
					if buffer[position] != rune('c') {
						goto l458
					}
					position++
					goto l448
				l458:
					position, tokenIndex = position448, tokenIndex448
					if buffer[position] != rune('d') {
						goto l459
					}
					position++
					goto l448
				l459:
					position, tokenIndex = position448, tokenIndex448
					if buffer[position] != rune('e') {
						goto l460
					}
					position++
					goto l448
				l460:
					position, tokenIndex = position448, tokenIndex448
					if buffer[position] != rune('f') {
						goto l433
					}
					position++
				}
			l448:
				{
					position461, tokenIndex461 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l462
					}
					position++
					goto l461
				l462:
					position, tokenIndex = position461, tokenIndex461
					if buffer[position] != rune('A') {
						goto l463
					}
					position++
					goto l461
				l463:
					position, tokenIndex = position461, tokenIndex461
					if buffer[position] != rune('B') {
						goto l464
					}
					position++
					goto l461
				l464:
					position, tokenIndex = position461, tokenIndex461
					if buffer[position] != rune('C') {
						goto l465
					}
					position++
					goto l461
				l465:
					position, tokenIndex = position461, tokenIndex461
					if buffer[position] != rune('D') {
						goto l466
					}
					position++
					goto l461
				l466:
					position, tokenIndex = position461, tokenIndex461
					if buffer[position] != rune('E') {
						goto l467
					}
					position++
					goto l461
				l467:
					position, tokenIndex = position461, tokenIndex461
					if buffer[position] != rune('F') {
						goto l468
					}
					position++
					goto l461
				l468:
					position, tokenIndex = position461, tokenIndex461
					if buffer[position] != rune('a') {
						goto l469
					}
					position++
					goto l461
				l469:
					position, tokenIndex = position461, tokenIndex461
					if buffer[position] != rune('b') {
						goto l470
					}
					position++
					goto l461
				l470:
					position, tokenIndex = position461, tokenIndex461
					if buffer[position] != rune('c') {
						goto l471
					}
					position++
					goto l461
				l471:
					position, tokenIndex = position461, tokenIndex461
					if buffer[position] != rune('d') {
						goto l472
					}
					position++
					goto l461
				l472:
					position, tokenIndex = position461, tokenIndex461
					if buffer[position] != rune('e') {
						goto l473
					}
					position++
					goto l461
				l473:
					position, tokenIndex = position461, tokenIndex461
					if buffer[position] != rune('f') {
						goto l433
					}
					position++
				}
			l461:
				{
					position474, tokenIndex474 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l475
					}
					position++
					goto l474
				l475:
					position, tokenIndex = position474, tokenIndex474
					if buffer[position] != rune('A') {
						goto l476
					}
					position++
					goto l474
				l476:
					position, tokenIndex = position474, tokenIndex474
					if buffer[position] != rune('B') {
						goto l477
					}
					position++
					goto l474
				l477:
					position, tokenIndex = position474, tokenIndex474
					if buffer[position] != rune('C') {
						goto l478
					}
					position++
					goto l474
				l478:
					position, tokenIndex = position474, tokenIndex474
					if buffer[position] != rune('D') {
						goto l479
					}
					position++
					goto l474
				l479:
					position, tokenIndex = position474, tokenIndex474
					if buffer[position] != rune('E') {
						goto l480
					}
					position++
					goto l474
				l480:
					position, tokenIndex = position474, tokenIndex474
					if buffer[position] != rune('F') {
						goto l481
					}
					position++
					goto l474
				l481:
					position, tokenIndex = position474, tokenIndex474
					if buffer[position] != rune('a') {
						goto l482
					}
					position++
					goto l474
				l482:
					position, tokenIndex = position474, tokenIndex474
					if buffer[position] != rune('b') {
						goto l483
					}
					position++
					goto l474
				l483:
					position, tokenIndex = position474, tokenIndex474
					if buffer[position] != rune('c') {
						goto l484
					}
					position++
					goto l474
				l484:
					position, tokenIndex = position474, tokenIndex474
					if buffer[position] != rune('d') {
						goto l485
					}
					position++
					goto l474
				l485:
					position, tokenIndex = position474, tokenIndex474
					if buffer[position] != rune('e') {
						goto l486
					}
					position++
					goto l474
				l486:
					position, tokenIndex = position474, tokenIndex474
					if buffer[position] != rune('f') {
						goto l433
					}
					position++
				}
			l474:
				add(ruleUnicodeChar, position434)
			}
			return true
		l433:
			position, tokenIndex = position433, tokenIndex433
			return false
		},
		/* 59 EscapedChar <- <('\\' .)> */
		func() bool {
			position487, tokenIndex487 := position, tokenIndex
			{
				position488 := position
				if buffer[position] != rune('\\') {
					goto l487
				}
				position++
				if !matchDot() {
					goto l487
				}
				add(ruleEscapedChar, position488)
			}
			return true
		l487:
			position, tokenIndex = position487, tokenIndex487
			return false
		},
		/* 60 Char <- <(!'"' .)> */
		func() bool {
			position489, tokenIndex489 := position, tokenIndex
			{
				position490 := position
				{
					position491, tokenIndex491 := position, tokenIndex
					if buffer[position] != rune('"') {
						goto l491
					}
					position++
					goto l489
				l491:
					position, tokenIndex = position491, tokenIndex491
				}
				if !matchDot() {
					goto l489
				}
				add(ruleChar, position490)
			}
			return true
		l489:
			position, tokenIndex = position489, tokenIndex489
			return false
		},
		/* 61 Integer <- <([0-9] ('_' &[0-9])?)+> */
		func() bool {
			position492, tokenIndex492 := position, tokenIndex
			{
				position493 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l492
				}
				position++
				{
					position496, tokenIndex496 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l496
					}
					position++
					{
						position498, tokenIndex498 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l496
						}
						position++
						position, tokenIndex = position498, tokenIndex498
					}
					goto l497
				l496:
					position, tokenIndex = position496, tokenIndex496
				}
			l497:
			l494:
				{
					position495, tokenIndex495 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l495
					}
					position++
					{
						position499, tokenIndex499 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l499
						}
						position++
						{
							position501, tokenIndex501 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l499
							}
							position++
							position, tokenIndex = position501, tokenIndex501
						}
						goto l500
					l499:
						position, tokenIndex = position499, tokenIndex499
					}
				l500:
					goto l494
				l495:
					position, tokenIndex = position495, tokenIndex495
				}
				add(ruleInteger, position493)
			}
			return true
		l492:
			position, tokenIndex = position492, tokenIndex492
			return false
		},
		/* 62 List <- <('[' _ ExprSeq? _ ']')> */
		func() bool {
			position502, tokenIndex502 := position, tokenIndex
			{
				position503 := position
				if buffer[position] != rune('[') {
					goto l502
				}
				position++
				if !_rules[rule_]() {
					goto l502
				}
				{
					position504, tokenIndex504 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l504
					}
					goto l505
				l504:
					position, tokenIndex = position504, tokenIndex504
				}
			l505:
				if !_rules[rule_]() {
					goto l502
				}
				if buffer[position] != rune(']') {
					goto l502
				}
				position++
				add(ruleList, position503)
			}
			return true
		l502:
			position, tokenIndex = position502, tokenIndex502
			return false
		},
		/* 63 ExprSeq <- <(Expr (_ ',' _ ExprSeq)?)> */
		func() bool {
			position506, tokenIndex506 := position, tokenIndex
			{
				position507 := position
				if !_rules[ruleExpr]() {
					goto l506
				}
				{
					position508, tokenIndex508 := position, tokenIndex
					if !_rules[rule_]() {
						goto l508
					}
					if buffer[position] != rune(',') {
						goto l508
					}
					position++
					if !_rules[rule_]() {
						goto l508
					}
					if !_rules[ruleExprSeq]() {
						goto l508
					}
					goto l509
				l508:
					position, tokenIndex = position508, tokenIndex508
				}
			l509:
				add(ruleExprSeq, position507)
			}
			return true
		l506:
			position, tokenIndex = position506, tokenIndex506
			return false
		},
		/* 64 AtomExpr <- <(UnaryOp? _ (FoldMacro / GettableExpr / IfWithError / Match / Const / List / Tuple))> */
		func() bool {
			position510, tokenIndex510 := position, tokenIndex
			{
				position511 := position
				{
					position512, tokenIndex512 := position, tokenIndex
					if !_rules[ruleUnaryOp]() {
						goto l512
					}
					goto l513
				l512:
					position, tokenIndex = position512, tokenIndex512
				}
			l513:
				if !_rules[rule_]() {
					goto l510
				}
				{
					position514, tokenIndex514 := position, tokenIndex
					if !_rules[ruleFoldMacro]() {
						goto l515
					}
					goto l514
				l515:
					position, tokenIndex = position514, tokenIndex514
					if !_rules[ruleGettableExpr]() {
						goto l516
					}
					goto l514
				l516:
					position, tokenIndex = position514, tokenIndex514
					if !_rules[ruleIfWithError]() {
						goto l517
					}
					goto l514
				l517:
					position, tokenIndex = position514, tokenIndex514
					if !_rules[ruleMatch]() {
						goto l518
					}
					goto l514
				l518:
					position, tokenIndex = position514, tokenIndex514
					if !_rules[ruleConst]() {
						goto l519
					}
					goto l514
				l519:
					position, tokenIndex = position514, tokenIndex514
					if !_rules[ruleList]() {
						goto l520
					}
					goto l514
				l520:
					position, tokenIndex = position514, tokenIndex514
					if !_rules[ruleTuple]() {
						goto l510
					}
				}
			l514:
				add(ruleAtomExpr, position511)
			}
			return true
		l510:
			position, tokenIndex = position510, tokenIndex510
			return false
		},
		/* 65 MultGroupOpAtom <- <(AtomExpr (_ MultGroupOp _ AtomExpr)*)> */
		func() bool {
			position521, tokenIndex521 := position, tokenIndex
			{
				position522 := position
				if !_rules[ruleAtomExpr]() {
					goto l521
				}
			l523:
				{
					position524, tokenIndex524 := position, tokenIndex
					if !_rules[rule_]() {
						goto l524
					}
					if !_rules[ruleMultGroupOp]() {
						goto l524
					}
					if !_rules[rule_]() {
						goto l524
					}
					if !_rules[ruleAtomExpr]() {
						goto l524
					}
					goto l523
				l524:
					position, tokenIndex = position524, tokenIndex524
				}
				add(ruleMultGroupOpAtom, position522)
			}
			return true
		l521:
			position, tokenIndex = position521, tokenIndex521
			return false
		},
		/* 66 SumGroupOpAtom <- <(MultGroupOpAtom (_ SumGroupOp _ MultGroupOpAtom)*)> */
		func() bool {
			position525, tokenIndex525 := position, tokenIndex
			{
				position526 := position
				if !_rules[ruleMultGroupOpAtom]() {
					goto l525
				}
			l527:
				{
					position528, tokenIndex528 := position, tokenIndex
					if !_rules[rule_]() {
						goto l528
					}
					if !_rules[ruleSumGroupOp]() {
						goto l528
					}
					if !_rules[rule_]() {
						goto l528
					}
					if !_rules[ruleMultGroupOpAtom]() {
						goto l528
					}
					goto l527
				l528:
					position, tokenIndex = position528, tokenIndex528
				}
				add(ruleSumGroupOpAtom, position526)
			}
			return true
		l525:
			position, tokenIndex = position525, tokenIndex525
			return false
		},
		/* 67 ConsOpAtom <- <(SumGroupOpAtom (_ ConsOp _ SumGroupOpAtom)*)> */
		func() bool {
			position529, tokenIndex529 := position, tokenIndex
			{
				position530 := position
				if !_rules[ruleSumGroupOpAtom]() {
					goto l529
				}
			l531:
				{
					position532, tokenIndex532 := position, tokenIndex
					if !_rules[rule_]() {
						goto l532
					}
					if !_rules[ruleConsOp]() {
						goto l532
					}
					if !_rules[rule_]() {
						goto l532
					}
					if !_rules[ruleSumGroupOpAtom]() {
						goto l532
					}
					goto l531
				l532:
					position, tokenIndex = position532, tokenIndex532
				}
				add(ruleConsOpAtom, position530)
			}
			return true
		l529:
			position, tokenIndex = position529, tokenIndex529
			return false
		},
		/* 68 CompareGroupOpAtom <- <(ConsOpAtom (_ CompareGroupOp _ ConsOpAtom)*)> */
		func() bool {
			position533, tokenIndex533 := position, tokenIndex
			{
				position534 := position
				if !_rules[ruleConsOpAtom]() {
					goto l533
				}
			l535:
				{
					position536, tokenIndex536 := position, tokenIndex
					if !_rules[rule_]() {
						goto l536
					}
					if !_rules[ruleCompareGroupOp]() {
						goto l536
					}
					if !_rules[rule_]() {
						goto l536
					}
					if !_rules[ruleConsOpAtom]() {
						goto l536
					}
					goto l535
				l536:
					position, tokenIndex = position536, tokenIndex536
				}
				add(ruleCompareGroupOpAtom, position534)
			}
			return true
		l533:
			position, tokenIndex = position533, tokenIndex533
			return false
		},
		/* 69 EqualityGroupOpAtom <- <(CompareGroupOpAtom (_ EqGroupOp _ CompareGroupOpAtom)*)> */
		func() bool {
			position537, tokenIndex537 := position, tokenIndex
			{
				position538 := position
				if !_rules[ruleCompareGroupOpAtom]() {
					goto l537
				}
			l539:
				{
					position540, tokenIndex540 := position, tokenIndex
					if !_rules[rule_]() {
						goto l540
					}
					if !_rules[ruleEqGroupOp]() {
						goto l540
					}
					if !_rules[rule_]() {
						goto l540
					}
					if !_rules[ruleCompareGroupOpAtom]() {
						goto l540
					}
					goto l539
				l540:
					position, tokenIndex = position540, tokenIndex540
				}
				add(ruleEqualityGroupOpAtom, position538)
			}
			return true
		l537:
			position, tokenIndex = position537, tokenIndex537
			return false
		},
		/* 70 AndOpAtom <- <(EqualityGroupOpAtom (_ AndOp _ EqualityGroupOpAtom)*)> */
		func() bool {
			position541, tokenIndex541 := position, tokenIndex
			{
				position542 := position
				if !_rules[ruleEqualityGroupOpAtom]() {
					goto l541
				}
			l543:
				{
					position544, tokenIndex544 := position, tokenIndex
					if !_rules[rule_]() {
						goto l544
					}
					if !_rules[ruleAndOp]() {
						goto l544
					}
					if !_rules[rule_]() {
						goto l544
					}
					if !_rules[ruleEqualityGroupOpAtom]() {
						goto l544
					}
					goto l543
				l544:
					position, tokenIndex = position544, tokenIndex544
				}
				add(ruleAndOpAtom, position542)
			}
			return true
		l541:
			position, tokenIndex = position541, tokenIndex541
			return false
		},
		/* 71 OrOpAtom <- <(AndOpAtom (_ OrOp _ AndOpAtom)*)> */
		func() bool {
			position545, tokenIndex545 := position, tokenIndex
			{
				position546 := position
				if !_rules[ruleAndOpAtom]() {
					goto l545
				}
			l547:
				{
					position548, tokenIndex548 := position, tokenIndex
					if !_rules[rule_]() {
						goto l548
					}
					if !_rules[ruleOrOp]() {
						goto l548
					}
					if !_rules[rule_]() {
						goto l548
					}
					if !_rules[ruleAndOpAtom]() {
						goto l548
					}
					goto l547
				l548:
					position, tokenIndex = position548, tokenIndex548
				}
				add(ruleOrOpAtom, position546)
			}
			return true
		l545:
			position, tokenIndex = position545, tokenIndex545
			return false
		},
		/* 72 Expr <- <OrOpAtom> */
		func() bool {
			position549, tokenIndex549 := position, tokenIndex
			{
				position550 := position
				if !_rules[ruleOrOpAtom]() {
					goto l549
				}
				add(ruleExpr, position550)
			}
			return true
		l549:
			position, tokenIndex = position549, tokenIndex549
			return false
		},
		/* 73 ParExpr <- <('(' _ Expr _ ')')> */
		func() bool {
			position551, tokenIndex551 := position, tokenIndex
			{
				position552 := position
				if buffer[position] != rune('(') {
					goto l551
				}
				position++
				if !_rules[rule_]() {
					goto l551
				}
				if !_rules[ruleExpr]() {
					goto l551
				}
				if !_rules[rule_]() {
					goto l551
				}
				if buffer[position] != rune(')') {
					goto l551
				}
				position++
				add(ruleParExpr, position552)
			}
			return true
		l551:
			position, tokenIndex = position551, tokenIndex551
			return false
		},
		/* 74 GettableExpr <- <((ParExpr / Block / FunctionCall / Identifier / List / Tuple) (_ (ListAccess / ('.' _ (FunctionCallAccess / IdentifierAccess / TupleAccess))))*)> */
		func() bool {
			position553, tokenIndex553 := position, tokenIndex
			{
				position554 := position
				{
					position555, tokenIndex555 := position, tokenIndex
					if !_rules[ruleParExpr]() {
						goto l556
					}
					goto l555
				l556:
					position, tokenIndex = position555, tokenIndex555
					if !_rules[ruleBlock]() {
						goto l557
					}
					goto l555
				l557:
					position, tokenIndex = position555, tokenIndex555
					if !_rules[ruleFunctionCall]() {
						goto l558
					}
					goto l555
				l558:
					position, tokenIndex = position555, tokenIndex555
					if !_rules[ruleIdentifier]() {
						goto l559
					}
					goto l555
				l559:
					position, tokenIndex = position555, tokenIndex555
					if !_rules[ruleList]() {
						goto l560
					}
					goto l555
				l560:
					position, tokenIndex = position555, tokenIndex555
					if !_rules[ruleTuple]() {
						goto l553
					}
				}
			l555:
			l561:
				{
					position562, tokenIndex562 := position, tokenIndex
					if !_rules[rule_]() {
						goto l562
					}
					{
						position563, tokenIndex563 := position, tokenIndex
						if !_rules[ruleListAccess]() {
							goto l564
						}
						goto l563
					l564:
						position, tokenIndex = position563, tokenIndex563
						if buffer[position] != rune('.') {
							goto l562
						}
						position++
						if !_rules[rule_]() {
							goto l562
						}
						{
							position565, tokenIndex565 := position, tokenIndex
							if !_rules[ruleFunctionCallAccess]() {
								goto l566
							}
							goto l565
						l566:
							position, tokenIndex = position565, tokenIndex565
							if !_rules[ruleIdentifierAccess]() {
								goto l567
							}
							goto l565
						l567:
							position, tokenIndex = position565, tokenIndex565
							if !_rules[ruleTupleAccess]() {
								goto l562
							}
						}
					l565:
					}
				l563:
					goto l561
				l562:
					position, tokenIndex = position562, tokenIndex562
				}
				add(ruleGettableExpr, position554)
			}
			return true
		l553:
			position, tokenIndex = position553, tokenIndex553
			return false
		},
		/* 75 FunctionCallAccess <- <FunctionCall> */
		func() bool {
			position568, tokenIndex568 := position, tokenIndex
			{
				position569 := position
				if !_rules[ruleFunctionCall]() {
					goto l568
				}
				add(ruleFunctionCallAccess, position569)
			}
			return true
		l568:
			position, tokenIndex = position568, tokenIndex568
			return false
		},
		/* 76 IdentifierAccess <- <Identifier> */
		func() bool {
			position570, tokenIndex570 := position, tokenIndex
			{
				position571 := position
				if !_rules[ruleIdentifier]() {
					goto l570
				}
				add(ruleIdentifierAccess, position571)
			}
			return true
		l570:
			position, tokenIndex = position570, tokenIndex570
			return false
		},
		/* 77 ListAccess <- <('[' _ (Expr / Identifier) _ ']')> */
		func() bool {
			position572, tokenIndex572 := position, tokenIndex
			{
				position573 := position
				if buffer[position] != rune('[') {
					goto l572
				}
				position++
				if !_rules[rule_]() {
					goto l572
				}
				{
					position574, tokenIndex574 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l575
					}
					goto l574
				l575:
					position, tokenIndex = position574, tokenIndex574
					if !_rules[ruleIdentifier]() {
						goto l572
					}
				}
			l574:
				if !_rules[rule_]() {
					goto l572
				}
				if buffer[position] != rune(']') {
					goto l572
				}
				position++
				add(ruleListAccess, position573)
			}
			return true
		l572:
			position, tokenIndex = position572, tokenIndex572
			return false
		},
		/* 78 Block <- <('{' (_ Declaration)* _ Expr _ '}')> */
		func() bool {
			position576, tokenIndex576 := position, tokenIndex
			{
				position577 := position
				if buffer[position] != rune('{') {
					goto l576
				}
				position++
			l578:
				{
					position579, tokenIndex579 := position, tokenIndex
					if !_rules[rule_]() {
						goto l579
					}
					if !_rules[ruleDeclaration]() {
						goto l579
					}
					goto l578
				l579:
					position, tokenIndex = position579, tokenIndex579
				}
				if !_rules[rule_]() {
					goto l576
				}
				if !_rules[ruleExpr]() {
					goto l576
				}
				if !_rules[rule_]() {
					goto l576
				}
				if buffer[position] != rune('}') {
					goto l576
				}
				position++
				add(ruleBlock, position577)
			}
			return true
		l576:
			position, tokenIndex = position576, tokenIndex576
			return false
		},
		/* 79 BlockWithoutPar <- <((_ Declaration)* _ Expr)> */
		func() bool {
			position580, tokenIndex580 := position, tokenIndex
			{
				position581 := position
			l582:
				{
					position583, tokenIndex583 := position, tokenIndex
					if !_rules[rule_]() {
						goto l583
					}
					if !_rules[ruleDeclaration]() {
						goto l583
					}
					goto l582
				l583:
					position, tokenIndex = position583, tokenIndex583
				}
				if !_rules[rule_]() {
					goto l580
				}
				if !_rules[ruleExpr]() {
					goto l580
				}
				add(ruleBlockWithoutPar, position581)
			}
			return true
		l580:
			position, tokenIndex = position580, tokenIndex580
			return false
		},
		/* 80 FunctionCall <- <(Identifier _ '(' _ ExprSeq? _ ')')> */
		func() bool {
			position584, tokenIndex584 := position, tokenIndex
			{
				position585 := position
				if !_rules[ruleIdentifier]() {
					goto l584
				}
				if !_rules[rule_]() {
					goto l584
				}
				if buffer[position] != rune('(') {
					goto l584
				}
				position++
				if !_rules[rule_]() {
					goto l584
				}
				{
					position586, tokenIndex586 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l586
					}
					goto l587
				l586:
					position, tokenIndex = position586, tokenIndex586
				}
			l587:
				if !_rules[rule_]() {
					goto l584
				}
				if buffer[position] != rune(')') {
					goto l584
				}
				position++
				add(ruleFunctionCall, position585)
			}
			return true
		l584:
			position, tokenIndex = position584, tokenIndex584
			return false
		},
		/* 81 FoldMacro <- <('F' 'O' 'L' 'D' _ '<' _ Integer _ '>' _ '(' _ Expr _ ',' _ Expr _ ',' _ Identifier _ ')')> */
		func() bool {
			position588, tokenIndex588 := position, tokenIndex
			{
				position589 := position
				if buffer[position] != rune('F') {
					goto l588
				}
				position++
				if buffer[position] != rune('O') {
					goto l588
				}
				position++
				if buffer[position] != rune('L') {
					goto l588
				}
				position++
				if buffer[position] != rune('D') {
					goto l588
				}
				position++
				if !_rules[rule_]() {
					goto l588
				}
				if buffer[position] != rune('<') {
					goto l588
				}
				position++
				if !_rules[rule_]() {
					goto l588
				}
				if !_rules[ruleInteger]() {
					goto l588
				}
				if !_rules[rule_]() {
					goto l588
				}
				if buffer[position] != rune('>') {
					goto l588
				}
				position++
				if !_rules[rule_]() {
					goto l588
				}
				if buffer[position] != rune('(') {
					goto l588
				}
				position++
				if !_rules[rule_]() {
					goto l588
				}
				if !_rules[ruleExpr]() {
					goto l588
				}
				if !_rules[rule_]() {
					goto l588
				}
				if buffer[position] != rune(',') {
					goto l588
				}
				position++
				if !_rules[rule_]() {
					goto l588
				}
				if !_rules[ruleExpr]() {
					goto l588
				}
				if !_rules[rule_]() {
					goto l588
				}
				if buffer[position] != rune(',') {
					goto l588
				}
				position++
				if !_rules[rule_]() {
					goto l588
				}
				if !_rules[ruleIdentifier]() {
					goto l588
				}
				if !_rules[rule_]() {
					goto l588
				}
				if buffer[position] != rune(')') {
					goto l588
				}
				position++
				add(ruleFoldMacro, position589)
			}
			return true
		l588:
			position, tokenIndex = position588, tokenIndex588
			return false
		},
		/* 82 IfWithError <- <(If / FailedIfWithoutElse)> */
		func() bool {
			position590, tokenIndex590 := position, tokenIndex
			{
				position591 := position
				{
					position592, tokenIndex592 := position, tokenIndex
					if !_rules[ruleIf]() {
						goto l593
					}
					goto l592
				l593:
					position, tokenIndex = position592, tokenIndex592
					if !_rules[ruleFailedIfWithoutElse]() {
						goto l590
					}
				}
			l592:
				add(ruleIfWithError, position591)
			}
			return true
		l590:
			position, tokenIndex = position590, tokenIndex590
			return false
		},
		/* 83 If <- <('i' 'f' _ Expr _ ('t' 'h' 'e' 'n') _ Expr _ ('e' 'l' 's' 'e') _ Expr)> */
		func() bool {
			position594, tokenIndex594 := position, tokenIndex
			{
				position595 := position
				if buffer[position] != rune('i') {
					goto l594
				}
				position++
				if buffer[position] != rune('f') {
					goto l594
				}
				position++
				if !_rules[rule_]() {
					goto l594
				}
				if !_rules[ruleExpr]() {
					goto l594
				}
				if !_rules[rule_]() {
					goto l594
				}
				if buffer[position] != rune('t') {
					goto l594
				}
				position++
				if buffer[position] != rune('h') {
					goto l594
				}
				position++
				if buffer[position] != rune('e') {
					goto l594
				}
				position++
				if buffer[position] != rune('n') {
					goto l594
				}
				position++
				if !_rules[rule_]() {
					goto l594
				}
				if !_rules[ruleExpr]() {
					goto l594
				}
				if !_rules[rule_]() {
					goto l594
				}
				if buffer[position] != rune('e') {
					goto l594
				}
				position++
				if buffer[position] != rune('l') {
					goto l594
				}
				position++
				if buffer[position] != rune('s') {
					goto l594
				}
				position++
				if buffer[position] != rune('e') {
					goto l594
				}
				position++
				if !_rules[rule_]() {
					goto l594
				}
				if !_rules[ruleExpr]() {
					goto l594
				}
				add(ruleIf, position595)
			}
			return true
		l594:
			position, tokenIndex = position594, tokenIndex594
			return false
		},
		/* 84 FailedIfWithoutElse <- <('i' 'f' _ Expr _ ('t' 'h' 'e' 'n') _ Expr)> */
		func() bool {
			position596, tokenIndex596 := position, tokenIndex
			{
				position597 := position
				if buffer[position] != rune('i') {
					goto l596
				}
				position++
				if buffer[position] != rune('f') {
					goto l596
				}
				position++
				if !_rules[rule_]() {
					goto l596
				}
				if !_rules[ruleExpr]() {
					goto l596
				}
				if !_rules[rule_]() {
					goto l596
				}
				if buffer[position] != rune('t') {
					goto l596
				}
				position++
				if buffer[position] != rune('h') {
					goto l596
				}
				position++
				if buffer[position] != rune('e') {
					goto l596
				}
				position++
				if buffer[position] != rune('n') {
					goto l596
				}
				position++
				if !_rules[rule_]() {
					goto l596
				}
				if !_rules[ruleExpr]() {
					goto l596
				}
				add(ruleFailedIfWithoutElse, position597)
			}
			return true
		l596:
			position, tokenIndex = position596, tokenIndex596
			return false
		},
		/* 85 Match <- <('m' 'a' 't' 'c' 'h' _ Expr _ '{' (_ Case)+ _ '}')> */
		func() bool {
			position598, tokenIndex598 := position, tokenIndex
			{
				position599 := position
				if buffer[position] != rune('m') {
					goto l598
				}
				position++
				if buffer[position] != rune('a') {
					goto l598
				}
				position++
				if buffer[position] != rune('t') {
					goto l598
				}
				position++
				if buffer[position] != rune('c') {
					goto l598
				}
				position++
				if buffer[position] != rune('h') {
					goto l598
				}
				position++
				if !_rules[rule_]() {
					goto l598
				}
				if !_rules[ruleExpr]() {
					goto l598
				}
				if !_rules[rule_]() {
					goto l598
				}
				if buffer[position] != rune('{') {
					goto l598
				}
				position++
				if !_rules[rule_]() {
					goto l598
				}
				if !_rules[ruleCase]() {
					goto l598
				}
			l600:
				{
					position601, tokenIndex601 := position, tokenIndex
					if !_rules[rule_]() {
						goto l601
					}
					if !_rules[ruleCase]() {
						goto l601
					}
					goto l600
				l601:
					position, tokenIndex = position601, tokenIndex601
				}
				if !_rules[rule_]() {
					goto l598
				}
				if buffer[position] != rune('}') {
					goto l598
				}
				position++
				add(ruleMatch, position599)
			}
			return true
		l598:
			position, tokenIndex = position598, tokenIndex598
			return false
		},
		/* 86 Case <- <('c' 'a' 's' 'e' _ (ValuePattern / TuplePattern / ObjectPattern / Placeholder) _ ('=' '>') _ (Block / BlockWithoutPar))> */
		func() bool {
			position602, tokenIndex602 := position, tokenIndex
			{
				position603 := position
				if buffer[position] != rune('c') {
					goto l602
				}
				position++
				if buffer[position] != rune('a') {
					goto l602
				}
				position++
				if buffer[position] != rune('s') {
					goto l602
				}
				position++
				if buffer[position] != rune('e') {
					goto l602
				}
				position++
				if !_rules[rule_]() {
					goto l602
				}
				{
					position604, tokenIndex604 := position, tokenIndex
					if !_rules[ruleValuePattern]() {
						goto l605
					}
					goto l604
				l605:
					position, tokenIndex = position604, tokenIndex604
					if !_rules[ruleTuplePattern]() {
						goto l606
					}
					goto l604
				l606:
					position, tokenIndex = position604, tokenIndex604
					if !_rules[ruleObjectPattern]() {
						goto l607
					}
					goto l604
				l607:
					position, tokenIndex = position604, tokenIndex604
					if !_rules[rulePlaceholder]() {
						goto l602
					}
				}
			l604:
				if !_rules[rule_]() {
					goto l602
				}
				if buffer[position] != rune('=') {
					goto l602
				}
				position++
				if buffer[position] != rune('>') {
					goto l602
				}
				position++
				if !_rules[rule_]() {
					goto l602
				}
				{
					position608, tokenIndex608 := position, tokenIndex
					if !_rules[ruleBlock]() {
						goto l609
					}
					goto l608
				l609:
					position, tokenIndex = position608, tokenIndex608
					if !_rules[ruleBlockWithoutPar]() {
						goto l602
					}
				}
			l608:
				add(ruleCase, position603)
			}
			return true
		l602:
			position, tokenIndex = position602, tokenIndex602
			return false
		},
		/* 87 Placeholder <- <'_'> */
		func() bool {
			position610, tokenIndex610 := position, tokenIndex
			{
				position611 := position
				if buffer[position] != rune('_') {
					goto l610
				}
				position++
				add(rulePlaceholder, position611)
			}
			return true
		l610:
			position, tokenIndex = position610, tokenIndex610
			return false
		},
		/* 88 ValuePattern <- <((Placeholder / Identifier) _ ':' _ Types)> */
		func() bool {
			position612, tokenIndex612 := position, tokenIndex
			{
				position613 := position
				{
					position614, tokenIndex614 := position, tokenIndex
					if !_rules[rulePlaceholder]() {
						goto l615
					}
					goto l614
				l615:
					position, tokenIndex = position614, tokenIndex614
					if !_rules[ruleIdentifier]() {
						goto l612
					}
				}
			l614:
				if !_rules[rule_]() {
					goto l612
				}
				if buffer[position] != rune(':') {
					goto l612
				}
				position++
				if !_rules[rule_]() {
					goto l612
				}
				if !_rules[ruleTypes]() {
					goto l612
				}
				add(ruleValuePattern, position613)
			}
			return true
		l612:
			position, tokenIndex = position612, tokenIndex612
			return false
		},
		/* 89 TupleValuesPattern <- <((ValuePattern / Placeholder / Expr / Const / GettableExpr) (_ ',' _ TupleValuesPattern)?)> */
		func() bool {
			position616, tokenIndex616 := position, tokenIndex
			{
				position617 := position
				{
					position618, tokenIndex618 := position, tokenIndex
					if !_rules[ruleValuePattern]() {
						goto l619
					}
					goto l618
				l619:
					position, tokenIndex = position618, tokenIndex618
					if !_rules[rulePlaceholder]() {
						goto l620
					}
					goto l618
				l620:
					position, tokenIndex = position618, tokenIndex618
					if !_rules[ruleExpr]() {
						goto l621
					}
					goto l618
				l621:
					position, tokenIndex = position618, tokenIndex618
					if !_rules[ruleConst]() {
						goto l622
					}
					goto l618
				l622:
					position, tokenIndex = position618, tokenIndex618
					if !_rules[ruleGettableExpr]() {
						goto l616
					}
				}
			l618:
				{
					position623, tokenIndex623 := position, tokenIndex
					if !_rules[rule_]() {
						goto l623
					}
					if buffer[position] != rune(',') {
						goto l623
					}
					position++
					if !_rules[rule_]() {
						goto l623
					}
					if !_rules[ruleTupleValuesPattern]() {
						goto l623
					}
					goto l624
				l623:
					position, tokenIndex = position623, tokenIndex623
				}
			l624:
				add(ruleTupleValuesPattern, position617)
			}
			return true
		l616:
			position, tokenIndex = position616, tokenIndex616
			return false
		},
		/* 90 TuplePattern <- <('(' _ TupleValuesPattern _ ')')> */
		func() bool {
			position625, tokenIndex625 := position, tokenIndex
			{
				position626 := position
				if buffer[position] != rune('(') {
					goto l625
				}
				position++
				if !_rules[rule_]() {
					goto l625
				}
				if !_rules[ruleTupleValuesPattern]() {
					goto l625
				}
				if !_rules[rule_]() {
					goto l625
				}
				if buffer[position] != rune(')') {
					goto l625
				}
				position++
				add(ruleTuplePattern, position626)
			}
			return true
		l625:
			position, tokenIndex = position625, tokenIndex625
			return false
		},
		/* 91 ObjectFieldsPattern <- <(Identifier _ '=' _ (Expr / Const / GettableExpr) (_ ',' _ ObjectFieldsPattern)?)> */
		func() bool {
			position627, tokenIndex627 := position, tokenIndex
			{
				position628 := position
				if !_rules[ruleIdentifier]() {
					goto l627
				}
				if !_rules[rule_]() {
					goto l627
				}
				if buffer[position] != rune('=') {
					goto l627
				}
				position++
				if !_rules[rule_]() {
					goto l627
				}
				{
					position629, tokenIndex629 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l630
					}
					goto l629
				l630:
					position, tokenIndex = position629, tokenIndex629
					if !_rules[ruleConst]() {
						goto l631
					}
					goto l629
				l631:
					position, tokenIndex = position629, tokenIndex629
					if !_rules[ruleGettableExpr]() {
						goto l627
					}
				}
			l629:
				{
					position632, tokenIndex632 := position, tokenIndex
					if !_rules[rule_]() {
						goto l632
					}
					if buffer[position] != rune(',') {
						goto l632
					}
					position++
					if !_rules[rule_]() {
						goto l632
					}
					if !_rules[ruleObjectFieldsPattern]() {
						goto l632
					}
					goto l633
				l632:
					position, tokenIndex = position632, tokenIndex632
				}
			l633:
				add(ruleObjectFieldsPattern, position628)
			}
			return true
		l627:
			position, tokenIndex = position627, tokenIndex627
			return false
		},
		/* 92 ObjectPattern <- <(Identifier _ '(' _ ObjectFieldsPattern _ ')')> */
		func() bool {
			position634, tokenIndex634 := position, tokenIndex
			{
				position635 := position
				if !_rules[ruleIdentifier]() {
					goto l634
				}
				if !_rules[rule_]() {
					goto l634
				}
				if buffer[position] != rune('(') {
					goto l634
				}
				position++
				if !_rules[rule_]() {
					goto l634
				}
				if !_rules[ruleObjectFieldsPattern]() {
					goto l634
				}
				if !_rules[rule_]() {
					goto l634
				}
				if buffer[position] != rune(')') {
					goto l634
				}
				position++
				add(ruleObjectPattern, position635)
			}
			return true
		l634:
			position, tokenIndex = position634, tokenIndex634
			return false
		},
		/* 93 Tuple <- <('(' _ AtomExpr (_ ',' _ AtomExpr)+ _ ')')> */
		func() bool {
			position636, tokenIndex636 := position, tokenIndex
			{
				position637 := position
				if buffer[position] != rune('(') {
					goto l636
				}
				position++
				if !_rules[rule_]() {
					goto l636
				}
				if !_rules[ruleAtomExpr]() {
					goto l636
				}
				if !_rules[rule_]() {
					goto l636
				}
				if buffer[position] != rune(',') {
					goto l636
				}
				position++
				if !_rules[rule_]() {
					goto l636
				}
				if !_rules[ruleAtomExpr]() {
					goto l636
				}
			l638:
				{
					position639, tokenIndex639 := position, tokenIndex
					if !_rules[rule_]() {
						goto l639
					}
					if buffer[position] != rune(',') {
						goto l639
					}
					position++
					if !_rules[rule_]() {
						goto l639
					}
					if !_rules[ruleAtomExpr]() {
						goto l639
					}
					goto l638
				l639:
					position, tokenIndex = position639, tokenIndex639
				}
				if !_rules[rule_]() {
					goto l636
				}
				if buffer[position] != rune(')') {
					goto l636
				}
				position++
				add(ruleTuple, position637)
			}
			return true
		l636:
			position, tokenIndex = position636, tokenIndex636
			return false
		},
		/* 94 TupleRef <- <('(' _ Identifier (_ ',' _ Identifier)+ _ ')')> */
		func() bool {
			position640, tokenIndex640 := position, tokenIndex
			{
				position641 := position
				if buffer[position] != rune('(') {
					goto l640
				}
				position++
				if !_rules[rule_]() {
					goto l640
				}
				if !_rules[ruleIdentifier]() {
					goto l640
				}
				if !_rules[rule_]() {
					goto l640
				}
				if buffer[position] != rune(',') {
					goto l640
				}
				position++
				if !_rules[rule_]() {
					goto l640
				}
				if !_rules[ruleIdentifier]() {
					goto l640
				}
			l642:
				{
					position643, tokenIndex643 := position, tokenIndex
					if !_rules[rule_]() {
						goto l643
					}
					if buffer[position] != rune(',') {
						goto l643
					}
					position++
					if !_rules[rule_]() {
						goto l643
					}
					if !_rules[ruleIdentifier]() {
						goto l643
					}
					goto l642
				l643:
					position, tokenIndex = position643, tokenIndex643
				}
				if !_rules[rule_]() {
					goto l640
				}
				if buffer[position] != rune(')') {
					goto l640
				}
				position++
				add(ruleTupleRef, position641)
			}
			return true
		l640:
			position, tokenIndex = position640, tokenIndex640
			return false
		},
		/* 95 TupleAccess <- <('_' [0-9]+)> */
		func() bool {
			position644, tokenIndex644 := position, tokenIndex
			{
				position645 := position
				if buffer[position] != rune('_') {
					goto l644
				}
				position++
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l644
				}
				position++
			l646:
				{
					position647, tokenIndex647 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l647
					}
					position++
					goto l646
				l647:
					position, tokenIndex = position647, tokenIndex647
				}
				add(ruleTupleAccess, position645)
			}
			return true
		l644:
			position, tokenIndex = position644, tokenIndex644
			return false
		},
	}
	p.rules = _rules
	return nil
}

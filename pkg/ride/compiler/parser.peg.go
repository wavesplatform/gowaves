package compiler

// Code generated by peg -output=parser.peg.go ride.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleCode
	ruleDAppRoot
	ruleScriptRoot
	ruleWS
	ruleEOL
	ruleComment
	rule_
	ruleEOF
	ruleDirectiveName
	ruleUpperCaseString
	ruleIntString
	rulePathString
	ruleDirective
	ruleDeclaration
	ruleVariable
	ruleStrictVariable
	ruleFunc
	ruleFuncArgSeq
	ruleFuncArg
	ruleAnnotatedFunc
	ruleAnnotation
	ruleIdentifierSeq
	ruleAnnotationSeq
	ruleOrOp
	ruleAndOp
	ruleEqGroupOp
	ruleEqOp
	ruleNeOp
	ruleCompareGroupOp
	ruleGtOp
	ruleGeOp
	ruleLtOp
	ruleLeOp
	ruleListGroupOp
	ruleConsOp
	ruleConcatOp
	ruleAppendOp
	ruleSumGroupOp
	ruleSumOp
	ruleSubOp
	ruleMultGroupOp
	ruleMulOp
	ruleDivOp
	ruleModOp
	ruleUnaryOp
	rulePositiveOp
	ruleNegativeOp
	ruleNotOp
	ruleReservedWords
	ruleConst
	ruleIdentifier
	ruleType
	ruleGenericType
	ruleTupleType
	ruleTypes
	ruleBase16
	ruleBase58
	ruleBase64
	ruleByteVector
	ruleBoolean
	ruleString
	ruleUnicodeChar
	ruleEscapedChar
	ruleChar
	ruleInteger
	ruleList
	ruleExprSeq
	ruleAtomExpr
	ruleMultGroupOpAtom
	ruleSumGroupOpAtom
	ruleListGroupOpAtom
	ruleCompareGroupOpAtom
	ruleEqualityGroupOpAtom
	ruleAndOpAtom
	ruleOrOpAtom
	ruleExpr
	ruleParExpr
	ruleGettableExpr
	ruleFunctionCallAccess
	ruleIdentifierAccess
	ruleListAccess
	ruleBlock
	ruleBlockWithoutPar
	ruleFunctionCall
	ruleFoldMacro
	ruleIfWithError
	ruleIf
	ruleFailedIfWithoutElse
	ruleMatch
	ruleCase
	rulePlaceholder
	ruleValuePattern
	ruleTupleValuesPattern
	ruleTuplePattern
	ruleObjectFieldsPattern
	ruleObjectPattern
	ruleTuple
	ruleTupleRef
	ruleTupleAccess
)

var rul3s = [...]string{
	"Unknown",
	"Code",
	"DAppRoot",
	"ScriptRoot",
	"WS",
	"EOL",
	"Comment",
	"_",
	"EOF",
	"DirectiveName",
	"UpperCaseString",
	"IntString",
	"PathString",
	"Directive",
	"Declaration",
	"Variable",
	"StrictVariable",
	"Func",
	"FuncArgSeq",
	"FuncArg",
	"AnnotatedFunc",
	"Annotation",
	"IdentifierSeq",
	"AnnotationSeq",
	"OrOp",
	"AndOp",
	"EqGroupOp",
	"EqOp",
	"NeOp",
	"CompareGroupOp",
	"GtOp",
	"GeOp",
	"LtOp",
	"LeOp",
	"ListGroupOp",
	"ConsOp",
	"ConcatOp",
	"AppendOp",
	"SumGroupOp",
	"SumOp",
	"SubOp",
	"MultGroupOp",
	"MulOp",
	"DivOp",
	"ModOp",
	"UnaryOp",
	"PositiveOp",
	"NegativeOp",
	"NotOp",
	"ReservedWords",
	"Const",
	"Identifier",
	"Type",
	"GenericType",
	"TupleType",
	"Types",
	"Base16",
	"Base58",
	"Base64",
	"ByteVector",
	"Boolean",
	"String",
	"UnicodeChar",
	"EscapedChar",
	"Char",
	"Integer",
	"List",
	"ExprSeq",
	"AtomExpr",
	"MultGroupOpAtom",
	"SumGroupOpAtom",
	"ListGroupOpAtom",
	"CompareGroupOpAtom",
	"EqualityGroupOpAtom",
	"AndOpAtom",
	"OrOpAtom",
	"Expr",
	"ParExpr",
	"GettableExpr",
	"FunctionCallAccess",
	"IdentifierAccess",
	"ListAccess",
	"Block",
	"BlockWithoutPar",
	"FunctionCall",
	"FoldMacro",
	"IfWithError",
	"If",
	"FailedIfWithoutElse",
	"Match",
	"Case",
	"Placeholder",
	"ValuePattern",
	"TupleValuesPattern",
	"TuplePattern",
	"ObjectFieldsPattern",
	"ObjectPattern",
	"Tuple",
	"TupleRef",
	"TupleAccess",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Buffer string
	buffer []rune
	rules  [100]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Code <- <(DAppRoot / ScriptRoot)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[ruleDAppRoot]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[ruleScriptRoot]() {
						goto l0
					}
				}
			l2:
				add(ruleCode, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 DAppRoot <- <(_ (Directive _)* (_ Declaration)* (_ AnnotatedFunc)* _ EOF)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
				if !_rules[rule_]() {
					goto l4
				}
			l6:
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l7
					}
					if !_rules[rule_]() {
						goto l7
					}
					goto l6
				l7:
					position, tokenIndex = position7, tokenIndex7
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[rule_]() {
						goto l9
					}
					if !_rules[ruleDeclaration]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
			l10:
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[rule_]() {
						goto l11
					}
					if !_rules[ruleAnnotatedFunc]() {
						goto l11
					}
					goto l10
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				if !_rules[rule_]() {
					goto l4
				}
				if !_rules[ruleEOF]() {
					goto l4
				}
				add(ruleDAppRoot, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 ScriptRoot <- <(_ (Directive _)* (_ Declaration)* _ Expr _ EOF)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[rule_]() {
					goto l12
				}
			l14:
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleDirective]() {
						goto l15
					}
					if !_rules[rule_]() {
						goto l15
					}
					goto l14
				l15:
					position, tokenIndex = position15, tokenIndex15
				}
			l16:
				{
					position17, tokenIndex17 := position, tokenIndex
					if !_rules[rule_]() {
						goto l17
					}
					if !_rules[ruleDeclaration]() {
						goto l17
					}
					goto l16
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleExpr]() {
					goto l12
				}
				if !_rules[rule_]() {
					goto l12
				}
				if !_rules[ruleEOF]() {
					goto l12
				}
				add(ruleScriptRoot, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 WS <- <(' ' / '\t')> */
		func() bool {
			position18, tokenIndex18 := position, tokenIndex
			{
				position19 := position
				{
					position20, tokenIndex20 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l21
					}
					position++
					goto l20
				l21:
					position, tokenIndex = position20, tokenIndex20
					if buffer[position] != rune('\t') {
						goto l18
					}
					position++
				}
			l20:
				add(ruleWS, position19)
			}
			return true
		l18:
			position, tokenIndex = position18, tokenIndex18
			return false
		},
		/* 4 EOL <- <('\n' / '\r' / '\f')> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24, tokenIndex24 := position, tokenIndex
					if buffer[position] != rune('\n') {
						goto l25
					}
					position++
					goto l24
				l25:
					position, tokenIndex = position24, tokenIndex24
					if buffer[position] != rune('\r') {
						goto l26
					}
					position++
					goto l24
				l26:
					position, tokenIndex = position24, tokenIndex24
					if buffer[position] != rune('\f') {
						goto l22
					}
					position++
				}
			l24:
				add(ruleEOL, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 5 Comment <- <('#' (!('\r' / '^' / '\n') .)*)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				if buffer[position] != rune('#') {
					goto l27
				}
				position++
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					{
						position31, tokenIndex31 := position, tokenIndex
						{
							position32, tokenIndex32 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l33
							}
							position++
							goto l32
						l33:
							position, tokenIndex = position32, tokenIndex32
							if buffer[position] != rune('^') {
								goto l34
							}
							position++
							goto l32
						l34:
							position, tokenIndex = position32, tokenIndex32
							if buffer[position] != rune('\n') {
								goto l31
							}
							position++
						}
					l32:
						goto l30
					l31:
						position, tokenIndex = position31, tokenIndex31
					}
					if !matchDot() {
						goto l30
					}
					goto l29
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
				add(ruleComment, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 6 _ <- <(Comment / (WS / EOL)+)*> */
		func() bool {
			{
				position36 := position
			l37:
				{
					position38, tokenIndex38 := position, tokenIndex
					{
						position39, tokenIndex39 := position, tokenIndex
						if !_rules[ruleComment]() {
							goto l40
						}
						goto l39
					l40:
						position, tokenIndex = position39, tokenIndex39
						{
							position43, tokenIndex43 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l44
							}
							goto l43
						l44:
							position, tokenIndex = position43, tokenIndex43
							if !_rules[ruleEOL]() {
								goto l38
							}
						}
					l43:
					l41:
						{
							position42, tokenIndex42 := position, tokenIndex
							{
								position45, tokenIndex45 := position, tokenIndex
								if !_rules[ruleWS]() {
									goto l46
								}
								goto l45
							l46:
								position, tokenIndex = position45, tokenIndex45
								if !_rules[ruleEOL]() {
									goto l42
								}
							}
						l45:
							goto l41
						l42:
							position, tokenIndex = position42, tokenIndex42
						}
					}
				l39:
					goto l37
				l38:
					position, tokenIndex = position38, tokenIndex38
				}
				add(rule_, position36)
			}
			return true
		},
		/* 7 EOF <- <!.> */
		func() bool {
			position47, tokenIndex47 := position, tokenIndex
			{
				position48 := position
				{
					position49, tokenIndex49 := position, tokenIndex
					if !matchDot() {
						goto l49
					}
					goto l47
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
				add(ruleEOF, position48)
			}
			return true
		l47:
			position, tokenIndex = position47, tokenIndex47
			return false
		},
		/* 8 DirectiveName <- <([A-Z]+ ('_' / [A-Z])*)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l50
				}
				position++
			l52:
				{
					position53, tokenIndex53 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l53
					}
					position++
					goto l52
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				{
					position55, tokenIndex55 := position, tokenIndex
					{
						position56, tokenIndex56 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l57
						}
						position++
						goto l56
					l57:
						position, tokenIndex = position56, tokenIndex56
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l55
						}
						position++
					}
				l56:
					goto l54
				l55:
					position, tokenIndex = position55, tokenIndex55
				}
				add(ruleDirectiveName, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 9 UpperCaseString <- <[A-Z]+> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l58
				}
				position++
			l60:
				{
					position61, tokenIndex61 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l61
					}
					position++
					goto l60
				l61:
					position, tokenIndex = position61, tokenIndex61
				}
				add(ruleUpperCaseString, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 10 IntString <- <[0-9]+> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l62
				}
				position++
			l64:
				{
					position65, tokenIndex65 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l65
					}
					position++
					goto l64
				l65:
					position, tokenIndex = position65, tokenIndex65
				}
				add(ruleIntString, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 11 PathString <- <('_' / [a-z] / [A-Z] / [0-9] / '-' / '/' / ',' / '.')+> */
		func() bool {
			position66, tokenIndex66 := position, tokenIndex
			{
				position67 := position
				{
					position70, tokenIndex70 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l71
					}
					position++
					goto l70
				l71:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l72
					}
					position++
					goto l70
				l72:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l73
					}
					position++
					goto l70
				l73:
					position, tokenIndex = position70, tokenIndex70
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l74
					}
					position++
					goto l70
				l74:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('-') {
						goto l75
					}
					position++
					goto l70
				l75:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('/') {
						goto l76
					}
					position++
					goto l70
				l76:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune(',') {
						goto l77
					}
					position++
					goto l70
				l77:
					position, tokenIndex = position70, tokenIndex70
					if buffer[position] != rune('.') {
						goto l66
					}
					position++
				}
			l70:
			l68:
				{
					position69, tokenIndex69 := position, tokenIndex
					{
						position78, tokenIndex78 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l79
						}
						position++
						goto l78
					l79:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l80
						}
						position++
						goto l78
					l80:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l81
						}
						position++
						goto l78
					l81:
						position, tokenIndex = position78, tokenIndex78
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l82
						}
						position++
						goto l78
					l82:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('-') {
							goto l83
						}
						position++
						goto l78
					l83:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('/') {
							goto l84
						}
						position++
						goto l78
					l84:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune(',') {
							goto l85
						}
						position++
						goto l78
					l85:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('.') {
							goto l69
						}
						position++
					}
				l78:
					goto l68
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
				add(rulePathString, position67)
			}
			return true
		l66:
			position, tokenIndex = position66, tokenIndex66
			return false
		},
		/* 12 Directive <- <('{' '-' '#' WS+ DirectiveName WS+ (IntString / UpperCaseString / PathString) WS+ ('#' '-' '}'))> */
		func() bool {
			position86, tokenIndex86 := position, tokenIndex
			{
				position87 := position
				if buffer[position] != rune('{') {
					goto l86
				}
				position++
				if buffer[position] != rune('-') {
					goto l86
				}
				position++
				if buffer[position] != rune('#') {
					goto l86
				}
				position++
				if !_rules[ruleWS]() {
					goto l86
				}
			l88:
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l89
					}
					goto l88
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
				if !_rules[ruleDirectiveName]() {
					goto l86
				}
				if !_rules[ruleWS]() {
					goto l86
				}
			l90:
				{
					position91, tokenIndex91 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l91
					}
					goto l90
				l91:
					position, tokenIndex = position91, tokenIndex91
				}
				{
					position92, tokenIndex92 := position, tokenIndex
					if !_rules[ruleIntString]() {
						goto l93
					}
					goto l92
				l93:
					position, tokenIndex = position92, tokenIndex92
					if !_rules[ruleUpperCaseString]() {
						goto l94
					}
					goto l92
				l94:
					position, tokenIndex = position92, tokenIndex92
					if !_rules[rulePathString]() {
						goto l86
					}
				}
			l92:
				if !_rules[ruleWS]() {
					goto l86
				}
			l95:
				{
					position96, tokenIndex96 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l96
					}
					goto l95
				l96:
					position, tokenIndex = position96, tokenIndex96
				}
				if buffer[position] != rune('#') {
					goto l86
				}
				position++
				if buffer[position] != rune('-') {
					goto l86
				}
				position++
				if buffer[position] != rune('}') {
					goto l86
				}
				position++
				add(ruleDirective, position87)
			}
			return true
		l86:
			position, tokenIndex = position86, tokenIndex86
			return false
		},
		/* 13 Declaration <- <((Variable / StrictVariable / Func) _ ';'?)> */
		func() bool {
			position97, tokenIndex97 := position, tokenIndex
			{
				position98 := position
				{
					position99, tokenIndex99 := position, tokenIndex
					if !_rules[ruleVariable]() {
						goto l100
					}
					goto l99
				l100:
					position, tokenIndex = position99, tokenIndex99
					if !_rules[ruleStrictVariable]() {
						goto l101
					}
					goto l99
				l101:
					position, tokenIndex = position99, tokenIndex99
					if !_rules[ruleFunc]() {
						goto l97
					}
				}
			l99:
				if !_rules[rule_]() {
					goto l97
				}
				{
					position102, tokenIndex102 := position, tokenIndex
					if buffer[position] != rune(';') {
						goto l102
					}
					position++
					goto l103
				l102:
					position, tokenIndex = position102, tokenIndex102
				}
			l103:
				add(ruleDeclaration, position98)
			}
			return true
		l97:
			position, tokenIndex = position97, tokenIndex97
			return false
		},
		/* 14 Variable <- <('l' 'e' 't' _ (Identifier / TupleRef) _ '=' _ Expr)> */
		func() bool {
			position104, tokenIndex104 := position, tokenIndex
			{
				position105 := position
				if buffer[position] != rune('l') {
					goto l104
				}
				position++
				if buffer[position] != rune('e') {
					goto l104
				}
				position++
				if buffer[position] != rune('t') {
					goto l104
				}
				position++
				if !_rules[rule_]() {
					goto l104
				}
				{
					position106, tokenIndex106 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l107
					}
					goto l106
				l107:
					position, tokenIndex = position106, tokenIndex106
					if !_rules[ruleTupleRef]() {
						goto l104
					}
				}
			l106:
				if !_rules[rule_]() {
					goto l104
				}
				if buffer[position] != rune('=') {
					goto l104
				}
				position++
				if !_rules[rule_]() {
					goto l104
				}
				if !_rules[ruleExpr]() {
					goto l104
				}
				add(ruleVariable, position105)
			}
			return true
		l104:
			position, tokenIndex = position104, tokenIndex104
			return false
		},
		/* 15 StrictVariable <- <('s' 't' 'r' 'i' 'c' 't' _ (Identifier / TupleRef) _ '=' _ Expr)> */
		func() bool {
			position108, tokenIndex108 := position, tokenIndex
			{
				position109 := position
				if buffer[position] != rune('s') {
					goto l108
				}
				position++
				if buffer[position] != rune('t') {
					goto l108
				}
				position++
				if buffer[position] != rune('r') {
					goto l108
				}
				position++
				if buffer[position] != rune('i') {
					goto l108
				}
				position++
				if buffer[position] != rune('c') {
					goto l108
				}
				position++
				if buffer[position] != rune('t') {
					goto l108
				}
				position++
				if !_rules[rule_]() {
					goto l108
				}
				{
					position110, tokenIndex110 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l111
					}
					goto l110
				l111:
					position, tokenIndex = position110, tokenIndex110
					if !_rules[ruleTupleRef]() {
						goto l108
					}
				}
			l110:
				if !_rules[rule_]() {
					goto l108
				}
				if buffer[position] != rune('=') {
					goto l108
				}
				position++
				if !_rules[rule_]() {
					goto l108
				}
				if !_rules[ruleExpr]() {
					goto l108
				}
				add(ruleStrictVariable, position109)
			}
			return true
		l108:
			position, tokenIndex = position108, tokenIndex108
			return false
		},
		/* 16 Func <- <('f' 'u' 'n' 'c' _ Identifier _ '(' _ FuncArgSeq? _ ')' _ '=' _ Expr)> */
		func() bool {
			position112, tokenIndex112 := position, tokenIndex
			{
				position113 := position
				if buffer[position] != rune('f') {
					goto l112
				}
				position++
				if buffer[position] != rune('u') {
					goto l112
				}
				position++
				if buffer[position] != rune('n') {
					goto l112
				}
				position++
				if buffer[position] != rune('c') {
					goto l112
				}
				position++
				if !_rules[rule_]() {
					goto l112
				}
				if !_rules[ruleIdentifier]() {
					goto l112
				}
				if !_rules[rule_]() {
					goto l112
				}
				if buffer[position] != rune('(') {
					goto l112
				}
				position++
				if !_rules[rule_]() {
					goto l112
				}
				{
					position114, tokenIndex114 := position, tokenIndex
					if !_rules[ruleFuncArgSeq]() {
						goto l114
					}
					goto l115
				l114:
					position, tokenIndex = position114, tokenIndex114
				}
			l115:
				if !_rules[rule_]() {
					goto l112
				}
				if buffer[position] != rune(')') {
					goto l112
				}
				position++
				if !_rules[rule_]() {
					goto l112
				}
				if buffer[position] != rune('=') {
					goto l112
				}
				position++
				if !_rules[rule_]() {
					goto l112
				}
				if !_rules[ruleExpr]() {
					goto l112
				}
				add(ruleFunc, position113)
			}
			return true
		l112:
			position, tokenIndex = position112, tokenIndex112
			return false
		},
		/* 17 FuncArgSeq <- <(FuncArg (_ ',' _ FuncArgSeq)?)> */
		func() bool {
			position116, tokenIndex116 := position, tokenIndex
			{
				position117 := position
				if !_rules[ruleFuncArg]() {
					goto l116
				}
				{
					position118, tokenIndex118 := position, tokenIndex
					if !_rules[rule_]() {
						goto l118
					}
					if buffer[position] != rune(',') {
						goto l118
					}
					position++
					if !_rules[rule_]() {
						goto l118
					}
					if !_rules[ruleFuncArgSeq]() {
						goto l118
					}
					goto l119
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
			l119:
				add(ruleFuncArgSeq, position117)
			}
			return true
		l116:
			position, tokenIndex = position116, tokenIndex116
			return false
		},
		/* 18 FuncArg <- <(Identifier _ ':' _ Types)> */
		func() bool {
			position120, tokenIndex120 := position, tokenIndex
			{
				position121 := position
				if !_rules[ruleIdentifier]() {
					goto l120
				}
				if !_rules[rule_]() {
					goto l120
				}
				if buffer[position] != rune(':') {
					goto l120
				}
				position++
				if !_rules[rule_]() {
					goto l120
				}
				if !_rules[ruleTypes]() {
					goto l120
				}
				add(ruleFuncArg, position121)
			}
			return true
		l120:
			position, tokenIndex = position120, tokenIndex120
			return false
		},
		/* 19 AnnotatedFunc <- <(AnnotationSeq _ Func)> */
		func() bool {
			position122, tokenIndex122 := position, tokenIndex
			{
				position123 := position
				if !_rules[ruleAnnotationSeq]() {
					goto l122
				}
				if !_rules[rule_]() {
					goto l122
				}
				if !_rules[ruleFunc]() {
					goto l122
				}
				add(ruleAnnotatedFunc, position123)
			}
			return true
		l122:
			position, tokenIndex = position122, tokenIndex122
			return false
		},
		/* 20 Annotation <- <('@' Identifier _ '(' _ IdentifierSeq _ ')')> */
		func() bool {
			position124, tokenIndex124 := position, tokenIndex
			{
				position125 := position
				if buffer[position] != rune('@') {
					goto l124
				}
				position++
				if !_rules[ruleIdentifier]() {
					goto l124
				}
				if !_rules[rule_]() {
					goto l124
				}
				if buffer[position] != rune('(') {
					goto l124
				}
				position++
				if !_rules[rule_]() {
					goto l124
				}
				if !_rules[ruleIdentifierSeq]() {
					goto l124
				}
				if !_rules[rule_]() {
					goto l124
				}
				if buffer[position] != rune(')') {
					goto l124
				}
				position++
				add(ruleAnnotation, position125)
			}
			return true
		l124:
			position, tokenIndex = position124, tokenIndex124
			return false
		},
		/* 21 IdentifierSeq <- <(Identifier (_ ',' _ IdentifierSeq)?)> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				if !_rules[ruleIdentifier]() {
					goto l126
				}
				{
					position128, tokenIndex128 := position, tokenIndex
					if !_rules[rule_]() {
						goto l128
					}
					if buffer[position] != rune(',') {
						goto l128
					}
					position++
					if !_rules[rule_]() {
						goto l128
					}
					if !_rules[ruleIdentifierSeq]() {
						goto l128
					}
					goto l129
				l128:
					position, tokenIndex = position128, tokenIndex128
				}
			l129:
				add(ruleIdentifierSeq, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 22 AnnotationSeq <- <(Annotation (_ AnnotationSeq)?)> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				if !_rules[ruleAnnotation]() {
					goto l130
				}
				{
					position132, tokenIndex132 := position, tokenIndex
					if !_rules[rule_]() {
						goto l132
					}
					if !_rules[ruleAnnotationSeq]() {
						goto l132
					}
					goto l133
				l132:
					position, tokenIndex = position132, tokenIndex132
				}
			l133:
				add(ruleAnnotationSeq, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 23 OrOp <- <('|' '|')> */
		func() bool {
			position134, tokenIndex134 := position, tokenIndex
			{
				position135 := position
				if buffer[position] != rune('|') {
					goto l134
				}
				position++
				if buffer[position] != rune('|') {
					goto l134
				}
				position++
				add(ruleOrOp, position135)
			}
			return true
		l134:
			position, tokenIndex = position134, tokenIndex134
			return false
		},
		/* 24 AndOp <- <('&' '&')> */
		func() bool {
			position136, tokenIndex136 := position, tokenIndex
			{
				position137 := position
				if buffer[position] != rune('&') {
					goto l136
				}
				position++
				if buffer[position] != rune('&') {
					goto l136
				}
				position++
				add(ruleAndOp, position137)
			}
			return true
		l136:
			position, tokenIndex = position136, tokenIndex136
			return false
		},
		/* 25 EqGroupOp <- <(EqOp / NeOp)> */
		func() bool {
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
				{
					position140, tokenIndex140 := position, tokenIndex
					if !_rules[ruleEqOp]() {
						goto l141
					}
					goto l140
				l141:
					position, tokenIndex = position140, tokenIndex140
					if !_rules[ruleNeOp]() {
						goto l138
					}
				}
			l140:
				add(ruleEqGroupOp, position139)
			}
			return true
		l138:
			position, tokenIndex = position138, tokenIndex138
			return false
		},
		/* 26 EqOp <- <('=' '=')> */
		func() bool {
			position142, tokenIndex142 := position, tokenIndex
			{
				position143 := position
				if buffer[position] != rune('=') {
					goto l142
				}
				position++
				if buffer[position] != rune('=') {
					goto l142
				}
				position++
				add(ruleEqOp, position143)
			}
			return true
		l142:
			position, tokenIndex = position142, tokenIndex142
			return false
		},
		/* 27 NeOp <- <('!' '=')> */
		func() bool {
			position144, tokenIndex144 := position, tokenIndex
			{
				position145 := position
				if buffer[position] != rune('!') {
					goto l144
				}
				position++
				if buffer[position] != rune('=') {
					goto l144
				}
				position++
				add(ruleNeOp, position145)
			}
			return true
		l144:
			position, tokenIndex = position144, tokenIndex144
			return false
		},
		/* 28 CompareGroupOp <- <(GtOp / GeOp / LtOp / LeOp)> */
		func() bool {
			position146, tokenIndex146 := position, tokenIndex
			{
				position147 := position
				{
					position148, tokenIndex148 := position, tokenIndex
					if !_rules[ruleGtOp]() {
						goto l149
					}
					goto l148
				l149:
					position, tokenIndex = position148, tokenIndex148
					if !_rules[ruleGeOp]() {
						goto l150
					}
					goto l148
				l150:
					position, tokenIndex = position148, tokenIndex148
					if !_rules[ruleLtOp]() {
						goto l151
					}
					goto l148
				l151:
					position, tokenIndex = position148, tokenIndex148
					if !_rules[ruleLeOp]() {
						goto l146
					}
				}
			l148:
				add(ruleCompareGroupOp, position147)
			}
			return true
		l146:
			position, tokenIndex = position146, tokenIndex146
			return false
		},
		/* 29 GtOp <- <('>' !'=')> */
		func() bool {
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				if buffer[position] != rune('>') {
					goto l152
				}
				position++
				{
					position154, tokenIndex154 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l154
					}
					position++
					goto l152
				l154:
					position, tokenIndex = position154, tokenIndex154
				}
				add(ruleGtOp, position153)
			}
			return true
		l152:
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 30 GeOp <- <('>' '=')> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				if buffer[position] != rune('>') {
					goto l155
				}
				position++
				if buffer[position] != rune('=') {
					goto l155
				}
				position++
				add(ruleGeOp, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 31 LtOp <- <('<' !'=')> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				if buffer[position] != rune('<') {
					goto l157
				}
				position++
				{
					position159, tokenIndex159 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l159
					}
					position++
					goto l157
				l159:
					position, tokenIndex = position159, tokenIndex159
				}
				add(ruleLtOp, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 32 LeOp <- <('<' '=')> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				if buffer[position] != rune('<') {
					goto l160
				}
				position++
				if buffer[position] != rune('=') {
					goto l160
				}
				position++
				add(ruleLeOp, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 33 ListGroupOp <- <(ConsOp / ConcatOp / AppendOp)> */
		func() bool {
			position162, tokenIndex162 := position, tokenIndex
			{
				position163 := position
				{
					position164, tokenIndex164 := position, tokenIndex
					if !_rules[ruleConsOp]() {
						goto l165
					}
					goto l164
				l165:
					position, tokenIndex = position164, tokenIndex164
					if !_rules[ruleConcatOp]() {
						goto l166
					}
					goto l164
				l166:
					position, tokenIndex = position164, tokenIndex164
					if !_rules[ruleAppendOp]() {
						goto l162
					}
				}
			l164:
				add(ruleListGroupOp, position163)
			}
			return true
		l162:
			position, tokenIndex = position162, tokenIndex162
			return false
		},
		/* 34 ConsOp <- <(':' ':')> */
		func() bool {
			position167, tokenIndex167 := position, tokenIndex
			{
				position168 := position
				if buffer[position] != rune(':') {
					goto l167
				}
				position++
				if buffer[position] != rune(':') {
					goto l167
				}
				position++
				add(ruleConsOp, position168)
			}
			return true
		l167:
			position, tokenIndex = position167, tokenIndex167
			return false
		},
		/* 35 ConcatOp <- <('+' '+')> */
		func() bool {
			position169, tokenIndex169 := position, tokenIndex
			{
				position170 := position
				if buffer[position] != rune('+') {
					goto l169
				}
				position++
				if buffer[position] != rune('+') {
					goto l169
				}
				position++
				add(ruleConcatOp, position170)
			}
			return true
		l169:
			position, tokenIndex = position169, tokenIndex169
			return false
		},
		/* 36 AppendOp <- <(':' '+')> */
		func() bool {
			position171, tokenIndex171 := position, tokenIndex
			{
				position172 := position
				if buffer[position] != rune(':') {
					goto l171
				}
				position++
				if buffer[position] != rune('+') {
					goto l171
				}
				position++
				add(ruleAppendOp, position172)
			}
			return true
		l171:
			position, tokenIndex = position171, tokenIndex171
			return false
		},
		/* 37 SumGroupOp <- <(SumOp / SubOp)> */
		func() bool {
			position173, tokenIndex173 := position, tokenIndex
			{
				position174 := position
				{
					position175, tokenIndex175 := position, tokenIndex
					if !_rules[ruleSumOp]() {
						goto l176
					}
					goto l175
				l176:
					position, tokenIndex = position175, tokenIndex175
					if !_rules[ruleSubOp]() {
						goto l173
					}
				}
			l175:
				add(ruleSumGroupOp, position174)
			}
			return true
		l173:
			position, tokenIndex = position173, tokenIndex173
			return false
		},
		/* 38 SumOp <- <('+' !'+')> */
		func() bool {
			position177, tokenIndex177 := position, tokenIndex
			{
				position178 := position
				if buffer[position] != rune('+') {
					goto l177
				}
				position++
				{
					position179, tokenIndex179 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l179
					}
					position++
					goto l177
				l179:
					position, tokenIndex = position179, tokenIndex179
				}
				add(ruleSumOp, position178)
			}
			return true
		l177:
			position, tokenIndex = position177, tokenIndex177
			return false
		},
		/* 39 SubOp <- <'-'> */
		func() bool {
			position180, tokenIndex180 := position, tokenIndex
			{
				position181 := position
				if buffer[position] != rune('-') {
					goto l180
				}
				position++
				add(ruleSubOp, position181)
			}
			return true
		l180:
			position, tokenIndex = position180, tokenIndex180
			return false
		},
		/* 40 MultGroupOp <- <(MulOp / DivOp / ModOp)> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				{
					position184, tokenIndex184 := position, tokenIndex
					if !_rules[ruleMulOp]() {
						goto l185
					}
					goto l184
				l185:
					position, tokenIndex = position184, tokenIndex184
					if !_rules[ruleDivOp]() {
						goto l186
					}
					goto l184
				l186:
					position, tokenIndex = position184, tokenIndex184
					if !_rules[ruleModOp]() {
						goto l182
					}
				}
			l184:
				add(ruleMultGroupOp, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 41 MulOp <- <'*'> */
		func() bool {
			position187, tokenIndex187 := position, tokenIndex
			{
				position188 := position
				if buffer[position] != rune('*') {
					goto l187
				}
				position++
				add(ruleMulOp, position188)
			}
			return true
		l187:
			position, tokenIndex = position187, tokenIndex187
			return false
		},
		/* 42 DivOp <- <'/'> */
		func() bool {
			position189, tokenIndex189 := position, tokenIndex
			{
				position190 := position
				if buffer[position] != rune('/') {
					goto l189
				}
				position++
				add(ruleDivOp, position190)
			}
			return true
		l189:
			position, tokenIndex = position189, tokenIndex189
			return false
		},
		/* 43 ModOp <- <'%'> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				if buffer[position] != rune('%') {
					goto l191
				}
				position++
				add(ruleModOp, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 44 UnaryOp <- <(PositiveOp / NegativeOp / NotOp)> */
		func() bool {
			position193, tokenIndex193 := position, tokenIndex
			{
				position194 := position
				{
					position195, tokenIndex195 := position, tokenIndex
					if !_rules[rulePositiveOp]() {
						goto l196
					}
					goto l195
				l196:
					position, tokenIndex = position195, tokenIndex195
					if !_rules[ruleNegativeOp]() {
						goto l197
					}
					goto l195
				l197:
					position, tokenIndex = position195, tokenIndex195
					if !_rules[ruleNotOp]() {
						goto l193
					}
				}
			l195:
				add(ruleUnaryOp, position194)
			}
			return true
		l193:
			position, tokenIndex = position193, tokenIndex193
			return false
		},
		/* 45 PositiveOp <- <'+'> */
		func() bool {
			position198, tokenIndex198 := position, tokenIndex
			{
				position199 := position
				if buffer[position] != rune('+') {
					goto l198
				}
				position++
				add(rulePositiveOp, position199)
			}
			return true
		l198:
			position, tokenIndex = position198, tokenIndex198
			return false
		},
		/* 46 NegativeOp <- <('-' !'#')> */
		func() bool {
			position200, tokenIndex200 := position, tokenIndex
			{
				position201 := position
				if buffer[position] != rune('-') {
					goto l200
				}
				position++
				{
					position202, tokenIndex202 := position, tokenIndex
					if buffer[position] != rune('#') {
						goto l202
					}
					position++
					goto l200
				l202:
					position, tokenIndex = position202, tokenIndex202
				}
				add(ruleNegativeOp, position201)
			}
			return true
		l200:
			position, tokenIndex = position200, tokenIndex200
			return false
		},
		/* 47 NotOp <- <'!'> */
		func() bool {
			position203, tokenIndex203 := position, tokenIndex
			{
				position204 := position
				if buffer[position] != rune('!') {
					goto l203
				}
				position++
				add(ruleNotOp, position204)
			}
			return true
		l203:
			position, tokenIndex = position203, tokenIndex203
			return false
		},
		/* 48 ReservedWords <- <(('l' 'e' 't') / ('s' 't' 'r' 'i' 'c' 't') / ('b' 'a' 's' 'e' '1' '6') / ('b' 'a' 's' 'e' '5' '8') / ('b' 'a' 's' 'e' '6' '4') / ('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e') / ('i' 'f') / ('t' 'h' 'e' 'n') / ('e' 'l' 's' 'e') / ('m' 'a' 't' 'c' 'h') / ('c' 'a' 's' 'e') / ('f' 'u' 'n' 'c') / ('F' 'O' 'L' 'D'))> */
		func() bool {
			position205, tokenIndex205 := position, tokenIndex
			{
				position206 := position
				{
					position207, tokenIndex207 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l208
					}
					position++
					if buffer[position] != rune('e') {
						goto l208
					}
					position++
					if buffer[position] != rune('t') {
						goto l208
					}
					position++
					goto l207
				l208:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('s') {
						goto l209
					}
					position++
					if buffer[position] != rune('t') {
						goto l209
					}
					position++
					if buffer[position] != rune('r') {
						goto l209
					}
					position++
					if buffer[position] != rune('i') {
						goto l209
					}
					position++
					if buffer[position] != rune('c') {
						goto l209
					}
					position++
					if buffer[position] != rune('t') {
						goto l209
					}
					position++
					goto l207
				l209:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('b') {
						goto l210
					}
					position++
					if buffer[position] != rune('a') {
						goto l210
					}
					position++
					if buffer[position] != rune('s') {
						goto l210
					}
					position++
					if buffer[position] != rune('e') {
						goto l210
					}
					position++
					if buffer[position] != rune('1') {
						goto l210
					}
					position++
					if buffer[position] != rune('6') {
						goto l210
					}
					position++
					goto l207
				l210:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('b') {
						goto l211
					}
					position++
					if buffer[position] != rune('a') {
						goto l211
					}
					position++
					if buffer[position] != rune('s') {
						goto l211
					}
					position++
					if buffer[position] != rune('e') {
						goto l211
					}
					position++
					if buffer[position] != rune('5') {
						goto l211
					}
					position++
					if buffer[position] != rune('8') {
						goto l211
					}
					position++
					goto l207
				l211:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('b') {
						goto l212
					}
					position++
					if buffer[position] != rune('a') {
						goto l212
					}
					position++
					if buffer[position] != rune('s') {
						goto l212
					}
					position++
					if buffer[position] != rune('e') {
						goto l212
					}
					position++
					if buffer[position] != rune('6') {
						goto l212
					}
					position++
					if buffer[position] != rune('4') {
						goto l212
					}
					position++
					goto l207
				l212:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('t') {
						goto l213
					}
					position++
					if buffer[position] != rune('r') {
						goto l213
					}
					position++
					if buffer[position] != rune('u') {
						goto l213
					}
					position++
					if buffer[position] != rune('e') {
						goto l213
					}
					position++
					goto l207
				l213:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('f') {
						goto l214
					}
					position++
					if buffer[position] != rune('a') {
						goto l214
					}
					position++
					if buffer[position] != rune('l') {
						goto l214
					}
					position++
					if buffer[position] != rune('s') {
						goto l214
					}
					position++
					if buffer[position] != rune('e') {
						goto l214
					}
					position++
					goto l207
				l214:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('i') {
						goto l215
					}
					position++
					if buffer[position] != rune('f') {
						goto l215
					}
					position++
					goto l207
				l215:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('t') {
						goto l216
					}
					position++
					if buffer[position] != rune('h') {
						goto l216
					}
					position++
					if buffer[position] != rune('e') {
						goto l216
					}
					position++
					if buffer[position] != rune('n') {
						goto l216
					}
					position++
					goto l207
				l216:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('e') {
						goto l217
					}
					position++
					if buffer[position] != rune('l') {
						goto l217
					}
					position++
					if buffer[position] != rune('s') {
						goto l217
					}
					position++
					if buffer[position] != rune('e') {
						goto l217
					}
					position++
					goto l207
				l217:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('m') {
						goto l218
					}
					position++
					if buffer[position] != rune('a') {
						goto l218
					}
					position++
					if buffer[position] != rune('t') {
						goto l218
					}
					position++
					if buffer[position] != rune('c') {
						goto l218
					}
					position++
					if buffer[position] != rune('h') {
						goto l218
					}
					position++
					goto l207
				l218:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('c') {
						goto l219
					}
					position++
					if buffer[position] != rune('a') {
						goto l219
					}
					position++
					if buffer[position] != rune('s') {
						goto l219
					}
					position++
					if buffer[position] != rune('e') {
						goto l219
					}
					position++
					goto l207
				l219:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('f') {
						goto l220
					}
					position++
					if buffer[position] != rune('u') {
						goto l220
					}
					position++
					if buffer[position] != rune('n') {
						goto l220
					}
					position++
					if buffer[position] != rune('c') {
						goto l220
					}
					position++
					goto l207
				l220:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('F') {
						goto l205
					}
					position++
					if buffer[position] != rune('O') {
						goto l205
					}
					position++
					if buffer[position] != rune('L') {
						goto l205
					}
					position++
					if buffer[position] != rune('D') {
						goto l205
					}
					position++
				}
			l207:
				add(ruleReservedWords, position206)
			}
			return true
		l205:
			position, tokenIndex = position205, tokenIndex205
			return false
		},
		/* 49 Const <- <(Integer / String / ByteVector / Boolean / List / Tuple)> */
		func() bool {
			position221, tokenIndex221 := position, tokenIndex
			{
				position222 := position
				{
					position223, tokenIndex223 := position, tokenIndex
					if !_rules[ruleInteger]() {
						goto l224
					}
					goto l223
				l224:
					position, tokenIndex = position223, tokenIndex223
					if !_rules[ruleString]() {
						goto l225
					}
					goto l223
				l225:
					position, tokenIndex = position223, tokenIndex223
					if !_rules[ruleByteVector]() {
						goto l226
					}
					goto l223
				l226:
					position, tokenIndex = position223, tokenIndex223
					if !_rules[ruleBoolean]() {
						goto l227
					}
					goto l223
				l227:
					position, tokenIndex = position223, tokenIndex223
					if !_rules[ruleList]() {
						goto l228
					}
					goto l223
				l228:
					position, tokenIndex = position223, tokenIndex223
					if !_rules[ruleTuple]() {
						goto l221
					}
				}
			l223:
				add(ruleConst, position222)
			}
			return true
		l221:
			position, tokenIndex = position221, tokenIndex221
			return false
		},
		/* 50 Identifier <- <((!ReservedWords ([A-Z] / [a-z] / ('_' &([A-Z] / [a-z]))) ([A-Z] / [a-z] / [0-9] / ('_' !'_'))*) / (ReservedWords ([A-Z] / [a-z] / [0-9] / ('_' !'_'))+))> */
		func() bool {
			position229, tokenIndex229 := position, tokenIndex
			{
				position230 := position
				{
					position231, tokenIndex231 := position, tokenIndex
					{
						position233, tokenIndex233 := position, tokenIndex
						if !_rules[ruleReservedWords]() {
							goto l233
						}
						goto l232
					l233:
						position, tokenIndex = position233, tokenIndex233
					}
					{
						position234, tokenIndex234 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l235
						}
						position++
						goto l234
					l235:
						position, tokenIndex = position234, tokenIndex234
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l236
						}
						position++
						goto l234
					l236:
						position, tokenIndex = position234, tokenIndex234
						if buffer[position] != rune('_') {
							goto l232
						}
						position++
						{
							position237, tokenIndex237 := position, tokenIndex
							{
								position238, tokenIndex238 := position, tokenIndex
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l239
								}
								position++
								goto l238
							l239:
								position, tokenIndex = position238, tokenIndex238
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l232
								}
								position++
							}
						l238:
							position, tokenIndex = position237, tokenIndex237
						}
					}
				l234:
				l240:
					{
						position241, tokenIndex241 := position, tokenIndex
						{
							position242, tokenIndex242 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l243
							}
							position++
							goto l242
						l243:
							position, tokenIndex = position242, tokenIndex242
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l244
							}
							position++
							goto l242
						l244:
							position, tokenIndex = position242, tokenIndex242
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l245
							}
							position++
							goto l242
						l245:
							position, tokenIndex = position242, tokenIndex242
							if buffer[position] != rune('_') {
								goto l241
							}
							position++
							{
								position246, tokenIndex246 := position, tokenIndex
								if buffer[position] != rune('_') {
									goto l246
								}
								position++
								goto l241
							l246:
								position, tokenIndex = position246, tokenIndex246
							}
						}
					l242:
						goto l240
					l241:
						position, tokenIndex = position241, tokenIndex241
					}
					goto l231
				l232:
					position, tokenIndex = position231, tokenIndex231
					if !_rules[ruleReservedWords]() {
						goto l229
					}
					{
						position249, tokenIndex249 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l250
						}
						position++
						goto l249
					l250:
						position, tokenIndex = position249, tokenIndex249
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l251
						}
						position++
						goto l249
					l251:
						position, tokenIndex = position249, tokenIndex249
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l252
						}
						position++
						goto l249
					l252:
						position, tokenIndex = position249, tokenIndex249
						if buffer[position] != rune('_') {
							goto l229
						}
						position++
						{
							position253, tokenIndex253 := position, tokenIndex
							if buffer[position] != rune('_') {
								goto l253
							}
							position++
							goto l229
						l253:
							position, tokenIndex = position253, tokenIndex253
						}
					}
				l249:
				l247:
					{
						position248, tokenIndex248 := position, tokenIndex
						{
							position254, tokenIndex254 := position, tokenIndex
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l255
							}
							position++
							goto l254
						l255:
							position, tokenIndex = position254, tokenIndex254
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l256
							}
							position++
							goto l254
						l256:
							position, tokenIndex = position254, tokenIndex254
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l257
							}
							position++
							goto l254
						l257:
							position, tokenIndex = position254, tokenIndex254
							if buffer[position] != rune('_') {
								goto l248
							}
							position++
							{
								position258, tokenIndex258 := position, tokenIndex
								if buffer[position] != rune('_') {
									goto l258
								}
								position++
								goto l248
							l258:
								position, tokenIndex = position258, tokenIndex258
							}
						}
					l254:
						goto l247
					l248:
						position, tokenIndex = position248, tokenIndex248
					}
				}
			l231:
				add(ruleIdentifier, position230)
			}
			return true
		l229:
			position, tokenIndex = position229, tokenIndex229
			return false
		},
		/* 51 Type <- <(([A-Z] / [a-z]) ([A-Z] / [a-z] / [0-9])*)> */
		func() bool {
			position259, tokenIndex259 := position, tokenIndex
			{
				position260 := position
				{
					position261, tokenIndex261 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l262
					}
					position++
					goto l261
				l262:
					position, tokenIndex = position261, tokenIndex261
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l259
					}
					position++
				}
			l261:
			l263:
				{
					position264, tokenIndex264 := position, tokenIndex
					{
						position265, tokenIndex265 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l266
						}
						position++
						goto l265
					l266:
						position, tokenIndex = position265, tokenIndex265
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l267
						}
						position++
						goto l265
					l267:
						position, tokenIndex = position265, tokenIndex265
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l264
						}
						position++
					}
				l265:
					goto l263
				l264:
					position, tokenIndex = position264, tokenIndex264
				}
				add(ruleType, position260)
			}
			return true
		l259:
			position, tokenIndex = position259, tokenIndex259
			return false
		},
		/* 52 GenericType <- <(Type _ '[' _ Types _ ']')> */
		func() bool {
			position268, tokenIndex268 := position, tokenIndex
			{
				position269 := position
				if !_rules[ruleType]() {
					goto l268
				}
				if !_rules[rule_]() {
					goto l268
				}
				if buffer[position] != rune('[') {
					goto l268
				}
				position++
				if !_rules[rule_]() {
					goto l268
				}
				if !_rules[ruleTypes]() {
					goto l268
				}
				if !_rules[rule_]() {
					goto l268
				}
				if buffer[position] != rune(']') {
					goto l268
				}
				position++
				add(ruleGenericType, position269)
			}
			return true
		l268:
			position, tokenIndex = position268, tokenIndex268
			return false
		},
		/* 53 TupleType <- <('(' _ Types _ (',' _ Types)+ _ ')')> */
		func() bool {
			position270, tokenIndex270 := position, tokenIndex
			{
				position271 := position
				if buffer[position] != rune('(') {
					goto l270
				}
				position++
				if !_rules[rule_]() {
					goto l270
				}
				if !_rules[ruleTypes]() {
					goto l270
				}
				if !_rules[rule_]() {
					goto l270
				}
				if buffer[position] != rune(',') {
					goto l270
				}
				position++
				if !_rules[rule_]() {
					goto l270
				}
				if !_rules[ruleTypes]() {
					goto l270
				}
			l272:
				{
					position273, tokenIndex273 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l273
					}
					position++
					if !_rules[rule_]() {
						goto l273
					}
					if !_rules[ruleTypes]() {
						goto l273
					}
					goto l272
				l273:
					position, tokenIndex = position273, tokenIndex273
				}
				if !_rules[rule_]() {
					goto l270
				}
				if buffer[position] != rune(')') {
					goto l270
				}
				position++
				add(ruleTupleType, position271)
			}
			return true
		l270:
			position, tokenIndex = position270, tokenIndex270
			return false
		},
		/* 54 Types <- <((GenericType / TupleType / Type) (_ '|' _ Types)?)> */
		func() bool {
			position274, tokenIndex274 := position, tokenIndex
			{
				position275 := position
				{
					position276, tokenIndex276 := position, tokenIndex
					if !_rules[ruleGenericType]() {
						goto l277
					}
					goto l276
				l277:
					position, tokenIndex = position276, tokenIndex276
					if !_rules[ruleTupleType]() {
						goto l278
					}
					goto l276
				l278:
					position, tokenIndex = position276, tokenIndex276
					if !_rules[ruleType]() {
						goto l274
					}
				}
			l276:
				{
					position279, tokenIndex279 := position, tokenIndex
					if !_rules[rule_]() {
						goto l279
					}
					if buffer[position] != rune('|') {
						goto l279
					}
					position++
					if !_rules[rule_]() {
						goto l279
					}
					if !_rules[ruleTypes]() {
						goto l279
					}
					goto l280
				l279:
					position, tokenIndex = position279, tokenIndex279
				}
			l280:
				add(ruleTypes, position275)
			}
			return true
		l274:
			position, tokenIndex = position274, tokenIndex274
			return false
		},
		/* 55 Base16 <- <('b' 'a' 's' 'e' '1' '6' '\'' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f')* '\'')> */
		func() bool {
			position281, tokenIndex281 := position, tokenIndex
			{
				position282 := position
				if buffer[position] != rune('b') {
					goto l281
				}
				position++
				if buffer[position] != rune('a') {
					goto l281
				}
				position++
				if buffer[position] != rune('s') {
					goto l281
				}
				position++
				if buffer[position] != rune('e') {
					goto l281
				}
				position++
				if buffer[position] != rune('1') {
					goto l281
				}
				position++
				if buffer[position] != rune('6') {
					goto l281
				}
				position++
				if buffer[position] != rune('\'') {
					goto l281
				}
				position++
			l283:
				{
					position284, tokenIndex284 := position, tokenIndex
					{
						position285, tokenIndex285 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l286
						}
						position++
						goto l285
					l286:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('A') {
							goto l287
						}
						position++
						goto l285
					l287:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('B') {
							goto l288
						}
						position++
						goto l285
					l288:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('C') {
							goto l289
						}
						position++
						goto l285
					l289:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('D') {
							goto l290
						}
						position++
						goto l285
					l290:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('E') {
							goto l291
						}
						position++
						goto l285
					l291:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('F') {
							goto l292
						}
						position++
						goto l285
					l292:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('a') {
							goto l293
						}
						position++
						goto l285
					l293:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('b') {
							goto l294
						}
						position++
						goto l285
					l294:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('c') {
							goto l295
						}
						position++
						goto l285
					l295:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('d') {
							goto l296
						}
						position++
						goto l285
					l296:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('e') {
							goto l297
						}
						position++
						goto l285
					l297:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('f') {
							goto l284
						}
						position++
					}
				l285:
					goto l283
				l284:
					position, tokenIndex = position284, tokenIndex284
				}
				if buffer[position] != rune('\'') {
					goto l281
				}
				position++
				add(ruleBase16, position282)
			}
			return true
		l281:
			position, tokenIndex = position281, tokenIndex281
			return false
		},
		/* 56 Base58 <- <('b' 'a' 's' 'e' '5' '8' '\'' ('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'J' / 'K' / 'L' / 'M' / 'N' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z')* '\'')> */
		func() bool {
			position298, tokenIndex298 := position, tokenIndex
			{
				position299 := position
				if buffer[position] != rune('b') {
					goto l298
				}
				position++
				if buffer[position] != rune('a') {
					goto l298
				}
				position++
				if buffer[position] != rune('s') {
					goto l298
				}
				position++
				if buffer[position] != rune('e') {
					goto l298
				}
				position++
				if buffer[position] != rune('5') {
					goto l298
				}
				position++
				if buffer[position] != rune('8') {
					goto l298
				}
				position++
				if buffer[position] != rune('\'') {
					goto l298
				}
				position++
			l300:
				{
					position301, tokenIndex301 := position, tokenIndex
					{
						position302, tokenIndex302 := position, tokenIndex
						if buffer[position] != rune('1') {
							goto l303
						}
						position++
						goto l302
					l303:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('2') {
							goto l304
						}
						position++
						goto l302
					l304:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('3') {
							goto l305
						}
						position++
						goto l302
					l305:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('4') {
							goto l306
						}
						position++
						goto l302
					l306:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('5') {
							goto l307
						}
						position++
						goto l302
					l307:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('6') {
							goto l308
						}
						position++
						goto l302
					l308:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('7') {
							goto l309
						}
						position++
						goto l302
					l309:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('8') {
							goto l310
						}
						position++
						goto l302
					l310:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('9') {
							goto l311
						}
						position++
						goto l302
					l311:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('A') {
							goto l312
						}
						position++
						goto l302
					l312:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('B') {
							goto l313
						}
						position++
						goto l302
					l313:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('C') {
							goto l314
						}
						position++
						goto l302
					l314:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('D') {
							goto l315
						}
						position++
						goto l302
					l315:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('E') {
							goto l316
						}
						position++
						goto l302
					l316:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('F') {
							goto l317
						}
						position++
						goto l302
					l317:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('G') {
							goto l318
						}
						position++
						goto l302
					l318:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('H') {
							goto l319
						}
						position++
						goto l302
					l319:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('J') {
							goto l320
						}
						position++
						goto l302
					l320:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('K') {
							goto l321
						}
						position++
						goto l302
					l321:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('L') {
							goto l322
						}
						position++
						goto l302
					l322:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('M') {
							goto l323
						}
						position++
						goto l302
					l323:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('N') {
							goto l324
						}
						position++
						goto l302
					l324:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('P') {
							goto l325
						}
						position++
						goto l302
					l325:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('Q') {
							goto l326
						}
						position++
						goto l302
					l326:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('R') {
							goto l327
						}
						position++
						goto l302
					l327:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('S') {
							goto l328
						}
						position++
						goto l302
					l328:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('T') {
							goto l329
						}
						position++
						goto l302
					l329:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('U') {
							goto l330
						}
						position++
						goto l302
					l330:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('V') {
							goto l331
						}
						position++
						goto l302
					l331:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('W') {
							goto l332
						}
						position++
						goto l302
					l332:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('X') {
							goto l333
						}
						position++
						goto l302
					l333:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('Y') {
							goto l334
						}
						position++
						goto l302
					l334:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('Z') {
							goto l335
						}
						position++
						goto l302
					l335:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('a') {
							goto l336
						}
						position++
						goto l302
					l336:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('b') {
							goto l337
						}
						position++
						goto l302
					l337:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('c') {
							goto l338
						}
						position++
						goto l302
					l338:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('d') {
							goto l339
						}
						position++
						goto l302
					l339:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('e') {
							goto l340
						}
						position++
						goto l302
					l340:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('f') {
							goto l341
						}
						position++
						goto l302
					l341:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('g') {
							goto l342
						}
						position++
						goto l302
					l342:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('h') {
							goto l343
						}
						position++
						goto l302
					l343:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('i') {
							goto l344
						}
						position++
						goto l302
					l344:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('j') {
							goto l345
						}
						position++
						goto l302
					l345:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('k') {
							goto l346
						}
						position++
						goto l302
					l346:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('m') {
							goto l347
						}
						position++
						goto l302
					l347:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('n') {
							goto l348
						}
						position++
						goto l302
					l348:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('o') {
							goto l349
						}
						position++
						goto l302
					l349:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('p') {
							goto l350
						}
						position++
						goto l302
					l350:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('q') {
							goto l351
						}
						position++
						goto l302
					l351:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('r') {
							goto l352
						}
						position++
						goto l302
					l352:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('s') {
							goto l353
						}
						position++
						goto l302
					l353:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('t') {
							goto l354
						}
						position++
						goto l302
					l354:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('u') {
							goto l355
						}
						position++
						goto l302
					l355:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('v') {
							goto l356
						}
						position++
						goto l302
					l356:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('w') {
							goto l357
						}
						position++
						goto l302
					l357:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('x') {
							goto l358
						}
						position++
						goto l302
					l358:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('y') {
							goto l359
						}
						position++
						goto l302
					l359:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('z') {
							goto l301
						}
						position++
					}
				l302:
					goto l300
				l301:
					position, tokenIndex = position301, tokenIndex301
				}
				if buffer[position] != rune('\'') {
					goto l298
				}
				position++
				add(ruleBase58, position299)
			}
			return true
		l298:
			position, tokenIndex = position298, tokenIndex298
			return false
		},
		/* 57 Base64 <- <('b' 'a' 's' 'e' '6' '4' '\'' ('A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'G' / 'H' / 'I' / 'J' / 'K' / 'L' / 'M' / 'N' / 'O' / 'P' / 'Q' / 'R' / 'S' / 'T' / 'U' / 'V' / 'W' / 'X' / 'Y' / 'Z' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '0' / '1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9' / '+' / '/' / '=')* '\'')> */
		func() bool {
			position360, tokenIndex360 := position, tokenIndex
			{
				position361 := position
				if buffer[position] != rune('b') {
					goto l360
				}
				position++
				if buffer[position] != rune('a') {
					goto l360
				}
				position++
				if buffer[position] != rune('s') {
					goto l360
				}
				position++
				if buffer[position] != rune('e') {
					goto l360
				}
				position++
				if buffer[position] != rune('6') {
					goto l360
				}
				position++
				if buffer[position] != rune('4') {
					goto l360
				}
				position++
				if buffer[position] != rune('\'') {
					goto l360
				}
				position++
			l362:
				{
					position363, tokenIndex363 := position, tokenIndex
					{
						position364, tokenIndex364 := position, tokenIndex
						if buffer[position] != rune('A') {
							goto l365
						}
						position++
						goto l364
					l365:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('B') {
							goto l366
						}
						position++
						goto l364
					l366:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('C') {
							goto l367
						}
						position++
						goto l364
					l367:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('D') {
							goto l368
						}
						position++
						goto l364
					l368:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('E') {
							goto l369
						}
						position++
						goto l364
					l369:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('F') {
							goto l370
						}
						position++
						goto l364
					l370:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('G') {
							goto l371
						}
						position++
						goto l364
					l371:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('H') {
							goto l372
						}
						position++
						goto l364
					l372:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('I') {
							goto l373
						}
						position++
						goto l364
					l373:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('J') {
							goto l374
						}
						position++
						goto l364
					l374:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('K') {
							goto l375
						}
						position++
						goto l364
					l375:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('L') {
							goto l376
						}
						position++
						goto l364
					l376:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('M') {
							goto l377
						}
						position++
						goto l364
					l377:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('N') {
							goto l378
						}
						position++
						goto l364
					l378:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('O') {
							goto l379
						}
						position++
						goto l364
					l379:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('P') {
							goto l380
						}
						position++
						goto l364
					l380:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('Q') {
							goto l381
						}
						position++
						goto l364
					l381:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('R') {
							goto l382
						}
						position++
						goto l364
					l382:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('S') {
							goto l383
						}
						position++
						goto l364
					l383:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('T') {
							goto l384
						}
						position++
						goto l364
					l384:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('U') {
							goto l385
						}
						position++
						goto l364
					l385:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('V') {
							goto l386
						}
						position++
						goto l364
					l386:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('W') {
							goto l387
						}
						position++
						goto l364
					l387:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('X') {
							goto l388
						}
						position++
						goto l364
					l388:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('Y') {
							goto l389
						}
						position++
						goto l364
					l389:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('Z') {
							goto l390
						}
						position++
						goto l364
					l390:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('a') {
							goto l391
						}
						position++
						goto l364
					l391:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('b') {
							goto l392
						}
						position++
						goto l364
					l392:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('c') {
							goto l393
						}
						position++
						goto l364
					l393:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('d') {
							goto l394
						}
						position++
						goto l364
					l394:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('e') {
							goto l395
						}
						position++
						goto l364
					l395:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('f') {
							goto l396
						}
						position++
						goto l364
					l396:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('g') {
							goto l397
						}
						position++
						goto l364
					l397:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('h') {
							goto l398
						}
						position++
						goto l364
					l398:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('i') {
							goto l399
						}
						position++
						goto l364
					l399:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('j') {
							goto l400
						}
						position++
						goto l364
					l400:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('k') {
							goto l401
						}
						position++
						goto l364
					l401:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('l') {
							goto l402
						}
						position++
						goto l364
					l402:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('m') {
							goto l403
						}
						position++
						goto l364
					l403:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('n') {
							goto l404
						}
						position++
						goto l364
					l404:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('o') {
							goto l405
						}
						position++
						goto l364
					l405:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('p') {
							goto l406
						}
						position++
						goto l364
					l406:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('q') {
							goto l407
						}
						position++
						goto l364
					l407:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('r') {
							goto l408
						}
						position++
						goto l364
					l408:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('s') {
							goto l409
						}
						position++
						goto l364
					l409:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('t') {
							goto l410
						}
						position++
						goto l364
					l410:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('u') {
							goto l411
						}
						position++
						goto l364
					l411:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('v') {
							goto l412
						}
						position++
						goto l364
					l412:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('w') {
							goto l413
						}
						position++
						goto l364
					l413:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('x') {
							goto l414
						}
						position++
						goto l364
					l414:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('y') {
							goto l415
						}
						position++
						goto l364
					l415:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('z') {
							goto l416
						}
						position++
						goto l364
					l416:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('0') {
							goto l417
						}
						position++
						goto l364
					l417:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('1') {
							goto l418
						}
						position++
						goto l364
					l418:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('2') {
							goto l419
						}
						position++
						goto l364
					l419:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('3') {
							goto l420
						}
						position++
						goto l364
					l420:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('4') {
							goto l421
						}
						position++
						goto l364
					l421:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('5') {
							goto l422
						}
						position++
						goto l364
					l422:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('6') {
							goto l423
						}
						position++
						goto l364
					l423:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('7') {
							goto l424
						}
						position++
						goto l364
					l424:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('8') {
							goto l425
						}
						position++
						goto l364
					l425:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('9') {
							goto l426
						}
						position++
						goto l364
					l426:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('+') {
							goto l427
						}
						position++
						goto l364
					l427:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('/') {
							goto l428
						}
						position++
						goto l364
					l428:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('=') {
							goto l363
						}
						position++
					}
				l364:
					goto l362
				l363:
					position, tokenIndex = position363, tokenIndex363
				}
				if buffer[position] != rune('\'') {
					goto l360
				}
				position++
				add(ruleBase64, position361)
			}
			return true
		l360:
			position, tokenIndex = position360, tokenIndex360
			return false
		},
		/* 58 ByteVector <- <(Base16 / Base58 / Base64)> */
		func() bool {
			position429, tokenIndex429 := position, tokenIndex
			{
				position430 := position
				{
					position431, tokenIndex431 := position, tokenIndex
					if !_rules[ruleBase16]() {
						goto l432
					}
					goto l431
				l432:
					position, tokenIndex = position431, tokenIndex431
					if !_rules[ruleBase58]() {
						goto l433
					}
					goto l431
				l433:
					position, tokenIndex = position431, tokenIndex431
					if !_rules[ruleBase64]() {
						goto l429
					}
				}
			l431:
				add(ruleByteVector, position430)
			}
			return true
		l429:
			position, tokenIndex = position429, tokenIndex429
			return false
		},
		/* 59 Boolean <- <(('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e'))> */
		func() bool {
			position434, tokenIndex434 := position, tokenIndex
			{
				position435 := position
				{
					position436, tokenIndex436 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l437
					}
					position++
					if buffer[position] != rune('r') {
						goto l437
					}
					position++
					if buffer[position] != rune('u') {
						goto l437
					}
					position++
					if buffer[position] != rune('e') {
						goto l437
					}
					position++
					goto l436
				l437:
					position, tokenIndex = position436, tokenIndex436
					if buffer[position] != rune('f') {
						goto l434
					}
					position++
					if buffer[position] != rune('a') {
						goto l434
					}
					position++
					if buffer[position] != rune('l') {
						goto l434
					}
					position++
					if buffer[position] != rune('s') {
						goto l434
					}
					position++
					if buffer[position] != rune('e') {
						goto l434
					}
					position++
				}
			l436:
				add(ruleBoolean, position435)
			}
			return true
		l434:
			position, tokenIndex = position434, tokenIndex434
			return false
		},
		/* 60 String <- <('"' (UnicodeChar / EscapedChar / Char)* '"')> */
		func() bool {
			position438, tokenIndex438 := position, tokenIndex
			{
				position439 := position
				if buffer[position] != rune('"') {
					goto l438
				}
				position++
			l440:
				{
					position441, tokenIndex441 := position, tokenIndex
					{
						position442, tokenIndex442 := position, tokenIndex
						if !_rules[ruleUnicodeChar]() {
							goto l443
						}
						goto l442
					l443:
						position, tokenIndex = position442, tokenIndex442
						if !_rules[ruleEscapedChar]() {
							goto l444
						}
						goto l442
					l444:
						position, tokenIndex = position442, tokenIndex442
						if !_rules[ruleChar]() {
							goto l441
						}
					}
				l442:
					goto l440
				l441:
					position, tokenIndex = position441, tokenIndex441
				}
				if buffer[position] != rune('"') {
					goto l438
				}
				position++
				add(ruleString, position439)
			}
			return true
		l438:
			position, tokenIndex = position438, tokenIndex438
			return false
		},
		/* 61 UnicodeChar <- <('\\' 'u' ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f') ([0-9] / 'A' / 'B' / 'C' / 'D' / 'E' / 'F' / 'a' / 'b' / 'c' / 'd' / 'e' / 'f'))> */
		func() bool {
			position445, tokenIndex445 := position, tokenIndex
			{
				position446 := position
				if buffer[position] != rune('\\') {
					goto l445
				}
				position++
				if buffer[position] != rune('u') {
					goto l445
				}
				position++
				{
					position447, tokenIndex447 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l448
					}
					position++
					goto l447
				l448:
					position, tokenIndex = position447, tokenIndex447
					if buffer[position] != rune('A') {
						goto l449
					}
					position++
					goto l447
				l449:
					position, tokenIndex = position447, tokenIndex447
					if buffer[position] != rune('B') {
						goto l450
					}
					position++
					goto l447
				l450:
					position, tokenIndex = position447, tokenIndex447
					if buffer[position] != rune('C') {
						goto l451
					}
					position++
					goto l447
				l451:
					position, tokenIndex = position447, tokenIndex447
					if buffer[position] != rune('D') {
						goto l452
					}
					position++
					goto l447
				l452:
					position, tokenIndex = position447, tokenIndex447
					if buffer[position] != rune('E') {
						goto l453
					}
					position++
					goto l447
				l453:
					position, tokenIndex = position447, tokenIndex447
					if buffer[position] != rune('F') {
						goto l454
					}
					position++
					goto l447
				l454:
					position, tokenIndex = position447, tokenIndex447
					if buffer[position] != rune('a') {
						goto l455
					}
					position++
					goto l447
				l455:
					position, tokenIndex = position447, tokenIndex447
					if buffer[position] != rune('b') {
						goto l456
					}
					position++
					goto l447
				l456:
					position, tokenIndex = position447, tokenIndex447
					if buffer[position] != rune('c') {
						goto l457
					}
					position++
					goto l447
				l457:
					position, tokenIndex = position447, tokenIndex447
					if buffer[position] != rune('d') {
						goto l458
					}
					position++
					goto l447
				l458:
					position, tokenIndex = position447, tokenIndex447
					if buffer[position] != rune('e') {
						goto l459
					}
					position++
					goto l447
				l459:
					position, tokenIndex = position447, tokenIndex447
					if buffer[position] != rune('f') {
						goto l445
					}
					position++
				}
			l447:
				{
					position460, tokenIndex460 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l461
					}
					position++
					goto l460
				l461:
					position, tokenIndex = position460, tokenIndex460
					if buffer[position] != rune('A') {
						goto l462
					}
					position++
					goto l460
				l462:
					position, tokenIndex = position460, tokenIndex460
					if buffer[position] != rune('B') {
						goto l463
					}
					position++
					goto l460
				l463:
					position, tokenIndex = position460, tokenIndex460
					if buffer[position] != rune('C') {
						goto l464
					}
					position++
					goto l460
				l464:
					position, tokenIndex = position460, tokenIndex460
					if buffer[position] != rune('D') {
						goto l465
					}
					position++
					goto l460
				l465:
					position, tokenIndex = position460, tokenIndex460
					if buffer[position] != rune('E') {
						goto l466
					}
					position++
					goto l460
				l466:
					position, tokenIndex = position460, tokenIndex460
					if buffer[position] != rune('F') {
						goto l467
					}
					position++
					goto l460
				l467:
					position, tokenIndex = position460, tokenIndex460
					if buffer[position] != rune('a') {
						goto l468
					}
					position++
					goto l460
				l468:
					position, tokenIndex = position460, tokenIndex460
					if buffer[position] != rune('b') {
						goto l469
					}
					position++
					goto l460
				l469:
					position, tokenIndex = position460, tokenIndex460
					if buffer[position] != rune('c') {
						goto l470
					}
					position++
					goto l460
				l470:
					position, tokenIndex = position460, tokenIndex460
					if buffer[position] != rune('d') {
						goto l471
					}
					position++
					goto l460
				l471:
					position, tokenIndex = position460, tokenIndex460
					if buffer[position] != rune('e') {
						goto l472
					}
					position++
					goto l460
				l472:
					position, tokenIndex = position460, tokenIndex460
					if buffer[position] != rune('f') {
						goto l445
					}
					position++
				}
			l460:
				{
					position473, tokenIndex473 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l474
					}
					position++
					goto l473
				l474:
					position, tokenIndex = position473, tokenIndex473
					if buffer[position] != rune('A') {
						goto l475
					}
					position++
					goto l473
				l475:
					position, tokenIndex = position473, tokenIndex473
					if buffer[position] != rune('B') {
						goto l476
					}
					position++
					goto l473
				l476:
					position, tokenIndex = position473, tokenIndex473
					if buffer[position] != rune('C') {
						goto l477
					}
					position++
					goto l473
				l477:
					position, tokenIndex = position473, tokenIndex473
					if buffer[position] != rune('D') {
						goto l478
					}
					position++
					goto l473
				l478:
					position, tokenIndex = position473, tokenIndex473
					if buffer[position] != rune('E') {
						goto l479
					}
					position++
					goto l473
				l479:
					position, tokenIndex = position473, tokenIndex473
					if buffer[position] != rune('F') {
						goto l480
					}
					position++
					goto l473
				l480:
					position, tokenIndex = position473, tokenIndex473
					if buffer[position] != rune('a') {
						goto l481
					}
					position++
					goto l473
				l481:
					position, tokenIndex = position473, tokenIndex473
					if buffer[position] != rune('b') {
						goto l482
					}
					position++
					goto l473
				l482:
					position, tokenIndex = position473, tokenIndex473
					if buffer[position] != rune('c') {
						goto l483
					}
					position++
					goto l473
				l483:
					position, tokenIndex = position473, tokenIndex473
					if buffer[position] != rune('d') {
						goto l484
					}
					position++
					goto l473
				l484:
					position, tokenIndex = position473, tokenIndex473
					if buffer[position] != rune('e') {
						goto l485
					}
					position++
					goto l473
				l485:
					position, tokenIndex = position473, tokenIndex473
					if buffer[position] != rune('f') {
						goto l445
					}
					position++
				}
			l473:
				{
					position486, tokenIndex486 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l487
					}
					position++
					goto l486
				l487:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('A') {
						goto l488
					}
					position++
					goto l486
				l488:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('B') {
						goto l489
					}
					position++
					goto l486
				l489:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('C') {
						goto l490
					}
					position++
					goto l486
				l490:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('D') {
						goto l491
					}
					position++
					goto l486
				l491:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('E') {
						goto l492
					}
					position++
					goto l486
				l492:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('F') {
						goto l493
					}
					position++
					goto l486
				l493:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('a') {
						goto l494
					}
					position++
					goto l486
				l494:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('b') {
						goto l495
					}
					position++
					goto l486
				l495:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('c') {
						goto l496
					}
					position++
					goto l486
				l496:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('d') {
						goto l497
					}
					position++
					goto l486
				l497:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('e') {
						goto l498
					}
					position++
					goto l486
				l498:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('f') {
						goto l445
					}
					position++
				}
			l486:
				add(ruleUnicodeChar, position446)
			}
			return true
		l445:
			position, tokenIndex = position445, tokenIndex445
			return false
		},
		/* 62 EscapedChar <- <('\\' .)> */
		func() bool {
			position499, tokenIndex499 := position, tokenIndex
			{
				position500 := position
				if buffer[position] != rune('\\') {
					goto l499
				}
				position++
				if !matchDot() {
					goto l499
				}
				add(ruleEscapedChar, position500)
			}
			return true
		l499:
			position, tokenIndex = position499, tokenIndex499
			return false
		},
		/* 63 Char <- <(!'"' .)> */
		func() bool {
			position501, tokenIndex501 := position, tokenIndex
			{
				position502 := position
				{
					position503, tokenIndex503 := position, tokenIndex
					if buffer[position] != rune('"') {
						goto l503
					}
					position++
					goto l501
				l503:
					position, tokenIndex = position503, tokenIndex503
				}
				if !matchDot() {
					goto l501
				}
				add(ruleChar, position502)
			}
			return true
		l501:
			position, tokenIndex = position501, tokenIndex501
			return false
		},
		/* 64 Integer <- <([0-9] ('_' &[0-9])?)+> */
		func() bool {
			position504, tokenIndex504 := position, tokenIndex
			{
				position505 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l504
				}
				position++
				{
					position508, tokenIndex508 := position, tokenIndex
					if buffer[position] != rune('_') {
						goto l508
					}
					position++
					{
						position510, tokenIndex510 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l508
						}
						position++
						position, tokenIndex = position510, tokenIndex510
					}
					goto l509
				l508:
					position, tokenIndex = position508, tokenIndex508
				}
			l509:
			l506:
				{
					position507, tokenIndex507 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l507
					}
					position++
					{
						position511, tokenIndex511 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l511
						}
						position++
						{
							position513, tokenIndex513 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l511
							}
							position++
							position, tokenIndex = position513, tokenIndex513
						}
						goto l512
					l511:
						position, tokenIndex = position511, tokenIndex511
					}
				l512:
					goto l506
				l507:
					position, tokenIndex = position507, tokenIndex507
				}
				add(ruleInteger, position505)
			}
			return true
		l504:
			position, tokenIndex = position504, tokenIndex504
			return false
		},
		/* 65 List <- <('[' _ ExprSeq? _ ']')> */
		func() bool {
			position514, tokenIndex514 := position, tokenIndex
			{
				position515 := position
				if buffer[position] != rune('[') {
					goto l514
				}
				position++
				if !_rules[rule_]() {
					goto l514
				}
				{
					position516, tokenIndex516 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l516
					}
					goto l517
				l516:
					position, tokenIndex = position516, tokenIndex516
				}
			l517:
				if !_rules[rule_]() {
					goto l514
				}
				if buffer[position] != rune(']') {
					goto l514
				}
				position++
				add(ruleList, position515)
			}
			return true
		l514:
			position, tokenIndex = position514, tokenIndex514
			return false
		},
		/* 66 ExprSeq <- <(Expr (_ ',' _ ExprSeq)?)> */
		func() bool {
			position518, tokenIndex518 := position, tokenIndex
			{
				position519 := position
				if !_rules[ruleExpr]() {
					goto l518
				}
				{
					position520, tokenIndex520 := position, tokenIndex
					if !_rules[rule_]() {
						goto l520
					}
					if buffer[position] != rune(',') {
						goto l520
					}
					position++
					if !_rules[rule_]() {
						goto l520
					}
					if !_rules[ruleExprSeq]() {
						goto l520
					}
					goto l521
				l520:
					position, tokenIndex = position520, tokenIndex520
				}
			l521:
				add(ruleExprSeq, position519)
			}
			return true
		l518:
			position, tokenIndex = position518, tokenIndex518
			return false
		},
		/* 67 AtomExpr <- <(UnaryOp? (FoldMacro / GettableExpr / IfWithError / Match))> */
		func() bool {
			position522, tokenIndex522 := position, tokenIndex
			{
				position523 := position
				{
					position524, tokenIndex524 := position, tokenIndex
					if !_rules[ruleUnaryOp]() {
						goto l524
					}
					goto l525
				l524:
					position, tokenIndex = position524, tokenIndex524
				}
			l525:
				{
					position526, tokenIndex526 := position, tokenIndex
					if !_rules[ruleFoldMacro]() {
						goto l527
					}
					goto l526
				l527:
					position, tokenIndex = position526, tokenIndex526
					if !_rules[ruleGettableExpr]() {
						goto l528
					}
					goto l526
				l528:
					position, tokenIndex = position526, tokenIndex526
					if !_rules[ruleIfWithError]() {
						goto l529
					}
					goto l526
				l529:
					position, tokenIndex = position526, tokenIndex526
					if !_rules[ruleMatch]() {
						goto l522
					}
				}
			l526:
				add(ruleAtomExpr, position523)
			}
			return true
		l522:
			position, tokenIndex = position522, tokenIndex522
			return false
		},
		/* 68 MultGroupOpAtom <- <(AtomExpr (_ MultGroupOp _ AtomExpr)*)> */
		func() bool {
			position530, tokenIndex530 := position, tokenIndex
			{
				position531 := position
				if !_rules[ruleAtomExpr]() {
					goto l530
				}
			l532:
				{
					position533, tokenIndex533 := position, tokenIndex
					if !_rules[rule_]() {
						goto l533
					}
					if !_rules[ruleMultGroupOp]() {
						goto l533
					}
					if !_rules[rule_]() {
						goto l533
					}
					if !_rules[ruleAtomExpr]() {
						goto l533
					}
					goto l532
				l533:
					position, tokenIndex = position533, tokenIndex533
				}
				add(ruleMultGroupOpAtom, position531)
			}
			return true
		l530:
			position, tokenIndex = position530, tokenIndex530
			return false
		},
		/* 69 SumGroupOpAtom <- <(MultGroupOpAtom (_ SumGroupOp _ MultGroupOpAtom)*)> */
		func() bool {
			position534, tokenIndex534 := position, tokenIndex
			{
				position535 := position
				if !_rules[ruleMultGroupOpAtom]() {
					goto l534
				}
			l536:
				{
					position537, tokenIndex537 := position, tokenIndex
					if !_rules[rule_]() {
						goto l537
					}
					if !_rules[ruleSumGroupOp]() {
						goto l537
					}
					if !_rules[rule_]() {
						goto l537
					}
					if !_rules[ruleMultGroupOpAtom]() {
						goto l537
					}
					goto l536
				l537:
					position, tokenIndex = position537, tokenIndex537
				}
				add(ruleSumGroupOpAtom, position535)
			}
			return true
		l534:
			position, tokenIndex = position534, tokenIndex534
			return false
		},
		/* 70 ListGroupOpAtom <- <(SumGroupOpAtom (_ ListGroupOp _ SumGroupOpAtom)*)> */
		func() bool {
			position538, tokenIndex538 := position, tokenIndex
			{
				position539 := position
				if !_rules[ruleSumGroupOpAtom]() {
					goto l538
				}
			l540:
				{
					position541, tokenIndex541 := position, tokenIndex
					if !_rules[rule_]() {
						goto l541
					}
					if !_rules[ruleListGroupOp]() {
						goto l541
					}
					if !_rules[rule_]() {
						goto l541
					}
					if !_rules[ruleSumGroupOpAtom]() {
						goto l541
					}
					goto l540
				l541:
					position, tokenIndex = position541, tokenIndex541
				}
				add(ruleListGroupOpAtom, position539)
			}
			return true
		l538:
			position, tokenIndex = position538, tokenIndex538
			return false
		},
		/* 71 CompareGroupOpAtom <- <(ListGroupOpAtom (_ CompareGroupOp _ ListGroupOpAtom)*)> */
		func() bool {
			position542, tokenIndex542 := position, tokenIndex
			{
				position543 := position
				if !_rules[ruleListGroupOpAtom]() {
					goto l542
				}
			l544:
				{
					position545, tokenIndex545 := position, tokenIndex
					if !_rules[rule_]() {
						goto l545
					}
					if !_rules[ruleCompareGroupOp]() {
						goto l545
					}
					if !_rules[rule_]() {
						goto l545
					}
					if !_rules[ruleListGroupOpAtom]() {
						goto l545
					}
					goto l544
				l545:
					position, tokenIndex = position545, tokenIndex545
				}
				add(ruleCompareGroupOpAtom, position543)
			}
			return true
		l542:
			position, tokenIndex = position542, tokenIndex542
			return false
		},
		/* 72 EqualityGroupOpAtom <- <(CompareGroupOpAtom (_ EqGroupOp _ CompareGroupOpAtom)*)> */
		func() bool {
			position546, tokenIndex546 := position, tokenIndex
			{
				position547 := position
				if !_rules[ruleCompareGroupOpAtom]() {
					goto l546
				}
			l548:
				{
					position549, tokenIndex549 := position, tokenIndex
					if !_rules[rule_]() {
						goto l549
					}
					if !_rules[ruleEqGroupOp]() {
						goto l549
					}
					if !_rules[rule_]() {
						goto l549
					}
					if !_rules[ruleCompareGroupOpAtom]() {
						goto l549
					}
					goto l548
				l549:
					position, tokenIndex = position549, tokenIndex549
				}
				add(ruleEqualityGroupOpAtom, position547)
			}
			return true
		l546:
			position, tokenIndex = position546, tokenIndex546
			return false
		},
		/* 73 AndOpAtom <- <(EqualityGroupOpAtom (_ AndOp _ EqualityGroupOpAtom)*)> */
		func() bool {
			position550, tokenIndex550 := position, tokenIndex
			{
				position551 := position
				if !_rules[ruleEqualityGroupOpAtom]() {
					goto l550
				}
			l552:
				{
					position553, tokenIndex553 := position, tokenIndex
					if !_rules[rule_]() {
						goto l553
					}
					if !_rules[ruleAndOp]() {
						goto l553
					}
					if !_rules[rule_]() {
						goto l553
					}
					if !_rules[ruleEqualityGroupOpAtom]() {
						goto l553
					}
					goto l552
				l553:
					position, tokenIndex = position553, tokenIndex553
				}
				add(ruleAndOpAtom, position551)
			}
			return true
		l550:
			position, tokenIndex = position550, tokenIndex550
			return false
		},
		/* 74 OrOpAtom <- <(AndOpAtom (_ OrOp _ AndOpAtom)*)> */
		func() bool {
			position554, tokenIndex554 := position, tokenIndex
			{
				position555 := position
				if !_rules[ruleAndOpAtom]() {
					goto l554
				}
			l556:
				{
					position557, tokenIndex557 := position, tokenIndex
					if !_rules[rule_]() {
						goto l557
					}
					if !_rules[ruleOrOp]() {
						goto l557
					}
					if !_rules[rule_]() {
						goto l557
					}
					if !_rules[ruleAndOpAtom]() {
						goto l557
					}
					goto l556
				l557:
					position, tokenIndex = position557, tokenIndex557
				}
				add(ruleOrOpAtom, position555)
			}
			return true
		l554:
			position, tokenIndex = position554, tokenIndex554
			return false
		},
		/* 75 Expr <- <OrOpAtom> */
		func() bool {
			position558, tokenIndex558 := position, tokenIndex
			{
				position559 := position
				if !_rules[ruleOrOpAtom]() {
					goto l558
				}
				add(ruleExpr, position559)
			}
			return true
		l558:
			position, tokenIndex = position558, tokenIndex558
			return false
		},
		/* 76 ParExpr <- <('(' _ Expr _ ')')> */
		func() bool {
			position560, tokenIndex560 := position, tokenIndex
			{
				position561 := position
				if buffer[position] != rune('(') {
					goto l560
				}
				position++
				if !_rules[rule_]() {
					goto l560
				}
				if !_rules[ruleExpr]() {
					goto l560
				}
				if !_rules[rule_]() {
					goto l560
				}
				if buffer[position] != rune(')') {
					goto l560
				}
				position++
				add(ruleParExpr, position561)
			}
			return true
		l560:
			position, tokenIndex = position560, tokenIndex560
			return false
		},
		/* 77 GettableExpr <- <((ParExpr / Block / FunctionCall / Identifier / Const) (_ (ListAccess / ('.' _ (FunctionCallAccess / IdentifierAccess / TupleAccess))))*)> */
		func() bool {
			position562, tokenIndex562 := position, tokenIndex
			{
				position563 := position
				{
					position564, tokenIndex564 := position, tokenIndex
					if !_rules[ruleParExpr]() {
						goto l565
					}
					goto l564
				l565:
					position, tokenIndex = position564, tokenIndex564
					if !_rules[ruleBlock]() {
						goto l566
					}
					goto l564
				l566:
					position, tokenIndex = position564, tokenIndex564
					if !_rules[ruleFunctionCall]() {
						goto l567
					}
					goto l564
				l567:
					position, tokenIndex = position564, tokenIndex564
					if !_rules[ruleIdentifier]() {
						goto l568
					}
					goto l564
				l568:
					position, tokenIndex = position564, tokenIndex564
					if !_rules[ruleConst]() {
						goto l562
					}
				}
			l564:
			l569:
				{
					position570, tokenIndex570 := position, tokenIndex
					if !_rules[rule_]() {
						goto l570
					}
					{
						position571, tokenIndex571 := position, tokenIndex
						if !_rules[ruleListAccess]() {
							goto l572
						}
						goto l571
					l572:
						position, tokenIndex = position571, tokenIndex571
						if buffer[position] != rune('.') {
							goto l570
						}
						position++
						if !_rules[rule_]() {
							goto l570
						}
						{
							position573, tokenIndex573 := position, tokenIndex
							if !_rules[ruleFunctionCallAccess]() {
								goto l574
							}
							goto l573
						l574:
							position, tokenIndex = position573, tokenIndex573
							if !_rules[ruleIdentifierAccess]() {
								goto l575
							}
							goto l573
						l575:
							position, tokenIndex = position573, tokenIndex573
							if !_rules[ruleTupleAccess]() {
								goto l570
							}
						}
					l573:
					}
				l571:
					goto l569
				l570:
					position, tokenIndex = position570, tokenIndex570
				}
				add(ruleGettableExpr, position563)
			}
			return true
		l562:
			position, tokenIndex = position562, tokenIndex562
			return false
		},
		/* 78 FunctionCallAccess <- <FunctionCall> */
		func() bool {
			position576, tokenIndex576 := position, tokenIndex
			{
				position577 := position
				if !_rules[ruleFunctionCall]() {
					goto l576
				}
				add(ruleFunctionCallAccess, position577)
			}
			return true
		l576:
			position, tokenIndex = position576, tokenIndex576
			return false
		},
		/* 79 IdentifierAccess <- <Identifier> */
		func() bool {
			position578, tokenIndex578 := position, tokenIndex
			{
				position579 := position
				if !_rules[ruleIdentifier]() {
					goto l578
				}
				add(ruleIdentifierAccess, position579)
			}
			return true
		l578:
			position, tokenIndex = position578, tokenIndex578
			return false
		},
		/* 80 ListAccess <- <('[' _ (Expr / Identifier) _ ']')> */
		func() bool {
			position580, tokenIndex580 := position, tokenIndex
			{
				position581 := position
				if buffer[position] != rune('[') {
					goto l580
				}
				position++
				if !_rules[rule_]() {
					goto l580
				}
				{
					position582, tokenIndex582 := position, tokenIndex
					if !_rules[ruleExpr]() {
						goto l583
					}
					goto l582
				l583:
					position, tokenIndex = position582, tokenIndex582
					if !_rules[ruleIdentifier]() {
						goto l580
					}
				}
			l582:
				if !_rules[rule_]() {
					goto l580
				}
				if buffer[position] != rune(']') {
					goto l580
				}
				position++
				add(ruleListAccess, position581)
			}
			return true
		l580:
			position, tokenIndex = position580, tokenIndex580
			return false
		},
		/* 81 Block <- <('{' (_ Declaration)* _ Expr _ '}')> */
		func() bool {
			position584, tokenIndex584 := position, tokenIndex
			{
				position585 := position
				if buffer[position] != rune('{') {
					goto l584
				}
				position++
			l586:
				{
					position587, tokenIndex587 := position, tokenIndex
					if !_rules[rule_]() {
						goto l587
					}
					if !_rules[ruleDeclaration]() {
						goto l587
					}
					goto l586
				l587:
					position, tokenIndex = position587, tokenIndex587
				}
				if !_rules[rule_]() {
					goto l584
				}
				if !_rules[ruleExpr]() {
					goto l584
				}
				if !_rules[rule_]() {
					goto l584
				}
				if buffer[position] != rune('}') {
					goto l584
				}
				position++
				add(ruleBlock, position585)
			}
			return true
		l584:
			position, tokenIndex = position584, tokenIndex584
			return false
		},
		/* 82 BlockWithoutPar <- <((_ Declaration)* _ Expr)> */
		func() bool {
			position588, tokenIndex588 := position, tokenIndex
			{
				position589 := position
			l590:
				{
					position591, tokenIndex591 := position, tokenIndex
					if !_rules[rule_]() {
						goto l591
					}
					if !_rules[ruleDeclaration]() {
						goto l591
					}
					goto l590
				l591:
					position, tokenIndex = position591, tokenIndex591
				}
				if !_rules[rule_]() {
					goto l588
				}
				if !_rules[ruleExpr]() {
					goto l588
				}
				add(ruleBlockWithoutPar, position589)
			}
			return true
		l588:
			position, tokenIndex = position588, tokenIndex588
			return false
		},
		/* 83 FunctionCall <- <(Identifier '(' _ ExprSeq? _ ')')> */
		func() bool {
			position592, tokenIndex592 := position, tokenIndex
			{
				position593 := position
				if !_rules[ruleIdentifier]() {
					goto l592
				}
				if buffer[position] != rune('(') {
					goto l592
				}
				position++
				if !_rules[rule_]() {
					goto l592
				}
				{
					position594, tokenIndex594 := position, tokenIndex
					if !_rules[ruleExprSeq]() {
						goto l594
					}
					goto l595
				l594:
					position, tokenIndex = position594, tokenIndex594
				}
			l595:
				if !_rules[rule_]() {
					goto l592
				}
				if buffer[position] != rune(')') {
					goto l592
				}
				position++
				add(ruleFunctionCall, position593)
			}
			return true
		l592:
			position, tokenIndex = position592, tokenIndex592
			return false
		},
		/* 84 FoldMacro <- <('F' 'O' 'L' 'D' _ '<' _ Integer _ '>' _ '(' _ Expr _ ',' _ Expr _ ',' _ Identifier _ ')')> */
		func() bool {
			position596, tokenIndex596 := position, tokenIndex
			{
				position597 := position
				if buffer[position] != rune('F') {
					goto l596
				}
				position++
				if buffer[position] != rune('O') {
					goto l596
				}
				position++
				if buffer[position] != rune('L') {
					goto l596
				}
				position++
				if buffer[position] != rune('D') {
					goto l596
				}
				position++
				if !_rules[rule_]() {
					goto l596
				}
				if buffer[position] != rune('<') {
					goto l596
				}
				position++
				if !_rules[rule_]() {
					goto l596
				}
				if !_rules[ruleInteger]() {
					goto l596
				}
				if !_rules[rule_]() {
					goto l596
				}
				if buffer[position] != rune('>') {
					goto l596
				}
				position++
				if !_rules[rule_]() {
					goto l596
				}
				if buffer[position] != rune('(') {
					goto l596
				}
				position++
				if !_rules[rule_]() {
					goto l596
				}
				if !_rules[ruleExpr]() {
					goto l596
				}
				if !_rules[rule_]() {
					goto l596
				}
				if buffer[position] != rune(',') {
					goto l596
				}
				position++
				if !_rules[rule_]() {
					goto l596
				}
				if !_rules[ruleExpr]() {
					goto l596
				}
				if !_rules[rule_]() {
					goto l596
				}
				if buffer[position] != rune(',') {
					goto l596
				}
				position++
				if !_rules[rule_]() {
					goto l596
				}
				if !_rules[ruleIdentifier]() {
					goto l596
				}
				if !_rules[rule_]() {
					goto l596
				}
				if buffer[position] != rune(')') {
					goto l596
				}
				position++
				add(ruleFoldMacro, position597)
			}
			return true
		l596:
			position, tokenIndex = position596, tokenIndex596
			return false
		},
		/* 85 IfWithError <- <(If / FailedIfWithoutElse)> */
		func() bool {
			position598, tokenIndex598 := position, tokenIndex
			{
				position599 := position
				{
					position600, tokenIndex600 := position, tokenIndex
					if !_rules[ruleIf]() {
						goto l601
					}
					goto l600
				l601:
					position, tokenIndex = position600, tokenIndex600
					if !_rules[ruleFailedIfWithoutElse]() {
						goto l598
					}
				}
			l600:
				add(ruleIfWithError, position599)
			}
			return true
		l598:
			position, tokenIndex = position598, tokenIndex598
			return false
		},
		/* 86 If <- <('i' 'f' _ Expr _ ('t' 'h' 'e' 'n') _ Expr _ ('e' 'l' 's' 'e') _ Expr)> */
		func() bool {
			position602, tokenIndex602 := position, tokenIndex
			{
				position603 := position
				if buffer[position] != rune('i') {
					goto l602
				}
				position++
				if buffer[position] != rune('f') {
					goto l602
				}
				position++
				if !_rules[rule_]() {
					goto l602
				}
				if !_rules[ruleExpr]() {
					goto l602
				}
				if !_rules[rule_]() {
					goto l602
				}
				if buffer[position] != rune('t') {
					goto l602
				}
				position++
				if buffer[position] != rune('h') {
					goto l602
				}
				position++
				if buffer[position] != rune('e') {
					goto l602
				}
				position++
				if buffer[position] != rune('n') {
					goto l602
				}
				position++
				if !_rules[rule_]() {
					goto l602
				}
				if !_rules[ruleExpr]() {
					goto l602
				}
				if !_rules[rule_]() {
					goto l602
				}
				if buffer[position] != rune('e') {
					goto l602
				}
				position++
				if buffer[position] != rune('l') {
					goto l602
				}
				position++
				if buffer[position] != rune('s') {
					goto l602
				}
				position++
				if buffer[position] != rune('e') {
					goto l602
				}
				position++
				if !_rules[rule_]() {
					goto l602
				}
				if !_rules[ruleExpr]() {
					goto l602
				}
				add(ruleIf, position603)
			}
			return true
		l602:
			position, tokenIndex = position602, tokenIndex602
			return false
		},
		/* 87 FailedIfWithoutElse <- <('i' 'f' _ Expr _ ('t' 'h' 'e' 'n') _ Expr)> */
		func() bool {
			position604, tokenIndex604 := position, tokenIndex
			{
				position605 := position
				if buffer[position] != rune('i') {
					goto l604
				}
				position++
				if buffer[position] != rune('f') {
					goto l604
				}
				position++
				if !_rules[rule_]() {
					goto l604
				}
				if !_rules[ruleExpr]() {
					goto l604
				}
				if !_rules[rule_]() {
					goto l604
				}
				if buffer[position] != rune('t') {
					goto l604
				}
				position++
				if buffer[position] != rune('h') {
					goto l604
				}
				position++
				if buffer[position] != rune('e') {
					goto l604
				}
				position++
				if buffer[position] != rune('n') {
					goto l604
				}
				position++
				if !_rules[rule_]() {
					goto l604
				}
				if !_rules[ruleExpr]() {
					goto l604
				}
				add(ruleFailedIfWithoutElse, position605)
			}
			return true
		l604:
			position, tokenIndex = position604, tokenIndex604
			return false
		},
		/* 88 Match <- <('m' 'a' 't' 'c' 'h' _ Expr _ '{' (_ Case)+ _ '}')> */
		func() bool {
			position606, tokenIndex606 := position, tokenIndex
			{
				position607 := position
				if buffer[position] != rune('m') {
					goto l606
				}
				position++
				if buffer[position] != rune('a') {
					goto l606
				}
				position++
				if buffer[position] != rune('t') {
					goto l606
				}
				position++
				if buffer[position] != rune('c') {
					goto l606
				}
				position++
				if buffer[position] != rune('h') {
					goto l606
				}
				position++
				if !_rules[rule_]() {
					goto l606
				}
				if !_rules[ruleExpr]() {
					goto l606
				}
				if !_rules[rule_]() {
					goto l606
				}
				if buffer[position] != rune('{') {
					goto l606
				}
				position++
				if !_rules[rule_]() {
					goto l606
				}
				if !_rules[ruleCase]() {
					goto l606
				}
			l608:
				{
					position609, tokenIndex609 := position, tokenIndex
					if !_rules[rule_]() {
						goto l609
					}
					if !_rules[ruleCase]() {
						goto l609
					}
					goto l608
				l609:
					position, tokenIndex = position609, tokenIndex609
				}
				if !_rules[rule_]() {
					goto l606
				}
				if buffer[position] != rune('}') {
					goto l606
				}
				position++
				add(ruleMatch, position607)
			}
			return true
		l606:
			position, tokenIndex = position606, tokenIndex606
			return false
		},
		/* 89 Case <- <('c' 'a' 's' 'e' _ (ValuePattern / TuplePattern / ObjectPattern / Placeholder) _ ('=' '>') _ (Block / BlockWithoutPar))> */
		func() bool {
			position610, tokenIndex610 := position, tokenIndex
			{
				position611 := position
				if buffer[position] != rune('c') {
					goto l610
				}
				position++
				if buffer[position] != rune('a') {
					goto l610
				}
				position++
				if buffer[position] != rune('s') {
					goto l610
				}
				position++
				if buffer[position] != rune('e') {
					goto l610
				}
				position++
				if !_rules[rule_]() {
					goto l610
				}
				{
					position612, tokenIndex612 := position, tokenIndex
					if !_rules[ruleValuePattern]() {
						goto l613
					}
					goto l612
				l613:
					position, tokenIndex = position612, tokenIndex612
					if !_rules[ruleTuplePattern]() {
						goto l614
					}
					goto l612
				l614:
					position, tokenIndex = position612, tokenIndex612
					if !_rules[ruleObjectPattern]() {
						goto l615
					}
					goto l612
				l615:
					position, tokenIndex = position612, tokenIndex612
					if !_rules[rulePlaceholder]() {
						goto l610
					}
				}
			l612:
				if !_rules[rule_]() {
					goto l610
				}
				if buffer[position] != rune('=') {
					goto l610
				}
				position++
				if buffer[position] != rune('>') {
					goto l610
				}
				position++
				if !_rules[rule_]() {
					goto l610
				}
				{
					position616, tokenIndex616 := position, tokenIndex
					if !_rules[ruleBlock]() {
						goto l617
					}
					goto l616
				l617:
					position, tokenIndex = position616, tokenIndex616
					if !_rules[ruleBlockWithoutPar]() {
						goto l610
					}
				}
			l616:
				add(ruleCase, position611)
			}
			return true
		l610:
			position, tokenIndex = position610, tokenIndex610
			return false
		},
		/* 90 Placeholder <- <'_'> */
		func() bool {
			position618, tokenIndex618 := position, tokenIndex
			{
				position619 := position
				if buffer[position] != rune('_') {
					goto l618
				}
				position++
				add(rulePlaceholder, position619)
			}
			return true
		l618:
			position, tokenIndex = position618, tokenIndex618
			return false
		},
		/* 91 ValuePattern <- <((Placeholder / Identifier) _ ':' _ Types)> */
		func() bool {
			position620, tokenIndex620 := position, tokenIndex
			{
				position621 := position
				{
					position622, tokenIndex622 := position, tokenIndex
					if !_rules[rulePlaceholder]() {
						goto l623
					}
					goto l622
				l623:
					position, tokenIndex = position622, tokenIndex622
					if !_rules[ruleIdentifier]() {
						goto l620
					}
				}
			l622:
				if !_rules[rule_]() {
					goto l620
				}
				if buffer[position] != rune(':') {
					goto l620
				}
				position++
				if !_rules[rule_]() {
					goto l620
				}
				if !_rules[ruleTypes]() {
					goto l620
				}
				add(ruleValuePattern, position621)
			}
			return true
		l620:
			position, tokenIndex = position620, tokenIndex620
			return false
		},
		/* 92 TupleValuesPattern <- <((ValuePattern / Placeholder / Identifier / Expr / GettableExpr) (_ ',' _ TupleValuesPattern)?)> */
		func() bool {
			position624, tokenIndex624 := position, tokenIndex
			{
				position625 := position
				{
					position626, tokenIndex626 := position, tokenIndex
					if !_rules[ruleValuePattern]() {
						goto l627
					}
					goto l626
				l627:
					position, tokenIndex = position626, tokenIndex626
					if !_rules[rulePlaceholder]() {
						goto l628
					}
					goto l626
				l628:
					position, tokenIndex = position626, tokenIndex626
					if !_rules[ruleIdentifier]() {
						goto l629
					}
					goto l626
				l629:
					position, tokenIndex = position626, tokenIndex626
					if !_rules[ruleExpr]() {
						goto l630
					}
					goto l626
				l630:
					position, tokenIndex = position626, tokenIndex626
					if !_rules[ruleGettableExpr]() {
						goto l624
					}
				}
			l626:
				{
					position631, tokenIndex631 := position, tokenIndex
					if !_rules[rule_]() {
						goto l631
					}
					if buffer[position] != rune(',') {
						goto l631
					}
					position++
					if !_rules[rule_]() {
						goto l631
					}
					if !_rules[ruleTupleValuesPattern]() {
						goto l631
					}
					goto l632
				l631:
					position, tokenIndex = position631, tokenIndex631
				}
			l632:
				add(ruleTupleValuesPattern, position625)
			}
			return true
		l624:
			position, tokenIndex = position624, tokenIndex624
			return false
		},
		/* 93 TuplePattern <- <('(' _ TupleValuesPattern _ ')')> */
		func() bool {
			position633, tokenIndex633 := position, tokenIndex
			{
				position634 := position
				if buffer[position] != rune('(') {
					goto l633
				}
				position++
				if !_rules[rule_]() {
					goto l633
				}
				if !_rules[ruleTupleValuesPattern]() {
					goto l633
				}
				if !_rules[rule_]() {
					goto l633
				}
				if buffer[position] != rune(')') {
					goto l633
				}
				position++
				add(ruleTuplePattern, position634)
			}
			return true
		l633:
			position, tokenIndex = position633, tokenIndex633
			return false
		},
		/* 94 ObjectFieldsPattern <- <(Identifier _ '=' _ (Identifier / Expr) (_ ',' _ ObjectFieldsPattern)?)> */
		func() bool {
			position635, tokenIndex635 := position, tokenIndex
			{
				position636 := position
				if !_rules[ruleIdentifier]() {
					goto l635
				}
				if !_rules[rule_]() {
					goto l635
				}
				if buffer[position] != rune('=') {
					goto l635
				}
				position++
				if !_rules[rule_]() {
					goto l635
				}
				{
					position637, tokenIndex637 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l638
					}
					goto l637
				l638:
					position, tokenIndex = position637, tokenIndex637
					if !_rules[ruleExpr]() {
						goto l635
					}
				}
			l637:
				{
					position639, tokenIndex639 := position, tokenIndex
					if !_rules[rule_]() {
						goto l639
					}
					if buffer[position] != rune(',') {
						goto l639
					}
					position++
					if !_rules[rule_]() {
						goto l639
					}
					if !_rules[ruleObjectFieldsPattern]() {
						goto l639
					}
					goto l640
				l639:
					position, tokenIndex = position639, tokenIndex639
				}
			l640:
				add(ruleObjectFieldsPattern, position636)
			}
			return true
		l635:
			position, tokenIndex = position635, tokenIndex635
			return false
		},
		/* 95 ObjectPattern <- <(Identifier _ '(' _ ObjectFieldsPattern? _ ')')> */
		func() bool {
			position641, tokenIndex641 := position, tokenIndex
			{
				position642 := position
				if !_rules[ruleIdentifier]() {
					goto l641
				}
				if !_rules[rule_]() {
					goto l641
				}
				if buffer[position] != rune('(') {
					goto l641
				}
				position++
				if !_rules[rule_]() {
					goto l641
				}
				{
					position643, tokenIndex643 := position, tokenIndex
					if !_rules[ruleObjectFieldsPattern]() {
						goto l643
					}
					goto l644
				l643:
					position, tokenIndex = position643, tokenIndex643
				}
			l644:
				if !_rules[rule_]() {
					goto l641
				}
				if buffer[position] != rune(')') {
					goto l641
				}
				position++
				add(ruleObjectPattern, position642)
			}
			return true
		l641:
			position, tokenIndex = position641, tokenIndex641
			return false
		},
		/* 96 Tuple <- <('(' _ AtomExpr (_ ',' _ AtomExpr)+ _ ')')> */
		func() bool {
			position645, tokenIndex645 := position, tokenIndex
			{
				position646 := position
				if buffer[position] != rune('(') {
					goto l645
				}
				position++
				if !_rules[rule_]() {
					goto l645
				}
				if !_rules[ruleAtomExpr]() {
					goto l645
				}
				if !_rules[rule_]() {
					goto l645
				}
				if buffer[position] != rune(',') {
					goto l645
				}
				position++
				if !_rules[rule_]() {
					goto l645
				}
				if !_rules[ruleAtomExpr]() {
					goto l645
				}
			l647:
				{
					position648, tokenIndex648 := position, tokenIndex
					if !_rules[rule_]() {
						goto l648
					}
					if buffer[position] != rune(',') {
						goto l648
					}
					position++
					if !_rules[rule_]() {
						goto l648
					}
					if !_rules[ruleAtomExpr]() {
						goto l648
					}
					goto l647
				l648:
					position, tokenIndex = position648, tokenIndex648
				}
				if !_rules[rule_]() {
					goto l645
				}
				if buffer[position] != rune(')') {
					goto l645
				}
				position++
				add(ruleTuple, position646)
			}
			return true
		l645:
			position, tokenIndex = position645, tokenIndex645
			return false
		},
		/* 97 TupleRef <- <('(' _ Identifier (_ ',' _ Identifier)+ _ ')')> */
		func() bool {
			position649, tokenIndex649 := position, tokenIndex
			{
				position650 := position
				if buffer[position] != rune('(') {
					goto l649
				}
				position++
				if !_rules[rule_]() {
					goto l649
				}
				if !_rules[ruleIdentifier]() {
					goto l649
				}
				if !_rules[rule_]() {
					goto l649
				}
				if buffer[position] != rune(',') {
					goto l649
				}
				position++
				if !_rules[rule_]() {
					goto l649
				}
				if !_rules[ruleIdentifier]() {
					goto l649
				}
			l651:
				{
					position652, tokenIndex652 := position, tokenIndex
					if !_rules[rule_]() {
						goto l652
					}
					if buffer[position] != rune(',') {
						goto l652
					}
					position++
					if !_rules[rule_]() {
						goto l652
					}
					if !_rules[ruleIdentifier]() {
						goto l652
					}
					goto l651
				l652:
					position, tokenIndex = position652, tokenIndex652
				}
				if !_rules[rule_]() {
					goto l649
				}
				if buffer[position] != rune(')') {
					goto l649
				}
				position++
				add(ruleTupleRef, position650)
			}
			return true
		l649:
			position, tokenIndex = position649, tokenIndex649
			return false
		},
		/* 98 TupleAccess <- <('_' [0-9]+)> */
		func() bool {
			position653, tokenIndex653 := position, tokenIndex
			{
				position654 := position
				if buffer[position] != rune('_') {
					goto l653
				}
				position++
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l653
				}
				position++
			l655:
				{
					position656, tokenIndex656 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l656
					}
					position++
					goto l655
				l656:
					position, tokenIndex = position656, tokenIndex656
				}
				add(ruleTupleAccess, position654)
			}
			return true
		l653:
			position, tokenIndex = position653, tokenIndex653
			return false
		},
	}
	p.rules = _rules
	return nil
}

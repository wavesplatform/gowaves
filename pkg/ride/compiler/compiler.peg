# Go part
package main

type Result Peg {
}

# Start PEG

# Main rules
Code <- DAppRoot / ScriptRoot
DAppRoot <- _ (Directive _)* (_ Declaration)* (_ AnnotatedFunc)* _ EOF
ScriptRoot <- _ (Directive _)* (_ Declaration)* _ BlockDecExprSep? _ Expr _ EOF
# Whitespaces and new line symbols

WS <- [ \t]+
NewLine <- [ \t\n\r\f]+
Comment <- "#" !"-}" [^\r\n]*
WhiteSpace <- (NewLine / Comment)*
_ <- WhiteSpace

EOF <- !.

# Directives

DirectiveWord <- [_a-zA-Z0-9-]+
Directive <- "{-#" WS DirectiveWord WS DirectiveWord WS "#-}"

# Declarations

Declaration <- Variable / Func

Variable <- "let" _ IdentifierAtom _ "=" _ Expr

Func <- "func" _ IdentifierAtom _ "(" _ FuncArgSeq? _ ")" _ "=" _ Expr
FuncArg <- IdentifierAtom _ ":" _ GenericTypesAtom
FuncArgSeq <- FuncArg ((_ "," _ FuncArgSeq) / FuncArg)?

AnnotatedFunc <- AnnotationSeq _ Func
Annotation <- "@" IdentifierAtom _ "(" _ IdentifierAtomSeq _ ")"
IdentifierAtomSeq <- IdentifierAtom (( _ "," _ IdentifierAtomSeq) / IdentifierAtom)?
AnnotationSeq <- Annotation (( _ AnnotationSeq) / Annotation)?

# Operators
OrOp <- "||"
AndOp <- "&&"

EqGroupOp <- EqOp / NeOp
EqOp <- "=="
NeOp <- "!="

CompareGroupOp <- GtOp / GeOp / LtOp / LeOp
GtOp <- ">" !"="
GeOp <- ">="
LtOp <- "<" !"="
LeOp <- "<="

ConsOp <- "::"

SumGroupOp <- SumOp / SubOp
SumOp <- '+'
SubOp <- '-'

MultGroupOp <- MulOp / DivOp / ModOp
MulOp <- '*'
DivOp <- '/'
ModOp <- '%'

UnaryOp <- PositiveOp / NegativeOp  / NotOp
PositiveOp <- '+'
NegativeOp <- '-'
NotOp <- '!'

# Types
ReservedWords <- "let" / "base16" / "base58" / "base64" / "true" / "false" / "if" / "then" / "else" / "match" / "case" / "func"

ConstAtom <- IntegerAtom / StringAtom / ByteVectorAtom / BooleanAtom / ListAtom
IdentifierAtom <- (!ReservedWords Char (Char / Digit)*) / (ReservedWords (Char / Digit) (Char / Digit)*)
ReferenceAtom <- (!ReservedWords Char (Char / Digit)*) / (ReservedWords (Char / Digit) (Char / Digit)*)
GenericTypesAtom <- OneGenericTypeAtom ((_ "|" _ GenericTypesAtom) / OneGenericTypeAtom)?
OneGenericTypeAtom <- Char (Char / Digit)* (_ "[" _ OneTypeAtom _ "]" _)?
TypesAtom <- OneTypeAtom ((_ "|" _ TypesAtom) / OneTypeAtom)?
OneTypeAtom <- Char (Char / Digit)*

ByteVectorAtom <- "base" ("58" / "64" / "16") "'" [^\']* "'"

BooleanAtom <- "true" / "false"

StringAtom <- "\"" (UnicodeCharAtom / EscapedCharAtom / CharAtom)* "\""
UnicodeCharAtom <- "\\u" HexDigit HexDigit HexDigit HexDigit
HexDigit <- Char / Digit
EscapedCharAtom <- "\\" .
CharAtom <- [^\"]
Char <- [a-zA-Z]

IntegerAtom <- Digit+
Digit <- [0-9]

ListAtom <- "[" _ ExprSeq? _ "]"
ExprSeq <- Expr ((_ "," _ ExprSeq) / Expr)?

# Expressions
AtomExpr <- UnaryOp? _ (FoldMacro / GettableExpr / IfWithError / Match / ConstAtom)
MultGroupOpAtom <- AtomExpr (_ MultGroupOp _ AtomExpr)*
SumGroupOpAtom <- MultGroupOpAtom (_ SumGroupOp _ MultGroupOpAtom)*
ConsOpAtom <- SumGroupOpAtom (_ ConsOp _ SumGroupOpAtom)*
CompareGroupOpAtom <- ConsOpAtom (_ CompareGroupOp _ ConsOpAtom)*
EqualityGroupOpAtom <- CompareGroupOpAtom (_ EqGroupOp _ CompareGroupOpAtom)*
AndOpAtom <- EqualityGroupOpAtom (_ AndOp _ EqualityGroupOpAtom)*
OrOpAtom <- AndOpAtom (_ OrOp _ AndOpAtom)*

Expr <- OrOpAtom
ParExpr <- "(" _ Expr _ ")"

GettableExpr <- (ParExpr / Block / FunctionCall / ReferenceAtom) (_ (ListAccess / ("." _ (FunctionCallAccess / IdentifierAtomAccess))))*
FunctionCallAccess <- FunctionCall
IdentifierAtomAccess <- IdentifierAtom
ListAccess <- "[" _ (Expr / ReferenceAtom) _ "]"

Block <- "{" (_ Declaration)* _ BlockDecExprSep? _ Expr _ "}"
BlockWithoutPar <- (_ Declaration)* _ BlockDecExprSep? _ Expr
BlockDecExprSep <- ":"

FunctionCall <- IdentifierAtom _ "(" _ ExprSeq? _ ")"

FoldMacro <- "FOLD" _ "<" _ IntegerAtom _ ">" _ "(" _ Expr _ "," _ Expr _ "," _ ReferenceAtom _ ")"

IfWithError <- If / FailedIfWithoutElse
If <- "if" _ Expr _ "then" _ Expr _ "else" _ Expr
FailedIfWithoutElse <- "if" _ Expr _ "then" _ Expr

Match <- "match" _ Expr _ "{" (_ MatchCase)+ _ "}"
MatchCase <- "case" _ ((IdentifierAtom _ (":" _ TypesAtom)?) / DefaultMatchCasePart) _ "=>" _ BlockWithoutPar
DefaultMatchCasePart <- "{" _ (":" _ TypesAtom)?
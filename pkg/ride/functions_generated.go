// Code generated by ride/generate/main.go. DO NOT EDIT.

package ride

import (
	"crypto/rsa"
	sh256 "crypto/sha256"
	"crypto/x509"
	"github.com/pkg/errors"
	"github.com/wavesplatform/gowaves/pkg/crypto"
	c2 "github.com/wavesplatform/gowaves/pkg/ride/crypto"
)

func bls12Groth16Verify_1(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bls12Groth16Verify_2(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bls12Groth16Verify_3(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bls12Groth16Verify_4(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bls12Groth16Verify_5(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bls12Groth16Verify_6(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bls12Groth16Verify_7(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bls12Groth16Verify_8(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bls12Groth16Verify_9(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bls12Groth16Verify_10(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bls12Groth16Verify_11(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bls12Groth16Verify_12(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bls12Groth16Verify_13(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bls12Groth16Verify_14(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bls12Groth16Verify_15(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bn256Groth16Verify_1(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bn256Groth16Verify_2(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bn256Groth16Verify_3(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bn256Groth16Verify_4(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bn256Groth16Verify_5(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bn256Groth16Verify_6(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bn256Groth16Verify_7(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bn256Groth16Verify_8(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bn256Groth16Verify_9(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bn256Groth16Verify_10(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bn256Groth16Verify_11(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bn256Groth16Verify_12(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bn256Groth16Verify_13(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bn256Groth16Verify_14(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func bn256Groth16Verify_15(env RideEnvironment, args ...rideType) (rideType, error) {
	//TODO: implement
	return rideBoolean(true), nil
}

func sigVerify_8(env RideEnvironment, args ...rideType) (rideType, error) {
	if err := checkArgs(args, 3); err != nil {
		return nil, errors.Wrap(err, "sigVerify_8")
	}
	message, ok := args[0].(rideBytes)
	if !ok {
		return nil, errors.Errorf("sigVerify_8: unexpected argument type '%s'", args[0].instanceOf())
	}
	if l := len(message); l > 8*1024 {
		return nil, errors.Errorf("sigVerify_8: invalid message size %d", l)
	}
	signature, ok := args[1].(rideBytes)
	if !ok {
		return nil, errors.Errorf("sigVerify_8: unexpected argument type '%s'", args[1].instanceOf())
	}
	pkb, ok := args[2].(rideBytes)
	if !ok {
		return nil, errors.Errorf("sigVerify_8: unexpected argument type '%s'", args[2].instanceOf())
	}
	pk, err := crypto.NewPublicKeyFromBytes(pkb)
	if err != nil {
		return rideBoolean(false), nil
	}
	sig, err := crypto.NewSignatureFromBytes(signature)
	if err != nil {
		return rideBoolean(false), nil
	}
	ok = crypto.Verify(pk, sig, message)
	return rideBoolean(ok), nil
}

func sigVerify_16(env RideEnvironment, args ...rideType) (rideType, error) {
	if err := checkArgs(args, 3); err != nil {
		return nil, errors.Wrap(err, "sigVerify_16")
	}
	message, ok := args[0].(rideBytes)
	if !ok {
		return nil, errors.Errorf("sigVerify_16: unexpected argument type '%s'", args[0].instanceOf())
	}
	if l := len(message); l > 16*1024 {
		return nil, errors.Errorf("sigVerify_16: invalid message size %d", l)
	}
	signature, ok := args[1].(rideBytes)
	if !ok {
		return nil, errors.Errorf("sigVerify_16: unexpected argument type '%s'", args[1].instanceOf())
	}
	pkb, ok := args[2].(rideBytes)
	if !ok {
		return nil, errors.Errorf("sigVerify_16: unexpected argument type '%s'", args[2].instanceOf())
	}
	pk, err := crypto.NewPublicKeyFromBytes(pkb)
	if err != nil {
		return rideBoolean(false), nil
	}
	sig, err := crypto.NewSignatureFromBytes(signature)
	if err != nil {
		return rideBoolean(false), nil
	}
	ok = crypto.Verify(pk, sig, message)
	return rideBoolean(ok), nil
}

func sigVerify_32(env RideEnvironment, args ...rideType) (rideType, error) {
	if err := checkArgs(args, 3); err != nil {
		return nil, errors.Wrap(err, "sigVerify_32")
	}
	message, ok := args[0].(rideBytes)
	if !ok {
		return nil, errors.Errorf("sigVerify_32: unexpected argument type '%s'", args[0].instanceOf())
	}
	if l := len(message); l > 32*1024 {
		return nil, errors.Errorf("sigVerify_32: invalid message size %d", l)
	}
	signature, ok := args[1].(rideBytes)
	if !ok {
		return nil, errors.Errorf("sigVerify_32: unexpected argument type '%s'", args[1].instanceOf())
	}
	pkb, ok := args[2].(rideBytes)
	if !ok {
		return nil, errors.Errorf("sigVerify_32: unexpected argument type '%s'", args[2].instanceOf())
	}
	pk, err := crypto.NewPublicKeyFromBytes(pkb)
	if err != nil {
		return rideBoolean(false), nil
	}
	sig, err := crypto.NewSignatureFromBytes(signature)
	if err != nil {
		return rideBoolean(false), nil
	}
	ok = crypto.Verify(pk, sig, message)
	return rideBoolean(ok), nil
}

func sigVerify_64(env RideEnvironment, args ...rideType) (rideType, error) {
	if err := checkArgs(args, 3); err != nil {
		return nil, errors.Wrap(err, "sigVerify_64")
	}
	message, ok := args[0].(rideBytes)
	if !ok {
		return nil, errors.Errorf("sigVerify_64: unexpected argument type '%s'", args[0].instanceOf())
	}
	if l := len(message); l > 64*1024 {
		return nil, errors.Errorf("sigVerify_64: invalid message size %d", l)
	}
	signature, ok := args[1].(rideBytes)
	if !ok {
		return nil, errors.Errorf("sigVerify_64: unexpected argument type '%s'", args[1].instanceOf())
	}
	pkb, ok := args[2].(rideBytes)
	if !ok {
		return nil, errors.Errorf("sigVerify_64: unexpected argument type '%s'", args[2].instanceOf())
	}
	pk, err := crypto.NewPublicKeyFromBytes(pkb)
	if err != nil {
		return rideBoolean(false), nil
	}
	sig, err := crypto.NewSignatureFromBytes(signature)
	if err != nil {
		return rideBoolean(false), nil
	}
	ok = crypto.Verify(pk, sig, message)
	return rideBoolean(ok), nil
}

func sigVerify_128(env RideEnvironment, args ...rideType) (rideType, error) {
	if err := checkArgs(args, 3); err != nil {
		return nil, errors.Wrap(err, "sigVerify_128")
	}
	message, ok := args[0].(rideBytes)
	if !ok {
		return nil, errors.Errorf("sigVerify_128: unexpected argument type '%s'", args[0].instanceOf())
	}
	if l := len(message); l > 128*1024 {
		return nil, errors.Errorf("sigVerify_128: invalid message size %d", l)
	}
	signature, ok := args[1].(rideBytes)
	if !ok {
		return nil, errors.Errorf("sigVerify_128: unexpected argument type '%s'", args[1].instanceOf())
	}
	pkb, ok := args[2].(rideBytes)
	if !ok {
		return nil, errors.Errorf("sigVerify_128: unexpected argument type '%s'", args[2].instanceOf())
	}
	pk, err := crypto.NewPublicKeyFromBytes(pkb)
	if err != nil {
		return rideBoolean(false), nil
	}
	sig, err := crypto.NewSignatureFromBytes(signature)
	if err != nil {
		return rideBoolean(false), nil
	}
	ok = crypto.Verify(pk, sig, message)
	return rideBoolean(ok), nil
}

func rsaVerify_16(_ RideEnvironment, args ...rideType) (rideType, error) {
	if err := checkArgs(args, 4); err != nil {
		return nil, errors.Wrap(err, "rsaVerify_16")
	}
	digest, err := digest(args[0])
	if err != nil {
		return nil, errors.Wrap(err, "rsaVerify_16")
	}
	message, ok := args[1].(rideBytes)
	if !ok {
		return nil, errors.Errorf("rsaVerify_16: unexpected argument type '%s'", args[1].instanceOf())
	}
	if l := len(message); l > 16*1024 {
		return nil, errors.Errorf("rsaVerify_16: invalid message size %d", l)
	}
	sig, ok := args[2].(rideBytes)
	if !ok {
		return nil, errors.Errorf("rsaVerify_16: unexpected argument type '%s'", args[2].instanceOf())
	}
	pk, ok := args[3].(rideBytes)
	if !ok {
		return nil, errors.Errorf("rsaVerify_16: unexpected argument type '%s'", args[3].instanceOf())
	}
	key, err := x509.ParsePKIXPublicKey(pk)
	if err != nil {
		return nil, errors.Wrap(err, "rsaVerify_16: invalid public key")
	}
	k, ok := key.(*rsa.PublicKey)
	if !ok {
		return nil, errors.New("rsaVerify_16: not an RSA key")
	}
	d := message
	if digest != 0 {
		h := digest.New()
		_, _ = h.Write(message)
		d = h.Sum(nil)
	}
	ok, err = c2.VerifyPKCS1v15(k, digest, d, sig)
	if err != nil {
		return nil, errors.Wrap(err, "rsaVerify_16")
	}
	return rideBoolean(ok), nil
}

func rsaVerify_32(_ RideEnvironment, args ...rideType) (rideType, error) {
	if err := checkArgs(args, 4); err != nil {
		return nil, errors.Wrap(err, "rsaVerify_32")
	}
	digest, err := digest(args[0])
	if err != nil {
		return nil, errors.Wrap(err, "rsaVerify_32")
	}
	message, ok := args[1].(rideBytes)
	if !ok {
		return nil, errors.Errorf("rsaVerify_32: unexpected argument type '%s'", args[1].instanceOf())
	}
	if l := len(message); l > 32*1024 {
		return nil, errors.Errorf("rsaVerify_32: invalid message size %d", l)
	}
	sig, ok := args[2].(rideBytes)
	if !ok {
		return nil, errors.Errorf("rsaVerify_32: unexpected argument type '%s'", args[2].instanceOf())
	}
	pk, ok := args[3].(rideBytes)
	if !ok {
		return nil, errors.Errorf("rsaVerify_32: unexpected argument type '%s'", args[3].instanceOf())
	}
	key, err := x509.ParsePKIXPublicKey(pk)
	if err != nil {
		return nil, errors.Wrap(err, "rsaVerify_32: invalid public key")
	}
	k, ok := key.(*rsa.PublicKey)
	if !ok {
		return nil, errors.New("rsaVerify_32: not an RSA key")
	}
	d := message
	if digest != 0 {
		h := digest.New()
		_, _ = h.Write(message)
		d = h.Sum(nil)
	}
	ok, err = c2.VerifyPKCS1v15(k, digest, d, sig)
	if err != nil {
		return nil, errors.Wrap(err, "rsaVerify_32")
	}
	return rideBoolean(ok), nil
}

func rsaVerify_64(_ RideEnvironment, args ...rideType) (rideType, error) {
	if err := checkArgs(args, 4); err != nil {
		return nil, errors.Wrap(err, "rsaVerify_64")
	}
	digest, err := digest(args[0])
	if err != nil {
		return nil, errors.Wrap(err, "rsaVerify_64")
	}
	message, ok := args[1].(rideBytes)
	if !ok {
		return nil, errors.Errorf("rsaVerify_64: unexpected argument type '%s'", args[1].instanceOf())
	}
	if l := len(message); l > 64*1024 {
		return nil, errors.Errorf("rsaVerify_64: invalid message size %d", l)
	}
	sig, ok := args[2].(rideBytes)
	if !ok {
		return nil, errors.Errorf("rsaVerify_64: unexpected argument type '%s'", args[2].instanceOf())
	}
	pk, ok := args[3].(rideBytes)
	if !ok {
		return nil, errors.Errorf("rsaVerify_64: unexpected argument type '%s'", args[3].instanceOf())
	}
	key, err := x509.ParsePKIXPublicKey(pk)
	if err != nil {
		return nil, errors.Wrap(err, "rsaVerify_64: invalid public key")
	}
	k, ok := key.(*rsa.PublicKey)
	if !ok {
		return nil, errors.New("rsaVerify_64: not an RSA key")
	}
	d := message
	if digest != 0 {
		h := digest.New()
		_, _ = h.Write(message)
		d = h.Sum(nil)
	}
	ok, err = c2.VerifyPKCS1v15(k, digest, d, sig)
	if err != nil {
		return nil, errors.Wrap(err, "rsaVerify_64")
	}
	return rideBoolean(ok), nil
}

func rsaVerify_128(_ RideEnvironment, args ...rideType) (rideType, error) {
	if err := checkArgs(args, 4); err != nil {
		return nil, errors.Wrap(err, "rsaVerify_128")
	}
	digest, err := digest(args[0])
	if err != nil {
		return nil, errors.Wrap(err, "rsaVerify_128")
	}
	message, ok := args[1].(rideBytes)
	if !ok {
		return nil, errors.Errorf("rsaVerify_128: unexpected argument type '%s'", args[1].instanceOf())
	}
	if l := len(message); l > 128*1024 {
		return nil, errors.Errorf("rsaVerify_128: invalid message size %d", l)
	}
	sig, ok := args[2].(rideBytes)
	if !ok {
		return nil, errors.Errorf("rsaVerify_128: unexpected argument type '%s'", args[2].instanceOf())
	}
	pk, ok := args[3].(rideBytes)
	if !ok {
		return nil, errors.Errorf("rsaVerify_128: unexpected argument type '%s'", args[3].instanceOf())
	}
	key, err := x509.ParsePKIXPublicKey(pk)
	if err != nil {
		return nil, errors.Wrap(err, "rsaVerify_128: invalid public key")
	}
	k, ok := key.(*rsa.PublicKey)
	if !ok {
		return nil, errors.New("rsaVerify_128: not an RSA key")
	}
	d := message
	if digest != 0 {
		h := digest.New()
		_, _ = h.Write(message)
		d = h.Sum(nil)
	}
	ok, err = c2.VerifyPKCS1v15(k, digest, d, sig)
	if err != nil {
		return nil, errors.Wrap(err, "rsaVerify_128")
	}
	return rideBoolean(ok), nil
}

func keccak256_16(env RideEnvironment, args ...rideType) (rideType, error) {
	data, err := bytesOrStringArg(args)
	if err != nil {
		return nil, errors.Wrap(err, "keccak256_16")
	}
	if l := len(data); l > 16*1024 {
		return nil, errors.Errorf("keccak256_16: invalid data size %d", l)
	}
	d, err := crypto.Keccak256(data)
	if err != nil {
		return nil, errors.Wrap(err, "keccak256_16")
	}
	return rideBytes(d.Bytes()), nil
}

func keccak256_32(env RideEnvironment, args ...rideType) (rideType, error) {
	data, err := bytesOrStringArg(args)
	if err != nil {
		return nil, errors.Wrap(err, "keccak256_32")
	}
	if l := len(data); l > 32*1024 {
		return nil, errors.Errorf("keccak256_32: invalid data size %d", l)
	}
	d, err := crypto.Keccak256(data)
	if err != nil {
		return nil, errors.Wrap(err, "keccak256_32")
	}
	return rideBytes(d.Bytes()), nil
}

func keccak256_64(env RideEnvironment, args ...rideType) (rideType, error) {
	data, err := bytesOrStringArg(args)
	if err != nil {
		return nil, errors.Wrap(err, "keccak256_64")
	}
	if l := len(data); l > 64*1024 {
		return nil, errors.Errorf("keccak256_64: invalid data size %d", l)
	}
	d, err := crypto.Keccak256(data)
	if err != nil {
		return nil, errors.Wrap(err, "keccak256_64")
	}
	return rideBytes(d.Bytes()), nil
}

func keccak256_128(env RideEnvironment, args ...rideType) (rideType, error) {
	data, err := bytesOrStringArg(args)
	if err != nil {
		return nil, errors.Wrap(err, "keccak256_128")
	}
	if l := len(data); l > 128*1024 {
		return nil, errors.Errorf("keccak256_128: invalid data size %d", l)
	}
	d, err := crypto.Keccak256(data)
	if err != nil {
		return nil, errors.Wrap(err, "keccak256_128")
	}
	return rideBytes(d.Bytes()), nil
}

func blake2b256_16(_ RideEnvironment, args ...rideType) (rideType, error) {
	data, err := bytesOrStringArg(args)
	if err != nil {
		return nil, errors.Wrap(err, "blake2b256_16")
	}
	if l := len(data); l > 16*1024 {
		return nil, errors.Errorf("blake2b256_16: invalid data size %d", l)
	}
	d, err := crypto.FastHash(data)
	if err != nil {
		return nil, errors.Wrap(err, "blake2b256_16")
	}
	return rideBytes(d.Bytes()), nil
}

func blake2b256_32(_ RideEnvironment, args ...rideType) (rideType, error) {
	data, err := bytesOrStringArg(args)
	if err != nil {
		return nil, errors.Wrap(err, "blake2b256_32")
	}
	if l := len(data); l > 32*1024 {
		return nil, errors.Errorf("blake2b256_32: invalid data size %d", l)
	}
	d, err := crypto.FastHash(data)
	if err != nil {
		return nil, errors.Wrap(err, "blake2b256_32")
	}
	return rideBytes(d.Bytes()), nil
}

func blake2b256_64(_ RideEnvironment, args ...rideType) (rideType, error) {
	data, err := bytesOrStringArg(args)
	if err != nil {
		return nil, errors.Wrap(err, "blake2b256_64")
	}
	if l := len(data); l > 64*1024 {
		return nil, errors.Errorf("blake2b256_64: invalid data size %d", l)
	}
	d, err := crypto.FastHash(data)
	if err != nil {
		return nil, errors.Wrap(err, "blake2b256_64")
	}
	return rideBytes(d.Bytes()), nil
}

func blake2b256_128(_ RideEnvironment, args ...rideType) (rideType, error) {
	data, err := bytesOrStringArg(args)
	if err != nil {
		return nil, errors.Wrap(err, "blake2b256_128")
	}
	if l := len(data); l > 128*1024 {
		return nil, errors.Errorf("blake2b256_128: invalid data size %d", l)
	}
	d, err := crypto.FastHash(data)
	if err != nil {
		return nil, errors.Wrap(err, "blake2b256_128")
	}
	return rideBytes(d.Bytes()), nil
}

func sha256_16(_ RideEnvironment, args ...rideType) (rideType, error) {
	data, err := bytesOrStringArg(args)
	if err != nil {
		return nil, errors.Wrap(err, "sha256_16")
	}
	if l := len(data); l > 16*1024 {
		return nil, errors.Errorf("sha256_16: invalid data size %d", l)
	}
	h := sh256.New()
	if _, err = h.Write(data); err != nil {
		return nil, errors.Wrap(err, "sha256_16")
	}
	d := h.Sum(nil)
	return rideBytes(d), nil
}

func sha256_32(_ RideEnvironment, args ...rideType) (rideType, error) {
	data, err := bytesOrStringArg(args)
	if err != nil {
		return nil, errors.Wrap(err, "sha256_32")
	}
	if l := len(data); l > 32*1024 {
		return nil, errors.Errorf("sha256_32: invalid data size %d", l)
	}
	h := sh256.New()
	if _, err = h.Write(data); err != nil {
		return nil, errors.Wrap(err, "sha256_32")
	}
	d := h.Sum(nil)
	return rideBytes(d), nil
}

func sha256_64(_ RideEnvironment, args ...rideType) (rideType, error) {
	data, err := bytesOrStringArg(args)
	if err != nil {
		return nil, errors.Wrap(err, "sha256_64")
	}
	if l := len(data); l > 64*1024 {
		return nil, errors.Errorf("sha256_64: invalid data size %d", l)
	}
	h := sh256.New()
	if _, err = h.Write(data); err != nil {
		return nil, errors.Wrap(err, "sha256_64")
	}
	d := h.Sum(nil)
	return rideBytes(d), nil
}

func sha256_128(_ RideEnvironment, args ...rideType) (rideType, error) {
	data, err := bytesOrStringArg(args)
	if err != nil {
		return nil, errors.Wrap(err, "sha256_128")
	}
	if l := len(data); l > 128*1024 {
		return nil, errors.Errorf("sha256_128: invalid data size %d", l)
	}
	h := sh256.New()
	if _, err = h.Write(data); err != nil {
		return nil, errors.Wrap(err, "sha256_128")
	}
	d := h.Sum(nil)
	return rideBytes(d), nil
}

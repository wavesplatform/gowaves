// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package blockchaininfo

import (
	"context"

	"github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"
	"github.com/wavesplatform/gowaves/pkg/proto"
)

// NewMockUpdatesPublisherInterface creates a new instance of MockUpdatesPublisherInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdatesPublisherInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdatesPublisherInterface {
	mock := &MockUpdatesPublisherInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUpdatesPublisherInterface is an autogenerated mock type for the UpdatesPublisherInterface type
type MockUpdatesPublisherInterface struct {
	mock.Mock
}

type MockUpdatesPublisherInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdatesPublisherInterface) EXPECT() *MockUpdatesPublisherInterface_Expecter {
	return &MockUpdatesPublisherInterface_Expecter{mock: &_m.Mock}
}

// L2ContractAddress provides a mock function for the type MockUpdatesPublisherInterface
func (_mock *MockUpdatesPublisherInterface) L2ContractAddress() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for L2ContractAddress")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockUpdatesPublisherInterface_L2ContractAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'L2ContractAddress'
type MockUpdatesPublisherInterface_L2ContractAddress_Call struct {
	*mock.Call
}

// L2ContractAddress is a helper method to define mock.On call
func (_e *MockUpdatesPublisherInterface_Expecter) L2ContractAddress() *MockUpdatesPublisherInterface_L2ContractAddress_Call {
	return &MockUpdatesPublisherInterface_L2ContractAddress_Call{Call: _e.mock.On("L2ContractAddress")}
}

func (_c *MockUpdatesPublisherInterface_L2ContractAddress_Call) Run(run func()) *MockUpdatesPublisherInterface_L2ContractAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUpdatesPublisherInterface_L2ContractAddress_Call) Return(s string) *MockUpdatesPublisherInterface_L2ContractAddress_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockUpdatesPublisherInterface_L2ContractAddress_Call) RunAndReturn(run func() string) *MockUpdatesPublisherInterface_L2ContractAddress_Call {
	_c.Call.Return(run)
	return _c
}

// PublishUpdates provides a mock function for the type MockUpdatesPublisherInterface
func (_mock *MockUpdatesPublisherInterface) PublishUpdates(ctx context.Context, updates proto.BUpdatesInfo, nc *nats.Conn, scheme proto.Scheme, l2ContractAddress string) error {
	ret := _mock.Called(ctx, updates, nc, scheme, l2ContractAddress)

	if len(ret) == 0 {
		panic("no return value specified for PublishUpdates")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, proto.BUpdatesInfo, *nats.Conn, proto.Scheme, string) error); ok {
		r0 = returnFunc(ctx, updates, nc, scheme, l2ContractAddress)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUpdatesPublisherInterface_PublishUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishUpdates'
type MockUpdatesPublisherInterface_PublishUpdates_Call struct {
	*mock.Call
}

// PublishUpdates is a helper method to define mock.On call
//   - ctx context.Context
//   - updates proto.BUpdatesInfo
//   - nc *nats.Conn
//   - scheme proto.Scheme
//   - l2ContractAddress string
func (_e *MockUpdatesPublisherInterface_Expecter) PublishUpdates(ctx interface{}, updates interface{}, nc interface{}, scheme interface{}, l2ContractAddress interface{}) *MockUpdatesPublisherInterface_PublishUpdates_Call {
	return &MockUpdatesPublisherInterface_PublishUpdates_Call{Call: _e.mock.On("PublishUpdates", ctx, updates, nc, scheme, l2ContractAddress)}
}

func (_c *MockUpdatesPublisherInterface_PublishUpdates_Call) Run(run func(ctx context.Context, updates proto.BUpdatesInfo, nc *nats.Conn, scheme proto.Scheme, l2ContractAddress string)) *MockUpdatesPublisherInterface_PublishUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 proto.BUpdatesInfo
		if args[1] != nil {
			arg1 = args[1].(proto.BUpdatesInfo)
		}
		var arg2 *nats.Conn
		if args[2] != nil {
			arg2 = args[2].(*nats.Conn)
		}
		var arg3 proto.Scheme
		if args[3] != nil {
			arg3 = args[3].(proto.Scheme)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockUpdatesPublisherInterface_PublishUpdates_Call) Return(err error) *MockUpdatesPublisherInterface_PublishUpdates_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUpdatesPublisherInterface_PublishUpdates_Call) RunAndReturn(run func(ctx context.Context, updates proto.BUpdatesInfo, nc *nats.Conn, scheme proto.Scheme, l2ContractAddress string) error) *MockUpdatesPublisherInterface_PublishUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package conn

import (
	"sync"
	"time"
)

// Ensure, that mockDeadlineReader does implement deadlineReader.
// If this is not the case, regenerate this file with moq.
var _ deadlineReader = &mockDeadlineReader{}

// mockDeadlineReader is a mock implementation of deadlineReader.
//
//	func TestSomethingThatUsesdeadlineReader(t *testing.T) {
//
//		// make and configure a mocked deadlineReader
//		mockeddeadlineReader := &mockDeadlineReader{
//			ReadFunc: func(p []byte) (int, error) {
//				panic("mock out the Read method")
//			},
//			SetReadDeadlineFunc: func(t time.Time) error {
//				panic("mock out the SetReadDeadline method")
//			},
//		}
//
//		// use mockeddeadlineReader in code that requires deadlineReader
//		// and then make assertions.
//
//	}
type mockDeadlineReader struct {
	// ReadFunc mocks the Read method.
	ReadFunc func(p []byte) (int, error)

	// SetReadDeadlineFunc mocks the SetReadDeadline method.
	SetReadDeadlineFunc func(t time.Time) error

	// calls tracks calls to the methods.
	calls struct {
		// Read holds details about calls to the Read method.
		Read []struct {
			// P is the p argument value.
			P []byte
		}
		// SetReadDeadline holds details about calls to the SetReadDeadline method.
		SetReadDeadline []struct {
			// T is the t argument value.
			T time.Time
		}
	}
	lockRead            sync.RWMutex
	lockSetReadDeadline sync.RWMutex
}

// Read calls ReadFunc.
func (mock *mockDeadlineReader) Read(p []byte) (int, error) {
	if mock.ReadFunc == nil {
		panic("mockDeadlineReader.ReadFunc: method is nil but deadlineReader.Read was just called")
	}
	callInfo := struct {
		P []byte
	}{
		P: p,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(p)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockeddeadlineReader.ReadCalls())
func (mock *mockDeadlineReader) ReadCalls() []struct {
	P []byte
} {
	var calls []struct {
		P []byte
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// SetReadDeadline calls SetReadDeadlineFunc.
func (mock *mockDeadlineReader) SetReadDeadline(t time.Time) error {
	if mock.SetReadDeadlineFunc == nil {
		panic("mockDeadlineReader.SetReadDeadlineFunc: method is nil but deadlineReader.SetReadDeadline was just called")
	}
	callInfo := struct {
		T time.Time
	}{
		T: t,
	}
	mock.lockSetReadDeadline.Lock()
	mock.calls.SetReadDeadline = append(mock.calls.SetReadDeadline, callInfo)
	mock.lockSetReadDeadline.Unlock()
	return mock.SetReadDeadlineFunc(t)
}

// SetReadDeadlineCalls gets all the calls that were made to SetReadDeadline.
// Check the length with:
//
//	len(mockeddeadlineReader.SetReadDeadlineCalls())
func (mock *mockDeadlineReader) SetReadDeadlineCalls() []struct {
	T time.Time
} {
	var calls []struct {
		T time.Time
	}
	mock.lockSetReadDeadline.RLock()
	calls = mock.calls.SetReadDeadline
	mock.lockSetReadDeadline.RUnlock()
	return calls
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: waves/node/grpc/transactions_api.proto

package grpc

import (
	context "context"
	waves "github.com/wavesplatform/gowaves/pkg/grpc/generated/waves"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionsApi_GetTransactions_FullMethodName         = "/waves.node.grpc.TransactionsApi/GetTransactions"
	TransactionsApi_GetTransactionSnapshots_FullMethodName = "/waves.node.grpc.TransactionsApi/GetTransactionSnapshots"
	TransactionsApi_GetStateChanges_FullMethodName         = "/waves.node.grpc.TransactionsApi/GetStateChanges"
	TransactionsApi_GetStatuses_FullMethodName             = "/waves.node.grpc.TransactionsApi/GetStatuses"
	TransactionsApi_GetUnconfirmed_FullMethodName          = "/waves.node.grpc.TransactionsApi/GetUnconfirmed"
	TransactionsApi_Sign_FullMethodName                    = "/waves.node.grpc.TransactionsApi/Sign"
	TransactionsApi_Broadcast_FullMethodName               = "/waves.node.grpc.TransactionsApi/Broadcast"
)

// TransactionsApiClient is the client API for TransactionsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionsApiClient interface {
	GetTransactions(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionResponse], error)
	GetTransactionSnapshots(ctx context.Context, in *TransactionSnapshotsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionSnapshotResponse], error)
	// Deprecated: Do not use.
	GetStateChanges(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InvokeScriptResultResponse], error)
	GetStatuses(ctx context.Context, in *TransactionsByIdRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionStatus], error)
	GetUnconfirmed(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionResponse], error)
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*waves.SignedTransaction, error)
	Broadcast(ctx context.Context, in *waves.SignedTransaction, opts ...grpc.CallOption) (*waves.SignedTransaction, error)
}

type transactionsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionsApiClient(cc grpc.ClientConnInterface) TransactionsApiClient {
	return &transactionsApiClient{cc}
}

func (c *transactionsApiClient) GetTransactions(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionsApi_ServiceDesc.Streams[0], TransactionsApi_GetTransactions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TransactionsRequest, TransactionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionsApi_GetTransactionsClient = grpc.ServerStreamingClient[TransactionResponse]

func (c *transactionsApiClient) GetTransactionSnapshots(ctx context.Context, in *TransactionSnapshotsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionSnapshotResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionsApi_ServiceDesc.Streams[1], TransactionsApi_GetTransactionSnapshots_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TransactionSnapshotsRequest, TransactionSnapshotResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionsApi_GetTransactionSnapshotsClient = grpc.ServerStreamingClient[TransactionSnapshotResponse]

// Deprecated: Do not use.
func (c *transactionsApiClient) GetStateChanges(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InvokeScriptResultResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionsApi_ServiceDesc.Streams[2], TransactionsApi_GetStateChanges_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TransactionsRequest, InvokeScriptResultResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionsApi_GetStateChangesClient = grpc.ServerStreamingClient[InvokeScriptResultResponse]

func (c *transactionsApiClient) GetStatuses(ctx context.Context, in *TransactionsByIdRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionsApi_ServiceDesc.Streams[3], TransactionsApi_GetStatuses_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TransactionsByIdRequest, TransactionStatus]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionsApi_GetStatusesClient = grpc.ServerStreamingClient[TransactionStatus]

func (c *transactionsApiClient) GetUnconfirmed(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionsApi_ServiceDesc.Streams[4], TransactionsApi_GetUnconfirmed_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TransactionsRequest, TransactionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionsApi_GetUnconfirmedClient = grpc.ServerStreamingClient[TransactionResponse]

func (c *transactionsApiClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*waves.SignedTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(waves.SignedTransaction)
	err := c.cc.Invoke(ctx, TransactionsApi_Sign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsApiClient) Broadcast(ctx context.Context, in *waves.SignedTransaction, opts ...grpc.CallOption) (*waves.SignedTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(waves.SignedTransaction)
	err := c.cc.Invoke(ctx, TransactionsApi_Broadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionsApiServer is the server API for TransactionsApi service.
// All implementations should embed UnimplementedTransactionsApiServer
// for forward compatibility.
type TransactionsApiServer interface {
	GetTransactions(*TransactionsRequest, grpc.ServerStreamingServer[TransactionResponse]) error
	GetTransactionSnapshots(*TransactionSnapshotsRequest, grpc.ServerStreamingServer[TransactionSnapshotResponse]) error
	// Deprecated: Do not use.
	GetStateChanges(*TransactionsRequest, grpc.ServerStreamingServer[InvokeScriptResultResponse]) error
	GetStatuses(*TransactionsByIdRequest, grpc.ServerStreamingServer[TransactionStatus]) error
	GetUnconfirmed(*TransactionsRequest, grpc.ServerStreamingServer[TransactionResponse]) error
	Sign(context.Context, *SignRequest) (*waves.SignedTransaction, error)
	Broadcast(context.Context, *waves.SignedTransaction) (*waves.SignedTransaction, error)
}

// UnimplementedTransactionsApiServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionsApiServer struct{}

func (UnimplementedTransactionsApiServer) GetTransactions(*TransactionsRequest, grpc.ServerStreamingServer[TransactionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedTransactionsApiServer) GetTransactionSnapshots(*TransactionSnapshotsRequest, grpc.ServerStreamingServer[TransactionSnapshotResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactionSnapshots not implemented")
}
func (UnimplementedTransactionsApiServer) GetStateChanges(*TransactionsRequest, grpc.ServerStreamingServer[InvokeScriptResultResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetStateChanges not implemented")
}
func (UnimplementedTransactionsApiServer) GetStatuses(*TransactionsByIdRequest, grpc.ServerStreamingServer[TransactionStatus]) error {
	return status.Errorf(codes.Unimplemented, "method GetStatuses not implemented")
}
func (UnimplementedTransactionsApiServer) GetUnconfirmed(*TransactionsRequest, grpc.ServerStreamingServer[TransactionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetUnconfirmed not implemented")
}
func (UnimplementedTransactionsApiServer) Sign(context.Context, *SignRequest) (*waves.SignedTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedTransactionsApiServer) Broadcast(context.Context, *waves.SignedTransaction) (*waves.SignedTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedTransactionsApiServer) testEmbeddedByValue() {}

// UnsafeTransactionsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionsApiServer will
// result in compilation errors.
type UnsafeTransactionsApiServer interface {
	mustEmbedUnimplementedTransactionsApiServer()
}

func RegisterTransactionsApiServer(s grpc.ServiceRegistrar, srv TransactionsApiServer) {
	// If the following call pancis, it indicates UnimplementedTransactionsApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionsApi_ServiceDesc, srv)
}

func _TransactionsApi_GetTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionsApiServer).GetTransactions(m, &grpc.GenericServerStream[TransactionsRequest, TransactionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionsApi_GetTransactionsServer = grpc.ServerStreamingServer[TransactionResponse]

func _TransactionsApi_GetTransactionSnapshots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionSnapshotsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionsApiServer).GetTransactionSnapshots(m, &grpc.GenericServerStream[TransactionSnapshotsRequest, TransactionSnapshotResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionsApi_GetTransactionSnapshotsServer = grpc.ServerStreamingServer[TransactionSnapshotResponse]

func _TransactionsApi_GetStateChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionsApiServer).GetStateChanges(m, &grpc.GenericServerStream[TransactionsRequest, InvokeScriptResultResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionsApi_GetStateChangesServer = grpc.ServerStreamingServer[InvokeScriptResultResponse]

func _TransactionsApi_GetStatuses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionsByIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionsApiServer).GetStatuses(m, &grpc.GenericServerStream[TransactionsByIdRequest, TransactionStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionsApi_GetStatusesServer = grpc.ServerStreamingServer[TransactionStatus]

func _TransactionsApi_GetUnconfirmed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionsApiServer).GetUnconfirmed(m, &grpc.GenericServerStream[TransactionsRequest, TransactionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionsApi_GetUnconfirmedServer = grpc.ServerStreamingServer[TransactionResponse]

func _TransactionsApi_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsApiServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsApi_Sign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsApiServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsApi_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(waves.SignedTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsApiServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsApi_Broadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsApiServer).Broadcast(ctx, req.(*waves.SignedTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionsApi_ServiceDesc is the grpc.ServiceDesc for TransactionsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "waves.node.grpc.TransactionsApi",
	HandlerType: (*TransactionsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sign",
			Handler:    _TransactionsApi_Sign_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _TransactionsApi_Broadcast_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTransactions",
			Handler:       _TransactionsApi_GetTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTransactionSnapshots",
			Handler:       _TransactionsApi_GetTransactionSnapshots_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStateChanges",
			Handler:       _TransactionsApi_GetStateChanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStatuses",
			Handler:       _TransactionsApi_GetStatuses_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUnconfirmed",
			Handler:       _TransactionsApi_GetUnconfirmed_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "waves/node/grpc/transactions_api.proto",
}

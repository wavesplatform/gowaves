// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: waves/node/grpc/assets_api.proto

package grpc

import (
	waves "github.com/wavesplatform/gowaves/pkg/grpc/generated/waves"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AssetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AssetId       []byte                 `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetRequest) Reset() {
	*x = AssetRequest{}
	mi := &file_waves_node_grpc_assets_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRequest) ProtoMessage() {}

func (x *AssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_waves_node_grpc_assets_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRequest.ProtoReflect.Descriptor instead.
func (*AssetRequest) Descriptor() ([]byte, []int) {
	return file_waves_node_grpc_assets_api_proto_rawDescGZIP(), []int{0}
}

func (x *AssetRequest) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

type NFTRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []byte                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	AfterAssetId  []byte                 `protobuf:"bytes,3,opt,name=after_asset_id,json=afterAssetId,proto3" json:"after_asset_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NFTRequest) Reset() {
	*x = NFTRequest{}
	mi := &file_waves_node_grpc_assets_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NFTRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTRequest) ProtoMessage() {}

func (x *NFTRequest) ProtoReflect() protoreflect.Message {
	mi := &file_waves_node_grpc_assets_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTRequest.ProtoReflect.Descriptor instead.
func (*NFTRequest) Descriptor() ([]byte, []int) {
	return file_waves_node_grpc_assets_api_proto_rawDescGZIP(), []int{1}
}

func (x *NFTRequest) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *NFTRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *NFTRequest) GetAfterAssetId() []byte {
	if x != nil {
		return x.AfterAssetId
	}
	return nil
}

type NFTResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AssetId       []byte                 `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	AssetInfo     *AssetInfoResponse     `protobuf:"bytes,2,opt,name=asset_info,json=assetInfo,proto3" json:"asset_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NFTResponse) Reset() {
	*x = NFTResponse{}
	mi := &file_waves_node_grpc_assets_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NFTResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTResponse) ProtoMessage() {}

func (x *NFTResponse) ProtoReflect() protoreflect.Message {
	mi := &file_waves_node_grpc_assets_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTResponse.ProtoReflect.Descriptor instead.
func (*NFTResponse) Descriptor() ([]byte, []int) {
	return file_waves_node_grpc_assets_api_proto_rawDescGZIP(), []int{2}
}

func (x *NFTResponse) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *NFTResponse) GetAssetInfo() *AssetInfoResponse {
	if x != nil {
		return x.AssetInfo
	}
	return nil
}

type AssetInfoResponse struct {
	state            protoimpl.MessageState   `protogen:"open.v1"`
	Issuer           []byte                   `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Name             string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Decimals         int32                    `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Reissuable       bool                     `protobuf:"varint,5,opt,name=reissuable,proto3" json:"reissuable,omitempty"`
	TotalVolume      int64                    `protobuf:"varint,6,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	Script           *ScriptData              `protobuf:"bytes,7,opt,name=script,proto3" json:"script,omitempty"`
	Sponsorship      int64                    `protobuf:"varint,8,opt,name=sponsorship,proto3" json:"sponsorship,omitempty"`
	IssueTransaction *waves.SignedTransaction `protobuf:"bytes,11,opt,name=issue_transaction,json=issueTransaction,proto3" json:"issue_transaction,omitempty"`
	SponsorBalance   int64                    `protobuf:"varint,10,opt,name=sponsor_balance,json=sponsorBalance,proto3" json:"sponsor_balance,omitempty"`
	SequenceInBlock  int32                    `protobuf:"varint,12,opt,name=sequence_in_block,json=sequenceInBlock,proto3" json:"sequence_in_block,omitempty"`
	IssueHeight      int32                    `protobuf:"varint,13,opt,name=issue_height,json=issueHeight,proto3" json:"issue_height,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AssetInfoResponse) Reset() {
	*x = AssetInfoResponse{}
	mi := &file_waves_node_grpc_assets_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetInfoResponse) ProtoMessage() {}

func (x *AssetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_waves_node_grpc_assets_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetInfoResponse.ProtoReflect.Descriptor instead.
func (*AssetInfoResponse) Descriptor() ([]byte, []int) {
	return file_waves_node_grpc_assets_api_proto_rawDescGZIP(), []int{3}
}

func (x *AssetInfoResponse) GetIssuer() []byte {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *AssetInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AssetInfoResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AssetInfoResponse) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *AssetInfoResponse) GetReissuable() bool {
	if x != nil {
		return x.Reissuable
	}
	return false
}

func (x *AssetInfoResponse) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *AssetInfoResponse) GetScript() *ScriptData {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *AssetInfoResponse) GetSponsorship() int64 {
	if x != nil {
		return x.Sponsorship
	}
	return 0
}

func (x *AssetInfoResponse) GetIssueTransaction() *waves.SignedTransaction {
	if x != nil {
		return x.IssueTransaction
	}
	return nil
}

func (x *AssetInfoResponse) GetSponsorBalance() int64 {
	if x != nil {
		return x.SponsorBalance
	}
	return 0
}

func (x *AssetInfoResponse) GetSequenceInBlock() int32 {
	if x != nil {
		return x.SequenceInBlock
	}
	return 0
}

func (x *AssetInfoResponse) GetIssueHeight() int32 {
	if x != nil {
		return x.IssueHeight
	}
	return 0
}

var File_waves_node_grpc_assets_api_proto protoreflect.FileDescriptor

const file_waves_node_grpc_assets_api_proto_rawDesc = "" +
	"\n" +
	" waves/node/grpc/assets_api.proto\x12\x0fwaves.node.grpc\x1a\x17waves/transaction.proto\x1a\"waves/node/grpc/accounts_api.proto\")\n" +
	"\fAssetRequest\x12\x19\n" +
	"\basset_id\x18\x01 \x01(\fR\aassetId\"b\n" +
	"\n" +
	"NFTRequest\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\fR\aaddress\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\x12$\n" +
	"\x0eafter_asset_id\x18\x03 \x01(\fR\fafterAssetId\"k\n" +
	"\vNFTResponse\x12\x19\n" +
	"\basset_id\x18\x01 \x01(\fR\aassetId\x12A\n" +
	"\n" +
	"asset_info\x18\x02 \x01(\v2\".waves.node.grpc.AssetInfoResponseR\tassetInfo\"\xd6\x03\n" +
	"\x11AssetInfoResponse\x12\x16\n" +
	"\x06issuer\x18\x01 \x01(\fR\x06issuer\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1a\n" +
	"\bdecimals\x18\x04 \x01(\x05R\bdecimals\x12\x1e\n" +
	"\n" +
	"reissuable\x18\x05 \x01(\bR\n" +
	"reissuable\x12!\n" +
	"\ftotal_volume\x18\x06 \x01(\x03R\vtotalVolume\x123\n" +
	"\x06script\x18\a \x01(\v2\x1b.waves.node.grpc.ScriptDataR\x06script\x12 \n" +
	"\vsponsorship\x18\b \x01(\x03R\vsponsorship\x12E\n" +
	"\x11issue_transaction\x18\v \x01(\v2\x18.waves.SignedTransactionR\x10issueTransaction\x12'\n" +
	"\x0fsponsor_balance\x18\n" +
	" \x01(\x03R\x0esponsorBalance\x12*\n" +
	"\x11sequence_in_block\x18\f \x01(\x05R\x0fsequenceInBlock\x12!\n" +
	"\fissue_height\x18\r \x01(\x05R\vissueHeight2\xa4\x01\n" +
	"\tAssetsApi\x12L\n" +
	"\aGetInfo\x12\x1d.waves.node.grpc.AssetRequest\x1a\".waves.node.grpc.AssetInfoResponse\x12I\n" +
	"\n" +
	"GetNFTList\x12\x1b.waves.node.grpc.NFTRequest\x1a\x1c.waves.node.grpc.NFTResponse0\x01Bs\n" +
	"\x1acom.wavesplatform.api.grpcZCgithub.com/wavesplatform/gowaves/pkg/grpc/generated/waves/node/grpc\xaa\x02\x0fWaves.Node.Grpcb\x06proto3"

var (
	file_waves_node_grpc_assets_api_proto_rawDescOnce sync.Once
	file_waves_node_grpc_assets_api_proto_rawDescData []byte
)

func file_waves_node_grpc_assets_api_proto_rawDescGZIP() []byte {
	file_waves_node_grpc_assets_api_proto_rawDescOnce.Do(func() {
		file_waves_node_grpc_assets_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_waves_node_grpc_assets_api_proto_rawDesc), len(file_waves_node_grpc_assets_api_proto_rawDesc)))
	})
	return file_waves_node_grpc_assets_api_proto_rawDescData
}

var file_waves_node_grpc_assets_api_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_waves_node_grpc_assets_api_proto_goTypes = []any{
	(*AssetRequest)(nil),            // 0: waves.node.grpc.AssetRequest
	(*NFTRequest)(nil),              // 1: waves.node.grpc.NFTRequest
	(*NFTResponse)(nil),             // 2: waves.node.grpc.NFTResponse
	(*AssetInfoResponse)(nil),       // 3: waves.node.grpc.AssetInfoResponse
	(*ScriptData)(nil),              // 4: waves.node.grpc.ScriptData
	(*waves.SignedTransaction)(nil), // 5: waves.SignedTransaction
}
var file_waves_node_grpc_assets_api_proto_depIdxs = []int32{
	3, // 0: waves.node.grpc.NFTResponse.asset_info:type_name -> waves.node.grpc.AssetInfoResponse
	4, // 1: waves.node.grpc.AssetInfoResponse.script:type_name -> waves.node.grpc.ScriptData
	5, // 2: waves.node.grpc.AssetInfoResponse.issue_transaction:type_name -> waves.SignedTransaction
	0, // 3: waves.node.grpc.AssetsApi.GetInfo:input_type -> waves.node.grpc.AssetRequest
	1, // 4: waves.node.grpc.AssetsApi.GetNFTList:input_type -> waves.node.grpc.NFTRequest
	3, // 5: waves.node.grpc.AssetsApi.GetInfo:output_type -> waves.node.grpc.AssetInfoResponse
	2, // 6: waves.node.grpc.AssetsApi.GetNFTList:output_type -> waves.node.grpc.NFTResponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_waves_node_grpc_assets_api_proto_init() }
func file_waves_node_grpc_assets_api_proto_init() {
	if File_waves_node_grpc_assets_api_proto != nil {
		return
	}
	file_waves_node_grpc_accounts_api_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_waves_node_grpc_assets_api_proto_rawDesc), len(file_waves_node_grpc_assets_api_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_waves_node_grpc_assets_api_proto_goTypes,
		DependencyIndexes: file_waves_node_grpc_assets_api_proto_depIdxs,
		MessageInfos:      file_waves_node_grpc_assets_api_proto_msgTypes,
	}.Build()
	File_waves_node_grpc_assets_api_proto = out.File
	file_waves_node_grpc_assets_api_proto_goTypes = nil
	file_waves_node_grpc_assets_api_proto_depIdxs = nil
}

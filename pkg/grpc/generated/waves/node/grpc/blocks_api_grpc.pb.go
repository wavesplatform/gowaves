// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: waves/node/grpc/blocks_api.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlocksApi_GetBlock_FullMethodName         = "/waves.node.grpc.BlocksApi/GetBlock"
	BlocksApi_GetBlockRange_FullMethodName    = "/waves.node.grpc.BlocksApi/GetBlockRange"
	BlocksApi_GetCurrentHeight_FullMethodName = "/waves.node.grpc.BlocksApi/GetCurrentHeight"
)

// BlocksApiClient is the client API for BlocksApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlocksApiClient interface {
	GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockWithHeight, error)
	GetBlockRange(ctx context.Context, in *BlockRangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlockWithHeight], error)
	GetCurrentHeight(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error)
}

type blocksApiClient struct {
	cc grpc.ClientConnInterface
}

func NewBlocksApiClient(cc grpc.ClientConnInterface) BlocksApiClient {
	return &blocksApiClient{cc}
}

func (c *blocksApiClient) GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockWithHeight, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockWithHeight)
	err := c.cc.Invoke(ctx, BlocksApi_GetBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blocksApiClient) GetBlockRange(ctx context.Context, in *BlockRangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlockWithHeight], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlocksApi_ServiceDesc.Streams[0], BlocksApi_GetBlockRange_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BlockRangeRequest, BlockWithHeight]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlocksApi_GetBlockRangeClient = grpc.ServerStreamingClient[BlockWithHeight]

func (c *blocksApiClient) GetCurrentHeight(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.UInt32Value)
	err := c.cc.Invoke(ctx, BlocksApi_GetCurrentHeight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlocksApiServer is the server API for BlocksApi service.
// All implementations should embed UnimplementedBlocksApiServer
// for forward compatibility.
type BlocksApiServer interface {
	GetBlock(context.Context, *BlockRequest) (*BlockWithHeight, error)
	GetBlockRange(*BlockRangeRequest, grpc.ServerStreamingServer[BlockWithHeight]) error
	GetCurrentHeight(context.Context, *emptypb.Empty) (*wrapperspb.UInt32Value, error)
}

// UnimplementedBlocksApiServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlocksApiServer struct{}

func (UnimplementedBlocksApiServer) GetBlock(context.Context, *BlockRequest) (*BlockWithHeight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedBlocksApiServer) GetBlockRange(*BlockRangeRequest, grpc.ServerStreamingServer[BlockWithHeight]) error {
	return status.Errorf(codes.Unimplemented, "method GetBlockRange not implemented")
}
func (UnimplementedBlocksApiServer) GetCurrentHeight(context.Context, *emptypb.Empty) (*wrapperspb.UInt32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentHeight not implemented")
}
func (UnimplementedBlocksApiServer) testEmbeddedByValue() {}

// UnsafeBlocksApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlocksApiServer will
// result in compilation errors.
type UnsafeBlocksApiServer interface {
	mustEmbedUnimplementedBlocksApiServer()
}

func RegisterBlocksApiServer(s grpc.ServiceRegistrar, srv BlocksApiServer) {
	// If the following call pancis, it indicates UnimplementedBlocksApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlocksApi_ServiceDesc, srv)
}

func _BlocksApi_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlocksApiServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlocksApi_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlocksApiServer).GetBlock(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlocksApi_GetBlockRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockRangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlocksApiServer).GetBlockRange(m, &grpc.GenericServerStream[BlockRangeRequest, BlockWithHeight]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlocksApi_GetBlockRangeServer = grpc.ServerStreamingServer[BlockWithHeight]

func _BlocksApi_GetCurrentHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlocksApiServer).GetCurrentHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlocksApi_GetCurrentHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlocksApiServer).GetCurrentHeight(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BlocksApi_ServiceDesc is the grpc.ServiceDesc for BlocksApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlocksApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "waves.node.grpc.BlocksApi",
	HandlerType: (*BlocksApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlock",
			Handler:    _BlocksApi_GetBlock_Handler,
		},
		{
			MethodName: "GetCurrentHeight",
			Handler:    _BlocksApi_GetCurrentHeight_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlockRange",
			Handler:       _BlocksApi_GetBlockRange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "waves/node/grpc/blocks_api.proto",
}

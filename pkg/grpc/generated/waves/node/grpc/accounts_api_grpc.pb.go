// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: waves/node/grpc/accounts_api.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountsApi_GetBalances_FullMethodName     = "/waves.node.grpc.AccountsApi/GetBalances"
	AccountsApi_GetScript_FullMethodName       = "/waves.node.grpc.AccountsApi/GetScript"
	AccountsApi_GetActiveLeases_FullMethodName = "/waves.node.grpc.AccountsApi/GetActiveLeases"
	AccountsApi_GetDataEntries_FullMethodName  = "/waves.node.grpc.AccountsApi/GetDataEntries"
	AccountsApi_ResolveAlias_FullMethodName    = "/waves.node.grpc.AccountsApi/ResolveAlias"
)

// AccountsApiClient is the client API for AccountsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsApiClient interface {
	GetBalances(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BalanceResponse], error)
	GetScript(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*ScriptResponse, error)
	GetActiveLeases(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LeaseResponse], error)
	GetDataEntries(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DataEntryResponse], error)
	ResolveAlias(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error)
}

type accountsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsApiClient(cc grpc.ClientConnInterface) AccountsApiClient {
	return &accountsApiClient{cc}
}

func (c *accountsApiClient) GetBalances(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BalanceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AccountsApi_ServiceDesc.Streams[0], AccountsApi_GetBalances_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BalancesRequest, BalanceResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AccountsApi_GetBalancesClient = grpc.ServerStreamingClient[BalanceResponse]

func (c *accountsApiClient) GetScript(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*ScriptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScriptResponse)
	err := c.cc.Invoke(ctx, AccountsApi_GetScript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsApiClient) GetActiveLeases(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LeaseResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AccountsApi_ServiceDesc.Streams[1], AccountsApi_GetActiveLeases_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AccountRequest, LeaseResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AccountsApi_GetActiveLeasesClient = grpc.ServerStreamingClient[LeaseResponse]

func (c *accountsApiClient) GetDataEntries(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DataEntryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AccountsApi_ServiceDesc.Streams[2], AccountsApi_GetDataEntries_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataRequest, DataEntryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AccountsApi_GetDataEntriesClient = grpc.ServerStreamingClient[DataEntryResponse]

func (c *accountsApiClient) ResolveAlias(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BytesValue)
	err := c.cc.Invoke(ctx, AccountsApi_ResolveAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsApiServer is the server API for AccountsApi service.
// All implementations should embed UnimplementedAccountsApiServer
// for forward compatibility.
type AccountsApiServer interface {
	GetBalances(*BalancesRequest, grpc.ServerStreamingServer[BalanceResponse]) error
	GetScript(context.Context, *AccountRequest) (*ScriptResponse, error)
	GetActiveLeases(*AccountRequest, grpc.ServerStreamingServer[LeaseResponse]) error
	GetDataEntries(*DataRequest, grpc.ServerStreamingServer[DataEntryResponse]) error
	ResolveAlias(context.Context, *wrapperspb.StringValue) (*wrapperspb.BytesValue, error)
}

// UnimplementedAccountsApiServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountsApiServer struct{}

func (UnimplementedAccountsApiServer) GetBalances(*BalancesRequest, grpc.ServerStreamingServer[BalanceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetBalances not implemented")
}
func (UnimplementedAccountsApiServer) GetScript(context.Context, *AccountRequest) (*ScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScript not implemented")
}
func (UnimplementedAccountsApiServer) GetActiveLeases(*AccountRequest, grpc.ServerStreamingServer[LeaseResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetActiveLeases not implemented")
}
func (UnimplementedAccountsApiServer) GetDataEntries(*DataRequest, grpc.ServerStreamingServer[DataEntryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetDataEntries not implemented")
}
func (UnimplementedAccountsApiServer) ResolveAlias(context.Context, *wrapperspb.StringValue) (*wrapperspb.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveAlias not implemented")
}
func (UnimplementedAccountsApiServer) testEmbeddedByValue() {}

// UnsafeAccountsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsApiServer will
// result in compilation errors.
type UnsafeAccountsApiServer interface {
	mustEmbedUnimplementedAccountsApiServer()
}

func RegisterAccountsApiServer(s grpc.ServiceRegistrar, srv AccountsApiServer) {
	// If the following call pancis, it indicates UnimplementedAccountsApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountsApi_ServiceDesc, srv)
}

func _AccountsApi_GetBalances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BalancesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountsApiServer).GetBalances(m, &grpc.GenericServerStream[BalancesRequest, BalanceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AccountsApi_GetBalancesServer = grpc.ServerStreamingServer[BalanceResponse]

func _AccountsApi_GetScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsApiServer).GetScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsApi_GetScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsApiServer).GetScript(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsApi_GetActiveLeases_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountsApiServer).GetActiveLeases(m, &grpc.GenericServerStream[AccountRequest, LeaseResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AccountsApi_GetActiveLeasesServer = grpc.ServerStreamingServer[LeaseResponse]

func _AccountsApi_GetDataEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountsApiServer).GetDataEntries(m, &grpc.GenericServerStream[DataRequest, DataEntryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AccountsApi_GetDataEntriesServer = grpc.ServerStreamingServer[DataEntryResponse]

func _AccountsApi_ResolveAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsApiServer).ResolveAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsApi_ResolveAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsApiServer).ResolveAlias(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountsApi_ServiceDesc is the grpc.ServiceDesc for AccountsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "waves.node.grpc.AccountsApi",
	HandlerType: (*AccountsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScript",
			Handler:    _AccountsApi_GetScript_Handler,
		},
		{
			MethodName: "ResolveAlias",
			Handler:    _AccountsApi_ResolveAlias_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBalances",
			Handler:       _AccountsApi_GetBalances_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetActiveLeases",
			Handler:       _AccountsApi_GetActiveLeases_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDataEntries",
			Handler:       _AccountsApi_GetDataEntries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "waves/node/grpc/accounts_api.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: waves/node/grpc/assets_api.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetsApiClient is the client API for AssetsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetsApiClient interface {
	GetInfo(ctx context.Context, in *AssetRequest, opts ...grpc.CallOption) (*AssetInfoResponse, error)
	GetNFTList(ctx context.Context, in *NFTRequest, opts ...grpc.CallOption) (AssetsApi_GetNFTListClient, error)
}

type assetsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetsApiClient(cc grpc.ClientConnInterface) AssetsApiClient {
	return &assetsApiClient{cc}
}

func (c *assetsApiClient) GetInfo(ctx context.Context, in *AssetRequest, opts ...grpc.CallOption) (*AssetInfoResponse, error) {
	out := new(AssetInfoResponse)
	err := c.cc.Invoke(ctx, "/waves.node.grpc.AssetsApi/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsApiClient) GetNFTList(ctx context.Context, in *NFTRequest, opts ...grpc.CallOption) (AssetsApi_GetNFTListClient, error) {
	stream, err := c.cc.NewStream(ctx, &AssetsApi_ServiceDesc.Streams[0], "/waves.node.grpc.AssetsApi/GetNFTList", opts...)
	if err != nil {
		return nil, err
	}
	x := &assetsApiGetNFTListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AssetsApi_GetNFTListClient interface {
	Recv() (*NFTResponse, error)
	grpc.ClientStream
}

type assetsApiGetNFTListClient struct {
	grpc.ClientStream
}

func (x *assetsApiGetNFTListClient) Recv() (*NFTResponse, error) {
	m := new(NFTResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AssetsApiServer is the server API for AssetsApi service.
// All implementations should embed UnimplementedAssetsApiServer
// for forward compatibility
type AssetsApiServer interface {
	GetInfo(context.Context, *AssetRequest) (*AssetInfoResponse, error)
	GetNFTList(*NFTRequest, AssetsApi_GetNFTListServer) error
}

// UnimplementedAssetsApiServer should be embedded to have forward compatible implementations.
type UnimplementedAssetsApiServer struct {
}

func (UnimplementedAssetsApiServer) GetInfo(context.Context, *AssetRequest) (*AssetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedAssetsApiServer) GetNFTList(*NFTRequest, AssetsApi_GetNFTListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNFTList not implemented")
}

// UnsafeAssetsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetsApiServer will
// result in compilation errors.
type UnsafeAssetsApiServer interface {
	mustEmbedUnimplementedAssetsApiServer()
}

func RegisterAssetsApiServer(s grpc.ServiceRegistrar, srv AssetsApiServer) {
	s.RegisterService(&AssetsApi_ServiceDesc, srv)
}

func _AssetsApi_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsApiServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/waves.node.grpc.AssetsApi/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsApiServer).GetInfo(ctx, req.(*AssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsApi_GetNFTList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NFTRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AssetsApiServer).GetNFTList(m, &assetsApiGetNFTListServer{stream})
}

type AssetsApi_GetNFTListServer interface {
	Send(*NFTResponse) error
	grpc.ServerStream
}

type assetsApiGetNFTListServer struct {
	grpc.ServerStream
}

func (x *assetsApiGetNFTListServer) Send(m *NFTResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AssetsApi_ServiceDesc is the grpc.ServiceDesc for AssetsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "waves.node.grpc.AssetsApi",
	HandlerType: (*AssetsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _AssetsApi_GetInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNFTList",
			Handler:       _AssetsApi_GetNFTList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "waves/node/grpc/assets_api.proto",
}

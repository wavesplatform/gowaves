// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: waves/events/grpc/blockchain_updates.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlockchainUpdatesApi_GetBlockUpdate_FullMethodName       = "/waves.events.grpc.BlockchainUpdatesApi/GetBlockUpdate"
	BlockchainUpdatesApi_GetBlockUpdatesRange_FullMethodName = "/waves.events.grpc.BlockchainUpdatesApi/GetBlockUpdatesRange"
	BlockchainUpdatesApi_Subscribe_FullMethodName            = "/waves.events.grpc.BlockchainUpdatesApi/Subscribe"
)

// BlockchainUpdatesApiClient is the client API for BlockchainUpdatesApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainUpdatesApiClient interface {
	GetBlockUpdate(ctx context.Context, in *GetBlockUpdateRequest, opts ...grpc.CallOption) (*GetBlockUpdateResponse, error)
	GetBlockUpdatesRange(ctx context.Context, in *GetBlockUpdatesRangeRequest, opts ...grpc.CallOption) (*GetBlockUpdatesRangeResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeEvent], error)
}

type blockchainUpdatesApiClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainUpdatesApiClient(cc grpc.ClientConnInterface) BlockchainUpdatesApiClient {
	return &blockchainUpdatesApiClient{cc}
}

func (c *blockchainUpdatesApiClient) GetBlockUpdate(ctx context.Context, in *GetBlockUpdateRequest, opts ...grpc.CallOption) (*GetBlockUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockUpdateResponse)
	err := c.cc.Invoke(ctx, BlockchainUpdatesApi_GetBlockUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainUpdatesApiClient) GetBlockUpdatesRange(ctx context.Context, in *GetBlockUpdatesRangeRequest, opts ...grpc.CallOption) (*GetBlockUpdatesRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockUpdatesRangeResponse)
	err := c.cc.Invoke(ctx, BlockchainUpdatesApi_GetBlockUpdatesRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainUpdatesApiClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlockchainUpdatesApi_ServiceDesc.Streams[0], BlockchainUpdatesApi_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, SubscribeEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlockchainUpdatesApi_SubscribeClient = grpc.ServerStreamingClient[SubscribeEvent]

// BlockchainUpdatesApiServer is the server API for BlockchainUpdatesApi service.
// All implementations should embed UnimplementedBlockchainUpdatesApiServer
// for forward compatibility.
type BlockchainUpdatesApiServer interface {
	GetBlockUpdate(context.Context, *GetBlockUpdateRequest) (*GetBlockUpdateResponse, error)
	GetBlockUpdatesRange(context.Context, *GetBlockUpdatesRangeRequest) (*GetBlockUpdatesRangeResponse, error)
	Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[SubscribeEvent]) error
}

// UnimplementedBlockchainUpdatesApiServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlockchainUpdatesApiServer struct{}

func (UnimplementedBlockchainUpdatesApiServer) GetBlockUpdate(context.Context, *GetBlockUpdateRequest) (*GetBlockUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockUpdate not implemented")
}
func (UnimplementedBlockchainUpdatesApiServer) GetBlockUpdatesRange(context.Context, *GetBlockUpdatesRangeRequest) (*GetBlockUpdatesRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockUpdatesRange not implemented")
}
func (UnimplementedBlockchainUpdatesApiServer) Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[SubscribeEvent]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedBlockchainUpdatesApiServer) testEmbeddedByValue() {}

// UnsafeBlockchainUpdatesApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainUpdatesApiServer will
// result in compilation errors.
type UnsafeBlockchainUpdatesApiServer interface {
	mustEmbedUnimplementedBlockchainUpdatesApiServer()
}

func RegisterBlockchainUpdatesApiServer(s grpc.ServiceRegistrar, srv BlockchainUpdatesApiServer) {
	// If the following call pancis, it indicates UnimplementedBlockchainUpdatesApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlockchainUpdatesApi_ServiceDesc, srv)
}

func _BlockchainUpdatesApi_GetBlockUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainUpdatesApiServer).GetBlockUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainUpdatesApi_GetBlockUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainUpdatesApiServer).GetBlockUpdate(ctx, req.(*GetBlockUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainUpdatesApi_GetBlockUpdatesRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockUpdatesRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainUpdatesApiServer).GetBlockUpdatesRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainUpdatesApi_GetBlockUpdatesRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainUpdatesApiServer).GetBlockUpdatesRange(ctx, req.(*GetBlockUpdatesRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainUpdatesApi_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockchainUpdatesApiServer).Subscribe(m, &grpc.GenericServerStream[SubscribeRequest, SubscribeEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlockchainUpdatesApi_SubscribeServer = grpc.ServerStreamingServer[SubscribeEvent]

// BlockchainUpdatesApi_ServiceDesc is the grpc.ServiceDesc for BlockchainUpdatesApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainUpdatesApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "waves.events.grpc.BlockchainUpdatesApi",
	HandlerType: (*BlockchainUpdatesApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockUpdate",
			Handler:    _BlockchainUpdatesApi_GetBlockUpdate_Handler,
		},
		{
			MethodName: "GetBlockUpdatesRange",
			Handler:    _BlockchainUpdatesApi_GetBlockUpdatesRange_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _BlockchainUpdatesApi_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "waves/events/grpc/blockchain_updates.proto",
}

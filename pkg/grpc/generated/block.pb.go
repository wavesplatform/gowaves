// Code generated by protoc-gen-go. DO NOT EDIT.
// source: block.proto

package generated

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Block struct {
	Header               *Block_Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Signature            []byte               `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Transactions         []*SignedTransaction `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{0}
}

func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetHeader() *Block_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Block) GetTransactions() []*SignedTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Block_Header struct {
	ChainId              int32    `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Reference            []byte   `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	BaseTarget           int64    `protobuf:"varint,3,opt,name=base_target,json=baseTarget,proto3" json:"base_target,omitempty"`
	GenerationSignature  []byte   `protobuf:"bytes,4,opt,name=generation_signature,json=generationSignature,proto3" json:"generation_signature,omitempty"`
	FeatureVotes         []uint32 `protobuf:"varint,5,rep,packed,name=feature_votes,json=featureVotes,proto3" json:"feature_votes,omitempty"`
	Timestamp            int64    `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Version              int32    `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	Generator            []byte   `protobuf:"bytes,8,opt,name=generator,proto3" json:"generator,omitempty"`
	RewardVote           int64    `protobuf:"varint,9,opt,name=reward_vote,json=rewardVote,proto3" json:"reward_vote,omitempty"`
	TransactionsRoot     []byte   `protobuf:"bytes,10,opt,name=transactions_root,json=transactionsRoot,proto3" json:"transactions_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Block_Header) Reset()         { *m = Block_Header{} }
func (m *Block_Header) String() string { return proto.CompactTextString(m) }
func (*Block_Header) ProtoMessage()    {}
func (*Block_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{0, 0}
}

func (m *Block_Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block_Header.Unmarshal(m, b)
}
func (m *Block_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block_Header.Marshal(b, m, deterministic)
}
func (m *Block_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block_Header.Merge(m, src)
}
func (m *Block_Header) XXX_Size() int {
	return xxx_messageInfo_Block_Header.Size(m)
}
func (m *Block_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Block_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Block_Header proto.InternalMessageInfo

func (m *Block_Header) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *Block_Header) GetReference() []byte {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *Block_Header) GetBaseTarget() int64 {
	if m != nil {
		return m.BaseTarget
	}
	return 0
}

func (m *Block_Header) GetGenerationSignature() []byte {
	if m != nil {
		return m.GenerationSignature
	}
	return nil
}

func (m *Block_Header) GetFeatureVotes() []uint32 {
	if m != nil {
		return m.FeatureVotes
	}
	return nil
}

func (m *Block_Header) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Block_Header) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Block_Header) GetGenerator() []byte {
	if m != nil {
		return m.Generator
	}
	return nil
}

func (m *Block_Header) GetRewardVote() int64 {
	if m != nil {
		return m.RewardVote
	}
	return 0
}

func (m *Block_Header) GetTransactionsRoot() []byte {
	if m != nil {
		return m.TransactionsRoot
	}
	return nil
}

type MicroBlock struct {
	Version               int32                `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Reference             []byte               `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	UpdatedBlockSignature []byte               `protobuf:"bytes,3,opt,name=updated_block_signature,json=updatedBlockSignature,proto3" json:"updated_block_signature,omitempty"`
	SenderPublicKey       []byte               `protobuf:"bytes,4,opt,name=sender_public_key,json=senderPublicKey,proto3" json:"sender_public_key,omitempty"`
	Transactions          []*SignedTransaction `protobuf:"bytes,5,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *MicroBlock) Reset()         { *m = MicroBlock{} }
func (m *MicroBlock) String() string { return proto.CompactTextString(m) }
func (*MicroBlock) ProtoMessage()    {}
func (*MicroBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{1}
}

func (m *MicroBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicroBlock.Unmarshal(m, b)
}
func (m *MicroBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicroBlock.Marshal(b, m, deterministic)
}
func (m *MicroBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicroBlock.Merge(m, src)
}
func (m *MicroBlock) XXX_Size() int {
	return xxx_messageInfo_MicroBlock.Size(m)
}
func (m *MicroBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MicroBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MicroBlock proto.InternalMessageInfo

func (m *MicroBlock) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MicroBlock) GetReference() []byte {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *MicroBlock) GetUpdatedBlockSignature() []byte {
	if m != nil {
		return m.UpdatedBlockSignature
	}
	return nil
}

func (m *MicroBlock) GetSenderPublicKey() []byte {
	if m != nil {
		return m.SenderPublicKey
	}
	return nil
}

func (m *MicroBlock) GetTransactions() []*SignedTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type SignedMicroBlock struct {
	MicroBlock           *MicroBlock `protobuf:"bytes,1,opt,name=micro_block,json=microBlock,proto3" json:"micro_block,omitempty"`
	Signature            []byte      `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SignedMicroBlock) Reset()         { *m = SignedMicroBlock{} }
func (m *SignedMicroBlock) String() string { return proto.CompactTextString(m) }
func (*SignedMicroBlock) ProtoMessage()    {}
func (*SignedMicroBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{2}
}

func (m *SignedMicroBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedMicroBlock.Unmarshal(m, b)
}
func (m *SignedMicroBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedMicroBlock.Marshal(b, m, deterministic)
}
func (m *SignedMicroBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedMicroBlock.Merge(m, src)
}
func (m *SignedMicroBlock) XXX_Size() int {
	return xxx_messageInfo_SignedMicroBlock.Size(m)
}
func (m *SignedMicroBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedMicroBlock.DiscardUnknown(m)
}

var xxx_messageInfo_SignedMicroBlock proto.InternalMessageInfo

func (m *SignedMicroBlock) GetMicroBlock() *MicroBlock {
	if m != nil {
		return m.MicroBlock
	}
	return nil
}

func (m *SignedMicroBlock) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*Block)(nil), "waves.Block")
	proto.RegisterType((*Block_Header)(nil), "waves.Block.Header")
	proto.RegisterType((*MicroBlock)(nil), "waves.MicroBlock")
	proto.RegisterType((*SignedMicroBlock)(nil), "waves.SignedMicroBlock")
}

func init() { proto.RegisterFile("block.proto", fileDescriptor_8e550b1f5926e92d) }

var fileDescriptor_8e550b1f5926e92d = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x5d, 0x6b, 0xd4, 0x40,
	0x14, 0x25, 0x1b, 0xb3, 0xdb, 0xde, 0xdd, 0x62, 0x37, 0x55, 0x1c, 0x8b, 0x60, 0x58, 0x5f, 0x82,
	0x85, 0x80, 0x2b, 0xfa, 0xe4, 0x53, 0x9f, 0x14, 0x11, 0x24, 0x2d, 0x0a, 0xbe, 0x84, 0x49, 0xe6,
	0xee, 0x76, 0xe8, 0x66, 0x26, 0xcc, 0xcc, 0x6e, 0xe9, 0x5f, 0xf2, 0x47, 0xf9, 0xe8, 0xbb, 0xff,
	0x40, 0xe6, 0xc3, 0x4d, 0xa4, 0x50, 0xe8, 0x5b, 0xe6, 0xdc, 0x33, 0xf7, 0x9c, 0x73, 0xe7, 0x06,
	0xa6, 0xf5, 0x46, 0x36, 0xd7, 0x45, 0xa7, 0xa4, 0x91, 0x69, 0x72, 0x43, 0x77, 0xa8, 0x4f, 0xe7,
	0x46, 0x51, 0xa1, 0x69, 0x63, 0xb8, 0x14, 0xbe, 0xb2, 0xf8, 0x13, 0x43, 0x72, 0x6e, 0x99, 0xe9,
	0x19, 0x8c, 0xaf, 0x90, 0x32, 0x54, 0x24, 0xca, 0xa2, 0x7c, 0xba, 0x3c, 0x29, 0xdc, 0xa5, 0xc2,
	0x55, 0x8b, 0x8f, 0xae, 0x54, 0x06, 0x4a, 0xfa, 0x02, 0x0e, 0x35, 0x5f, 0x0b, 0x6a, 0xb6, 0x0a,
	0xc9, 0x28, 0x8b, 0xf2, 0x59, 0xd9, 0x03, 0xe9, 0x07, 0x98, 0x0d, 0x94, 0x34, 0x89, 0xb3, 0x38,
	0x9f, 0x2e, 0x49, 0x68, 0x78, 0xc1, 0xd7, 0x02, 0xd9, 0x65, 0x4f, 0x28, 0xff, 0x63, 0x9f, 0xfe,
	0x1a, 0xc1, 0xd8, 0xcb, 0xa5, 0xcf, 0xe1, 0xa0, 0xb9, 0xa2, 0x5c, 0x54, 0x9c, 0x39, 0x57, 0x49,
	0x39, 0x71, 0xe7, 0x4f, 0xcc, 0x3a, 0x50, 0xb8, 0x42, 0x85, 0xa2, 0xd9, 0x3b, 0xd8, 0x03, 0xe9,
	0x4b, 0x98, 0xd6, 0x54, 0x63, 0x65, 0xa8, 0x5a, 0xa3, 0x21, 0x71, 0x16, 0xe5, 0x71, 0x09, 0x16,
	0xba, 0x74, 0x48, 0xfa, 0x06, 0x9e, 0xac, 0x51, 0xa0, 0xa2, 0x56, 0xb3, 0xea, 0xb3, 0x3c, 0x72,
	0x9d, 0x4e, 0xfa, 0xda, 0xc5, 0x3e, 0xd5, 0x2b, 0x38, 0x5a, 0xa1, 0xfb, 0xac, 0x76, 0xd2, 0xa0,
	0x26, 0x49, 0x16, 0xe7, 0x47, 0xe5, 0x2c, 0x80, 0xdf, 0x2c, 0x66, 0x6d, 0x19, 0xde, 0xa2, 0x36,
	0xb4, 0xed, 0xc8, 0xd8, 0xc9, 0xf6, 0x40, 0x4a, 0x60, 0xb2, 0x43, 0xa5, 0xb9, 0x14, 0x64, 0xe2,
	0xe3, 0x84, 0xa3, 0xbd, 0x17, 0x34, 0xa5, 0x22, 0x07, 0x3e, 0xce, 0x1e, 0xb0, 0x71, 0x14, 0xde,
	0x50, 0xc5, 0x9c, 0x32, 0x39, 0xf4, 0x71, 0x3c, 0x64, 0x75, 0xd3, 0x33, 0x18, 0xbe, 0xad, 0xae,
	0x94, 0x94, 0x86, 0x80, 0x6b, 0x73, 0x3c, 0x2c, 0x94, 0x52, 0x9a, 0xc5, 0xef, 0x08, 0xe0, 0x0b,
	0x6f, 0x94, 0xf4, 0x0f, 0x3f, 0x30, 0x15, 0xdd, 0x31, 0x75, 0xcf, 0x8c, 0xdf, 0xc3, 0xb3, 0x6d,
	0xc7, 0xa8, 0x41, 0x56, 0xb9, 0x5d, 0x1b, 0x4c, 0x31, 0x76, 0xdc, 0xa7, 0xa1, 0xec, 0x64, 0xfa,
	0x39, 0xbe, 0x86, 0xb9, 0x46, 0xc1, 0x50, 0x55, 0xdd, 0xb6, 0xde, 0xf0, 0xa6, 0xba, 0xc6, 0xdb,
	0x30, 0xf7, 0xc7, 0xbe, 0xf0, 0xd5, 0xe1, 0x9f, 0xf1, 0xf6, 0xce, 0x26, 0x25, 0x0f, 0xd9, 0xa4,
	0x05, 0x83, 0x63, 0x4f, 0x19, 0xa4, 0x5d, 0xc2, 0xb4, 0xb5, 0x27, 0xef, 0x39, 0xec, 0xfa, 0x3c,
	0x34, 0xec, 0x79, 0x25, 0xb4, 0xfd, 0x9d, 0x7b, 0xb7, 0xfd, 0xfc, 0x1d, 0x64, 0x8d, 0x6c, 0x7d,
	0x87, 0x6e, 0x43, 0xcd, 0x4a, 0xaa, 0xd6, 0xff, 0x5d, 0xf5, 0x76, 0x55, 0x38, 0x99, 0x1f, 0xff,
	0xde, 0x12, 0xd9, 0xcf, 0x51, 0xf2, 0xdd, 0x32, 0xeb, 0xb1, 0xa3, 0xbc, 0xfd, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0xc8, 0x0a, 0x67, 0x5f, 0xa9, 0x03, 0x00, 0x00,
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package state

import (
	"github.com/wavesplatform/gowaves/pkg/proto"
	"sync"
)

// Ensure, that mockFeaturesState does implement featuresState.
// If this is not the case, regenerate this file with moq.
var _ featuresState = &mockFeaturesState{}

// mockFeaturesState is a mock implementation of featuresState.
//
//	func TestSomethingThatUsesfeaturesState(t *testing.T) {
//
//		// make and configure a mocked featuresState
//		mockedfeaturesState := &mockFeaturesState{
//			activateFeatureFunc: func(featureID int16, r *activatedFeaturesRecord, blockID proto.BlockID) error {
//				panic("mock out the activateFeature method")
//			},
//			activationHeightFunc: func(featureID int16) (uint64, error) {
//				panic("mock out the activationHeight method")
//			},
//			addVoteFunc: func(featureID int16, blockID proto.BlockID) error {
//				panic("mock out the addVote method")
//			},
//			allFeaturesFunc: func() ([]int16, error) {
//				panic("mock out the allFeatures method")
//			},
//			approvalHeightFunc: func(featureID int16) (uint64, error) {
//				panic("mock out the approvalHeight method")
//			},
//			approveFeatureFunc: func(featureID int16, r *approvedFeaturesRecord, blockID proto.BlockID) error {
//				panic("mock out the approveFeature method")
//			},
//			clearCacheFunc: func()  {
//				panic("mock out the clearCache method")
//			},
//			featureVotesFunc: func(featureID int16) (uint64, error) {
//				panic("mock out the featureVotes method")
//			},
//			featureVotesAtHeightFunc: func(featureID int16, height uint64) (uint64, error) {
//				panic("mock out the featureVotesAtHeight method")
//			},
//			finishVotingFunc: func(curHeight uint64, blockID proto.BlockID) error {
//				panic("mock out the finishVoting method")
//			},
//			isActivatedAtHeightFunc: func(featureID int16, height uint64) bool {
//				panic("mock out the isActivatedAtHeight method")
//			},
//			isApprovedFunc: func(featureID int16) (bool, error) {
//				panic("mock out the isApproved method")
//			},
//			isApprovedAtHeightFunc: func(featureID int16, height uint64) bool {
//				panic("mock out the isApprovedAtHeight method")
//			},
//			newestActivationHeightFunc: func(featureID int16) (uint64, error) {
//				panic("mock out the newestActivationHeight method")
//			},
//			newestApprovalHeightFunc: func(featureID int16) (uint64, error) {
//				panic("mock out the newestApprovalHeight method")
//			},
//			newestIsActivatedFunc: func(featureID int16) (bool, error) {
//				panic("mock out the newestIsActivated method")
//			},
//			newestIsActivatedAtHeightFunc: func(featureID int16, height uint64) bool {
//				panic("mock out the newestIsActivatedAtHeight method")
//			},
//			newestIsActivatedForNBlocksFunc: func(featureID int16, n int) (bool, error) {
//				panic("mock out the newestIsActivatedForNBlocks method")
//			},
//			newestIsApprovedFunc: func(featureID int16) (bool, error) {
//				panic("mock out the newestIsApproved method")
//			},
//			resetVotesFunc: func(blockID proto.BlockID) error {
//				panic("mock out the resetVotes method")
//			},
//		}
//
//		// use mockedfeaturesState in code that requires featuresState
//		// and then make assertions.
//
//	}
type mockFeaturesState struct {
	// activateFeatureFunc mocks the activateFeature method.
	activateFeatureFunc func(featureID int16, r *activatedFeaturesRecord, blockID proto.BlockID) error

	// activationHeightFunc mocks the activationHeight method.
	activationHeightFunc func(featureID int16) (uint64, error)

	// addVoteFunc mocks the addVote method.
	addVoteFunc func(featureID int16, blockID proto.BlockID) error

	// allFeaturesFunc mocks the allFeatures method.
	allFeaturesFunc func() ([]int16, error)

	// approvalHeightFunc mocks the approvalHeight method.
	approvalHeightFunc func(featureID int16) (uint64, error)

	// approveFeatureFunc mocks the approveFeature method.
	approveFeatureFunc func(featureID int16, r *approvedFeaturesRecord, blockID proto.BlockID) error

	// clearCacheFunc mocks the clearCache method.
	clearCacheFunc func()

	// featureVotesFunc mocks the featureVotes method.
	featureVotesFunc func(featureID int16) (uint64, error)

	// featureVotesAtHeightFunc mocks the featureVotesAtHeight method.
	featureVotesAtHeightFunc func(featureID int16, height uint64) (uint64, error)

	// finishVotingFunc mocks the finishVoting method.
	finishVotingFunc func(curHeight uint64, blockID proto.BlockID) error

	// isActivatedAtHeightFunc mocks the isActivatedAtHeight method.
	isActivatedAtHeightFunc func(featureID int16, height uint64) bool

	// isApprovedFunc mocks the isApproved method.
	isApprovedFunc func(featureID int16) (bool, error)

	// isApprovedAtHeightFunc mocks the isApprovedAtHeight method.
	isApprovedAtHeightFunc func(featureID int16, height uint64) bool

	// newestActivationHeightFunc mocks the newestActivationHeight method.
	newestActivationHeightFunc func(featureID int16) (uint64, error)

	// newestApprovalHeightFunc mocks the newestApprovalHeight method.
	newestApprovalHeightFunc func(featureID int16) (uint64, error)

	// newestIsActivatedFunc mocks the newestIsActivated method.
	newestIsActivatedFunc func(featureID int16) (bool, error)

	// newestIsActivatedAtHeightFunc mocks the newestIsActivatedAtHeight method.
	newestIsActivatedAtHeightFunc func(featureID int16, height uint64) bool

	// newestIsActivatedForNBlocksFunc mocks the newestIsActivatedForNBlocks method.
	newestIsActivatedForNBlocksFunc func(featureID int16, n int) (bool, error)

	// newestIsApprovedFunc mocks the newestIsApproved method.
	newestIsApprovedFunc func(featureID int16) (bool, error)

	// resetVotesFunc mocks the resetVotes method.
	resetVotesFunc func(blockID proto.BlockID) error

	// calls tracks calls to the methods.
	calls struct {
		// activateFeature holds details about calls to the activateFeature method.
		activateFeature []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
			// R is the r argument value.
			R *activatedFeaturesRecord
			// BlockID is the blockID argument value.
			BlockID proto.BlockID
		}
		// activationHeight holds details about calls to the activationHeight method.
		activationHeight []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
		}
		// addVote holds details about calls to the addVote method.
		addVote []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
			// BlockID is the blockID argument value.
			BlockID proto.BlockID
		}
		// allFeatures holds details about calls to the allFeatures method.
		allFeatures []struct {
		}
		// approvalHeight holds details about calls to the approvalHeight method.
		approvalHeight []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
		}
		// approveFeature holds details about calls to the approveFeature method.
		approveFeature []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
			// R is the r argument value.
			R *approvedFeaturesRecord
			// BlockID is the blockID argument value.
			BlockID proto.BlockID
		}
		// clearCache holds details about calls to the clearCache method.
		clearCache []struct {
		}
		// featureVotes holds details about calls to the featureVotes method.
		featureVotes []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
		}
		// featureVotesAtHeight holds details about calls to the featureVotesAtHeight method.
		featureVotesAtHeight []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
			// Height is the height argument value.
			Height uint64
		}
		// finishVoting holds details about calls to the finishVoting method.
		finishVoting []struct {
			// CurHeight is the curHeight argument value.
			CurHeight uint64
			// BlockID is the blockID argument value.
			BlockID proto.BlockID
		}
		// isActivatedAtHeight holds details about calls to the isActivatedAtHeight method.
		isActivatedAtHeight []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
			// Height is the height argument value.
			Height uint64
		}
		// isApproved holds details about calls to the isApproved method.
		isApproved []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
		}
		// isApprovedAtHeight holds details about calls to the isApprovedAtHeight method.
		isApprovedAtHeight []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
			// Height is the height argument value.
			Height uint64
		}
		// newestActivationHeight holds details about calls to the newestActivationHeight method.
		newestActivationHeight []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
		}
		// newestApprovalHeight holds details about calls to the newestApprovalHeight method.
		newestApprovalHeight []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
		}
		// newestIsActivated holds details about calls to the newestIsActivated method.
		newestIsActivated []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
		}
		// newestIsActivatedAtHeight holds details about calls to the newestIsActivatedAtHeight method.
		newestIsActivatedAtHeight []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
			// Height is the height argument value.
			Height uint64
		}
		// newestIsActivatedForNBlocks holds details about calls to the newestIsActivatedForNBlocks method.
		newestIsActivatedForNBlocks []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
			// N is the n argument value.
			N int
		}
		// newestIsApproved holds details about calls to the newestIsApproved method.
		newestIsApproved []struct {
			// FeatureID is the featureID argument value.
			FeatureID int16
		}
		// resetVotes holds details about calls to the resetVotes method.
		resetVotes []struct {
			// BlockID is the blockID argument value.
			BlockID proto.BlockID
		}
	}
	lockactivateFeature             sync.RWMutex
	lockactivationHeight            sync.RWMutex
	lockaddVote                     sync.RWMutex
	lockallFeatures                 sync.RWMutex
	lockapprovalHeight              sync.RWMutex
	lockapproveFeature              sync.RWMutex
	lockclearCache                  sync.RWMutex
	lockfeatureVotes                sync.RWMutex
	lockfeatureVotesAtHeight        sync.RWMutex
	lockfinishVoting                sync.RWMutex
	lockisActivatedAtHeight         sync.RWMutex
	lockisApproved                  sync.RWMutex
	lockisApprovedAtHeight          sync.RWMutex
	locknewestActivationHeight      sync.RWMutex
	locknewestApprovalHeight        sync.RWMutex
	locknewestIsActivated           sync.RWMutex
	locknewestIsActivatedAtHeight   sync.RWMutex
	locknewestIsActivatedForNBlocks sync.RWMutex
	locknewestIsApproved            sync.RWMutex
	lockresetVotes                  sync.RWMutex
}

// activateFeature calls activateFeatureFunc.
func (mock *mockFeaturesState) activateFeature(featureID int16, r *activatedFeaturesRecord, blockID proto.BlockID) error {
	if mock.activateFeatureFunc == nil {
		panic("mockFeaturesState.activateFeatureFunc: method is nil but featuresState.activateFeature was just called")
	}
	callInfo := struct {
		FeatureID int16
		R         *activatedFeaturesRecord
		BlockID   proto.BlockID
	}{
		FeatureID: featureID,
		R:         r,
		BlockID:   blockID,
	}
	mock.lockactivateFeature.Lock()
	mock.calls.activateFeature = append(mock.calls.activateFeature, callInfo)
	mock.lockactivateFeature.Unlock()
	return mock.activateFeatureFunc(featureID, r, blockID)
}

// activateFeatureCalls gets all the calls that were made to activateFeature.
// Check the length with:
//
//	len(mockedfeaturesState.activateFeatureCalls())
func (mock *mockFeaturesState) activateFeatureCalls() []struct {
	FeatureID int16
	R         *activatedFeaturesRecord
	BlockID   proto.BlockID
} {
	var calls []struct {
		FeatureID int16
		R         *activatedFeaturesRecord
		BlockID   proto.BlockID
	}
	mock.lockactivateFeature.RLock()
	calls = mock.calls.activateFeature
	mock.lockactivateFeature.RUnlock()
	return calls
}

// activationHeight calls activationHeightFunc.
func (mock *mockFeaturesState) activationHeight(featureID int16) (uint64, error) {
	if mock.activationHeightFunc == nil {
		panic("mockFeaturesState.activationHeightFunc: method is nil but featuresState.activationHeight was just called")
	}
	callInfo := struct {
		FeatureID int16
	}{
		FeatureID: featureID,
	}
	mock.lockactivationHeight.Lock()
	mock.calls.activationHeight = append(mock.calls.activationHeight, callInfo)
	mock.lockactivationHeight.Unlock()
	return mock.activationHeightFunc(featureID)
}

// activationHeightCalls gets all the calls that were made to activationHeight.
// Check the length with:
//
//	len(mockedfeaturesState.activationHeightCalls())
func (mock *mockFeaturesState) activationHeightCalls() []struct {
	FeatureID int16
} {
	var calls []struct {
		FeatureID int16
	}
	mock.lockactivationHeight.RLock()
	calls = mock.calls.activationHeight
	mock.lockactivationHeight.RUnlock()
	return calls
}

// addVote calls addVoteFunc.
func (mock *mockFeaturesState) addVote(featureID int16, blockID proto.BlockID) error {
	if mock.addVoteFunc == nil {
		panic("mockFeaturesState.addVoteFunc: method is nil but featuresState.addVote was just called")
	}
	callInfo := struct {
		FeatureID int16
		BlockID   proto.BlockID
	}{
		FeatureID: featureID,
		BlockID:   blockID,
	}
	mock.lockaddVote.Lock()
	mock.calls.addVote = append(mock.calls.addVote, callInfo)
	mock.lockaddVote.Unlock()
	return mock.addVoteFunc(featureID, blockID)
}

// addVoteCalls gets all the calls that were made to addVote.
// Check the length with:
//
//	len(mockedfeaturesState.addVoteCalls())
func (mock *mockFeaturesState) addVoteCalls() []struct {
	FeatureID int16
	BlockID   proto.BlockID
} {
	var calls []struct {
		FeatureID int16
		BlockID   proto.BlockID
	}
	mock.lockaddVote.RLock()
	calls = mock.calls.addVote
	mock.lockaddVote.RUnlock()
	return calls
}

// allFeatures calls allFeaturesFunc.
func (mock *mockFeaturesState) allFeatures() ([]int16, error) {
	if mock.allFeaturesFunc == nil {
		panic("mockFeaturesState.allFeaturesFunc: method is nil but featuresState.allFeatures was just called")
	}
	callInfo := struct {
	}{}
	mock.lockallFeatures.Lock()
	mock.calls.allFeatures = append(mock.calls.allFeatures, callInfo)
	mock.lockallFeatures.Unlock()
	return mock.allFeaturesFunc()
}

// allFeaturesCalls gets all the calls that were made to allFeatures.
// Check the length with:
//
//	len(mockedfeaturesState.allFeaturesCalls())
func (mock *mockFeaturesState) allFeaturesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockallFeatures.RLock()
	calls = mock.calls.allFeatures
	mock.lockallFeatures.RUnlock()
	return calls
}

// approvalHeight calls approvalHeightFunc.
func (mock *mockFeaturesState) approvalHeight(featureID int16) (uint64, error) {
	if mock.approvalHeightFunc == nil {
		panic("mockFeaturesState.approvalHeightFunc: method is nil but featuresState.approvalHeight was just called")
	}
	callInfo := struct {
		FeatureID int16
	}{
		FeatureID: featureID,
	}
	mock.lockapprovalHeight.Lock()
	mock.calls.approvalHeight = append(mock.calls.approvalHeight, callInfo)
	mock.lockapprovalHeight.Unlock()
	return mock.approvalHeightFunc(featureID)
}

// approvalHeightCalls gets all the calls that were made to approvalHeight.
// Check the length with:
//
//	len(mockedfeaturesState.approvalHeightCalls())
func (mock *mockFeaturesState) approvalHeightCalls() []struct {
	FeatureID int16
} {
	var calls []struct {
		FeatureID int16
	}
	mock.lockapprovalHeight.RLock()
	calls = mock.calls.approvalHeight
	mock.lockapprovalHeight.RUnlock()
	return calls
}

// approveFeature calls approveFeatureFunc.
func (mock *mockFeaturesState) approveFeature(featureID int16, r *approvedFeaturesRecord, blockID proto.BlockID) error {
	if mock.approveFeatureFunc == nil {
		panic("mockFeaturesState.approveFeatureFunc: method is nil but featuresState.approveFeature was just called")
	}
	callInfo := struct {
		FeatureID int16
		R         *approvedFeaturesRecord
		BlockID   proto.BlockID
	}{
		FeatureID: featureID,
		R:         r,
		BlockID:   blockID,
	}
	mock.lockapproveFeature.Lock()
	mock.calls.approveFeature = append(mock.calls.approveFeature, callInfo)
	mock.lockapproveFeature.Unlock()
	return mock.approveFeatureFunc(featureID, r, blockID)
}

// approveFeatureCalls gets all the calls that were made to approveFeature.
// Check the length with:
//
//	len(mockedfeaturesState.approveFeatureCalls())
func (mock *mockFeaturesState) approveFeatureCalls() []struct {
	FeatureID int16
	R         *approvedFeaturesRecord
	BlockID   proto.BlockID
} {
	var calls []struct {
		FeatureID int16
		R         *approvedFeaturesRecord
		BlockID   proto.BlockID
	}
	mock.lockapproveFeature.RLock()
	calls = mock.calls.approveFeature
	mock.lockapproveFeature.RUnlock()
	return calls
}

// clearCache calls clearCacheFunc.
func (mock *mockFeaturesState) clearCache() {
	if mock.clearCacheFunc == nil {
		panic("mockFeaturesState.clearCacheFunc: method is nil but featuresState.clearCache was just called")
	}
	callInfo := struct {
	}{}
	mock.lockclearCache.Lock()
	mock.calls.clearCache = append(mock.calls.clearCache, callInfo)
	mock.lockclearCache.Unlock()
	mock.clearCacheFunc()
}

// clearCacheCalls gets all the calls that were made to clearCache.
// Check the length with:
//
//	len(mockedfeaturesState.clearCacheCalls())
func (mock *mockFeaturesState) clearCacheCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockclearCache.RLock()
	calls = mock.calls.clearCache
	mock.lockclearCache.RUnlock()
	return calls
}

// featureVotes calls featureVotesFunc.
func (mock *mockFeaturesState) featureVotes(featureID int16) (uint64, error) {
	if mock.featureVotesFunc == nil {
		panic("mockFeaturesState.featureVotesFunc: method is nil but featuresState.featureVotes was just called")
	}
	callInfo := struct {
		FeatureID int16
	}{
		FeatureID: featureID,
	}
	mock.lockfeatureVotes.Lock()
	mock.calls.featureVotes = append(mock.calls.featureVotes, callInfo)
	mock.lockfeatureVotes.Unlock()
	return mock.featureVotesFunc(featureID)
}

// featureVotesCalls gets all the calls that were made to featureVotes.
// Check the length with:
//
//	len(mockedfeaturesState.featureVotesCalls())
func (mock *mockFeaturesState) featureVotesCalls() []struct {
	FeatureID int16
} {
	var calls []struct {
		FeatureID int16
	}
	mock.lockfeatureVotes.RLock()
	calls = mock.calls.featureVotes
	mock.lockfeatureVotes.RUnlock()
	return calls
}

// featureVotesAtHeight calls featureVotesAtHeightFunc.
func (mock *mockFeaturesState) featureVotesAtHeight(featureID int16, height uint64) (uint64, error) {
	if mock.featureVotesAtHeightFunc == nil {
		panic("mockFeaturesState.featureVotesAtHeightFunc: method is nil but featuresState.featureVotesAtHeight was just called")
	}
	callInfo := struct {
		FeatureID int16
		Height    uint64
	}{
		FeatureID: featureID,
		Height:    height,
	}
	mock.lockfeatureVotesAtHeight.Lock()
	mock.calls.featureVotesAtHeight = append(mock.calls.featureVotesAtHeight, callInfo)
	mock.lockfeatureVotesAtHeight.Unlock()
	return mock.featureVotesAtHeightFunc(featureID, height)
}

// featureVotesAtHeightCalls gets all the calls that were made to featureVotesAtHeight.
// Check the length with:
//
//	len(mockedfeaturesState.featureVotesAtHeightCalls())
func (mock *mockFeaturesState) featureVotesAtHeightCalls() []struct {
	FeatureID int16
	Height    uint64
} {
	var calls []struct {
		FeatureID int16
		Height    uint64
	}
	mock.lockfeatureVotesAtHeight.RLock()
	calls = mock.calls.featureVotesAtHeight
	mock.lockfeatureVotesAtHeight.RUnlock()
	return calls
}

// finishVoting calls finishVotingFunc.
func (mock *mockFeaturesState) finishVoting(curHeight uint64, blockID proto.BlockID) error {
	if mock.finishVotingFunc == nil {
		panic("mockFeaturesState.finishVotingFunc: method is nil but featuresState.finishVoting was just called")
	}
	callInfo := struct {
		CurHeight uint64
		BlockID   proto.BlockID
	}{
		CurHeight: curHeight,
		BlockID:   blockID,
	}
	mock.lockfinishVoting.Lock()
	mock.calls.finishVoting = append(mock.calls.finishVoting, callInfo)
	mock.lockfinishVoting.Unlock()
	return mock.finishVotingFunc(curHeight, blockID)
}

// finishVotingCalls gets all the calls that were made to finishVoting.
// Check the length with:
//
//	len(mockedfeaturesState.finishVotingCalls())
func (mock *mockFeaturesState) finishVotingCalls() []struct {
	CurHeight uint64
	BlockID   proto.BlockID
} {
	var calls []struct {
		CurHeight uint64
		BlockID   proto.BlockID
	}
	mock.lockfinishVoting.RLock()
	calls = mock.calls.finishVoting
	mock.lockfinishVoting.RUnlock()
	return calls
}

// isActivatedAtHeight calls isActivatedAtHeightFunc.
func (mock *mockFeaturesState) isActivatedAtHeight(featureID int16, height uint64) bool {
	if mock.isActivatedAtHeightFunc == nil {
		panic("mockFeaturesState.isActivatedAtHeightFunc: method is nil but featuresState.isActivatedAtHeight was just called")
	}
	callInfo := struct {
		FeatureID int16
		Height    uint64
	}{
		FeatureID: featureID,
		Height:    height,
	}
	mock.lockisActivatedAtHeight.Lock()
	mock.calls.isActivatedAtHeight = append(mock.calls.isActivatedAtHeight, callInfo)
	mock.lockisActivatedAtHeight.Unlock()
	return mock.isActivatedAtHeightFunc(featureID, height)
}

// isActivatedAtHeightCalls gets all the calls that were made to isActivatedAtHeight.
// Check the length with:
//
//	len(mockedfeaturesState.isActivatedAtHeightCalls())
func (mock *mockFeaturesState) isActivatedAtHeightCalls() []struct {
	FeatureID int16
	Height    uint64
} {
	var calls []struct {
		FeatureID int16
		Height    uint64
	}
	mock.lockisActivatedAtHeight.RLock()
	calls = mock.calls.isActivatedAtHeight
	mock.lockisActivatedAtHeight.RUnlock()
	return calls
}

// isApproved calls isApprovedFunc.
func (mock *mockFeaturesState) isApproved(featureID int16) (bool, error) {
	if mock.isApprovedFunc == nil {
		panic("mockFeaturesState.isApprovedFunc: method is nil but featuresState.isApproved was just called")
	}
	callInfo := struct {
		FeatureID int16
	}{
		FeatureID: featureID,
	}
	mock.lockisApproved.Lock()
	mock.calls.isApproved = append(mock.calls.isApproved, callInfo)
	mock.lockisApproved.Unlock()
	return mock.isApprovedFunc(featureID)
}

// isApprovedCalls gets all the calls that were made to isApproved.
// Check the length with:
//
//	len(mockedfeaturesState.isApprovedCalls())
func (mock *mockFeaturesState) isApprovedCalls() []struct {
	FeatureID int16
} {
	var calls []struct {
		FeatureID int16
	}
	mock.lockisApproved.RLock()
	calls = mock.calls.isApproved
	mock.lockisApproved.RUnlock()
	return calls
}

// isApprovedAtHeight calls isApprovedAtHeightFunc.
func (mock *mockFeaturesState) isApprovedAtHeight(featureID int16, height uint64) bool {
	if mock.isApprovedAtHeightFunc == nil {
		panic("mockFeaturesState.isApprovedAtHeightFunc: method is nil but featuresState.isApprovedAtHeight was just called")
	}
	callInfo := struct {
		FeatureID int16
		Height    uint64
	}{
		FeatureID: featureID,
		Height:    height,
	}
	mock.lockisApprovedAtHeight.Lock()
	mock.calls.isApprovedAtHeight = append(mock.calls.isApprovedAtHeight, callInfo)
	mock.lockisApprovedAtHeight.Unlock()
	return mock.isApprovedAtHeightFunc(featureID, height)
}

// isApprovedAtHeightCalls gets all the calls that were made to isApprovedAtHeight.
// Check the length with:
//
//	len(mockedfeaturesState.isApprovedAtHeightCalls())
func (mock *mockFeaturesState) isApprovedAtHeightCalls() []struct {
	FeatureID int16
	Height    uint64
} {
	var calls []struct {
		FeatureID int16
		Height    uint64
	}
	mock.lockisApprovedAtHeight.RLock()
	calls = mock.calls.isApprovedAtHeight
	mock.lockisApprovedAtHeight.RUnlock()
	return calls
}

// newestActivationHeight calls newestActivationHeightFunc.
func (mock *mockFeaturesState) newestActivationHeight(featureID int16) (uint64, error) {
	if mock.newestActivationHeightFunc == nil {
		panic("mockFeaturesState.newestActivationHeightFunc: method is nil but featuresState.newestActivationHeight was just called")
	}
	callInfo := struct {
		FeatureID int16
	}{
		FeatureID: featureID,
	}
	mock.locknewestActivationHeight.Lock()
	mock.calls.newestActivationHeight = append(mock.calls.newestActivationHeight, callInfo)
	mock.locknewestActivationHeight.Unlock()
	return mock.newestActivationHeightFunc(featureID)
}

// newestActivationHeightCalls gets all the calls that were made to newestActivationHeight.
// Check the length with:
//
//	len(mockedfeaturesState.newestActivationHeightCalls())
func (mock *mockFeaturesState) newestActivationHeightCalls() []struct {
	FeatureID int16
} {
	var calls []struct {
		FeatureID int16
	}
	mock.locknewestActivationHeight.RLock()
	calls = mock.calls.newestActivationHeight
	mock.locknewestActivationHeight.RUnlock()
	return calls
}

// newestApprovalHeight calls newestApprovalHeightFunc.
func (mock *mockFeaturesState) newestApprovalHeight(featureID int16) (uint64, error) {
	if mock.newestApprovalHeightFunc == nil {
		panic("mockFeaturesState.newestApprovalHeightFunc: method is nil but featuresState.newestApprovalHeight was just called")
	}
	callInfo := struct {
		FeatureID int16
	}{
		FeatureID: featureID,
	}
	mock.locknewestApprovalHeight.Lock()
	mock.calls.newestApprovalHeight = append(mock.calls.newestApprovalHeight, callInfo)
	mock.locknewestApprovalHeight.Unlock()
	return mock.newestApprovalHeightFunc(featureID)
}

// newestApprovalHeightCalls gets all the calls that were made to newestApprovalHeight.
// Check the length with:
//
//	len(mockedfeaturesState.newestApprovalHeightCalls())
func (mock *mockFeaturesState) newestApprovalHeightCalls() []struct {
	FeatureID int16
} {
	var calls []struct {
		FeatureID int16
	}
	mock.locknewestApprovalHeight.RLock()
	calls = mock.calls.newestApprovalHeight
	mock.locknewestApprovalHeight.RUnlock()
	return calls
}

// newestIsActivated calls newestIsActivatedFunc.
func (mock *mockFeaturesState) newestIsActivated(featureID int16) (bool, error) {
	if mock.newestIsActivatedFunc == nil {
		panic("mockFeaturesState.newestIsActivatedFunc: method is nil but featuresState.newestIsActivated was just called")
	}
	callInfo := struct {
		FeatureID int16
	}{
		FeatureID: featureID,
	}
	mock.locknewestIsActivated.Lock()
	mock.calls.newestIsActivated = append(mock.calls.newestIsActivated, callInfo)
	mock.locknewestIsActivated.Unlock()
	return mock.newestIsActivatedFunc(featureID)
}

// newestIsActivatedCalls gets all the calls that were made to newestIsActivated.
// Check the length with:
//
//	len(mockedfeaturesState.newestIsActivatedCalls())
func (mock *mockFeaturesState) newestIsActivatedCalls() []struct {
	FeatureID int16
} {
	var calls []struct {
		FeatureID int16
	}
	mock.locknewestIsActivated.RLock()
	calls = mock.calls.newestIsActivated
	mock.locknewestIsActivated.RUnlock()
	return calls
}

// newestIsActivatedAtHeight calls newestIsActivatedAtHeightFunc.
func (mock *mockFeaturesState) newestIsActivatedAtHeight(featureID int16, height uint64) bool {
	if mock.newestIsActivatedAtHeightFunc == nil {
		panic("mockFeaturesState.newestIsActivatedAtHeightFunc: method is nil but featuresState.newestIsActivatedAtHeight was just called")
	}
	callInfo := struct {
		FeatureID int16
		Height    uint64
	}{
		FeatureID: featureID,
		Height:    height,
	}
	mock.locknewestIsActivatedAtHeight.Lock()
	mock.calls.newestIsActivatedAtHeight = append(mock.calls.newestIsActivatedAtHeight, callInfo)
	mock.locknewestIsActivatedAtHeight.Unlock()
	return mock.newestIsActivatedAtHeightFunc(featureID, height)
}

// newestIsActivatedAtHeightCalls gets all the calls that were made to newestIsActivatedAtHeight.
// Check the length with:
//
//	len(mockedfeaturesState.newestIsActivatedAtHeightCalls())
func (mock *mockFeaturesState) newestIsActivatedAtHeightCalls() []struct {
	FeatureID int16
	Height    uint64
} {
	var calls []struct {
		FeatureID int16
		Height    uint64
	}
	mock.locknewestIsActivatedAtHeight.RLock()
	calls = mock.calls.newestIsActivatedAtHeight
	mock.locknewestIsActivatedAtHeight.RUnlock()
	return calls
}

// newestIsActivatedForNBlocks calls newestIsActivatedForNBlocksFunc.
func (mock *mockFeaturesState) newestIsActivatedForNBlocks(featureID int16, n int) (bool, error) {
	if mock.newestIsActivatedForNBlocksFunc == nil {
		panic("mockFeaturesState.newestIsActivatedForNBlocksFunc: method is nil but featuresState.newestIsActivatedForNBlocks was just called")
	}
	callInfo := struct {
		FeatureID int16
		N         int
	}{
		FeatureID: featureID,
		N:         n,
	}
	mock.locknewestIsActivatedForNBlocks.Lock()
	mock.calls.newestIsActivatedForNBlocks = append(mock.calls.newestIsActivatedForNBlocks, callInfo)
	mock.locknewestIsActivatedForNBlocks.Unlock()
	return mock.newestIsActivatedForNBlocksFunc(featureID, n)
}

// newestIsActivatedForNBlocksCalls gets all the calls that were made to newestIsActivatedForNBlocks.
// Check the length with:
//
//	len(mockedfeaturesState.newestIsActivatedForNBlocksCalls())
func (mock *mockFeaturesState) newestIsActivatedForNBlocksCalls() []struct {
	FeatureID int16
	N         int
} {
	var calls []struct {
		FeatureID int16
		N         int
	}
	mock.locknewestIsActivatedForNBlocks.RLock()
	calls = mock.calls.newestIsActivatedForNBlocks
	mock.locknewestIsActivatedForNBlocks.RUnlock()
	return calls
}

// newestIsApproved calls newestIsApprovedFunc.
func (mock *mockFeaturesState) newestIsApproved(featureID int16) (bool, error) {
	if mock.newestIsApprovedFunc == nil {
		panic("mockFeaturesState.newestIsApprovedFunc: method is nil but featuresState.newestIsApproved was just called")
	}
	callInfo := struct {
		FeatureID int16
	}{
		FeatureID: featureID,
	}
	mock.locknewestIsApproved.Lock()
	mock.calls.newestIsApproved = append(mock.calls.newestIsApproved, callInfo)
	mock.locknewestIsApproved.Unlock()
	return mock.newestIsApprovedFunc(featureID)
}

// newestIsApprovedCalls gets all the calls that were made to newestIsApproved.
// Check the length with:
//
//	len(mockedfeaturesState.newestIsApprovedCalls())
func (mock *mockFeaturesState) newestIsApprovedCalls() []struct {
	FeatureID int16
} {
	var calls []struct {
		FeatureID int16
	}
	mock.locknewestIsApproved.RLock()
	calls = mock.calls.newestIsApproved
	mock.locknewestIsApproved.RUnlock()
	return calls
}

// resetVotes calls resetVotesFunc.
func (mock *mockFeaturesState) resetVotes(blockID proto.BlockID) error {
	if mock.resetVotesFunc == nil {
		panic("mockFeaturesState.resetVotesFunc: method is nil but featuresState.resetVotes was just called")
	}
	callInfo := struct {
		BlockID proto.BlockID
	}{
		BlockID: blockID,
	}
	mock.lockresetVotes.Lock()
	mock.calls.resetVotes = append(mock.calls.resetVotes, callInfo)
	mock.lockresetVotes.Unlock()
	return mock.resetVotesFunc(blockID)
}

// resetVotesCalls gets all the calls that were made to resetVotes.
// Check the length with:
//
//	len(mockedfeaturesState.resetVotesCalls())
func (mock *mockFeaturesState) resetVotesCalls() []struct {
	BlockID proto.BlockID
} {
	var calls []struct {
		BlockID proto.BlockID
	}
	mock.lockresetVotes.RLock()
	calls = mock.calls.resetVotes
	mock.lockresetVotes.RUnlock()
	return calls
}

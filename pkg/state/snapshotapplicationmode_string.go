// Code generated by "enumer -type SnapshotApplicationMode -trimprefix SnapshotApplicationMode -text -output snapshotapplicationmode_string.go"; DO NOT EDIT.

package state

import (
	"fmt"
	"strings"
)

const _SnapshotApplicationModeName = "TransactionsOnlySnapshotOnlySnapshotThenTransactions"

var _SnapshotApplicationModeIndex = [...]uint8{0, 16, 28, 52}

const _SnapshotApplicationModeLowerName = "transactionsonlysnapshotonlysnapshotthentransactions"

func (i SnapshotApplicationMode) String() string {
	if i < 0 || i >= SnapshotApplicationMode(len(_SnapshotApplicationModeIndex)-1) {
		return fmt.Sprintf("SnapshotApplicationMode(%d)", i)
	}
	return _SnapshotApplicationModeName[_SnapshotApplicationModeIndex[i]:_SnapshotApplicationModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SnapshotApplicationModeNoOp() {
	var x [1]struct{}
	_ = x[SnapshotApplicationModeTransactionsOnly-(0)]
	_ = x[SnapshotApplicationModeSnapshotOnly-(1)]
	_ = x[SnapshotApplicationModeSnapshotThenTransactions-(2)]
}

var _SnapshotApplicationModeValues = []SnapshotApplicationMode{SnapshotApplicationModeTransactionsOnly, SnapshotApplicationModeSnapshotOnly, SnapshotApplicationModeSnapshotThenTransactions}

var _SnapshotApplicationModeNameToValueMap = map[string]SnapshotApplicationMode{
	_SnapshotApplicationModeName[0:16]:       SnapshotApplicationModeTransactionsOnly,
	_SnapshotApplicationModeLowerName[0:16]:  SnapshotApplicationModeTransactionsOnly,
	_SnapshotApplicationModeName[16:28]:      SnapshotApplicationModeSnapshotOnly,
	_SnapshotApplicationModeLowerName[16:28]: SnapshotApplicationModeSnapshotOnly,
	_SnapshotApplicationModeName[28:52]:      SnapshotApplicationModeSnapshotThenTransactions,
	_SnapshotApplicationModeLowerName[28:52]: SnapshotApplicationModeSnapshotThenTransactions,
}

var _SnapshotApplicationModeNames = []string{
	_SnapshotApplicationModeName[0:16],
	_SnapshotApplicationModeName[16:28],
	_SnapshotApplicationModeName[28:52],
}

// SnapshotApplicationModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SnapshotApplicationModeString(s string) (SnapshotApplicationMode, error) {
	if val, ok := _SnapshotApplicationModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SnapshotApplicationModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SnapshotApplicationMode values", s)
}

// SnapshotApplicationModeValues returns all values of the enum
func SnapshotApplicationModeValues() []SnapshotApplicationMode {
	return _SnapshotApplicationModeValues
}

// SnapshotApplicationModeStrings returns a slice of all String values of the enum
func SnapshotApplicationModeStrings() []string {
	strs := make([]string, len(_SnapshotApplicationModeNames))
	copy(strs, _SnapshotApplicationModeNames)
	return strs
}

// IsASnapshotApplicationMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SnapshotApplicationMode) IsASnapshotApplicationMode() bool {
	for _, v := range _SnapshotApplicationModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for SnapshotApplicationMode
func (i SnapshotApplicationMode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SnapshotApplicationMode
func (i *SnapshotApplicationMode) UnmarshalText(text []byte) error {
	var err error
	*i, err = SnapshotApplicationModeString(string(text))
	return err
}
